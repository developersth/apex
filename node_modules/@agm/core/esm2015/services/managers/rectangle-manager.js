import * as tslib_1 from "tslib";
import { Injectable, NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { GoogleMapsAPIWrapper } from '../google-maps-api-wrapper';
import * as ɵngcc0 from '@angular/core';
let RectangleManager = class RectangleManager {
    constructor(_apiWrapper, _zone) {
        this._apiWrapper = _apiWrapper;
        this._zone = _zone;
        this._rectangles = new Map();
    }
    addRectangle(rectangle) {
        this._rectangles.set(rectangle, this._apiWrapper.createRectangle({
            bounds: {
                north: rectangle.north,
                east: rectangle.east,
                south: rectangle.south,
                west: rectangle.west,
            },
            clickable: rectangle.clickable,
            draggable: rectangle.draggable,
            editable: rectangle.editable,
            fillColor: rectangle.fillColor,
            fillOpacity: rectangle.fillOpacity,
            strokeColor: rectangle.strokeColor,
            strokeOpacity: rectangle.strokeOpacity,
            strokePosition: rectangle.strokePosition,
            strokeWeight: rectangle.strokeWeight,
            visible: rectangle.visible,
            zIndex: rectangle.zIndex,
        }));
    }
    /**
     * Removes the given rectangle from the map.
     */
    removeRectangle(rectangle) {
        return this._rectangles.get(rectangle).then((r) => {
            r.setMap(null);
            this._rectangles.delete(rectangle);
        });
    }
    setOptions(rectangle, options) {
        return this._rectangles.get(rectangle).then((r) => r.setOptions(options));
    }
    getBounds(rectangle) {
        return this._rectangles.get(rectangle).then((r) => r.getBounds());
    }
    setBounds(rectangle) {
        return this._rectangles.get(rectangle).then((r) => {
            return r.setBounds({
                north: rectangle.north,
                east: rectangle.east,
                south: rectangle.south,
                west: rectangle.west,
            });
        });
    }
    setEditable(rectangle) {
        return this._rectangles.get(rectangle).then((r) => {
            return r.setEditable(rectangle.editable);
        });
    }
    setDraggable(rectangle) {
        return this._rectangles.get(rectangle).then((r) => {
            return r.setDraggable(rectangle.draggable);
        });
    }
    setVisible(rectangle) {
        return this._rectangles.get(rectangle).then((r) => {
            return r.setVisible(rectangle.visible);
        });
    }
    createEventObservable(eventName, rectangle) {
        return Observable.create((observer) => {
            let listener = null;
            this._rectangles.get(rectangle).then((r) => {
                listener = r.addListener(eventName, (e) => this._zone.run(() => observer.next(e)));
            });
            return () => {
                if (listener !== null) {
                    listener.remove();
                }
            };
        });
    }
};
RectangleManager.ɵfac = function RectangleManager_Factory(t) { return new (t || RectangleManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };
RectangleManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: RectangleManager, factory: RectangleManager.ɵfac });
RectangleManager.ctorParameters = () => [
    { type: GoogleMapsAPIWrapper },
    { type: NgZone }
];
RectangleManager = tslib_1.__decorate([ tslib_1.__metadata("design:paramtypes", [GoogleMapsAPIWrapper, NgZone])
], RectangleManager);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RectangleManager, [{
        type: Injectable
    }], function () { return [{ type: GoogleMapsAPIWrapper }, { type: ɵngcc0.NgZone }]; }, null); })();
export { RectangleManager };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNwcm8va3JpdHNhZGVlL1NWTi9DeWJlcnNvZnQvYXBleC9ub2RlX21vZHVsZXMvQGFnbS9jb3JlL2VzbTIwMTUvc2VydmljZXMvbWFuYWdlcnMvcmVjdGFuZ2xlLW1hbmFnZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBSUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Z0hBZ0ZFOzs7Ozt1Q0FLcUMsQUFFcEM7Ozs7dUdBQ2tCIiwiZmlsZSI6InJlY3RhbmdsZS1tYW5hZ2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEluamVjdGFibGUsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgR29vZ2xlTWFwc0FQSVdyYXBwZXIgfSBmcm9tICcuLi9nb29nbGUtbWFwcy1hcGktd3JhcHBlcic7XG5sZXQgUmVjdGFuZ2xlTWFuYWdlciA9IGNsYXNzIFJlY3RhbmdsZU1hbmFnZXIge1xuICAgIGNvbnN0cnVjdG9yKF9hcGlXcmFwcGVyLCBfem9uZSkge1xuICAgICAgICB0aGlzLl9hcGlXcmFwcGVyID0gX2FwaVdyYXBwZXI7XG4gICAgICAgIHRoaXMuX3pvbmUgPSBfem9uZTtcbiAgICAgICAgdGhpcy5fcmVjdGFuZ2xlcyA9IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgYWRkUmVjdGFuZ2xlKHJlY3RhbmdsZSkge1xuICAgICAgICB0aGlzLl9yZWN0YW5nbGVzLnNldChyZWN0YW5nbGUsIHRoaXMuX2FwaVdyYXBwZXIuY3JlYXRlUmVjdGFuZ2xlKHtcbiAgICAgICAgICAgIGJvdW5kczoge1xuICAgICAgICAgICAgICAgIG5vcnRoOiByZWN0YW5nbGUubm9ydGgsXG4gICAgICAgICAgICAgICAgZWFzdDogcmVjdGFuZ2xlLmVhc3QsXG4gICAgICAgICAgICAgICAgc291dGg6IHJlY3RhbmdsZS5zb3V0aCxcbiAgICAgICAgICAgICAgICB3ZXN0OiByZWN0YW5nbGUud2VzdCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbGlja2FibGU6IHJlY3RhbmdsZS5jbGlja2FibGUsXG4gICAgICAgICAgICBkcmFnZ2FibGU6IHJlY3RhbmdsZS5kcmFnZ2FibGUsXG4gICAgICAgICAgICBlZGl0YWJsZTogcmVjdGFuZ2xlLmVkaXRhYmxlLFxuICAgICAgICAgICAgZmlsbENvbG9yOiByZWN0YW5nbGUuZmlsbENvbG9yLFxuICAgICAgICAgICAgZmlsbE9wYWNpdHk6IHJlY3RhbmdsZS5maWxsT3BhY2l0eSxcbiAgICAgICAgICAgIHN0cm9rZUNvbG9yOiByZWN0YW5nbGUuc3Ryb2tlQ29sb3IsXG4gICAgICAgICAgICBzdHJva2VPcGFjaXR5OiByZWN0YW5nbGUuc3Ryb2tlT3BhY2l0eSxcbiAgICAgICAgICAgIHN0cm9rZVBvc2l0aW9uOiByZWN0YW5nbGUuc3Ryb2tlUG9zaXRpb24sXG4gICAgICAgICAgICBzdHJva2VXZWlnaHQ6IHJlY3RhbmdsZS5zdHJva2VXZWlnaHQsXG4gICAgICAgICAgICB2aXNpYmxlOiByZWN0YW5nbGUudmlzaWJsZSxcbiAgICAgICAgICAgIHpJbmRleDogcmVjdGFuZ2xlLnpJbmRleCxcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBnaXZlbiByZWN0YW5nbGUgZnJvbSB0aGUgbWFwLlxuICAgICAqL1xuICAgIHJlbW92ZVJlY3RhbmdsZShyZWN0YW5nbGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlY3RhbmdsZXMuZ2V0KHJlY3RhbmdsZSkudGhlbigocikgPT4ge1xuICAgICAgICAgICAgci5zZXRNYXAobnVsbCk7XG4gICAgICAgICAgICB0aGlzLl9yZWN0YW5nbGVzLmRlbGV0ZShyZWN0YW5nbGUpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2V0T3B0aW9ucyhyZWN0YW5nbGUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlY3RhbmdsZXMuZ2V0KHJlY3RhbmdsZSkudGhlbigocikgPT4gci5zZXRPcHRpb25zKG9wdGlvbnMpKTtcbiAgICB9XG4gICAgZ2V0Qm91bmRzKHJlY3RhbmdsZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVjdGFuZ2xlcy5nZXQocmVjdGFuZ2xlKS50aGVuKChyKSA9PiByLmdldEJvdW5kcygpKTtcbiAgICB9XG4gICAgc2V0Qm91bmRzKHJlY3RhbmdsZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVjdGFuZ2xlcy5nZXQocmVjdGFuZ2xlKS50aGVuKChyKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gci5zZXRCb3VuZHMoe1xuICAgICAgICAgICAgICAgIG5vcnRoOiByZWN0YW5nbGUubm9ydGgsXG4gICAgICAgICAgICAgICAgZWFzdDogcmVjdGFuZ2xlLmVhc3QsXG4gICAgICAgICAgICAgICAgc291dGg6IHJlY3RhbmdsZS5zb3V0aCxcbiAgICAgICAgICAgICAgICB3ZXN0OiByZWN0YW5nbGUud2VzdCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2V0RWRpdGFibGUocmVjdGFuZ2xlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZWN0YW5nbGVzLmdldChyZWN0YW5nbGUpLnRoZW4oKHIpID0+IHtcbiAgICAgICAgICAgIHJldHVybiByLnNldEVkaXRhYmxlKHJlY3RhbmdsZS5lZGl0YWJsZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzZXREcmFnZ2FibGUocmVjdGFuZ2xlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZWN0YW5nbGVzLmdldChyZWN0YW5nbGUpLnRoZW4oKHIpID0+IHtcbiAgICAgICAgICAgIHJldHVybiByLnNldERyYWdnYWJsZShyZWN0YW5nbGUuZHJhZ2dhYmxlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHNldFZpc2libGUocmVjdGFuZ2xlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZWN0YW5nbGVzLmdldChyZWN0YW5nbGUpLnRoZW4oKHIpID0+IHtcbiAgICAgICAgICAgIHJldHVybiByLnNldFZpc2libGUocmVjdGFuZ2xlLnZpc2libGUpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgY3JlYXRlRXZlbnRPYnNlcnZhYmxlKGV2ZW50TmFtZSwgcmVjdGFuZ2xlKSB7XG4gICAgICAgIHJldHVybiBPYnNlcnZhYmxlLmNyZWF0ZSgob2JzZXJ2ZXIpID0+IHtcbiAgICAgICAgICAgIGxldCBsaXN0ZW5lciA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLl9yZWN0YW5nbGVzLmdldChyZWN0YW5nbGUpLnRoZW4oKHIpID0+IHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lciA9IHIuYWRkTGlzdGVuZXIoZXZlbnROYW1lLCAoZSkgPT4gdGhpcy5fem9uZS5ydW4oKCkgPT4gb2JzZXJ2ZXIubmV4dChlKSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChsaXN0ZW5lciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lci5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG59O1xuUmVjdGFuZ2xlTWFuYWdlci5jdG9yUGFyYW1ldGVycyA9ICgpID0+IFtcbiAgICB7IHR5cGU6IEdvb2dsZU1hcHNBUElXcmFwcGVyIH0sXG4gICAgeyB0eXBlOiBOZ1pvbmUgfVxuXTtcblJlY3RhbmdsZU1hbmFnZXIgPSB0c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgIEluamVjdGFibGUoKSxcbiAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbR29vZ2xlTWFwc0FQSVdyYXBwZXIsIE5nWm9uZV0pXG5dLCBSZWN0YW5nbGVNYW5hZ2VyKTtcbmV4cG9ydCB7IFJlY3RhbmdsZU1hbmFnZXIgfTtcbiJdfQ==