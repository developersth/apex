import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { bindCallback, Observable, of, ReplaySubject, throwError } from 'rxjs';
import { map, multicast, switchMap } from 'rxjs/operators';
import { GeocoderStatus } from './google-maps-types';
import { MapsAPILoader } from './maps-api-loader/maps-api-loader';
import * as i0 from "@angular/core";
import * as i1 from "./maps-api-loader/maps-api-loader";
import * as ɵngcc0 from '@angular/core';
let AgmGeocoder = class AgmGeocoder {
    constructor(loader) {
        const connectableGeocoder$ = new Observable(subscriber => {
            loader.load().then(() => subscriber.next());
        })
            .pipe(map(() => this._createGeocoder()), multicast(new ReplaySubject(1)));
        connectableGeocoder$.connect(); // ignore the subscription
        // since we will remain subscribed till application exits
        this.geocoder$ = connectableGeocoder$;
    }
    geocode(request) {
        return this.geocoder$.pipe(switchMap((geocoder) => this._getGoogleResults(geocoder, request)));
    }
    _getGoogleResults(geocoder, request) {
        const geocodeObservable = bindCallback(geocoder.geocode);
        return geocodeObservable(request).pipe(switchMap(([results, status]) => {
            if (status === GeocoderStatus.OK) {
                return of(results);
            }
            return throwError(status);
        }));
    }
    _createGeocoder() {
        return new google.maps.Geocoder();
    }
};
AgmGeocoder.ɵfac = function AgmGeocoder_Factory(t) { return new (t || AgmGeocoder)(ɵngcc0.ɵɵinject(MapsAPILoader)); };
AgmGeocoder.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: AgmGeocoder, factory: AgmGeocoder.ɵfac, providedIn: 'root' });
AgmGeocoder.ctorParameters = () => [
    { type: MapsAPILoader }
];
AgmGeocoder.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function AgmGeocoder_Factory() { return new AgmGeocoder(i0.ɵɵinject(i1.MapsAPILoader)); }, token: AgmGeocoder, providedIn: "root" });
AgmGeocoder = tslib_1.__decorate([ tslib_1.__metadata("design:paramtypes", [MapsAPILoader])
], AgmGeocoder);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgmGeocoder, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: MapsAPILoader }]; }, null); })();
export { AgmGeocoder };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNwcm8va3JpdHNhZGVlL1NWTi9DeWJlcnNvZnQvYXBleC9ub2RlX21vZHVsZXMvQGFnbS9jb3JlL2VzbTIwMTUvc2VydmljZXMvZ2VvY29kZXItc2VydmljZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0FBUUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztxSEF5QkU7Ozs7O2tDQUtnQyxBQUUvQjs7Ozs7dUVBQ2EiLCJmaWxlIjoiZ2VvY29kZXItc2VydmljZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBiaW5kQ2FsbGJhY2ssIE9ic2VydmFibGUsIG9mLCBSZXBsYXlTdWJqZWN0LCB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAsIG11bHRpY2FzdCwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgR2VvY29kZXJTdGF0dXMgfSBmcm9tICcuL2dvb2dsZS1tYXBzLXR5cGVzJztcbmltcG9ydCB7IE1hcHNBUElMb2FkZXIgfSBmcm9tICcuL21hcHMtYXBpLWxvYWRlci9tYXBzLWFwaS1sb2FkZXInO1xuaW1wb3J0ICogYXMgaTAgZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCAqIGFzIGkxIGZyb20gXCIuL21hcHMtYXBpLWxvYWRlci9tYXBzLWFwaS1sb2FkZXJcIjtcbmxldCBBZ21HZW9jb2RlciA9IGNsYXNzIEFnbUdlb2NvZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihsb2FkZXIpIHtcbiAgICAgICAgY29uc3QgY29ubmVjdGFibGVHZW9jb2RlciQgPSBuZXcgT2JzZXJ2YWJsZShzdWJzY3JpYmVyID0+IHtcbiAgICAgICAgICAgIGxvYWRlci5sb2FkKCkudGhlbigoKSA9PiBzdWJzY3JpYmVyLm5leHQoKSk7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAucGlwZShtYXAoKCkgPT4gdGhpcy5fY3JlYXRlR2VvY29kZXIoKSksIG11bHRpY2FzdChuZXcgUmVwbGF5U3ViamVjdCgxKSkpO1xuICAgICAgICBjb25uZWN0YWJsZUdlb2NvZGVyJC5jb25uZWN0KCk7IC8vIGlnbm9yZSB0aGUgc3Vic2NyaXB0aW9uXG4gICAgICAgIC8vIHNpbmNlIHdlIHdpbGwgcmVtYWluIHN1YnNjcmliZWQgdGlsbCBhcHBsaWNhdGlvbiBleGl0c1xuICAgICAgICB0aGlzLmdlb2NvZGVyJCA9IGNvbm5lY3RhYmxlR2VvY29kZXIkO1xuICAgIH1cbiAgICBnZW9jb2RlKHJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2VvY29kZXIkLnBpcGUoc3dpdGNoTWFwKChnZW9jb2RlcikgPT4gdGhpcy5fZ2V0R29vZ2xlUmVzdWx0cyhnZW9jb2RlciwgcmVxdWVzdCkpKTtcbiAgICB9XG4gICAgX2dldEdvb2dsZVJlc3VsdHMoZ2VvY29kZXIsIHJlcXVlc3QpIHtcbiAgICAgICAgY29uc3QgZ2VvY29kZU9ic2VydmFibGUgPSBiaW5kQ2FsbGJhY2soZ2VvY29kZXIuZ2VvY29kZSk7XG4gICAgICAgIHJldHVybiBnZW9jb2RlT2JzZXJ2YWJsZShyZXF1ZXN0KS5waXBlKHN3aXRjaE1hcCgoW3Jlc3VsdHMsIHN0YXR1c10pID0+IHtcbiAgICAgICAgICAgIGlmIChzdGF0dXMgPT09IEdlb2NvZGVyU3RhdHVzLk9LKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9mKHJlc3VsdHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRocm93RXJyb3Ioc3RhdHVzKTtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBfY3JlYXRlR2VvY29kZXIoKSB7XG4gICAgICAgIHJldHVybiBuZXcgZ29vZ2xlLm1hcHMuR2VvY29kZXIoKTtcbiAgICB9XG59O1xuQWdtR2VvY29kZXIuY3RvclBhcmFtZXRlcnMgPSAoKSA9PiBbXG4gICAgeyB0eXBlOiBNYXBzQVBJTG9hZGVyIH1cbl07XG5BZ21HZW9jb2Rlci5uZ0luamVjdGFibGVEZWYgPSBpMC7Jtcm1ZGVmaW5lSW5qZWN0YWJsZSh7IGZhY3Rvcnk6IGZ1bmN0aW9uIEFnbUdlb2NvZGVyX0ZhY3RvcnkoKSB7IHJldHVybiBuZXcgQWdtR2VvY29kZXIoaTAuybXJtWluamVjdChpMS5NYXBzQVBJTG9hZGVyKSk7IH0sIHRva2VuOiBBZ21HZW9jb2RlciwgcHJvdmlkZWRJbjogXCJyb290XCIgfSk7XG5BZ21HZW9jb2RlciA9IHRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgSW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KSxcbiAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbTWFwc0FQSUxvYWRlcl0pXG5dLCBBZ21HZW9jb2Rlcik7XG5leHBvcnQgeyBBZ21HZW9jb2RlciB9O1xuIl19