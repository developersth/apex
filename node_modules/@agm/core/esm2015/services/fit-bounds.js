import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { BehaviorSubject, from, timer } from 'rxjs';
import { flatMap, map, sample, shareReplay, switchMap, } from 'rxjs/operators';
import { MapsAPILoader } from './maps-api-loader/maps-api-loader';
/**
 * Class to implement when you what to be able to make it work with the auto fit bounds feature
 * of AGM.
 */
import * as ɵngcc0 from '@angular/core';
export class FitBoundsAccessor {
}
/**
 * The FitBoundsService is responsible for computing the bounds of the a single map.
 */
let FitBoundsService = class FitBoundsService {
    constructor(loader) {
        this._boundsChangeSampleTime$ = new BehaviorSubject(200);
        this._includeInBounds$ = new BehaviorSubject(new Map());
        this.bounds$ = from(loader.load()).pipe(flatMap(() => this._includeInBounds$), sample(this._boundsChangeSampleTime$.pipe(switchMap(time => timer(0, time)))), map(includeInBounds => this._generateBounds(includeInBounds)), shareReplay(1));
    }
    _generateBounds(includeInBounds) {
        const bounds = new google.maps.LatLngBounds();
        includeInBounds.forEach(b => bounds.extend(b));
        return bounds;
    }
    addToBounds(latLng) {
        const id = this._createIdentifier(latLng);
        if (this._includeInBounds$.value.has(id)) {
            return;
        }
        const map = this._includeInBounds$.value;
        map.set(id, latLng);
        this._includeInBounds$.next(map);
    }
    removeFromBounds(latLng) {
        const map = this._includeInBounds$.value;
        map.delete(this._createIdentifier(latLng));
        this._includeInBounds$.next(map);
    }
    changeFitBoundsChangeSampleTime(timeMs) {
        this._boundsChangeSampleTime$.next(timeMs);
    }
    getBounds$() {
        return this.bounds$;
    }
    _createIdentifier(latLng) {
        return `${latLng.lat}+${latLng.lng}`;
    }
};
FitBoundsService.ɵfac = function FitBoundsService_Factory(t) { return new (t || FitBoundsService)(ɵngcc0.ɵɵinject(MapsAPILoader)); };
FitBoundsService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: FitBoundsService, factory: FitBoundsService.ɵfac });
FitBoundsService.ctorParameters = () => [
    { type: MapsAPILoader }
];
FitBoundsService = tslib_1.__decorate([ tslib_1.__metadata("design:paramtypes", [MapsAPILoader])
], FitBoundsService);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FitBoundsService, [{
        type: Injectable
    }], function () { return [{ type: MapsAPILoader }]; }, null); })();
export { FitBoundsService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNwcm8va3JpdHNhZGVlL1NWTi9DeWJlcnNvZnQvYXBleC9ub2RlX21vZHVsZXMvQGFnbS9jb3JlL2VzbTIwMTUvc2VydmljZXMvZml0LWJvdW5kcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7OztBQVNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztnSEF1Q0U7Ozs7dUNBSXFDLEFBRXBDOzs7O3VFQUNrQiIsImZpbGUiOiJmaXQtYm91bmRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgZnJvbSwgdGltZXIgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZsYXRNYXAsIG1hcCwgc2FtcGxlLCBzaGFyZVJlcGxheSwgc3dpdGNoTWFwLCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IE1hcHNBUElMb2FkZXIgfSBmcm9tICcuL21hcHMtYXBpLWxvYWRlci9tYXBzLWFwaS1sb2FkZXInO1xuLyoqXG4gKiBDbGFzcyB0byBpbXBsZW1lbnQgd2hlbiB5b3Ugd2hhdCB0byBiZSBhYmxlIHRvIG1ha2UgaXQgd29yayB3aXRoIHRoZSBhdXRvIGZpdCBib3VuZHMgZmVhdHVyZVxuICogb2YgQUdNLlxuICovXG5leHBvcnQgY2xhc3MgRml0Qm91bmRzQWNjZXNzb3Ige1xufVxuLyoqXG4gKiBUaGUgRml0Qm91bmRzU2VydmljZSBpcyByZXNwb25zaWJsZSBmb3IgY29tcHV0aW5nIHRoZSBib3VuZHMgb2YgdGhlIGEgc2luZ2xlIG1hcC5cbiAqL1xubGV0IEZpdEJvdW5kc1NlcnZpY2UgPSBjbGFzcyBGaXRCb3VuZHNTZXJ2aWNlIHtcbiAgICBjb25zdHJ1Y3Rvcihsb2FkZXIpIHtcbiAgICAgICAgdGhpcy5fYm91bmRzQ2hhbmdlU2FtcGxlVGltZSQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KDIwMCk7XG4gICAgICAgIHRoaXMuX2luY2x1ZGVJbkJvdW5kcyQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KG5ldyBNYXAoKSk7XG4gICAgICAgIHRoaXMuYm91bmRzJCA9IGZyb20obG9hZGVyLmxvYWQoKSkucGlwZShmbGF0TWFwKCgpID0+IHRoaXMuX2luY2x1ZGVJbkJvdW5kcyQpLCBzYW1wbGUodGhpcy5fYm91bmRzQ2hhbmdlU2FtcGxlVGltZSQucGlwZShzd2l0Y2hNYXAodGltZSA9PiB0aW1lcigwLCB0aW1lKSkpKSwgbWFwKGluY2x1ZGVJbkJvdW5kcyA9PiB0aGlzLl9nZW5lcmF0ZUJvdW5kcyhpbmNsdWRlSW5Cb3VuZHMpKSwgc2hhcmVSZXBsYXkoMSkpO1xuICAgIH1cbiAgICBfZ2VuZXJhdGVCb3VuZHMoaW5jbHVkZUluQm91bmRzKSB7XG4gICAgICAgIGNvbnN0IGJvdW5kcyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmdCb3VuZHMoKTtcbiAgICAgICAgaW5jbHVkZUluQm91bmRzLmZvckVhY2goYiA9PiBib3VuZHMuZXh0ZW5kKGIpKTtcbiAgICAgICAgcmV0dXJuIGJvdW5kcztcbiAgICB9XG4gICAgYWRkVG9Cb3VuZHMobGF0TG5nKSB7XG4gICAgICAgIGNvbnN0IGlkID0gdGhpcy5fY3JlYXRlSWRlbnRpZmllcihsYXRMbmcpO1xuICAgICAgICBpZiAodGhpcy5faW5jbHVkZUluQm91bmRzJC52YWx1ZS5oYXMoaWQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWFwID0gdGhpcy5faW5jbHVkZUluQm91bmRzJC52YWx1ZTtcbiAgICAgICAgbWFwLnNldChpZCwgbGF0TG5nKTtcbiAgICAgICAgdGhpcy5faW5jbHVkZUluQm91bmRzJC5uZXh0KG1hcCk7XG4gICAgfVxuICAgIHJlbW92ZUZyb21Cb3VuZHMobGF0TG5nKSB7XG4gICAgICAgIGNvbnN0IG1hcCA9IHRoaXMuX2luY2x1ZGVJbkJvdW5kcyQudmFsdWU7XG4gICAgICAgIG1hcC5kZWxldGUodGhpcy5fY3JlYXRlSWRlbnRpZmllcihsYXRMbmcpKTtcbiAgICAgICAgdGhpcy5faW5jbHVkZUluQm91bmRzJC5uZXh0KG1hcCk7XG4gICAgfVxuICAgIGNoYW5nZUZpdEJvdW5kc0NoYW5nZVNhbXBsZVRpbWUodGltZU1zKSB7XG4gICAgICAgIHRoaXMuX2JvdW5kc0NoYW5nZVNhbXBsZVRpbWUkLm5leHQodGltZU1zKTtcbiAgICB9XG4gICAgZ2V0Qm91bmRzJCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYm91bmRzJDtcbiAgICB9XG4gICAgX2NyZWF0ZUlkZW50aWZpZXIobGF0TG5nKSB7XG4gICAgICAgIHJldHVybiBgJHtsYXRMbmcubGF0fSske2xhdExuZy5sbmd9YDtcbiAgICB9XG59O1xuRml0Qm91bmRzU2VydmljZS5jdG9yUGFyYW1ldGVycyA9ICgpID0+IFtcbiAgICB7IHR5cGU6IE1hcHNBUElMb2FkZXIgfVxuXTtcbkZpdEJvdW5kc1NlcnZpY2UgPSB0c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgIEluamVjdGFibGUoKSxcbiAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbTWFwc0FQSUxvYWRlcl0pXG5dLCBGaXRCb3VuZHNTZXJ2aWNlKTtcbmV4cG9ydCB7IEZpdEJvdW5kc1NlcnZpY2UgfTtcbiJdfQ==