{"version":3,"sources":["/Users/macpro/kritsadee/SVN/Cybersoft/apex/node_modules/ng-chartist/bundles/ng-chartist.umd.js"],"names":[],"mappings":"AAAA;oGAC2E;wFACH;4BAC3D;0BACM;;AAAyB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAsL9B,AAMJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAaA;;;;;;;;;;SAUD;;;;;;;;;;;gDAOC","file":"ng-chartist.umd.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('chartist'), require('@angular/core')) :\n    typeof define === 'function' && define.amd ? define('ng-chartist', ['exports', 'chartist', '@angular/core'], factory) :\n    (factory((global['ng-chartist'] = {}),global.Chartist,global.ng.core));\n}(this, (function (exports,Chartist,core) { 'use strict';\n\n    /*! *****************************************************************************\n    Copyright (c) Microsoft Corporation. All rights reserved.\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\n    this file except in compliance with the License. You may obtain a copy of the\n    License at http://www.apache.org/licenses/LICENSE-2.0\n\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\n    MERCHANTABLITY OR NON-INFRINGEMENT.\n\n    See the Apache Version 2.0 License for specific language governing permissions\n    and limitations under the License.\n    ***************************************************************************** */\n    function __values(o) {\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\n        if (m)\n            return m.call(o);\n        return {\n            next: function () {\n                if (o && i >= o.length)\n                    o = void 0;\n                return { value: o && o[i++], done: !o };\n            }\n        };\n    }\n    function __read(o, n) {\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n        if (!m)\n            return o;\n        var i = m.call(o), r, ar = [], e;\n        try {\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)\n                ar.push(r.value);\n        }\n        catch (error) {\n            e = { error: error };\n        }\n        finally {\n            try {\n                if (r && !r.done && (m = i[\"return\"]))\n                    m.call(i);\n            }\n            finally {\n                if (e)\n                    throw e.error;\n            }\n        }\n        return ar;\n    }\n    function __spread() {\n        for (var ar = [], i = 0; i < arguments.length; i++)\n            ar = ar.concat(__read(arguments[i]));\n        return ar;\n    }\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    var ChartistComponent = /** @class */ (function () {\n        function ChartistComponent(element) {\n            this.element = element.nativeElement;\n        }\n        /**\n         * @return {?}\n         */\n        ChartistComponent.prototype.ngOnInit = /**\n         * @return {?}\n         */\n            function () {\n                var _this = this;\n                if (!this.type || !this.data) {\n                    Promise.reject('Expected at least type and data.');\n                }\n                return this.renderChart().then(function (chart) {\n                    if (_this.events !== undefined) {\n                        _this.bindEvents(chart);\n                    }\n                    return chart;\n                });\n            };\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        ChartistComponent.prototype.ngOnChanges = /**\n         * @param {?} changes\n         * @return {?}\n         */\n            function (changes) {\n                this.update(changes);\n            };\n        /**\n         * @return {?}\n         */\n        ChartistComponent.prototype.ngOnDestroy = /**\n         * @return {?}\n         */\n            function () {\n                if (this.chart) {\n                    this.chart.detach();\n                }\n            };\n        /**\n         * @return {?}\n         */\n        ChartistComponent.prototype.renderChart = /**\n         * @return {?}\n         */\n            function () {\n                var _this = this;\n                /** @type {?} */\n                var promises = [\n                    this.type,\n                    this.element,\n                    this.data,\n                    this.options,\n                    this.responsiveOptions\n                ];\n                return Promise.all(promises).then(function (values) {\n                    var _a = __read(values), type = _a[0], args = _a.slice(1);\n                    if (!(type in Chartist)) {\n                        throw new Error(type + \" is not a valid chart type\");\n                    }\n                    _this.chart = (( /** @type {?} */(Chartist)))[type].apply((( /** @type {?} */(Chartist))), __spread(args));\n                    return _this.chart;\n                });\n            };\n        /**\n         * @param {?} changes\n         * @return {?}\n         */\n        ChartistComponent.prototype.update = /**\n         * @param {?} changes\n         * @return {?}\n         */\n            function (changes) {\n                if (!this.chart || 'type' in changes) {\n                    this.renderChart();\n                }\n                else {\n                    if (changes.data) {\n                        this.data = changes.data.currentValue;\n                    }\n                    if (changes.options) {\n                        this.options = changes.options.currentValue;\n                    }\n                    (( /** @type {?} */(this.chart))).update(this.data, this.options);\n                }\n            };\n        /**\n         * @param {?} chart\n         * @return {?}\n         */\n        ChartistComponent.prototype.bindEvents = /**\n         * @param {?} chart\n         * @return {?}\n         */\n            function (chart) {\n                var e_1, _a;\n                try {\n                    for (var _b = __values(Object.keys(this.events)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                        var event_1 = _c.value;\n                        chart.on(event_1, this.events[event_1]);\n                    }\n                }\n                catch (e_1_1) {\n                    e_1 = { error: e_1_1 };\n                }\n                finally {\n                    try {\n                        if (_c && !_c.done && (_a = _b.return))\n                            _a.call(_b);\n                    }\n                    finally {\n                        if (e_1)\n                            throw e_1.error;\n                    }\n                }\n            };\n        ChartistComponent.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'x-chartist',\n                        template: '<ng-content></ng-content>'\n                    }] }\n        ];\n        /** @nocollapse */\n        ChartistComponent.ctorParameters = function () {\n            return [\n                { type: core.ElementRef }\n            ];\n        };\n        ChartistComponent.propDecorators = {\n            data: [{ type: core.Input }],\n            type: [{ type: core.Input }],\n            options: [{ type: core.Input }],\n            responsiveOptions: [{ type: core.Input }],\n            events: [{ type: core.Input }]\n        };\n        return ChartistComponent;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n    var ChartistModule = /** @class */ (function () {\n        function ChartistModule() {\n        }\n        ChartistModule.decorators = [\n            { type: core.NgModule, args: [{\n                        declarations: [ChartistComponent],\n                        imports: [],\n                        exports: [ChartistComponent]\n                    },] }\n        ];\n        return ChartistModule;\n    }());\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n\n    /**\n     * @fileoverview added by tsickle\n     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n     */\n\n    exports.ChartistComponent = ChartistComponent;\n    exports.ChartistModule = ChartistModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"]}