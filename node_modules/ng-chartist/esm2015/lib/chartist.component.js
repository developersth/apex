/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input } from '@angular/core';
import * as Chartist from 'chartist';
/**
 * Represent a chart event.
 * For possible values, check the Chartist docs.
 * @record
 */
import * as ɵngcc0 from '@angular/core';

const _c0 = ["*"];
export function ChartEvent() { }
export class ChartistComponent {
    /**
     * @param {?} element
     */
    constructor(element) {
        this.element = element.nativeElement;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.type || !this.data) {
            Promise.reject('Expected at least type and data.');
        }
        return this.renderChart().then((chart) => {
            if (this.events !== undefined) {
                this.bindEvents(chart);
            }
            return chart;
        });
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.update(changes);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.chart) {
            this.chart.detach();
        }
    }
    /**
     * @return {?}
     */
    renderChart() {
        /** @type {?} */
        const promises = [
            this.type,
            this.element,
            this.data,
            this.options,
            this.responsiveOptions
        ];
        return Promise.all(promises).then((values) => {
            const [type, ...args] = values;
            if (!(type in Chartist)) {
                throw new Error(`${type} is not a valid chart type`);
            }
            this.chart = ((/** @type {?} */ (Chartist)))[type](...args);
            return this.chart;
        });
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    update(changes) {
        if (!this.chart || 'type' in changes) {
            this.renderChart();
        }
        else {
            if (changes.data) {
                this.data = changes.data.currentValue;
            }
            if (changes.options) {
                this.options = changes.options.currentValue;
            }
            ((/** @type {?} */ (this.chart))).update(this.data, this.options);
        }
    }
    /**
     * @param {?} chart
     * @return {?}
     */
    bindEvents(chart) {
        for (const event of Object.keys(this.events)) {
            chart.on(event, this.events[event]);
        }
    }
}
ChartistComponent.ɵfac = function ChartistComponent_Factory(t) { return new (t || ChartistComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ChartistComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ChartistComponent, selectors: [["x-chartist"]], inputs: { data: "data", options: "options", type: "type", responsiveOptions: "responsiveOptions", events: "events" }, features: [ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c0, decls: 1, vars: 0, template: function ChartistComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/** @nocollapse */
ChartistComponent.ctorParameters = () => [
    { type: ElementRef }
];
ChartistComponent.propDecorators = {
    data: [{ type: Input }],
    type: [{ type: Input }],
    options: [{ type: Input }],
    responsiveOptions: [{ type: Input }],
    events: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ChartistComponent, [{
        type: Component,
        args: [{
                selector: 'x-chartist',
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { data: [{
            type: Input
        }], options: [{
            type: Input
        }], type: [{
            type: Input
        }], responsiveOptions: [{
            type: Input
        }], events: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    ChartistComponent.prototype.data;
    /** @type {?} */
    ChartistComponent.prototype.type;
    /** @type {?} */
    ChartistComponent.prototype.options;
    /** @type {?} */
    ChartistComponent.prototype.responsiveOptions;
    /** @type {?} */
    ChartistComponent.prototype.events;
    /** @type {?} */
    ChartistComponent.prototype.chart;
    /**
     * @type {?}
     * @private
     */
    ChartistComponent.prototype.element;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNwcm8va3JpdHNhZGVlL1NWTi9DeWJlcnNvZnQvYXBleC9ub2RlX21vZHVsZXMvbmctY2hhcnRpc3QvZXNtMjAxNS9saWIvY2hhcnRpc3QuY29tcG9uZW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7OztBQVdBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FxRkMsNEJBTUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBV0EiLCJmaWxlIjoiY2hhcnRpc3QuY29tcG9uZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlcyxleHRyYVJlcXVpcmUsbWlzc2luZ1JldHVybix1bnVzZWRQcml2YXRlTWVtYmVycyx1c2VsZXNzQ29kZX0gY2hlY2tlZCBieSB0c2NcbiAqL1xuaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMgQ2hhcnRpc3QgZnJvbSAnY2hhcnRpc3QnO1xuLyoqXG4gKiBSZXByZXNlbnQgYSBjaGFydCBldmVudC5cbiAqIEZvciBwb3NzaWJsZSB2YWx1ZXMsIGNoZWNrIHRoZSBDaGFydGlzdCBkb2NzLlxuICogQHJlY29yZFxuICovXG5leHBvcnQgZnVuY3Rpb24gQ2hhcnRFdmVudCgpIHsgfVxuZXhwb3J0IGNsYXNzIENoYXJ0aXN0Q29tcG9uZW50IHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsZW1lbnRcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQubmF0aXZlRWxlbWVudDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnR5cGUgfHwgIXRoaXMuZGF0YSkge1xuICAgICAgICAgICAgUHJvbWlzZS5yZWplY3QoJ0V4cGVjdGVkIGF0IGxlYXN0IHR5cGUgYW5kIGRhdGEuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyQ2hhcnQoKS50aGVuKChjaGFydCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuZXZlbnRzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJpbmRFdmVudHMoY2hhcnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNoYXJ0O1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBjaGFuZ2VzXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzKSB7XG4gICAgICAgIHRoaXMudXBkYXRlKGNoYW5nZXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5jaGFydCkge1xuICAgICAgICAgICAgdGhpcy5jaGFydC5kZXRhY2goKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIHJlbmRlckNoYXJ0KCkge1xuICAgICAgICAvKiogQHR5cGUgez99ICovXG4gICAgICAgIGNvbnN0IHByb21pc2VzID0gW1xuICAgICAgICAgICAgdGhpcy50eXBlLFxuICAgICAgICAgICAgdGhpcy5lbGVtZW50LFxuICAgICAgICAgICAgdGhpcy5kYXRhLFxuICAgICAgICAgICAgdGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgdGhpcy5yZXNwb25zaXZlT3B0aW9uc1xuICAgICAgICBdO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oKHZhbHVlcykgPT4ge1xuICAgICAgICAgICAgY29uc3QgW3R5cGUsIC4uLmFyZ3NdID0gdmFsdWVzO1xuICAgICAgICAgICAgaWYgKCEodHlwZSBpbiBDaGFydGlzdCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7dHlwZX0gaXMgbm90IGEgdmFsaWQgY2hhcnQgdHlwZWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jaGFydCA9ICgoLyoqIEB0eXBlIHs/fSAqLyAoQ2hhcnRpc3QpKSlbdHlwZV0oLi4uYXJncyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jaGFydDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gY2hhbmdlc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgdXBkYXRlKGNoYW5nZXMpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNoYXJ0IHx8ICd0eXBlJyBpbiBjaGFuZ2VzKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckNoYXJ0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoY2hhbmdlcy5kYXRhKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhID0gY2hhbmdlcy5kYXRhLmN1cnJlbnRWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjaGFuZ2VzLm9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBjaGFuZ2VzLm9wdGlvbnMuY3VycmVudFZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKCgvKiogQHR5cGUgez99ICovICh0aGlzLmNoYXJ0KSkpLnVwZGF0ZSh0aGlzLmRhdGEsIHRoaXMub3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBjaGFydFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgYmluZEV2ZW50cyhjaGFydCkge1xuICAgICAgICBmb3IgKGNvbnN0IGV2ZW50IG9mIE9iamVjdC5rZXlzKHRoaXMuZXZlbnRzKSkge1xuICAgICAgICAgICAgY2hhcnQub24oZXZlbnQsIHRoaXMuZXZlbnRzW2V2ZW50XSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5DaGFydGlzdENvbXBvbmVudC5kZWNvcmF0b3JzID0gW1xuICAgIHsgdHlwZTogQ29tcG9uZW50LCBhcmdzOiBbe1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAneC1jaGFydGlzdCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+J1xuICAgICAgICAgICAgfV0gfVxuXTtcbi8qKiBAbm9jb2xsYXBzZSAqL1xuQ2hhcnRpc3RDb21wb25lbnQuY3RvclBhcmFtZXRlcnMgPSAoKSA9PiBbXG4gICAgeyB0eXBlOiBFbGVtZW50UmVmIH1cbl07XG5DaGFydGlzdENvbXBvbmVudC5wcm9wRGVjb3JhdG9ycyA9IHtcbiAgICBkYXRhOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICB0eXBlOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICBvcHRpb25zOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICByZXNwb25zaXZlT3B0aW9uczogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgZXZlbnRzOiBbeyB0eXBlOiBJbnB1dCB9XVxufTtcbmlmIChmYWxzZSkge1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBDaGFydGlzdENvbXBvbmVudC5wcm90b3R5cGUuZGF0YTtcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgQ2hhcnRpc3RDb21wb25lbnQucHJvdG90eXBlLnR5cGU7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIENoYXJ0aXN0Q29tcG9uZW50LnByb3RvdHlwZS5vcHRpb25zO1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBDaGFydGlzdENvbXBvbmVudC5wcm90b3R5cGUucmVzcG9uc2l2ZU9wdGlvbnM7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIENoYXJ0aXN0Q29tcG9uZW50LnByb3RvdHlwZS5ldmVudHM7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIENoYXJ0aXN0Q29tcG9uZW50LnByb3RvdHlwZS5jaGFydDtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIENoYXJ0aXN0Q29tcG9uZW50LnByb3RvdHlwZS5lbGVtZW50O1xufVxuIl19