{"version":3,"sources":["/Users/macpro/kritsadee/SVN/Cybersoft/apex/node_modules/angular-calendar/bundles/angular-calendar.umd.js"],"names":[],"mappings":"AAAA;2MAC2E;yKACE;sIACvC;+CACnsI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8EAoN3E;;;;;;;;;;;;;;;;;;;;;oBAMpC;;;;;;;;;;;;;;;;;;kEAkBwB;;;;;;;;;;;;;;;;;;;;;;;oBAM1B;;;;;;;;;;;;;;;;;;;;;;+EAsBuC;;;;;;;;;;;;;;;;;;;;;;;;oBAMpC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+CAqHI,AAIpC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAM0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oDAwMe,AAIzC;;;;;;;;;;;;;;;;;;;;;;;;oBAC+B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDA4EM,AAIrC;;;;;;;;;;;;;;;;;;;;;;;;oBAC2B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6CA8CO,AAIlC;;;;;;;;;;;;;;;;;;oBACwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mDAiFgB,AAExC;;;;;;qEAC8B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAkChC;;;;;;0BAGyB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uCAoCK,AAI5B;;;;;;;;;;;;;kCAEkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6CA+EgB,AAIlC;;;;;;;;;qFACwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qCAgDE,AAI1B;;;;;;;;;;;;;;;;;;;oBAGgB;;;;;;;;;;;;;;;;;;;;;;;;gEAwBqC;;;;;;;;;;;;;;;;oBAK9B;;;;;;;;;;;;;;;;;;;;oCAoBE,AAEzB;;;;;;qEACe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCAsJS,AAExB;;;;;;+EACc;;;;;;;;;;;;;;;;;;;;;;;;;;;;uCA4Bc,AAI5B;;;;;;;;;;;;;kCAEkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kDAuHqB,AAEvC;;;;;;;;;;yDAE6B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kDAkGU,AAEvC;;;;;;qEAC6B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCA4CL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAmCF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iDA8TgB,AAKtC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAG4B;;;;;;;;;;;;;;;;;;;;;;;;sFAwB+C;;;;;;;;;;;;;;;;;;;;;;;;oBAMzC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yEAuD4B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAkBlC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6EA0DsC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAOlC;;;;;;SAMlC;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAkBugDAwuBgB,AAKrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAG2B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2EAkCqC;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAM/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6EA2DiC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAMlC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qFA8B0C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAMpC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iEA+DgB,AAKtD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAC4C;;;;;;SAM9C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDA0BsB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2EAuL4C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAMtC;;;;;;SAM5B;;;;;;;;;;;;gDAOqB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BAoCD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAgBF","file":"angular-calendar.umd.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('positioning'), require('rxjs'), require('rxjs/operators'), require('calendar-utils'), require('angular-draggable-droppable'), require('@angular/animations'), require('angular-resizable-element')) :\n    typeof define === 'function' && define.amd ? define('angular-calendar', ['exports', '@angular/core', '@angular/common', 'positioning', 'rxjs', 'rxjs/operators', 'calendar-utils', 'angular-draggable-droppable', '@angular/animations', 'angular-resizable-element'], factory) :\n    (global = global || self, factory(global['angular-calendar'] = {}, global.ng.core, global.ng.common, global.positioning, global.rxjs, global.rxjs.operators, global.calendarUtils, global['angular-draggable-droppable'], global.ng.animations, global['angular-resizable-element']));\n}(this, (function (exports, core, common, positioning, rxjs, operators, calendarUtils, angularDraggableDroppable, animations, angularResizableElement) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __rest(s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    }\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\r\n\r\n    function __exportStar(m, exports) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    }\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\r\n\r\n    function __spreadArrays() {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    function __await(v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    }\r\n\r\n    function __asyncGenerator(thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    }\r\n\r\n    function __asyncDelegator(o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    }\r\n\r\n    function __asyncValues(o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    }\r\n\r\n    function __makeTemplateObject(cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    function __importStar(mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result.default = mod;\r\n        return result;\r\n    }\r\n\r\n    function __importDefault(mod) {\r\n        return (mod && mod.__esModule) ? mod : { default: mod };\r\n    }\n\n    var CalendarEventActionsComponent = /** @class */ (function () {\n        function CalendarEventActionsComponent() {\n            this.trackByActionId = function (index, action) {\n                return action.id ? action.id : action;\n            };\n        }\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CalendarEventActionsComponent.prototype, \"event\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", core.TemplateRef)\n        ], CalendarEventActionsComponent.prototype, \"customTemplate\", void 0);\n        CalendarEventActionsComponent = __decorate([\n            core.Component({\n                selector: 'mwl-calendar-event-actions',\n                template: \"\\n    <ng-template\\n      #defaultTemplate\\n      let-event=\\\"event\\\"\\n      let-trackByActionId=\\\"trackByActionId\\\"\\n    >\\n      <span *ngIf=\\\"event.actions\\\" class=\\\"cal-event-actions\\\">\\n        <a\\n          class=\\\"cal-event-action\\\"\\n          href=\\\"javascript:;\\\"\\n          *ngFor=\\\"let action of event.actions; trackBy: trackByActionId\\\"\\n          (mwlClick)=\\\"action.onClick({ event: event, sourceEvent: $event })\\\"\\n          (mwlKeydownEnter)=\\\"\\n            action.onClick({ event: event, sourceEvent: $event })\\n          \\\"\\n          [ngClass]=\\\"action.cssClass\\\"\\n          [innerHtml]=\\\"action.label\\\"\\n          tabindex=\\\"0\\\"\\n          role=\\\"button\\\"\\n          [attr.aria-label]=\\\"\\n            { action: action } | calendarA11y: 'actionButtonLabel'\\n          \\\"\\n        >\\n        </a>\\n      </span>\\n    </ng-template>\\n    <ng-template\\n      [ngTemplateOutlet]=\\\"customTemplate || defaultTemplate\\\"\\n      [ngTemplateOutletContext]=\\\"{\\n        event: event,\\n        trackByActionId: trackByActionId\\n      }\\\"\\n    >\\n    </ng-template>\\n  \"\n            })\n        ], CalendarEventActionsComponent);\n        return CalendarEventActionsComponent;\n    }());\n\n    var CalendarEventTitleComponent = /** @class */ (function () {\n        function CalendarEventTitleComponent() {\n        }\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CalendarEventTitleComponent.prototype, \"event\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", core.TemplateRef)\n        ], CalendarEventTitleComponent.prototype, \"customTemplate\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", String)\n        ], CalendarEventTitleComponent.prototype, \"view\", void 0);\n        CalendarEventTitleComponent = __decorate([\n            core.Component({\n                selector: 'mwl-calendar-event-title',\n                template: \"\\n    <ng-template #defaultTemplate let-event=\\\"event\\\" let-view=\\\"view\\\">\\n      <span\\n        class=\\\"cal-event-title\\\"\\n        [innerHTML]=\\\"event.title | calendarEventTitle: view:event\\\"\\n        [attr.aria-hidden]=\\\"{} | calendarA11y: 'hideEventTitle'\\\"\\n      >\\n      </span>\\n    </ng-template>\\n    <ng-template\\n      [ngTemplateOutlet]=\\\"customTemplate || defaultTemplate\\\"\\n      [ngTemplateOutletContext]=\\\"{\\n        event: event,\\n        view: view\\n      }\\\"\\n    >\\n    </ng-template>\\n  \"\n            })\n        ], CalendarEventTitleComponent);\n        return CalendarEventTitleComponent;\n    }());\n\n    var CalendarTooltipWindowComponent = /** @class */ (function () {\n        function CalendarTooltipWindowComponent() {\n        }\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", String)\n        ], CalendarTooltipWindowComponent.prototype, \"contents\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", String)\n        ], CalendarTooltipWindowComponent.prototype, \"placement\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CalendarTooltipWindowComponent.prototype, \"event\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", core.TemplateRef)\n        ], CalendarTooltipWindowComponent.prototype, \"customTemplate\", void 0);\n        CalendarTooltipWindowComponent = __decorate([\n            core.Component({\n                selector: 'mwl-calendar-tooltip-window',\n                template: \"\\n    <ng-template\\n      #defaultTemplate\\n      let-contents=\\\"contents\\\"\\n      let-placement=\\\"placement\\\"\\n      let-event=\\\"event\\\"\\n    >\\n      <div class=\\\"cal-tooltip\\\" [ngClass]=\\\"'cal-tooltip-' + placement\\\">\\n        <div class=\\\"cal-tooltip-arrow\\\"></div>\\n        <div class=\\\"cal-tooltip-inner\\\" [innerHtml]=\\\"contents\\\"></div>\\n      </div>\\n    </ng-template>\\n    <ng-template\\n      [ngTemplateOutlet]=\\\"customTemplate || defaultTemplate\\\"\\n      [ngTemplateOutletContext]=\\\"{\\n        contents: contents,\\n        placement: placement,\\n        event: event\\n      }\\\"\\n    >\\n    </ng-template>\\n  \"\n            })\n        ], CalendarTooltipWindowComponent);\n        return CalendarTooltipWindowComponent;\n    }());\n    var CalendarTooltipDirective = /** @class */ (function () {\n        function CalendarTooltipDirective(elementRef, injector, renderer, componentFactoryResolver, viewContainerRef, document //tslint:disable-line\n        ) {\n            this.elementRef = elementRef;\n            this.injector = injector;\n            this.renderer = renderer;\n            this.viewContainerRef = viewContainerRef;\n            this.document = document;\n            this.placement = 'auto'; // tslint:disable-line no-input-rename\n            this.delay = null; // tslint:disable-line no-input-rename\n            this.cancelTooltipDelay$ = new rxjs.Subject();\n            this.tooltipFactory = componentFactoryResolver.resolveComponentFactory(CalendarTooltipWindowComponent);\n        }\n        CalendarTooltipDirective.prototype.ngOnChanges = function (changes) {\n            if (this.tooltipRef &&\n                (changes.contents || changes.customTemplate || changes.event)) {\n                this.tooltipRef.instance.contents = this.contents;\n                this.tooltipRef.instance.customTemplate = this.customTemplate;\n                this.tooltipRef.instance.event = this.event;\n                this.tooltipRef.changeDetectorRef.markForCheck();\n            }\n        };\n        CalendarTooltipDirective.prototype.ngOnDestroy = function () {\n            this.hide();\n        };\n        CalendarTooltipDirective.prototype.onMouseOver = function () {\n            var _this = this;\n            var delay$ = this.delay === null ? rxjs.of('now') : rxjs.timer(this.delay);\n            delay$.pipe(operators.takeUntil(this.cancelTooltipDelay$)).subscribe(function () {\n                _this.show();\n            });\n        };\n        CalendarTooltipDirective.prototype.onMouseOut = function () {\n            this.hide();\n        };\n        CalendarTooltipDirective.prototype.show = function () {\n            var _this = this;\n            if (!this.tooltipRef && this.contents) {\n                this.tooltipRef = this.viewContainerRef.createComponent(this.tooltipFactory, 0, this.injector, []);\n                this.tooltipRef.instance.contents = this.contents;\n                this.tooltipRef.instance.customTemplate = this.customTemplate;\n                this.tooltipRef.instance.event = this.event;\n                if (this.appendToBody) {\n                    this.document.body.appendChild(this.tooltipRef.location.nativeElement);\n                }\n                requestAnimationFrame(function () {\n                    _this.positionTooltip();\n                });\n            }\n        };\n        CalendarTooltipDirective.prototype.hide = function () {\n            if (this.tooltipRef) {\n                this.viewContainerRef.remove(this.viewContainerRef.indexOf(this.tooltipRef.hostView));\n                this.tooltipRef = null;\n            }\n            this.cancelTooltipDelay$.next();\n        };\n        CalendarTooltipDirective.prototype.positionTooltip = function (previousPositions) {\n            if (previousPositions === void 0) { previousPositions = []; }\n            if (this.tooltipRef) {\n                this.tooltipRef.changeDetectorRef.detectChanges();\n                this.tooltipRef.instance.placement = positioning.positionElements(this.elementRef.nativeElement, this.tooltipRef.location.nativeElement.children[0], this.placement, this.appendToBody);\n                // keep re-positioning the tooltip until the arrow position doesn't make a difference\n                if (previousPositions.indexOf(this.tooltipRef.instance.placement) === -1) {\n                    this.positionTooltip(__spread(previousPositions, [\n                        this.tooltipRef.instance.placement\n                    ]));\n                }\n            }\n        };\n        CalendarTooltipDirective.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: core.Injector },\n            { type: core.Renderer2 },\n            { type: core.ComponentFactoryResolver },\n            { type: core.ViewContainerRef },\n            { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] }\n        ]; };\n        __decorate([\n            core.Input('mwlCalendarTooltip'),\n            __metadata(\"design:type\", String)\n        ], CalendarTooltipDirective.prototype, \"contents\", void 0);\n        __decorate([\n            core.Input('tooltipPlacement'),\n            __metadata(\"design:type\", Object)\n        ], CalendarTooltipDirective.prototype, \"placement\", void 0);\n        __decorate([\n            core.Input('tooltipTemplate'),\n            __metadata(\"design:type\", core.TemplateRef)\n        ], CalendarTooltipDirective.prototype, \"customTemplate\", void 0);\n        __decorate([\n            core.Input('tooltipEvent'),\n            __metadata(\"design:type\", Object)\n        ], CalendarTooltipDirective.prototype, \"event\", void 0);\n        __decorate([\n            core.Input('tooltipAppendToBody'),\n            __metadata(\"design:type\", Boolean)\n        ], CalendarTooltipDirective.prototype, \"appendToBody\", void 0);\n        __decorate([\n            core.Input('tooltipDelay'),\n            __metadata(\"design:type\", Number)\n        ], CalendarTooltipDirective.prototype, \"delay\", void 0);\n        __decorate([\n            core.HostListener('mouseenter'),\n            __metadata(\"design:type\", Function),\n            __metadata(\"design:paramtypes\", []),\n            __metadata(\"design:returntype\", void 0)\n        ], CalendarTooltipDirective.prototype, \"onMouseOver\", null);\n        __decorate([\n            core.HostListener('mouseleave'),\n            __metadata(\"design:type\", Function),\n            __metadata(\"design:paramtypes\", []),\n            __metadata(\"design:returntype\", void 0)\n        ], CalendarTooltipDirective.prototype, \"onMouseOut\", null);\n        CalendarTooltipDirective = __decorate([\n            core.Directive({\n                selector: '[mwlCalendarTooltip]'\n            }),\n            __param(5, core.Inject(common.DOCUMENT)),\n            __metadata(\"design:paramtypes\", [core.ElementRef,\n                core.Injector,\n                core.Renderer2,\n                core.ComponentFactoryResolver,\n                core.ViewContainerRef, Object])\n        ], CalendarTooltipDirective);\n        return CalendarTooltipDirective;\n    }());\n\n    var DateAdapter = /** @class */ (function () {\n        function DateAdapter() {\n        }\n        return DateAdapter;\n    }());\n\n\n    (function (CalendarView) {\n        CalendarView[\"Month\"] = \"month\";\n        CalendarView[\"Week\"] = \"week\";\n        CalendarView[\"Day\"] = \"day\";\n    })(exports.CalendarView || (exports.CalendarView = {}));\n\n    var validateEvents = function (events) {\n        var warn = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return console.warn.apply(console, __spread(['angular-calendar'], args));\n        };\n        return calendarUtils.validateEvents(events, warn);\n    };\n    function isInside(outer, inner) {\n        return (Math.floor(outer.left) <= Math.ceil(inner.left) &&\n            Math.floor(inner.left) <= Math.ceil(outer.right) &&\n            Math.floor(outer.left) <= Math.ceil(inner.right) &&\n            Math.floor(inner.right) <= Math.ceil(outer.right) &&\n            Math.floor(outer.top) <= Math.ceil(inner.top) &&\n            Math.floor(inner.top) <= Math.ceil(outer.bottom) &&\n            Math.floor(outer.top) <= Math.ceil(inner.bottom) &&\n            Math.floor(inner.bottom) <= Math.ceil(outer.bottom));\n    }\n    function roundToNearest(amount, precision) {\n        return Math.round(amount / precision) * precision;\n    }\n    var trackByEventId = function (index, event) {\n        return event.id ? event.id : event;\n    };\n    var trackByWeekDayHeaderDate = function (index, day) {\n        return day.date.toISOString();\n    };\n    var trackByHourSegment = function (index, segment) { return segment.date.toISOString(); };\n    var trackByHour = function (index, hour) {\n        return hour.segments[0].date.toISOString();\n    };\n    var trackByWeekAllDayEvent = function (index, weekEvent) { return (weekEvent.event.id ? weekEvent.event.id : weekEvent.event); };\n    var trackByWeekTimeEvent = function (index, weekEvent) { return (weekEvent.event.id ? weekEvent.event.id : weekEvent.event); };\n    var MINUTES_IN_HOUR = 60;\n    function getPixelAmountInMinutes(hourSegments, hourSegmentHeight) {\n        return MINUTES_IN_HOUR / (hourSegments * hourSegmentHeight);\n    }\n    function getMinutesMoved(movedY, hourSegments, hourSegmentHeight, eventSnapSize) {\n        var draggedInPixelsSnapSize = roundToNearest(movedY, eventSnapSize || hourSegmentHeight);\n        var pixelAmountInMinutes = getPixelAmountInMinutes(hourSegments, hourSegmentHeight);\n        return draggedInPixelsSnapSize * pixelAmountInMinutes;\n    }\n    function getMinimumEventHeightInMinutes(hourSegments, hourSegmentHeight) {\n        return (getPixelAmountInMinutes(hourSegments, hourSegmentHeight) * hourSegmentHeight);\n    }\n    function getDefaultEventEnd(dateAdapter, event, minimumMinutes) {\n        if (event.end) {\n            return event.end;\n        }\n        else {\n            return dateAdapter.addMinutes(event.start, minimumMinutes);\n        }\n    }\n    function addDaysWithExclusions(dateAdapter, date, days, excluded) {\n        var daysCounter = 0;\n        var daysToAdd = 0;\n        var changeDays = days < 0 ? dateAdapter.subDays : dateAdapter.addDays;\n        var result = date;\n        while (daysToAdd <= Math.abs(days)) {\n            result = changeDays(date, daysCounter);\n            var day = dateAdapter.getDay(result);\n            if (excluded.indexOf(day) === -1) {\n                daysToAdd++;\n            }\n            daysCounter++;\n        }\n        return result;\n    }\n    function isDraggedWithinPeriod(newStart, newEnd, period) {\n        var end = newEnd || newStart;\n        return ((period.start <= newStart && newStart <= period.end) ||\n            (period.start <= end && end <= period.end));\n    }\n    function shouldFireDroppedEvent(dropEvent, date, allDay, calendarId) {\n        return (dropEvent.dropData &&\n            dropEvent.dropData.event &&\n            (dropEvent.dropData.calendarId !== calendarId ||\n                (dropEvent.dropData.event.allDay && !allDay) ||\n                (!dropEvent.dropData.event.allDay && allDay)));\n    }\n    function getWeekViewPeriod(dateAdapter, viewDate, weekStartsOn, excluded, daysInWeek) {\n        if (excluded === void 0) { excluded = []; }\n        var viewStart = daysInWeek\n            ? dateAdapter.startOfDay(viewDate)\n            : dateAdapter.startOfWeek(viewDate, { weekStartsOn: weekStartsOn });\n        var endOfWeek = dateAdapter.endOfWeek(viewDate, { weekStartsOn: weekStartsOn });\n        while (excluded.indexOf(dateAdapter.getDay(viewStart)) > -1 &&\n            viewStart < endOfWeek) {\n            viewStart = dateAdapter.addDays(viewStart, 1);\n        }\n        if (daysInWeek) {\n            var viewEnd = dateAdapter.endOfDay(addDaysWithExclusions(dateAdapter, viewStart, daysInWeek - 1, excluded));\n            return { viewStart: viewStart, viewEnd: viewEnd };\n        }\n        else {\n            var viewEnd = endOfWeek;\n            while (excluded.indexOf(dateAdapter.getDay(viewEnd)) > -1 &&\n                viewEnd > viewStart) {\n                viewEnd = dateAdapter.subDays(viewEnd, 1);\n            }\n            return { viewStart: viewStart, viewEnd: viewEnd };\n        }\n    }\n    function isWithinThreshold(_a) {\n        var x = _a.x, y = _a.y;\n        var DRAG_THRESHOLD = 1;\n        return Math.abs(x) > DRAG_THRESHOLD || Math.abs(y) > DRAG_THRESHOLD;\n    }\n\n    /**\n     * Change the view date to the previous view. For example:\n     *\n     * ```typescript\n     * <button\n     *  mwlCalendarPreviousView\n     *  [(viewDate)]=\"viewDate\"\n     *  [view]=\"view\">\n     *  Previous\n     * </button>\n     * ```\n     */\n    var CalendarPreviousViewDirective = /** @class */ (function () {\n        function CalendarPreviousViewDirective(dateAdapter) {\n            this.dateAdapter = dateAdapter;\n            /**\n             * Days to skip when going back by 1 day\n             */\n            this.excludeDays = [];\n            /**\n             * Called when the view date is changed\n             */\n            this.viewDateChange = new core.EventEmitter();\n        }\n        /**\n         * @hidden\n         */\n        CalendarPreviousViewDirective.prototype.onClick = function () {\n            var subFn = {\n                day: this.dateAdapter.subDays,\n                week: this.dateAdapter.subWeeks,\n                month: this.dateAdapter.subMonths\n            }[this.view];\n            if (this.view === exports.CalendarView.Day) {\n                this.viewDateChange.emit(addDaysWithExclusions(this.dateAdapter, this.viewDate, -1, this.excludeDays));\n            }\n            else if (this.view === exports.CalendarView.Week && this.daysInWeek) {\n                this.viewDateChange.emit(addDaysWithExclusions(this.dateAdapter, this.viewDate, -this.daysInWeek, this.excludeDays));\n            }\n            else {\n                this.viewDateChange.emit(subFn(this.viewDate, 1));\n            }\n        };\n        CalendarPreviousViewDirective.ctorParameters = function () { return [\n            { type: DateAdapter }\n        ]; };\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", String)\n        ], CalendarPreviousViewDirective.prototype, \"view\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Date)\n        ], CalendarPreviousViewDirective.prototype, \"viewDate\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Array)\n        ], CalendarPreviousViewDirective.prototype, \"excludeDays\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], CalendarPreviousViewDirective.prototype, \"daysInWeek\", void 0);\n        __decorate([\n            core.Output(),\n            __metadata(\"design:type\", core.EventEmitter)\n        ], CalendarPreviousViewDirective.prototype, \"viewDateChange\", void 0);\n        __decorate([\n            core.HostListener('click'),\n            __metadata(\"design:type\", Function),\n            __metadata(\"design:paramtypes\", []),\n            __metadata(\"design:returntype\", void 0)\n        ], CalendarPreviousViewDirective.prototype, \"onClick\", null);\n        CalendarPreviousViewDirective = __decorate([\n            core.Directive({\n                selector: '[mwlCalendarPreviousView]'\n            }),\n            __metadata(\"design:paramtypes\", [DateAdapter])\n        ], CalendarPreviousViewDirective);\n        return CalendarPreviousViewDirective;\n    }());\n\n    /**\n     * Change the view date to the next view. For example:\n     *\n     * ```typescript\n     * <button\n     *  mwlCalendarNextView\n     *  [(viewDate)]=\"viewDate\"\n     *  [view]=\"view\">\n     *  Next\n     * </button>\n     * ```\n     */\n    var CalendarNextViewDirective = /** @class */ (function () {\n        function CalendarNextViewDirective(dateAdapter) {\n            this.dateAdapter = dateAdapter;\n            /**\n             * Days to skip when going forward by 1 day\n             */\n            this.excludeDays = [];\n            /**\n             * Called when the view date is changed\n             */\n            this.viewDateChange = new core.EventEmitter();\n        }\n        /**\n         * @hidden\n         */\n        CalendarNextViewDirective.prototype.onClick = function () {\n            var addFn = {\n                day: this.dateAdapter.addDays,\n                week: this.dateAdapter.addWeeks,\n                month: this.dateAdapter.addMonths\n            }[this.view];\n            if (this.view === exports.CalendarView.Day) {\n                this.viewDateChange.emit(addDaysWithExclusions(this.dateAdapter, this.viewDate, 1, this.excludeDays));\n            }\n            else if (this.view === exports.CalendarView.Week && this.daysInWeek) {\n                this.viewDateChange.emit(addDaysWithExclusions(this.dateAdapter, this.viewDate, this.daysInWeek, this.excludeDays));\n            }\n            else {\n                this.viewDateChange.emit(addFn(this.viewDate, 1));\n            }\n        };\n        CalendarNextViewDirective.ctorParameters = function () { return [\n            { type: DateAdapter }\n        ]; };\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", String)\n        ], CalendarNextViewDirective.prototype, \"view\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Date)\n        ], CalendarNextViewDirective.prototype, \"viewDate\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Array)\n        ], CalendarNextViewDirective.prototype, \"excludeDays\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], CalendarNextViewDirective.prototype, \"daysInWeek\", void 0);\n        __decorate([\n            core.Output(),\n            __metadata(\"design:type\", core.EventEmitter)\n        ], CalendarNextViewDirective.prototype, \"viewDateChange\", void 0);\n        __decorate([\n            core.HostListener('click'),\n            __metadata(\"design:type\", Function),\n            __metadata(\"design:paramtypes\", []),\n            __metadata(\"design:returntype\", void 0)\n        ], CalendarNextViewDirective.prototype, \"onClick\", null);\n        CalendarNextViewDirective = __decorate([\n            core.Directive({\n                selector: '[mwlCalendarNextView]'\n            }),\n            __metadata(\"design:paramtypes\", [DateAdapter])\n        ], CalendarNextViewDirective);\n        return CalendarNextViewDirective;\n    }());\n\n    /**\n     * Change the view date to the current day. For example:\n     *\n     * ```typescript\n     * <button\n     *  mwlCalendarToday\n     *  [(viewDate)]=\"viewDate\">\n     *  Today\n     * </button>\n     * ```\n     */\n    var CalendarTodayDirective = /** @class */ (function () {\n        function CalendarTodayDirective(dateAdapter) {\n            this.dateAdapter = dateAdapter;\n            /**\n             * Called when the view date is changed\n             */\n            this.viewDateChange = new core.EventEmitter();\n        }\n        /**\n         * @hidden\n         */\n        CalendarTodayDirective.prototype.onClick = function () {\n            this.viewDateChange.emit(this.dateAdapter.startOfDay(new Date()));\n        };\n        CalendarTodayDirective.ctorParameters = function () { return [\n            { type: DateAdapter }\n        ]; };\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Date)\n        ], CalendarTodayDirective.prototype, \"viewDate\", void 0);\n        __decorate([\n            core.Output(),\n            __metadata(\"design:type\", core.EventEmitter)\n        ], CalendarTodayDirective.prototype, \"viewDateChange\", void 0);\n        __decorate([\n            core.HostListener('click'),\n            __metadata(\"design:type\", Function),\n            __metadata(\"design:paramtypes\", []),\n            __metadata(\"design:returntype\", void 0)\n        ], CalendarTodayDirective.prototype, \"onClick\", null);\n        CalendarTodayDirective = __decorate([\n            core.Directive({\n                selector: '[mwlCalendarToday]'\n            }),\n            __metadata(\"design:paramtypes\", [DateAdapter])\n        ], CalendarTodayDirective);\n        return CalendarTodayDirective;\n    }());\n\n    /**\n     * This will use the angular date pipe to do all date formatting. It is the default date formatter used by the calendar.\n     */\n    var CalendarAngularDateFormatter = /** @class */ (function () {\n        function CalendarAngularDateFormatter(dateAdapter) {\n            this.dateAdapter = dateAdapter;\n        }\n        /**\n         * The month view header week day labels\n         */\n        CalendarAngularDateFormatter.prototype.monthViewColumnHeader = function (_a) {\n            var date = _a.date, locale = _a.locale;\n            return common.formatDate(date, 'EEEE', locale);\n        };\n        /**\n         * The month view cell day number\n         */\n        CalendarAngularDateFormatter.prototype.monthViewDayNumber = function (_a) {\n            var date = _a.date, locale = _a.locale;\n            return common.formatDate(date, 'd', locale);\n        };\n        /**\n         * The month view title\n         */\n        CalendarAngularDateFormatter.prototype.monthViewTitle = function (_a) {\n            var date = _a.date, locale = _a.locale;\n            return common.formatDate(date, 'LLLL y', locale);\n        };\n        /**\n         * The week view header week day labels\n         */\n        CalendarAngularDateFormatter.prototype.weekViewColumnHeader = function (_a) {\n            var date = _a.date, locale = _a.locale;\n            return common.formatDate(date, 'EEEE', locale);\n        };\n        /**\n         * The week view sub header day and month labels\n         */\n        CalendarAngularDateFormatter.prototype.weekViewColumnSubHeader = function (_a) {\n            var date = _a.date, locale = _a.locale;\n            return common.formatDate(date, 'MMM d', locale);\n        };\n        /**\n         * The week view title\n         */\n        CalendarAngularDateFormatter.prototype.weekViewTitle = function (_a) {\n            var date = _a.date, locale = _a.locale, weekStartsOn = _a.weekStartsOn, excludeDays = _a.excludeDays, daysInWeek = _a.daysInWeek;\n            var _b = getWeekViewPeriod(this.dateAdapter, date, weekStartsOn, excludeDays, daysInWeek), viewStart = _b.viewStart, viewEnd = _b.viewEnd;\n            var format = function (dateToFormat, showYear) {\n                return common.formatDate(dateToFormat, 'MMM d' + (showYear ? ', yyyy' : ''), locale);\n            };\n            return format(viewStart, viewStart.getUTCFullYear() !== viewEnd.getUTCFullYear()) + \" - \" + format(viewEnd, true);\n        };\n        /**\n         * The time formatting down the left hand side of the week view\n         */\n        CalendarAngularDateFormatter.prototype.weekViewHour = function (_a) {\n            var date = _a.date, locale = _a.locale;\n            return common.formatDate(date, 'h a', locale);\n        };\n        /**\n         * The time formatting down the left hand side of the day view\n         */\n        CalendarAngularDateFormatter.prototype.dayViewHour = function (_a) {\n            var date = _a.date, locale = _a.locale;\n            return common.formatDate(date, 'h a', locale);\n        };\n        /**\n         * The day view title\n         */\n        CalendarAngularDateFormatter.prototype.dayViewTitle = function (_a) {\n            var date = _a.date, locale = _a.locale;\n            return common.formatDate(date, 'EEEE, MMMM d, y', locale);\n        };\n        CalendarAngularDateFormatter.ctorParameters = function () { return [\n            { type: DateAdapter }\n        ]; };\n        CalendarAngularDateFormatter = __decorate([\n            core.Injectable(),\n            __metadata(\"design:paramtypes\", [DateAdapter])\n        ], CalendarAngularDateFormatter);\n        return CalendarAngularDateFormatter;\n    }());\n\n    /**\n     * This class is responsible for all formatting of dates. There are 3 implementations available, the `CalendarAngularDateFormatter` (default) which uses the angular date pipe to format dates, the `CalendarNativeDateFormatter` which will use the <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Intl\" target=\"_blank\">Intl</a> API to format dates, or there is the `CalendarMomentDateFormatter` which uses <a href=\"http://momentjs.com/\" target=\"_blank\">moment</a>.\n     *\n     * If you wish, you may override any of the defaults via angulars DI. For example:\n     *\n     * ```typescript\n     * import { CalendarDateFormatter, DateFormatterParams } from 'angular-calendar';\n     * import { formatDate } from '@angular/common';\n     * import { Injectable } from '@angular/core';\n     *\n     * @Injectable()\n     * class CustomDateFormatter extends CalendarDateFormatter {\n     *\n     *   public monthViewColumnHeader({date, locale}: DateFormatterParams): string {\n     *     return formatDate(date, 'EEE', locale); // use short week days\n     *   }\n     *\n     * }\n     *\n     * // in your component that uses the calendar\n     * providers: [{\n     *   provide: CalendarDateFormatter,\n     *   useClass: CustomDateFormatter\n     * }]\n     * ```\n     */\n    var CalendarDateFormatter = /** @class */ (function (_super) {\n        __extends(CalendarDateFormatter, _super);\n        function CalendarDateFormatter() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        CalendarDateFormatter = __decorate([\n            core.Injectable()\n        ], CalendarDateFormatter);\n        return CalendarDateFormatter;\n    }(CalendarAngularDateFormatter));\n\n    /**\n     * This pipe is primarily for rendering the current view title. Example usage:\n     * ```typescript\n     * // where `viewDate` is a `Date` and view is `'month' | 'week' | 'day'`\n     * {{ viewDate | calendarDate:(view + 'ViewTitle'):'en' }}\n     * ```\n     */\n    var CalendarDatePipe = /** @class */ (function () {\n        function CalendarDatePipe(dateFormatter, locale) {\n            this.dateFormatter = dateFormatter;\n            this.locale = locale;\n        }\n        CalendarDatePipe.prototype.transform = function (date, method, locale, weekStartsOn, excludeDays, daysInWeek) {\n            if (locale === void 0) { locale = this.locale; }\n            if (weekStartsOn === void 0) { weekStartsOn = 0; }\n            if (excludeDays === void 0) { excludeDays = []; }\n            if (typeof this.dateFormatter[method] === 'undefined') {\n                var allowedMethods = Object.getOwnPropertyNames(Object.getPrototypeOf(CalendarDateFormatter.prototype)).filter(function (iMethod) { return iMethod !== 'constructor'; });\n                throw new Error(method + \" is not a valid date formatter. Can only be one of \" + allowedMethods.join(', '));\n            }\n            return this.dateFormatter[method]({\n                date: date,\n                locale: locale,\n                weekStartsOn: weekStartsOn,\n                excludeDays: excludeDays,\n                daysInWeek: daysInWeek\n            });\n        };\n        CalendarDatePipe.ctorParameters = function () { return [\n            { type: CalendarDateFormatter },\n            { type: String, decorators: [{ type: core.Inject, args: [core.LOCALE_ID,] }] }\n        ]; };\n        CalendarDatePipe = __decorate([\n            core.Pipe({\n                name: 'calendarDate'\n            }),\n            __param(1, core.Inject(core.LOCALE_ID)),\n            __metadata(\"design:paramtypes\", [CalendarDateFormatter, String])\n        ], CalendarDatePipe);\n        return CalendarDatePipe;\n    }());\n\n    /**\n     * This class is responsible for displaying all event titles within the calendar. You may override any of its methods via angulars DI to suit your requirements. For example:\n     *\n     * ```typescript\n     * import { Injectable } from '@angular/core';\n     * import { CalendarEventTitleFormatter, CalendarEvent } from 'angular-calendar';\n     *\n     * @Injectable()\n     * class CustomEventTitleFormatter extends CalendarEventTitleFormatter {\n     *\n     *   month(event: CalendarEvent): string {\n     *     return `Custom prefix: ${event.title}`;\n     *   }\n     *\n     * }\n     *\n     * // in your component\n     * providers: [{\n     *  provide: CalendarEventTitleFormatter,\n     *  useClass: CustomEventTitleFormatter\n     * }]\n     * ```\n     */\n    var CalendarEventTitleFormatter = /** @class */ (function () {\n        function CalendarEventTitleFormatter() {\n        }\n        /**\n         * The month view event title.\n         */\n        CalendarEventTitleFormatter.prototype.month = function (event, title) {\n            return event.title;\n        };\n        /**\n         * The month view event tooltip. Return a falsey value from this to disable the tooltip.\n         */\n        CalendarEventTitleFormatter.prototype.monthTooltip = function (event, title) {\n            return event.title;\n        };\n        /**\n         * The week view event title.\n         */\n        CalendarEventTitleFormatter.prototype.week = function (event, title) {\n            return event.title;\n        };\n        /**\n         * The week view event tooltip. Return a falsey value from this to disable the tooltip.\n         */\n        CalendarEventTitleFormatter.prototype.weekTooltip = function (event, title) {\n            return event.title;\n        };\n        /**\n         * The day view event title.\n         */\n        CalendarEventTitleFormatter.prototype.day = function (event, title) {\n            return event.title;\n        };\n        /**\n         * The day view event tooltip. Return a falsey value from this to disable the tooltip.\n         */\n        CalendarEventTitleFormatter.prototype.dayTooltip = function (event, title) {\n            return event.title;\n        };\n        return CalendarEventTitleFormatter;\n    }());\n\n    var CalendarEventTitlePipe = /** @class */ (function () {\n        function CalendarEventTitlePipe(calendarEventTitle) {\n            this.calendarEventTitle = calendarEventTitle;\n        }\n        CalendarEventTitlePipe.prototype.transform = function (title, titleType, event) {\n            return this.calendarEventTitle[titleType](event, title);\n        };\n        CalendarEventTitlePipe.ctorParameters = function () { return [\n            { type: CalendarEventTitleFormatter }\n        ]; };\n        CalendarEventTitlePipe = __decorate([\n            core.Pipe({\n                name: 'calendarEventTitle'\n            }),\n            __metadata(\"design:paramtypes\", [CalendarEventTitleFormatter])\n        ], CalendarEventTitlePipe);\n        return CalendarEventTitlePipe;\n    }());\n\n    var ClickDirective = /** @class */ (function () {\n        function ClickDirective(renderer, elm, document) {\n            this.renderer = renderer;\n            this.elm = elm;\n            this.document = document;\n            this.clickListenerDisabled = false;\n            this.click = new core.EventEmitter(); // tslint:disable-line\n            this.destroy$ = new rxjs.Subject();\n        }\n        ClickDirective.prototype.ngOnInit = function () {\n            var _this = this;\n            if (!this.clickListenerDisabled) {\n                this.listen()\n                    .pipe(operators.takeUntil(this.destroy$))\n                    .subscribe(function (event) {\n                    event.stopPropagation();\n                    _this.click.emit(event);\n                });\n            }\n        };\n        ClickDirective.prototype.ngOnDestroy = function () {\n            this.destroy$.next();\n        };\n        ClickDirective.prototype.listen = function () {\n            var _this = this;\n            return new rxjs.Observable(function (observer) {\n                return _this.renderer.listen(_this.elm.nativeElement, 'click', function (event) {\n                    observer.next(event);\n                });\n            });\n        };\n        ClickDirective.ctorParameters = function () { return [\n            { type: core.Renderer2 },\n            { type: core.ElementRef },\n            { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] }\n        ]; };\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], ClickDirective.prototype, \"clickListenerDisabled\", void 0);\n        __decorate([\n            core.Output('mwlClick'),\n            __metadata(\"design:type\", Object)\n        ], ClickDirective.prototype, \"click\", void 0);\n        ClickDirective = __decorate([\n            core.Directive({\n                selector: '[mwlClick]'\n            }),\n            __param(2, core.Inject(common.DOCUMENT)),\n            __metadata(\"design:paramtypes\", [core.Renderer2,\n                core.ElementRef, Object])\n        ], ClickDirective);\n        return ClickDirective;\n    }());\n\n    var KeydownEnterDirective = /** @class */ (function () {\n        function KeydownEnterDirective() {\n            this.keydown = new core.EventEmitter(); // tslint:disable-line\n        }\n        KeydownEnterDirective.prototype.onKeyPress = function (event) {\n            if (event.keyCode === 13 || event.which === 13 || event.key === 'Enter') {\n                event.preventDefault();\n                event.stopPropagation();\n                this.keydown.emit(event);\n            }\n        };\n        __decorate([\n            core.Output('mwlKeydownEnter'),\n            __metadata(\"design:type\", Object)\n        ], KeydownEnterDirective.prototype, \"keydown\", void 0);\n        __decorate([\n            core.HostListener('keydown', ['$event']),\n            __metadata(\"design:type\", Function),\n            __metadata(\"design:paramtypes\", [KeyboardEvent]),\n            __metadata(\"design:returntype\", void 0)\n        ], KeydownEnterDirective.prototype, \"onKeyPress\", null);\n        KeydownEnterDirective = __decorate([\n            core.Directive({\n                selector: '[mwlKeydownEnter]'\n            })\n        ], KeydownEnterDirective);\n        return KeydownEnterDirective;\n    }());\n\n    var CalendarUtils = /** @class */ (function () {\n        function CalendarUtils(dateAdapter) {\n            this.dateAdapter = dateAdapter;\n        }\n        CalendarUtils.prototype.getMonthView = function (args) {\n            return calendarUtils.getMonthView(this.dateAdapter, args);\n        };\n        CalendarUtils.prototype.getWeekViewHeader = function (args) {\n            return calendarUtils.getWeekViewHeader(this.dateAdapter, args);\n        };\n        CalendarUtils.prototype.getWeekView = function (args) {\n            return calendarUtils.getWeekView(this.dateAdapter, args);\n        };\n        CalendarUtils.ctorParameters = function () { return [\n            { type: DateAdapter }\n        ]; };\n        CalendarUtils = __decorate([\n            core.Injectable(),\n            __metadata(\"design:paramtypes\", [DateAdapter])\n        ], CalendarUtils);\n        return CalendarUtils;\n    }());\n\n    /**\n     * This class is responsible for adding accessibility to the calendar.\n     * You may override any of its methods via angulars DI to suit your requirements.\n     * For example:\n     *\n     * ```typescript\n     * import { A11yParams, CalendarA11y } from 'angular-calendar';\n     * import { formatDate, I18nPluralPipe } from '@angular/common';\n     * import { Injectable } from '@angular/core';\n     *\n     * // adding your own a11y params\n     * export interface CustomA11yParams extends A11yParams {\n     *   isDrSuess?: boolean;\n     * }\n     *\n     * @Injectable()\n     * export class CustomCalendarA11y extends CalendarA11y {\n     *   constructor(protected i18nPlural: I18nPluralPipe) {\n     *     super(i18nPlural);\n     *   }\n     *\n     *   // overriding a function\n     *   public openDayEventsLandmark({ date, locale, isDrSuess }: CustomA11yParams): string {\n     *     if (isDrSuess) {\n     *       return `\n     *         ${formatDate(date, 'EEEE MMMM d', locale)}\n     *          Today you are you! That is truer than true! There is no one alive\n     *          who is you-er than you!\n     *       `;\n     *     }\n     *   }\n     * }\n     *\n     * // in your component that uses the calendar\n     * providers: [{\n     *  provide: CalendarA11y,\n     *  useClass: CustomCalendarA11y\n     * }]\n     * ```\n     */\n    var CalendarA11y = /** @class */ (function () {\n        function CalendarA11y(i18nPlural) {\n            this.i18nPlural = i18nPlural;\n        }\n        /**\n         * Aria label for the badges/date of a cell\n         * @example: `Saturday October 19 1 event click to expand`\n         */\n        CalendarA11y.prototype.monthCell = function (_a) {\n            var day = _a.day, locale = _a.locale;\n            if (day.badgeTotal > 0) {\n                return \"\\n        \" + common.formatDate(day.date, 'EEEE MMMM d', locale) + \",\\n        \" + this.i18nPlural.transform(day.badgeTotal, {\n                    '=0': 'No events',\n                    '=1': 'One event',\n                    other: '# events'\n                }) + \",\\n         click to expand\\n      \";\n            }\n            else {\n                return \"\" + common.formatDate(day.date, 'EEEE MMMM d', locale);\n            }\n        };\n        /**\n         * Aria label for the open day events start landmark\n         * @example: `Saturday October 19 expanded view`\n         */\n        CalendarA11y.prototype.openDayEventsLandmark = function (_a) {\n            var date = _a.date, locale = _a.locale;\n            return \"\\n      Beginning of expanded view for \" + common.formatDate(date, 'EEEE MMMM dd', locale) + \"\\n    \";\n        };\n        /**\n         * Aria label for alert that a day in the month view was expanded\n         * @example: `Saturday October 19 expanded`\n         */\n        CalendarA11y.prototype.openDayEventsAlert = function (_a) {\n            var date = _a.date, locale = _a.locale;\n            return common.formatDate(date, 'EEEE MMMM dd', locale) + \" expanded\";\n        };\n        /**\n         * Descriptive aria label for an event\n         * @example: `Saturday October 19th, Scott's Pizza Party, from 11:00am to 5:00pm`\n         */\n        CalendarA11y.prototype.eventDescription = function (_a) {\n            var event = _a.event, locale = _a.locale;\n            if (event.allDay === true) {\n                return this.allDayEventDescription({ event: event, locale: locale });\n            }\n            var aria = \"\\n      \" + common.formatDate(event.start, 'EEEE MMMM dd', locale) + \",\\n      \" + event.title + \", from \" + common.formatDate(event.start, 'hh:mm a', locale) + \"\\n    \";\n            if (event.end) {\n                return aria + (\" to \" + common.formatDate(event.end, 'hh:mm a', locale));\n            }\n            return aria;\n        };\n        /**\n         * Descriptive aria label for an all day event\n         * @example:\n         * `Scott's Party, event spans multiple days: start time October 19 5:00pm, no stop time`\n         */\n        CalendarA11y.prototype.allDayEventDescription = function (_a) {\n            var event = _a.event, locale = _a.locale;\n            var aria = \"\\n      \" + event.title + \", event spans multiple days:\\n      start time \" + common.formatDate(event.start, 'MMMM dd hh:mm a', locale) + \"\\n    \";\n            if (event.end) {\n                return (aria + (\", stop time \" + common.formatDate(event.end, 'MMMM d hh:mm a', locale)));\n            }\n            return aria + \", no stop time\";\n        };\n        /**\n         * Aria label for the calendar event actions icons\n         * @returns 'Edit' for fa-pencil icons, and 'Delete' for fa-times icons\n         */\n        CalendarA11y.prototype.actionButtonLabel = function (_a) {\n            var action = _a.action;\n            return action.a11yLabel;\n        };\n        /**\n         * @returns {number} Tab index to be given to month cells\n         */\n        CalendarA11y.prototype.monthCellTabIndex = function () {\n            return 0;\n        };\n        /**\n         * @returns true if the events inside the month cell should be aria-hidden\n         */\n        CalendarA11y.prototype.hideMonthCellEvents = function () {\n            return true;\n        };\n        /**\n         * @returns true if event titles should be aria-hidden (global)\n         */\n        CalendarA11y.prototype.hideEventTitle = function () {\n            return true;\n        };\n        /**\n         * @returns true if hour segments in the week view should be aria-hidden\n         */\n        CalendarA11y.prototype.hideWeekHourSegment = function () {\n            return true;\n        };\n        /**\n         * @returns true if hour segments in the day view should be aria-hidden\n         */\n        CalendarA11y.prototype.hideDayHourSegment = function () {\n            return true;\n        };\n        CalendarA11y.ctorParameters = function () { return [\n            { type: common.I18nPluralPipe }\n        ]; };\n        CalendarA11y = __decorate([\n            core.Injectable(),\n            __metadata(\"design:paramtypes\", [common.I18nPluralPipe])\n        ], CalendarA11y);\n        return CalendarA11y;\n    }());\n\n    /**\n     * This pipe is primarily for rendering aria labels. Example usage:\n     * ```typescript\n     * // where `myEvent` is a `CalendarEvent` and myLocale is a locale identifier\n     * {{ { event: myEvent, locale: myLocale } | calendarA11y: 'eventDescription' }}\n     * ```\n     */\n    var CalendarA11yPipe = /** @class */ (function () {\n        function CalendarA11yPipe(calendarA11y, locale) {\n            this.calendarA11y = calendarA11y;\n            this.locale = locale;\n        }\n        CalendarA11yPipe.prototype.transform = function (a11yParams, method) {\n            a11yParams.locale = a11yParams.locale || this.locale;\n            if (typeof this.calendarA11y[method] === 'undefined') {\n                var allowedMethods = Object.getOwnPropertyNames(Object.getPrototypeOf(CalendarA11y.prototype)).filter(function (iMethod) { return iMethod !== 'constructor'; });\n                throw new Error(method + \" is not a valid a11y method. Can only be one of \" + allowedMethods.join(', '));\n            }\n            return this.calendarA11y[method](a11yParams);\n        };\n        CalendarA11yPipe.ctorParameters = function () { return [\n            { type: CalendarA11y },\n            { type: String, decorators: [{ type: core.Inject, args: [core.LOCALE_ID,] }] }\n        ]; };\n        CalendarA11yPipe = __decorate([\n            core.Pipe({\n                name: 'calendarA11y'\n            }),\n            __param(1, core.Inject(core.LOCALE_ID)),\n            __metadata(\"design:paramtypes\", [CalendarA11y, String])\n        ], CalendarA11yPipe);\n        return CalendarA11yPipe;\n    }());\n\n    var MOMENT = new core.InjectionToken('Moment');\n    /**\n     * This will use <a href=\"http://momentjs.com/\" target=\"_blank\">moment</a> to do all date formatting. To use this class:\n     *\n     * ```typescript\n     * import { CalendarDateFormatter, CalendarMomentDateFormatter, MOMENT } from 'angular-calendar';\n     * import moment from 'moment';\n     *\n     * // in your component\n     * provide: [{\n     *   provide: MOMENT, useValue: moment\n     * }, {\n     *   provide: CalendarDateFormatter, useClass: CalendarMomentDateFormatter\n     * }]\n     *\n     * ```\n     */\n    var CalendarMomentDateFormatter = /** @class */ (function () {\n        /**\n         * @hidden\n         */\n        function CalendarMomentDateFormatter(moment, dateAdapter) {\n            this.moment = moment;\n            this.dateAdapter = dateAdapter;\n        }\n        /**\n         * The month view header week day labels\n         */\n        CalendarMomentDateFormatter.prototype.monthViewColumnHeader = function (_a) {\n            var date = _a.date, locale = _a.locale;\n            return this.moment(date)\n                .locale(locale)\n                .format('dddd');\n        };\n        /**\n         * The month view cell day number\n         */\n        CalendarMomentDateFormatter.prototype.monthViewDayNumber = function (_a) {\n            var date = _a.date, locale = _a.locale;\n            return this.moment(date)\n                .locale(locale)\n                .format('D');\n        };\n        /**\n         * The month view title\n         */\n        CalendarMomentDateFormatter.prototype.monthViewTitle = function (_a) {\n            var date = _a.date, locale = _a.locale;\n            return this.moment(date)\n                .locale(locale)\n                .format('MMMM YYYY');\n        };\n        /**\n         * The week view header week day labels\n         */\n        CalendarMomentDateFormatter.prototype.weekViewColumnHeader = function (_a) {\n            var date = _a.date, locale = _a.locale;\n            return this.moment(date)\n                .locale(locale)\n                .format('dddd');\n        };\n        /**\n         * The week view sub header day and month labels\n         */\n        CalendarMomentDateFormatter.prototype.weekViewColumnSubHeader = function (_a) {\n            var date = _a.date, locale = _a.locale;\n            return this.moment(date)\n                .locale(locale)\n                .format('MMM D');\n        };\n        /**\n         * The week view title\n         */\n        CalendarMomentDateFormatter.prototype.weekViewTitle = function (_a) {\n            var _this = this;\n            var date = _a.date, locale = _a.locale, weekStartsOn = _a.weekStartsOn, excludeDays = _a.excludeDays, daysInWeek = _a.daysInWeek;\n            var _b = getWeekViewPeriod(this.dateAdapter, date, weekStartsOn, excludeDays, daysInWeek), viewStart = _b.viewStart, viewEnd = _b.viewEnd;\n            var format = function (dateToFormat, showYear) {\n                return _this.moment(dateToFormat)\n                    .locale(locale)\n                    .format('MMM D' + (showYear ? ', YYYY' : ''));\n            };\n            return format(viewStart, viewStart.getUTCFullYear() !== viewEnd.getUTCFullYear()) + \" - \" + format(viewEnd, true);\n        };\n        /**\n         * The time formatting down the left hand side of the week view\n         */\n        CalendarMomentDateFormatter.prototype.weekViewHour = function (_a) {\n            var date = _a.date, locale = _a.locale;\n            return this.moment(date)\n                .locale(locale)\n                .format('ha');\n        };\n        /**\n         * The time formatting down the left hand side of the day view\n         */\n        CalendarMomentDateFormatter.prototype.dayViewHour = function (_a) {\n            var date = _a.date, locale = _a.locale;\n            return this.moment(date)\n                .locale(locale)\n                .format('ha');\n        };\n        /**\n         * The day view title\n         */\n        CalendarMomentDateFormatter.prototype.dayViewTitle = function (_a) {\n            var date = _a.date, locale = _a.locale;\n            return this.moment(date)\n                .locale(locale)\n                .format('dddd, D MMMM, YYYY');\n        };\n        CalendarMomentDateFormatter.ctorParameters = function () { return [\n            { type: undefined, decorators: [{ type: core.Inject, args: [MOMENT,] }] },\n            { type: DateAdapter }\n        ]; };\n        CalendarMomentDateFormatter = __decorate([\n            core.Injectable(),\n            __param(0, core.Inject(MOMENT)),\n            __metadata(\"design:paramtypes\", [Object, DateAdapter])\n        ], CalendarMomentDateFormatter);\n        return CalendarMomentDateFormatter;\n    }());\n\n    /**\n     * This will use <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Intl\" target=\"_blank\">Intl</a> API to do all date formatting.\n     *\n     * You will need to include a <a href=\"https://github.com/andyearnshaw/Intl.js/\">polyfill</a> for older browsers.\n     */\n    var CalendarNativeDateFormatter = /** @class */ (function () {\n        function CalendarNativeDateFormatter(dateAdapter) {\n            this.dateAdapter = dateAdapter;\n        }\n        /**\n         * The month view header week day labels\n         */\n        CalendarNativeDateFormatter.prototype.monthViewColumnHeader = function (_a) {\n            var date = _a.date, locale = _a.locale;\n            return new Intl.DateTimeFormat(locale, { weekday: 'long' }).format(date);\n        };\n        /**\n         * The month view cell day number\n         */\n        CalendarNativeDateFormatter.prototype.monthViewDayNumber = function (_a) {\n            var date = _a.date, locale = _a.locale;\n            return new Intl.DateTimeFormat(locale, { day: 'numeric' }).format(date);\n        };\n        /**\n         * The month view title\n         */\n        CalendarNativeDateFormatter.prototype.monthViewTitle = function (_a) {\n            var date = _a.date, locale = _a.locale;\n            return new Intl.DateTimeFormat(locale, {\n                year: 'numeric',\n                month: 'long'\n            }).format(date);\n        };\n        /**\n         * The week view header week day labels\n         */\n        CalendarNativeDateFormatter.prototype.weekViewColumnHeader = function (_a) {\n            var date = _a.date, locale = _a.locale;\n            return new Intl.DateTimeFormat(locale, { weekday: 'long' }).format(date);\n        };\n        /**\n         * The week view sub header day and month labels\n         */\n        CalendarNativeDateFormatter.prototype.weekViewColumnSubHeader = function (_a) {\n            var date = _a.date, locale = _a.locale;\n            return new Intl.DateTimeFormat(locale, {\n                day: 'numeric',\n                month: 'short'\n            }).format(date);\n        };\n        /**\n         * The week view title\n         */\n        CalendarNativeDateFormatter.prototype.weekViewTitle = function (_a) {\n            var date = _a.date, locale = _a.locale, weekStartsOn = _a.weekStartsOn, excludeDays = _a.excludeDays, daysInWeek = _a.daysInWeek;\n            var _b = getWeekViewPeriod(this.dateAdapter, date, weekStartsOn, excludeDays, daysInWeek), viewStart = _b.viewStart, viewEnd = _b.viewEnd;\n            var format = function (dateToFormat, showYear) {\n                return new Intl.DateTimeFormat(locale, {\n                    day: 'numeric',\n                    month: 'short',\n                    year: showYear ? 'numeric' : undefined\n                }).format(dateToFormat);\n            };\n            return format(viewStart, viewStart.getUTCFullYear() !== viewEnd.getUTCFullYear()) + \" - \" + format(viewEnd, true);\n        };\n        /**\n         * The time formatting down the left hand side of the week view\n         */\n        CalendarNativeDateFormatter.prototype.weekViewHour = function (_a) {\n            var date = _a.date, locale = _a.locale;\n            return new Intl.DateTimeFormat(locale, { hour: 'numeric' }).format(date);\n        };\n        /**\n         * The time formatting down the left hand side of the day view\n         */\n        CalendarNativeDateFormatter.prototype.dayViewHour = function (_a) {\n            var date = _a.date, locale = _a.locale;\n            return new Intl.DateTimeFormat(locale, { hour: 'numeric' }).format(date);\n        };\n        /**\n         * The day view title\n         */\n        CalendarNativeDateFormatter.prototype.dayViewTitle = function (_a) {\n            var date = _a.date, locale = _a.locale;\n            return new Intl.DateTimeFormat(locale, {\n                day: 'numeric',\n                month: 'long',\n                year: 'numeric',\n                weekday: 'long'\n            }).format(date);\n        };\n        CalendarNativeDateFormatter.ctorParameters = function () { return [\n            { type: DateAdapter }\n        ]; };\n        CalendarNativeDateFormatter = __decorate([\n            core.Injectable(),\n            __metadata(\"design:paramtypes\", [DateAdapter])\n        ], CalendarNativeDateFormatter);\n        return CalendarNativeDateFormatter;\n    }());\n\n\n    (function (CalendarEventTimesChangedEventType) {\n        CalendarEventTimesChangedEventType[\"Drag\"] = \"drag\";\n        CalendarEventTimesChangedEventType[\"Drop\"] = \"drop\";\n        CalendarEventTimesChangedEventType[\"Resize\"] = \"resize\";\n    })(exports.CalendarEventTimesChangedEventType || (exports.CalendarEventTimesChangedEventType = {}));\n\n    /**\n     * Import this module to if you're just using a singular view and want to save on bundle size. Example usage:\n     *\n     * ```typescript\n     * import { CalendarCommonModule, CalendarMonthModule } from 'angular-calendar';\n     *\n     * @NgModule({\n     *   imports: [\n     *     CalendarCommonModule.forRoot(),\n     *     CalendarMonthModule\n     *   ]\n     * })\n     * class MyModule {}\n     * ```\n     *\n     */\n    var CalendarCommonModule = /** @class */ (function () {\n        function CalendarCommonModule() {\n        }\n        CalendarCommonModule_1 = CalendarCommonModule;\n        CalendarCommonModule.forRoot = function (dateAdapter, config) {\n            if (config === void 0) { config = {}; }\n            return {\n                ngModule: CalendarCommonModule_1,\n                providers: [\n                    dateAdapter,\n                    config.eventTitleFormatter || CalendarEventTitleFormatter,\n                    config.dateFormatter || CalendarDateFormatter,\n                    config.utils || CalendarUtils,\n                    config.a11y || CalendarA11y\n                ]\n            };\n        };\n        var CalendarCommonModule_1;\n        CalendarCommonModule = CalendarCommonModule_1 = __decorate([\n            core.NgModule({\n                declarations: [\n                    CalendarEventActionsComponent,\n                    CalendarEventTitleComponent,\n                    CalendarTooltipWindowComponent,\n                    CalendarTooltipDirective,\n                    CalendarPreviousViewDirective,\n                    CalendarNextViewDirective,\n                    CalendarTodayDirective,\n                    CalendarDatePipe,\n                    CalendarEventTitlePipe,\n                    CalendarA11yPipe,\n                    ClickDirective,\n                    KeydownEnterDirective\n                ],\n                imports: [common.CommonModule],\n                exports: [\n                    CalendarEventActionsComponent,\n                    CalendarEventTitleComponent,\n                    CalendarTooltipWindowComponent,\n                    CalendarTooltipDirective,\n                    CalendarPreviousViewDirective,\n                    CalendarNextViewDirective,\n                    CalendarTodayDirective,\n                    CalendarDatePipe,\n                    CalendarEventTitlePipe,\n                    CalendarA11yPipe,\n                    ClickDirective,\n                    KeydownEnterDirective\n                ],\n                providers: [common.I18nPluralPipe],\n                entryComponents: [CalendarTooltipWindowComponent]\n            })\n        ], CalendarCommonModule);\n        return CalendarCommonModule;\n    }());\n\n    /**\n     * Shows all events on a given month. Example usage:\n     *\n     * ```typescript\n     * <mwl-calendar-month-view\n     *  [viewDate]=\"viewDate\"\n     *  [events]=\"events\">\n     * </mwl-calendar-month-view>\n     * ```\n     */\n    var CalendarMonthViewComponent = /** @class */ (function () {\n        /**\n         * @hidden\n         */\n        function CalendarMonthViewComponent(cdr, utils, locale, dateAdapter) {\n            var _this = this;\n            this.cdr = cdr;\n            this.utils = utils;\n            this.dateAdapter = dateAdapter;\n            /**\n             * An array of events to display on view.\n             * The schema is available here: https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63\n             */\n            this.events = [];\n            /**\n             * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view\n             */\n            this.excludeDays = [];\n            /**\n             * Whether the events list for the day of the `viewDate` option is visible or not\n             */\n            this.activeDayIsOpen = false;\n            /**\n             * The placement of the event tooltip\n             */\n            this.tooltipPlacement = 'auto';\n            /**\n             * Whether to append tooltips to the body or next to the trigger element\n             */\n            this.tooltipAppendToBody = true;\n            /**\n             * The delay in milliseconds before the tooltip should be displayed. If not provided the tooltip\n             * will be displayed immediately.\n             */\n            this.tooltipDelay = null;\n            /**\n             * An output that will be called before the view is rendered for the current month.\n             * If you add the `cssClass` property to a day in the body it will add that class to the cell element in the template\n             */\n            this.beforeViewRender = new core.EventEmitter();\n            /**\n             * Called when the day cell is clicked\n             */\n            this.dayClicked = new core.EventEmitter();\n            /**\n             * Called when the event title is clicked\n             */\n            this.eventClicked = new core.EventEmitter();\n            /**\n             * Called when a header week day is clicked. Returns ISO day number.\n             */\n            this.columnHeaderClicked = new core.EventEmitter();\n            /**\n             * Called when an event is dragged and dropped\n             */\n            this.eventTimesChanged = new core.EventEmitter();\n            /**\n             * @hidden\n             */\n            this.trackByRowOffset = function (index, offset) {\n                return _this.view.days\n                    .slice(offset, _this.view.totalDaysVisibleInWeek)\n                    .map(function (day) { return day.date.toISOString(); })\n                    .join('-');\n            };\n            /**\n             * @hidden\n             */\n            this.trackByDate = function (index, day) { return day.date.toISOString(); };\n            this.locale = locale;\n        }\n        /**\n         * @hidden\n         */\n        CalendarMonthViewComponent.prototype.ngOnInit = function () {\n            var _this = this;\n            if (this.refresh) {\n                this.refreshSubscription = this.refresh.subscribe(function () {\n                    _this.refreshAll();\n                    _this.cdr.markForCheck();\n                });\n            }\n        };\n        /**\n         * @hidden\n         */\n        CalendarMonthViewComponent.prototype.ngOnChanges = function (changes) {\n            var refreshHeader = changes.viewDate || changes.excludeDays || changes.weekendDays;\n            var refreshBody = changes.viewDate ||\n                changes.events ||\n                changes.excludeDays ||\n                changes.weekendDays;\n            if (refreshHeader) {\n                this.refreshHeader();\n            }\n            if (changes.events) {\n                validateEvents(this.events);\n            }\n            if (refreshBody) {\n                this.refreshBody();\n            }\n            if (refreshHeader || refreshBody) {\n                this.emitBeforeViewRender();\n            }\n            if (changes.activeDayIsOpen ||\n                changes.viewDate ||\n                changes.events ||\n                changes.excludeDays ||\n                changes.activeDay) {\n                this.checkActiveDayIsOpen();\n            }\n        };\n        /**\n         * @hidden\n         */\n        CalendarMonthViewComponent.prototype.ngOnDestroy = function () {\n            if (this.refreshSubscription) {\n                this.refreshSubscription.unsubscribe();\n            }\n        };\n        /**\n         * @hidden\n         */\n        CalendarMonthViewComponent.prototype.toggleDayHighlight = function (event, isHighlighted) {\n            this.view.days.forEach(function (day) {\n                if (isHighlighted && day.events.indexOf(event) > -1) {\n                    day.backgroundColor =\n                        (event.color && event.color.secondary) || '#D1E8FF';\n                }\n                else {\n                    delete day.backgroundColor;\n                }\n            });\n        };\n        /**\n         * @hidden\n         */\n        CalendarMonthViewComponent.prototype.eventDropped = function (droppedOn, event, draggedFrom) {\n            if (droppedOn !== draggedFrom) {\n                var year = this.dateAdapter.getYear(droppedOn.date);\n                var month = this.dateAdapter.getMonth(droppedOn.date);\n                var date = this.dateAdapter.getDate(droppedOn.date);\n                var newStart = this.dateAdapter.setDate(this.dateAdapter.setMonth(this.dateAdapter.setYear(event.start, year), month), date);\n                var newEnd = void 0;\n                if (event.end) {\n                    var secondsDiff = this.dateAdapter.differenceInSeconds(newStart, event.start);\n                    newEnd = this.dateAdapter.addSeconds(event.end, secondsDiff);\n                }\n                this.eventTimesChanged.emit({\n                    event: event,\n                    newStart: newStart,\n                    newEnd: newEnd,\n                    day: droppedOn,\n                    type: exports.CalendarEventTimesChangedEventType.Drop\n                });\n            }\n        };\n        CalendarMonthViewComponent.prototype.refreshHeader = function () {\n            this.columnHeaders = this.utils.getWeekViewHeader({\n                viewDate: this.viewDate,\n                weekStartsOn: this.weekStartsOn,\n                excluded: this.excludeDays,\n                weekendDays: this.weekendDays\n            });\n        };\n        CalendarMonthViewComponent.prototype.refreshBody = function () {\n            this.view = this.utils.getMonthView({\n                events: this.events,\n                viewDate: this.viewDate,\n                weekStartsOn: this.weekStartsOn,\n                excluded: this.excludeDays,\n                weekendDays: this.weekendDays\n            });\n        };\n        CalendarMonthViewComponent.prototype.checkActiveDayIsOpen = function () {\n            var _this = this;\n            if (this.activeDayIsOpen === true) {\n                var activeDay_1 = this.activeDay || this.viewDate;\n                this.openDay = this.view.days.find(function (day) {\n                    return _this.dateAdapter.isSameDay(day.date, activeDay_1);\n                });\n                var index = this.view.days.indexOf(this.openDay);\n                this.openRowIndex =\n                    Math.floor(index / this.view.totalDaysVisibleInWeek) *\n                        this.view.totalDaysVisibleInWeek;\n            }\n            else {\n                this.openRowIndex = null;\n                this.openDay = null;\n            }\n        };\n        CalendarMonthViewComponent.prototype.refreshAll = function () {\n            this.refreshHeader();\n            this.refreshBody();\n            this.emitBeforeViewRender();\n            this.checkActiveDayIsOpen();\n        };\n        CalendarMonthViewComponent.prototype.emitBeforeViewRender = function () {\n            if (this.columnHeaders && this.view) {\n                this.beforeViewRender.emit({\n                    header: this.columnHeaders,\n                    body: this.view.days,\n                    period: this.view.period\n                });\n            }\n        };\n        CalendarMonthViewComponent.ctorParameters = function () { return [\n            { type: core.ChangeDetectorRef },\n            { type: CalendarUtils },\n            { type: String, decorators: [{ type: core.Inject, args: [core.LOCALE_ID,] }] },\n            { type: DateAdapter }\n        ]; };\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Date)\n        ], CalendarMonthViewComponent.prototype, \"viewDate\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Array)\n        ], CalendarMonthViewComponent.prototype, \"events\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Array)\n        ], CalendarMonthViewComponent.prototype, \"excludeDays\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Boolean)\n        ], CalendarMonthViewComponent.prototype, \"activeDayIsOpen\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Date)\n        ], CalendarMonthViewComponent.prototype, \"activeDay\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", rxjs.Subject)\n        ], CalendarMonthViewComponent.prototype, \"refresh\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", String)\n        ], CalendarMonthViewComponent.prototype, \"locale\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CalendarMonthViewComponent.prototype, \"tooltipPlacement\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", core.TemplateRef)\n        ], CalendarMonthViewComponent.prototype, \"tooltipTemplate\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Boolean)\n        ], CalendarMonthViewComponent.prototype, \"tooltipAppendToBody\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], CalendarMonthViewComponent.prototype, \"tooltipDelay\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], CalendarMonthViewComponent.prototype, \"weekStartsOn\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", core.TemplateRef)\n        ], CalendarMonthViewComponent.prototype, \"headerTemplate\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", core.TemplateRef)\n        ], CalendarMonthViewComponent.prototype, \"cellTemplate\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", core.TemplateRef)\n        ], CalendarMonthViewComponent.prototype, \"openDayEventsTemplate\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", core.TemplateRef)\n        ], CalendarMonthViewComponent.prototype, \"eventTitleTemplate\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", core.TemplateRef)\n        ], CalendarMonthViewComponent.prototype, \"eventActionsTemplate\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Array)\n        ], CalendarMonthViewComponent.prototype, \"weekendDays\", void 0);\n        __decorate([\n            core.Output(),\n            __metadata(\"design:type\", Object)\n        ], CalendarMonthViewComponent.prototype, \"beforeViewRender\", void 0);\n        __decorate([\n            core.Output(),\n            __metadata(\"design:type\", Object)\n        ], CalendarMonthViewComponent.prototype, \"dayClicked\", void 0);\n        __decorate([\n            core.Output(),\n            __metadata(\"design:type\", Object)\n        ], CalendarMonthViewComponent.prototype, \"eventClicked\", void 0);\n        __decorate([\n            core.Output(),\n            __metadata(\"design:type\", Object)\n        ], CalendarMonthViewComponent.prototype, \"columnHeaderClicked\", void 0);\n        __decorate([\n            core.Output(),\n            __metadata(\"design:type\", Object)\n        ], CalendarMonthViewComponent.prototype, \"eventTimesChanged\", void 0);\n        CalendarMonthViewComponent = __decorate([\n            core.Component({\n                selector: 'mwl-calendar-month-view',\n                template: \"\\n    <div class=\\\"cal-month-view\\\" role=\\\"grid\\\">\\n      <mwl-calendar-month-view-header\\n        [days]=\\\"columnHeaders\\\"\\n        [locale]=\\\"locale\\\"\\n        (columnHeaderClicked)=\\\"columnHeaderClicked.emit($event)\\\"\\n        [customTemplate]=\\\"headerTemplate\\\"\\n      >\\n      </mwl-calendar-month-view-header>\\n      <div class=\\\"cal-days\\\">\\n        <div\\n          *ngFor=\\\"let rowIndex of view.rowOffsets; trackBy: trackByRowOffset\\\"\\n        >\\n          <div class=\\\"cal-cell-row\\\">\\n            <mwl-calendar-month-cell\\n              *ngFor=\\\"\\n                let day of view.days\\n                  | slice: rowIndex:rowIndex + view.totalDaysVisibleInWeek;\\n                trackBy: trackByDate\\n              \\\"\\n              [ngClass]=\\\"day?.cssClass\\\"\\n              [day]=\\\"day\\\"\\n              [openDay]=\\\"openDay\\\"\\n              [locale]=\\\"locale\\\"\\n              [tooltipPlacement]=\\\"tooltipPlacement\\\"\\n              [tooltipAppendToBody]=\\\"tooltipAppendToBody\\\"\\n              [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n              [tooltipDelay]=\\\"tooltipDelay\\\"\\n              [customTemplate]=\\\"cellTemplate\\\"\\n              [ngStyle]=\\\"{ backgroundColor: day.backgroundColor }\\\"\\n              (mwlClick)=\\\"dayClicked.emit({ day: day, sourceEvent: $event })\\\"\\n              [clickListenerDisabled]=\\\"dayClicked.observers.length === 0\\\"\\n              (mwlKeydownEnter)=\\\"\\n                dayClicked.emit({ day: day, sourceEvent: $event })\\n              \\\"\\n              (highlightDay)=\\\"toggleDayHighlight($event.event, true)\\\"\\n              (unhighlightDay)=\\\"toggleDayHighlight($event.event, false)\\\"\\n              mwlDroppable\\n              dragOverClass=\\\"cal-drag-over\\\"\\n              (drop)=\\\"\\n                eventDropped(\\n                  day,\\n                  $event.dropData.event,\\n                  $event.dropData.draggedFrom\\n                )\\n              \\\"\\n              (eventClicked)=\\\"\\n                eventClicked.emit({\\n                  event: $event.event,\\n                  sourceEvent: $event.sourceEvent\\n                })\\n              \\\"\\n              [attr.tabindex]=\\\"{} | calendarA11y: 'monthCellTabIndex'\\\"\\n            >\\n            </mwl-calendar-month-cell>\\n          </div>\\n          <mwl-calendar-open-day-events\\n            [locale]=\\\"locale\\\"\\n            [isOpen]=\\\"openRowIndex === rowIndex\\\"\\n            [events]=\\\"openDay?.events\\\"\\n            [date]=\\\"openDay?.date\\\"\\n            [customTemplate]=\\\"openDayEventsTemplate\\\"\\n            [eventTitleTemplate]=\\\"eventTitleTemplate\\\"\\n            [eventActionsTemplate]=\\\"eventActionsTemplate\\\"\\n            (eventClicked)=\\\"\\n              eventClicked.emit({\\n                event: $event.event,\\n                sourceEvent: $event.sourceEvent\\n              })\\n            \\\"\\n            mwlDroppable\\n            dragOverClass=\\\"cal-drag-over\\\"\\n            (drop)=\\\"\\n              eventDropped(\\n                openDay,\\n                $event.dropData.event,\\n                $event.dropData.draggedFrom\\n              )\\n            \\\"\\n          >\\n          </mwl-calendar-open-day-events>\\n        </div>\\n      </div>\\n    </div>\\n  \"\n            }),\n            __param(2, core.Inject(core.LOCALE_ID)),\n            __metadata(\"design:paramtypes\", [core.ChangeDetectorRef,\n                CalendarUtils, String, DateAdapter])\n        ], CalendarMonthViewComponent);\n        return CalendarMonthViewComponent;\n    }());\n\n    var CalendarMonthViewHeaderComponent = /** @class */ (function () {\n        function CalendarMonthViewHeaderComponent() {\n            this.columnHeaderClicked = new core.EventEmitter();\n            this.trackByWeekDayHeaderDate = trackByWeekDayHeaderDate;\n        }\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Array)\n        ], CalendarMonthViewHeaderComponent.prototype, \"days\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", String)\n        ], CalendarMonthViewHeaderComponent.prototype, \"locale\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", core.TemplateRef)\n        ], CalendarMonthViewHeaderComponent.prototype, \"customTemplate\", void 0);\n        __decorate([\n            core.Output(),\n            __metadata(\"design:type\", Object)\n        ], CalendarMonthViewHeaderComponent.prototype, \"columnHeaderClicked\", void 0);\n        CalendarMonthViewHeaderComponent = __decorate([\n            core.Component({\n                selector: 'mwl-calendar-month-view-header',\n                template: \"\\n    <ng-template\\n      #defaultTemplate\\n      let-days=\\\"days\\\"\\n      let-locale=\\\"locale\\\"\\n      let-trackByWeekDayHeaderDate=\\\"trackByWeekDayHeaderDate\\\"\\n    >\\n      <div class=\\\"cal-cell-row cal-header\\\" role=\\\"row\\\">\\n        <div\\n          class=\\\"cal-cell\\\"\\n          *ngFor=\\\"let day of days; trackBy: trackByWeekDayHeaderDate\\\"\\n          [class.cal-past]=\\\"day.isPast\\\"\\n          [class.cal-today]=\\\"day.isToday\\\"\\n          [class.cal-future]=\\\"day.isFuture\\\"\\n          [class.cal-weekend]=\\\"day.isWeekend\\\"\\n          (click)=\\\"\\n            columnHeaderClicked.emit({\\n              isoDayNumber: day.day,\\n              sourceEvent: $event\\n            })\\n          \\\"\\n          [ngClass]=\\\"day.cssClass\\\"\\n          tabindex=\\\"0\\\"\\n          role=\\\"columnheader\\\"\\n        >\\n          {{ day.date | calendarDate: 'monthViewColumnHeader':locale }}\\n        </div>\\n      </div>\\n    </ng-template>\\n    <ng-template\\n      [ngTemplateOutlet]=\\\"customTemplate || defaultTemplate\\\"\\n      [ngTemplateOutletContext]=\\\"{\\n        days: days,\\n        locale: locale,\\n        trackByWeekDayHeaderDate: trackByWeekDayHeaderDate\\n      }\\\"\\n    >\\n    </ng-template>\\n  \"\n            })\n        ], CalendarMonthViewHeaderComponent);\n        return CalendarMonthViewHeaderComponent;\n    }());\n\n    var CalendarMonthCellComponent = /** @class */ (function () {\n        function CalendarMonthCellComponent() {\n            this.highlightDay = new core.EventEmitter();\n            this.unhighlightDay = new core.EventEmitter();\n            this.eventClicked = new core.EventEmitter();\n            this.trackByEventId = trackByEventId;\n            this.validateDrag = isWithinThreshold;\n        }\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CalendarMonthCellComponent.prototype, \"day\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CalendarMonthCellComponent.prototype, \"openDay\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", String)\n        ], CalendarMonthCellComponent.prototype, \"locale\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CalendarMonthCellComponent.prototype, \"tooltipPlacement\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Boolean)\n        ], CalendarMonthCellComponent.prototype, \"tooltipAppendToBody\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", core.TemplateRef)\n        ], CalendarMonthCellComponent.prototype, \"customTemplate\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", core.TemplateRef)\n        ], CalendarMonthCellComponent.prototype, \"tooltipTemplate\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], CalendarMonthCellComponent.prototype, \"tooltipDelay\", void 0);\n        __decorate([\n            core.Output(),\n            __metadata(\"design:type\", core.EventEmitter)\n        ], CalendarMonthCellComponent.prototype, \"highlightDay\", void 0);\n        __decorate([\n            core.Output(),\n            __metadata(\"design:type\", core.EventEmitter)\n        ], CalendarMonthCellComponent.prototype, \"unhighlightDay\", void 0);\n        __decorate([\n            core.Output(),\n            __metadata(\"design:type\", Object)\n        ], CalendarMonthCellComponent.prototype, \"eventClicked\", void 0);\n        CalendarMonthCellComponent = __decorate([\n            core.Component({\n                selector: 'mwl-calendar-month-cell',\n                template: \"\\n    <ng-template\\n      #defaultTemplate\\n      let-day=\\\"day\\\"\\n      let-openDay=\\\"openDay\\\"\\n      let-locale=\\\"locale\\\"\\n      let-tooltipPlacement=\\\"tooltipPlacement\\\"\\n      let-highlightDay=\\\"highlightDay\\\"\\n      let-unhighlightDay=\\\"unhighlightDay\\\"\\n      let-eventClicked=\\\"eventClicked\\\"\\n      let-tooltipTemplate=\\\"tooltipTemplate\\\"\\n      let-tooltipAppendToBody=\\\"tooltipAppendToBody\\\"\\n      let-tooltipDelay=\\\"tooltipDelay\\\"\\n      let-trackByEventId=\\\"trackByEventId\\\"\\n      let-validateDrag=\\\"validateDrag\\\"\\n    >\\n      <div\\n        class=\\\"cal-cell-top\\\"\\n        [attr.aria-label]=\\\"\\n          { day: day, locale: locale } | calendarA11y: 'monthCell'\\n        \\\"\\n      >\\n        <span aria-hidden=\\\"true\\\">\\n          <span class=\\\"cal-day-badge\\\" *ngIf=\\\"day.badgeTotal > 0\\\">{{\\n            day.badgeTotal\\n          }}</span>\\n          <span class=\\\"cal-day-number\\\">{{\\n            day.date | calendarDate: 'monthViewDayNumber':locale\\n          }}</span>\\n        </span>\\n      </div>\\n      <div class=\\\"cal-events\\\" *ngIf=\\\"day.events.length > 0\\\">\\n        <div\\n          class=\\\"cal-event\\\"\\n          *ngFor=\\\"let event of day.events; trackBy: trackByEventId\\\"\\n          [ngStyle]=\\\"{ backgroundColor: event.color?.primary }\\\"\\n          [ngClass]=\\\"event?.cssClass\\\"\\n          (mouseenter)=\\\"highlightDay.emit({ event: event })\\\"\\n          (mouseleave)=\\\"unhighlightDay.emit({ event: event })\\\"\\n          [mwlCalendarTooltip]=\\\"\\n            event.title | calendarEventTitle: 'monthTooltip':event\\n          \\\"\\n          [tooltipPlacement]=\\\"tooltipPlacement\\\"\\n          [tooltipEvent]=\\\"event\\\"\\n          [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n          [tooltipAppendToBody]=\\\"tooltipAppendToBody\\\"\\n          [tooltipDelay]=\\\"tooltipDelay\\\"\\n          mwlDraggable\\n          [class.cal-draggable]=\\\"event.draggable\\\"\\n          dragActiveClass=\\\"cal-drag-active\\\"\\n          [dropData]=\\\"{ event: event, draggedFrom: day }\\\"\\n          [dragAxis]=\\\"{ x: event.draggable, y: event.draggable }\\\"\\n          [validateDrag]=\\\"validateDrag\\\"\\n          (mwlClick)=\\\"eventClicked.emit({ event: event, sourceEvent: $event })\\\"\\n          [attr.aria-hidden]=\\\"{} | calendarA11y: 'hideMonthCellEvents'\\\"\\n        ></div>\\n      </div>\\n    </ng-template>\\n    <ng-template\\n      [ngTemplateOutlet]=\\\"customTemplate || defaultTemplate\\\"\\n      [ngTemplateOutletContext]=\\\"{\\n        day: day,\\n        openDay: openDay,\\n        locale: locale,\\n        tooltipPlacement: tooltipPlacement,\\n        highlightDay: highlightDay,\\n        unhighlightDay: unhighlightDay,\\n        eventClicked: eventClicked,\\n        tooltipTemplate: tooltipTemplate,\\n        tooltipAppendToBody: tooltipAppendToBody,\\n        tooltipDelay: tooltipDelay,\\n        trackByEventId: trackByEventId,\\n        validateDrag: validateDrag\\n      }\\\"\\n    >\\n    </ng-template>\\n  \",\n                host: {\n                    class: 'cal-cell cal-day-cell',\n                    '[class.cal-past]': 'day.isPast',\n                    '[class.cal-today]': 'day.isToday',\n                    '[class.cal-future]': 'day.isFuture',\n                    '[class.cal-weekend]': 'day.isWeekend',\n                    '[class.cal-in-month]': 'day.inMonth',\n                    '[class.cal-out-month]': '!day.inMonth',\n                    '[class.cal-has-events]': 'day.events.length > 0',\n                    '[class.cal-open]': 'day === openDay',\n                    '[class.cal-event-highlight]': '!!day.backgroundColor'\n                }\n            })\n        ], CalendarMonthCellComponent);\n        return CalendarMonthCellComponent;\n    }());\n\n    var collapseAnimation = animations.trigger('collapse', [\n        animations.state('void', animations.style({\n            height: 0,\n            overflow: 'hidden',\n            'padding-top': 0,\n            'padding-bottom': 0\n        })),\n        animations.state('*', animations.style({\n            height: '*',\n            overflow: 'hidden',\n            'padding-top': '*',\n            'padding-bottom': '*'\n        })),\n        animations.transition('* => void', animations.animate('150ms ease-out')),\n        animations.transition('void => *', animations.animate('150ms ease-in'))\n    ]);\n    var CalendarOpenDayEventsComponent = /** @class */ (function () {\n        function CalendarOpenDayEventsComponent() {\n            this.isOpen = false;\n            this.eventClicked = new core.EventEmitter();\n            this.trackByEventId = trackByEventId;\n            this.validateDrag = isWithinThreshold;\n        }\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", String)\n        ], CalendarOpenDayEventsComponent.prototype, \"locale\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Boolean)\n        ], CalendarOpenDayEventsComponent.prototype, \"isOpen\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Array)\n        ], CalendarOpenDayEventsComponent.prototype, \"events\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", core.TemplateRef)\n        ], CalendarOpenDayEventsComponent.prototype, \"customTemplate\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", core.TemplateRef)\n        ], CalendarOpenDayEventsComponent.prototype, \"eventTitleTemplate\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", core.TemplateRef)\n        ], CalendarOpenDayEventsComponent.prototype, \"eventActionsTemplate\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Date)\n        ], CalendarOpenDayEventsComponent.prototype, \"date\", void 0);\n        __decorate([\n            core.Output(),\n            __metadata(\"design:type\", Object)\n        ], CalendarOpenDayEventsComponent.prototype, \"eventClicked\", void 0);\n        CalendarOpenDayEventsComponent = __decorate([\n            core.Component({\n                selector: 'mwl-calendar-open-day-events',\n                template: \"\\n    <ng-template\\n      #defaultTemplate\\n      let-events=\\\"events\\\"\\n      let-eventClicked=\\\"eventClicked\\\"\\n      let-isOpen=\\\"isOpen\\\"\\n      let-trackByEventId=\\\"trackByEventId\\\"\\n      let-validateDrag=\\\"validateDrag\\\"\\n    >\\n      <div\\n        class=\\\"cal-open-day-events\\\"\\n        [@collapse]\\n        *ngIf=\\\"isOpen\\\"\\n        role=\\\"application\\\"\\n      >\\n        <span\\n          tabindex=\\\"-1\\\"\\n          role=\\\"alert\\\"\\n          [attr.aria-label]=\\\"\\n            { date: date, locale: locale } | calendarA11y: 'openDayEventsAlert'\\n          \\\"\\n        ></span>\\n        <span\\n          tabindex=\\\"0\\\"\\n          role=\\\"landmark\\\"\\n          [attr.aria-label]=\\\"\\n            { date: date, locale: locale }\\n              | calendarA11y: 'openDayEventsLandmark'\\n          \\\"\\n        ></span>\\n        <div\\n          *ngFor=\\\"let event of events; trackBy: trackByEventId\\\"\\n          [ngClass]=\\\"event?.cssClass\\\"\\n          mwlDraggable\\n          [class.cal-draggable]=\\\"event.draggable\\\"\\n          dragActiveClass=\\\"cal-drag-active\\\"\\n          [dropData]=\\\"{ event: event }\\\"\\n          [dragAxis]=\\\"{ x: event.draggable, y: event.draggable }\\\"\\n          [validateDrag]=\\\"validateDrag\\\"\\n        >\\n          <span\\n            class=\\\"cal-event\\\"\\n            [ngStyle]=\\\"{ backgroundColor: event.color?.primary }\\\"\\n          >\\n          </span>\\n          &ngsp;\\n          <mwl-calendar-event-title\\n            [event]=\\\"event\\\"\\n            [customTemplate]=\\\"eventTitleTemplate\\\"\\n            view=\\\"month\\\"\\n            (mwlClick)=\\\"\\n              eventClicked.emit({ event: event, sourceEvent: $event })\\n            \\\"\\n            (mwlKeydownEnter)=\\\"\\n              eventClicked.emit({ event: event, sourceEvent: $event })\\n            \\\"\\n            tabindex=\\\"0\\\"\\n            [attr.aria-label]=\\\"\\n              { event: event, locale: locale }\\n                | calendarA11y: 'eventDescription'\\n            \\\"\\n          >\\n          </mwl-calendar-event-title>\\n          &ngsp;\\n          <mwl-calendar-event-actions\\n            [event]=\\\"event\\\"\\n            [customTemplate]=\\\"eventActionsTemplate\\\"\\n          >\\n          </mwl-calendar-event-actions>\\n        </div>\\n      </div>\\n    </ng-template>\\n    <ng-template\\n      [ngTemplateOutlet]=\\\"customTemplate || defaultTemplate\\\"\\n      [ngTemplateOutletContext]=\\\"{\\n        events: events,\\n        eventClicked: eventClicked,\\n        isOpen: isOpen,\\n        trackByEventId: trackByEventId,\\n        validateDrag: validateDrag\\n      }\\\"\\n    >\\n    </ng-template>\\n  \",\n                animations: [collapseAnimation]\n            })\n        ], CalendarOpenDayEventsComponent);\n        return CalendarOpenDayEventsComponent;\n    }());\n\n    var CalendarMonthModule = /** @class */ (function () {\n        function CalendarMonthModule() {\n        }\n        CalendarMonthModule = __decorate([\n            core.NgModule({\n                imports: [common.CommonModule, angularDraggableDroppable.DragAndDropModule, CalendarCommonModule],\n                declarations: [\n                    CalendarMonthViewComponent,\n                    CalendarMonthCellComponent,\n                    CalendarOpenDayEventsComponent,\n                    CalendarMonthViewHeaderComponent\n                ],\n                exports: [\n                    angularDraggableDroppable.DragAndDropModule,\n                    CalendarMonthViewComponent,\n                    CalendarMonthCellComponent,\n                    CalendarOpenDayEventsComponent,\n                    CalendarMonthViewHeaderComponent\n                ]\n            })\n        ], CalendarMonthModule);\n        return CalendarMonthModule;\n    }());\n\n    var CalendarDragHelper = /** @class */ (function () {\n        function CalendarDragHelper(dragContainerElement, draggableElement) {\n            this.dragContainerElement = dragContainerElement;\n            this.startPosition = draggableElement.getBoundingClientRect();\n        }\n        CalendarDragHelper.prototype.validateDrag = function (_a) {\n            var x = _a.x, y = _a.y, snapDraggedEvents = _a.snapDraggedEvents, dragAlreadyMoved = _a.dragAlreadyMoved, transform = _a.transform;\n            if (snapDraggedEvents) {\n                var newRect = Object.assign({}, this.startPosition, {\n                    left: this.startPosition.left + transform.x,\n                    right: this.startPosition.right + transform.x,\n                    top: this.startPosition.top + transform.y,\n                    bottom: this.startPosition.bottom + transform.y\n                });\n                return ((isWithinThreshold({ x: x, y: y }) || dragAlreadyMoved) &&\n                    isInside(this.dragContainerElement.getBoundingClientRect(), newRect));\n            }\n            else {\n                return isWithinThreshold({ x: x, y: y }) || dragAlreadyMoved;\n            }\n        };\n        return CalendarDragHelper;\n    }());\n\n    var CalendarResizeHelper = /** @class */ (function () {\n        function CalendarResizeHelper(resizeContainerElement, minWidth) {\n            this.resizeContainerElement = resizeContainerElement;\n            this.minWidth = minWidth;\n        }\n        CalendarResizeHelper.prototype.validateResize = function (_a) {\n            var rectangle = _a.rectangle;\n            if (this.minWidth &&\n                Math.ceil(rectangle.width) < Math.ceil(this.minWidth)) {\n                return false;\n            }\n            return isInside(this.resizeContainerElement.getBoundingClientRect(), rectangle);\n        };\n        return CalendarResizeHelper;\n    }());\n\n    /**\n     * Shows all events on a given week. Example usage:\n     *\n     * ```typescript\n     * <mwl-calendar-week-view\n     *  [viewDate]=\"viewDate\"\n     *  [events]=\"events\">\n     * </mwl-calendar-week-view>\n     * ```\n     */\n    var CalendarWeekViewComponent = /** @class */ (function () {\n        /**\n         * @hidden\n         */\n        function CalendarWeekViewComponent(cdr, utils, locale, dateAdapter) {\n            this.cdr = cdr;\n            this.utils = utils;\n            this.dateAdapter = dateAdapter;\n            /**\n             * An array of events to display on view\n             * The schema is available here: https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63\n             */\n            this.events = [];\n            /**\n             * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view\n             */\n            this.excludeDays = [];\n            /**\n             * The placement of the event tooltip\n             */\n            this.tooltipPlacement = 'auto';\n            /**\n             * Whether to append tooltips to the body or next to the trigger element\n             */\n            this.tooltipAppendToBody = true;\n            /**\n             * The delay in milliseconds before the tooltip should be displayed. If not provided the tooltip\n             * will be displayed immediately.\n             */\n            this.tooltipDelay = null;\n            /**\n             * The precision to display events.\n             * `days` will round event start and end dates to the nearest day and `minutes` will not do this rounding\n             */\n            this.precision = 'days';\n            /**\n             * Whether to snap events to a grid when dragging\n             */\n            this.snapDraggedEvents = true;\n            /**\n             * The number of segments in an hour. Must be <= 6\n             */\n            this.hourSegments = 2;\n            /**\n             * The height in pixels of each hour segment\n             */\n            this.hourSegmentHeight = 30;\n            /**\n             * The day start hours in 24 hour time. Must be 0-23\n             */\n            this.dayStartHour = 0;\n            /**\n             * The day start minutes. Must be 0-59\n             */\n            this.dayStartMinute = 0;\n            /**\n             * The day end hours in 24 hour time. Must be 0-23\n             */\n            this.dayEndHour = 23;\n            /**\n             * The day end minutes. Must be 0-59\n             */\n            this.dayEndMinute = 59;\n            /**\n             * Called when a header week day is clicked. Adding a `cssClass` property on `$event.day` will add that class to the header element\n             */\n            this.dayHeaderClicked = new core.EventEmitter();\n            /**\n             * Called when the event title is clicked\n             */\n            this.eventClicked = new core.EventEmitter();\n            /**\n             * Called when an event is resized or dragged and dropped\n             */\n            this.eventTimesChanged = new core.EventEmitter();\n            /**\n             * An output that will be called before the view is rendered for the current week.\n             * If you add the `cssClass` property to a day in the header it will add that class to the cell element in the template\n             */\n            this.beforeViewRender = new core.EventEmitter();\n            /**\n             * Called when an hour segment is clicked\n             */\n            this.hourSegmentClicked = new core.EventEmitter();\n            /**\n             * @hidden\n             */\n            this.allDayEventResizes = new Map();\n            /**\n             * @hidden\n             */\n            this.timeEventResizes = new Map();\n            /**\n             * @hidden\n             */\n            this.eventDragEnterByType = {\n                allDay: 0,\n                time: 0\n            };\n            /**\n             * @hidden\n             */\n            this.dragActive = false;\n            /**\n             * @hidden\n             */\n            this.dragAlreadyMoved = false;\n            /**\n             * @hidden\n             */\n            this.calendarId = Symbol('angular calendar week view id');\n            /**\n             * @hidden\n             */\n            this.trackByWeekDayHeaderDate = trackByWeekDayHeaderDate;\n            /**\n             * @hidden\n             */\n            this.trackByHourSegment = trackByHourSegment;\n            /**\n             * @hidden\n             */\n            this.trackByHour = trackByHour;\n            /**\n             * @hidden\n             */\n            this.trackByWeekAllDayEvent = trackByWeekAllDayEvent;\n            /**\n             * @hidden\n             */\n            this.trackByWeekTimeEvent = trackByWeekTimeEvent;\n            /**\n             * @hidden\n             */\n            this.trackByHourColumn = function (index, column) {\n                return column.hours[0] ? column.hours[0].segments[0].date.toISOString() : column;\n            };\n            /**\n             * @hidden\n             */\n            this.trackById = function (index, row) { return row.id; };\n            this.locale = locale;\n        }\n        /**\n         * @hidden\n         */\n        CalendarWeekViewComponent.prototype.ngOnInit = function () {\n            var _this = this;\n            if (this.refresh) {\n                this.refreshSubscription = this.refresh.subscribe(function () {\n                    _this.refreshAll();\n                    _this.cdr.markForCheck();\n                });\n            }\n        };\n        /**\n         * @hidden\n         */\n        CalendarWeekViewComponent.prototype.ngOnChanges = function (changes) {\n            var refreshHeader = changes.viewDate ||\n                changes.excludeDays ||\n                changes.weekendDays ||\n                changes.daysInWeek ||\n                changes.weekStartsOn;\n            var refreshBody = changes.viewDate ||\n                changes.dayStartHour ||\n                changes.dayStartMinute ||\n                changes.dayEndHour ||\n                changes.dayEndMinute ||\n                changes.hourSegments ||\n                changes.weekStartsOn ||\n                changes.weekendDays ||\n                changes.excludeDays ||\n                changes.hourSegmentHeight ||\n                changes.events ||\n                changes.daysInWeek;\n            if (refreshHeader) {\n                this.refreshHeader();\n            }\n            if (changes.events) {\n                validateEvents(this.events);\n            }\n            if (refreshBody) {\n                this.refreshBody();\n            }\n            if (refreshHeader || refreshBody) {\n                this.emitBeforeViewRender();\n            }\n        };\n        /**\n         * @hidden\n         */\n        CalendarWeekViewComponent.prototype.ngOnDestroy = function () {\n            if (this.refreshSubscription) {\n                this.refreshSubscription.unsubscribe();\n            }\n        };\n        CalendarWeekViewComponent.prototype.resizeStarted = function (eventsContainer, minWidth) {\n            this.dayColumnWidth = this.getDayColumnWidth(eventsContainer);\n            var resizeHelper = new CalendarResizeHelper(eventsContainer, minWidth);\n            this.validateResize = function (_a) {\n                var rectangle = _a.rectangle;\n                return resizeHelper.validateResize({ rectangle: rectangle });\n            };\n            this.cdr.markForCheck();\n        };\n        /**\n         * @hidden\n         */\n        CalendarWeekViewComponent.prototype.timeEventResizeStarted = function (eventsContainer, timeEvent, resizeEvent) {\n            this.timeEventResizes.set(timeEvent.event, resizeEvent);\n            this.resizeStarted(eventsContainer);\n        };\n        /**\n         * @hidden\n         */\n        CalendarWeekViewComponent.prototype.timeEventResizing = function (timeEvent, resizeEvent) {\n            var _this = this;\n            this.timeEventResizes.set(timeEvent.event, resizeEvent);\n            var adjustedEvents = new Map();\n            var tempEvents = __spread(this.events);\n            this.timeEventResizes.forEach(function (lastResizeEvent, event) {\n                var newEventDates = _this.getTimeEventResizedDates(event, lastResizeEvent);\n                var adjustedEvent = __assign({}, event, newEventDates);\n                adjustedEvents.set(adjustedEvent, event);\n                var eventIndex = tempEvents.indexOf(event);\n                tempEvents[eventIndex] = adjustedEvent;\n            });\n            this.restoreOriginalEvents(tempEvents, adjustedEvents);\n        };\n        /**\n         * @hidden\n         */\n        CalendarWeekViewComponent.prototype.timeEventResizeEnded = function (timeEvent) {\n            this.view = this.getWeekView(this.events);\n            var lastResizeEvent = this.timeEventResizes.get(timeEvent.event);\n            if (lastResizeEvent) {\n                this.timeEventResizes.delete(timeEvent.event);\n                var newEventDates = this.getTimeEventResizedDates(timeEvent.event, lastResizeEvent);\n                this.eventTimesChanged.emit({\n                    newStart: newEventDates.start,\n                    newEnd: newEventDates.end,\n                    event: timeEvent.event,\n                    type: exports.CalendarEventTimesChangedEventType.Resize\n                });\n            }\n        };\n        /**\n         * @hidden\n         */\n        CalendarWeekViewComponent.prototype.allDayEventResizeStarted = function (allDayEventsContainer, allDayEvent, resizeEvent) {\n            this.allDayEventResizes.set(allDayEvent, {\n                originalOffset: allDayEvent.offset,\n                originalSpan: allDayEvent.span,\n                edge: typeof resizeEvent.edges.left !== 'undefined' ? 'left' : 'right'\n            });\n            this.resizeStarted(allDayEventsContainer, this.getDayColumnWidth(allDayEventsContainer));\n        };\n        /**\n         * @hidden\n         */\n        CalendarWeekViewComponent.prototype.allDayEventResizing = function (allDayEvent, resizeEvent, dayWidth) {\n            var currentResize = this.allDayEventResizes.get(allDayEvent);\n            if (typeof resizeEvent.edges.left !== 'undefined') {\n                var diff = Math.round(+resizeEvent.edges.left / dayWidth);\n                allDayEvent.offset = currentResize.originalOffset + diff;\n                allDayEvent.span = currentResize.originalSpan - diff;\n            }\n            else if (typeof resizeEvent.edges.right !== 'undefined') {\n                var diff = Math.round(+resizeEvent.edges.right / dayWidth);\n                allDayEvent.span = currentResize.originalSpan + diff;\n            }\n        };\n        /**\n         * @hidden\n         */\n        CalendarWeekViewComponent.prototype.allDayEventResizeEnded = function (allDayEvent) {\n            var currentResize = this.allDayEventResizes.get(allDayEvent);\n            if (currentResize) {\n                var allDayEventResizingBeforeStart = currentResize.edge === 'left';\n                var daysDiff = void 0;\n                if (allDayEventResizingBeforeStart) {\n                    daysDiff = allDayEvent.offset - currentResize.originalOffset;\n                }\n                else {\n                    daysDiff = allDayEvent.span - currentResize.originalSpan;\n                }\n                allDayEvent.offset = currentResize.originalOffset;\n                allDayEvent.span = currentResize.originalSpan;\n                var newStart = allDayEvent.event.start;\n                var newEnd = allDayEvent.event.end || allDayEvent.event.start;\n                if (allDayEventResizingBeforeStart) {\n                    newStart = addDaysWithExclusions(this.dateAdapter, newStart, daysDiff, this.excludeDays);\n                }\n                else {\n                    newEnd = addDaysWithExclusions(this.dateAdapter, newEnd, daysDiff, this.excludeDays);\n                }\n                this.eventTimesChanged.emit({\n                    newStart: newStart,\n                    newEnd: newEnd,\n                    event: allDayEvent.event,\n                    type: exports.CalendarEventTimesChangedEventType.Resize\n                });\n                this.allDayEventResizes.delete(allDayEvent);\n            }\n        };\n        /**\n         * @hidden\n         */\n        CalendarWeekViewComponent.prototype.getDayColumnWidth = function (eventRowContainer) {\n            return Math.floor(eventRowContainer.offsetWidth / this.days.length);\n        };\n        /**\n         * @hidden\n         */\n        CalendarWeekViewComponent.prototype.dateDragEnter = function (date) {\n            this.lastDragEnterDate = date;\n        };\n        /**\n         * @hidden\n         */\n        CalendarWeekViewComponent.prototype.eventDropped = function (dropEvent, date, allDay) {\n            if (shouldFireDroppedEvent(dropEvent, date, allDay, this.calendarId) &&\n                this.lastDragEnterDate.getTime() === date.getTime()) {\n                this.eventTimesChanged.emit({\n                    type: exports.CalendarEventTimesChangedEventType.Drop,\n                    event: dropEvent.dropData.event,\n                    newStart: date,\n                    allDay: allDay\n                });\n            }\n        };\n        /**\n         * @hidden\n         */\n        CalendarWeekViewComponent.prototype.dragEnter = function (type) {\n            this.eventDragEnterByType[type]++;\n        };\n        /**\n         * @hidden\n         */\n        CalendarWeekViewComponent.prototype.dragLeave = function (type) {\n            this.eventDragEnterByType[type]--;\n        };\n        /**\n         * @hidden\n         */\n        CalendarWeekViewComponent.prototype.dragStarted = function (eventsContainer, event, dayEvent) {\n            var _this = this;\n            this.dayColumnWidth = this.getDayColumnWidth(eventsContainer);\n            var dragHelper = new CalendarDragHelper(eventsContainer, event);\n            this.validateDrag = function (_a) {\n                var x = _a.x, y = _a.y, transform = _a.transform;\n                return _this.allDayEventResizes.size === 0 &&\n                    _this.timeEventResizes.size === 0 &&\n                    dragHelper.validateDrag({\n                        x: x,\n                        y: y,\n                        snapDraggedEvents: _this.snapDraggedEvents,\n                        dragAlreadyMoved: _this.dragAlreadyMoved,\n                        transform: transform\n                    });\n            };\n            this.dragActive = true;\n            this.dragAlreadyMoved = false;\n            this.eventDragEnterByType = {\n                allDay: 0,\n                time: 0\n            };\n            if (!this.snapDraggedEvents && dayEvent) {\n                this.view.hourColumns.forEach(function (column) {\n                    var linkedEvent = column.events.find(function (columnEvent) {\n                        return columnEvent.event === dayEvent.event && columnEvent !== dayEvent;\n                    });\n                    // hide any linked events while dragging\n                    if (linkedEvent) {\n                        linkedEvent.width = 0;\n                        linkedEvent.height = 0;\n                    }\n                });\n            }\n            this.cdr.markForCheck();\n        };\n        /**\n         * @hidden\n         */\n        CalendarWeekViewComponent.prototype.dragMove = function (dayEvent, dragEvent) {\n            if (this.snapDraggedEvents) {\n                var newEventTimes = this.getDragMovedEventTimes(dayEvent, dragEvent, this.dayColumnWidth, true);\n                var originalEvent_1 = dayEvent.event;\n                var adjustedEvent_1 = __assign({}, originalEvent_1, newEventTimes);\n                var tempEvents = this.events.map(function (event) {\n                    if (event === originalEvent_1) {\n                        return adjustedEvent_1;\n                    }\n                    return event;\n                });\n                this.restoreOriginalEvents(tempEvents, new Map([[adjustedEvent_1, originalEvent_1]]));\n            }\n            this.dragAlreadyMoved = true;\n        };\n        /**\n         * @hidden\n         */\n        CalendarWeekViewComponent.prototype.allDayEventDragMove = function () {\n            this.dragAlreadyMoved = true;\n        };\n        /**\n         * @hidden\n         */\n        CalendarWeekViewComponent.prototype.dragEnded = function (weekEvent, dragEndEvent, dayWidth, useY) {\n            if (useY === void 0) { useY = false; }\n            this.view = this.getWeekView(this.events);\n            this.dragActive = false;\n            var _a = this.getDragMovedEventTimes(weekEvent, dragEndEvent, dayWidth, useY), start = _a.start, end = _a.end;\n            if (this.eventDragEnterByType[useY ? 'time' : 'allDay'] > 0 &&\n                isDraggedWithinPeriod(start, end, this.view.period)) {\n                this.eventTimesChanged.emit({\n                    newStart: start,\n                    newEnd: end,\n                    event: weekEvent.event,\n                    type: exports.CalendarEventTimesChangedEventType.Drag,\n                    allDay: !useY\n                });\n            }\n        };\n        CalendarWeekViewComponent.prototype.refreshHeader = function () {\n            this.days = this.utils.getWeekViewHeader(__assign({ viewDate: this.viewDate, weekStartsOn: this.weekStartsOn, excluded: this.excludeDays, weekendDays: this.weekendDays }, getWeekViewPeriod(this.dateAdapter, this.viewDate, this.weekStartsOn, this.excludeDays, this.daysInWeek)));\n        };\n        CalendarWeekViewComponent.prototype.refreshBody = function () {\n            this.view = this.getWeekView(this.events);\n        };\n        CalendarWeekViewComponent.prototype.refreshAll = function () {\n            this.refreshHeader();\n            this.refreshBody();\n            this.emitBeforeViewRender();\n        };\n        CalendarWeekViewComponent.prototype.emitBeforeViewRender = function () {\n            if (this.days && this.view) {\n                this.beforeViewRender.emit(__assign({ header: this.days }, this.view));\n            }\n        };\n        CalendarWeekViewComponent.prototype.getWeekView = function (events) {\n            return this.utils.getWeekView(__assign({ events: events, viewDate: this.viewDate, weekStartsOn: this.weekStartsOn, excluded: this.excludeDays, precision: this.precision, absolutePositionedEvents: true, hourSegments: this.hourSegments, dayStart: {\n                    hour: this.dayStartHour,\n                    minute: this.dayStartMinute\n                }, dayEnd: {\n                    hour: this.dayEndHour,\n                    minute: this.dayEndMinute\n                }, segmentHeight: this.hourSegmentHeight, weekendDays: this.weekendDays }, getWeekViewPeriod(this.dateAdapter, this.viewDate, this.weekStartsOn, this.excludeDays, this.daysInWeek)));\n        };\n        CalendarWeekViewComponent.prototype.getDragMovedEventTimes = function (weekEvent, dragEndEvent, dayWidth, useY) {\n            var daysDragged = roundToNearest(dragEndEvent.x, dayWidth) / dayWidth;\n            var minutesMoved = useY\n                ? getMinutesMoved(dragEndEvent.y, this.hourSegments, this.hourSegmentHeight, this.eventSnapSize)\n                : 0;\n            var start = this.dateAdapter.addMinutes(addDaysWithExclusions(this.dateAdapter, weekEvent.event.start, daysDragged, this.excludeDays), minutesMoved);\n            var end;\n            if (weekEvent.event.end) {\n                end = this.dateAdapter.addMinutes(addDaysWithExclusions(this.dateAdapter, weekEvent.event.end, daysDragged, this.excludeDays), minutesMoved);\n            }\n            return { start: start, end: end };\n        };\n        CalendarWeekViewComponent.prototype.restoreOriginalEvents = function (tempEvents, adjustedEvents) {\n            var previousView = this.view;\n            this.view = this.getWeekView(tempEvents);\n            var adjustedEventsArray = tempEvents.filter(function (event) {\n                return adjustedEvents.has(event);\n            });\n            this.view.hourColumns.forEach(function (column, columnIndex) {\n                previousView.hourColumns[columnIndex].hours.forEach(function (hour, hourIndex) {\n                    hour.segments.forEach(function (segment, segmentIndex) {\n                        column.hours[hourIndex].segments[segmentIndex].cssClass =\n                            segment.cssClass;\n                    });\n                });\n                adjustedEventsArray.forEach(function (adjustedEvent) {\n                    var originalEvent = adjustedEvents.get(adjustedEvent);\n                    var existingColumnEvent = column.events.find(function (columnEvent) { return columnEvent.event === adjustedEvent; });\n                    if (existingColumnEvent) {\n                        // restore the original event so trackBy kicks in and the dom isn't changed\n                        existingColumnEvent.event = originalEvent;\n                    }\n                    else {\n                        // add a dummy event to the drop so if the event was removed from the original column the drag doesn't end early\n                        column.events.push({\n                            event: originalEvent,\n                            left: 0,\n                            top: 0,\n                            height: 0,\n                            width: 0,\n                            startsBeforeDay: false,\n                            endsAfterDay: false\n                        });\n                    }\n                });\n            });\n            adjustedEvents.clear();\n        };\n        CalendarWeekViewComponent.prototype.getTimeEventResizedDates = function (calendarEvent, resizeEvent) {\n            var minimumEventHeight = getMinimumEventHeightInMinutes(this.hourSegments, this.hourSegmentHeight);\n            var newEventDates = {\n                start: calendarEvent.start,\n                end: getDefaultEventEnd(this.dateAdapter, calendarEvent, minimumEventHeight)\n            };\n            var end = calendarEvent.end, eventWithoutEnd = __rest(calendarEvent, [\"end\"]);\n            var smallestResizes = {\n                start: this.dateAdapter.addMinutes(newEventDates.end, minimumEventHeight * -1),\n                end: getDefaultEventEnd(this.dateAdapter, eventWithoutEnd, minimumEventHeight)\n            };\n            if (typeof resizeEvent.edges.left !== 'undefined') {\n                var daysDiff = Math.round(+resizeEvent.edges.left / this.dayColumnWidth);\n                var newStart = addDaysWithExclusions(this.dateAdapter, newEventDates.start, daysDiff, this.excludeDays);\n                if (newStart < smallestResizes.start) {\n                    newEventDates.start = newStart;\n                }\n                else {\n                    newEventDates.start = smallestResizes.start;\n                }\n            }\n            else if (typeof resizeEvent.edges.right !== 'undefined') {\n                var daysDiff = Math.round(+resizeEvent.edges.right / this.dayColumnWidth);\n                var newEnd = addDaysWithExclusions(this.dateAdapter, newEventDates.end, daysDiff, this.excludeDays);\n                if (newEnd > smallestResizes.end) {\n                    newEventDates.end = newEnd;\n                }\n                else {\n                    newEventDates.end = smallestResizes.end;\n                }\n            }\n            if (typeof resizeEvent.edges.top !== 'undefined') {\n                var minutesMoved = getMinutesMoved(resizeEvent.edges.top, this.hourSegments, this.hourSegmentHeight, this.eventSnapSize);\n                var newStart = this.dateAdapter.addMinutes(newEventDates.start, minutesMoved);\n                if (newStart < smallestResizes.start) {\n                    newEventDates.start = newStart;\n                }\n                else {\n                    newEventDates.start = smallestResizes.start;\n                }\n            }\n            else if (typeof resizeEvent.edges.bottom !== 'undefined') {\n                var minutesMoved = getMinutesMoved(resizeEvent.edges.bottom, this.hourSegments, this.hourSegmentHeight, this.eventSnapSize);\n                var newEnd = this.dateAdapter.addMinutes(newEventDates.end, minutesMoved);\n                if (newEnd > smallestResizes.end) {\n                    newEventDates.end = newEnd;\n                }\n                else {\n                    newEventDates.end = smallestResizes.end;\n                }\n            }\n            return newEventDates;\n        };\n        CalendarWeekViewComponent.ctorParameters = function () { return [\n            { type: core.ChangeDetectorRef },\n            { type: CalendarUtils },\n            { type: String, decorators: [{ type: core.Inject, args: [core.LOCALE_ID,] }] },\n            { type: DateAdapter }\n        ]; };\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Date)\n        ], CalendarWeekViewComponent.prototype, \"viewDate\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Array)\n        ], CalendarWeekViewComponent.prototype, \"events\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Array)\n        ], CalendarWeekViewComponent.prototype, \"excludeDays\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", rxjs.Subject)\n        ], CalendarWeekViewComponent.prototype, \"refresh\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", String)\n        ], CalendarWeekViewComponent.prototype, \"locale\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CalendarWeekViewComponent.prototype, \"tooltipPlacement\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", core.TemplateRef)\n        ], CalendarWeekViewComponent.prototype, \"tooltipTemplate\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Boolean)\n        ], CalendarWeekViewComponent.prototype, \"tooltipAppendToBody\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], CalendarWeekViewComponent.prototype, \"tooltipDelay\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], CalendarWeekViewComponent.prototype, \"weekStartsOn\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", core.TemplateRef)\n        ], CalendarWeekViewComponent.prototype, \"headerTemplate\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", core.TemplateRef)\n        ], CalendarWeekViewComponent.prototype, \"eventTemplate\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", core.TemplateRef)\n        ], CalendarWeekViewComponent.prototype, \"eventTitleTemplate\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", core.TemplateRef)\n        ], CalendarWeekViewComponent.prototype, \"eventActionsTemplate\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", String)\n        ], CalendarWeekViewComponent.prototype, \"precision\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Array)\n        ], CalendarWeekViewComponent.prototype, \"weekendDays\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Boolean)\n        ], CalendarWeekViewComponent.prototype, \"snapDraggedEvents\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], CalendarWeekViewComponent.prototype, \"hourSegments\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], CalendarWeekViewComponent.prototype, \"hourSegmentHeight\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], CalendarWeekViewComponent.prototype, \"dayStartHour\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], CalendarWeekViewComponent.prototype, \"dayStartMinute\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], CalendarWeekViewComponent.prototype, \"dayEndHour\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], CalendarWeekViewComponent.prototype, \"dayEndMinute\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", core.TemplateRef)\n        ], CalendarWeekViewComponent.prototype, \"hourSegmentTemplate\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], CalendarWeekViewComponent.prototype, \"eventSnapSize\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", core.TemplateRef)\n        ], CalendarWeekViewComponent.prototype, \"allDayEventsLabelTemplate\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], CalendarWeekViewComponent.prototype, \"daysInWeek\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", core.TemplateRef)\n        ], CalendarWeekViewComponent.prototype, \"currentTimeMarkerTemplate\", void 0);\n        __decorate([\n            core.Output(),\n            __metadata(\"design:type\", Object)\n        ], CalendarWeekViewComponent.prototype, \"dayHeaderClicked\", void 0);\n        __decorate([\n            core.Output(),\n            __metadata(\"design:type\", Object)\n        ], CalendarWeekViewComponent.prototype, \"eventClicked\", void 0);\n        __decorate([\n            core.Output(),\n            __metadata(\"design:type\", Object)\n        ], CalendarWeekViewComponent.prototype, \"eventTimesChanged\", void 0);\n        __decorate([\n            core.Output(),\n            __metadata(\"design:type\", Object)\n        ], CalendarWeekViewComponent.prototype, \"beforeViewRender\", void 0);\n        __decorate([\n            core.Output(),\n            __metadata(\"design:type\", Object)\n        ], CalendarWeekViewComponent.prototype, \"hourSegmentClicked\", void 0);\n        CalendarWeekViewComponent = __decorate([\n            core.Component({\n                selector: 'mwl-calendar-week-view',\n                template: \"\\n    <div class=\\\"cal-week-view\\\" role=\\\"grid\\\">\\n      <mwl-calendar-week-view-header\\n        [days]=\\\"days\\\"\\n        [locale]=\\\"locale\\\"\\n        [customTemplate]=\\\"headerTemplate\\\"\\n        (dayHeaderClicked)=\\\"dayHeaderClicked.emit($event)\\\"\\n        (eventDropped)=\\\"\\n          eventDropped({ dropData: $event }, $event.newStart, true)\\n        \\\"\\n        (dragEnter)=\\\"dateDragEnter($event.date)\\\"\\n      >\\n      </mwl-calendar-week-view-header>\\n      <div\\n        class=\\\"cal-all-day-events\\\"\\n        #allDayEventsContainer\\n        *ngIf=\\\"view.allDayEventRows.length > 0\\\"\\n        mwlDroppable\\n        (dragEnter)=\\\"dragEnter('allDay')\\\"\\n        (dragLeave)=\\\"dragLeave('allDay')\\\"\\n      >\\n        <div class=\\\"cal-day-columns\\\">\\n          <div\\n            class=\\\"cal-time-label-column\\\"\\n            [ngTemplateOutlet]=\\\"allDayEventsLabelTemplate\\\"\\n          ></div>\\n          <div\\n            class=\\\"cal-day-column\\\"\\n            *ngFor=\\\"let day of days; trackBy: trackByWeekDayHeaderDate\\\"\\n            mwlDroppable\\n            dragOverClass=\\\"cal-drag-over\\\"\\n            (drop)=\\\"eventDropped($event, day.date, true)\\\"\\n            (dragEnter)=\\\"dateDragEnter(day.date)\\\"\\n          ></div>\\n        </div>\\n        <div\\n          *ngFor=\\\"let eventRow of view.allDayEventRows; trackBy: trackById\\\"\\n          #eventRowContainer\\n          class=\\\"cal-events-row\\\"\\n        >\\n          <div\\n            *ngFor=\\\"\\n              let allDayEvent of eventRow.row;\\n              trackBy: trackByWeekAllDayEvent\\n            \\\"\\n            #event\\n            class=\\\"cal-event-container\\\"\\n            [class.cal-draggable]=\\\"\\n              allDayEvent.event.draggable && allDayEventResizes.size === 0\\n            \\\"\\n            [class.cal-starts-within-week]=\\\"!allDayEvent.startsBeforeWeek\\\"\\n            [class.cal-ends-within-week]=\\\"!allDayEvent.endsAfterWeek\\\"\\n            [ngClass]=\\\"allDayEvent.event?.cssClass\\\"\\n            [style.width.%]=\\\"(100 / days.length) * allDayEvent.span\\\"\\n            [style.marginLeft.%]=\\\"(100 / days.length) * allDayEvent.offset\\\"\\n            mwlResizable\\n            [resizeSnapGrid]=\\\"{ left: dayColumnWidth, right: dayColumnWidth }\\\"\\n            [validateResize]=\\\"validateResize\\\"\\n            (resizeStart)=\\\"\\n              allDayEventResizeStarted(eventRowContainer, allDayEvent, $event)\\n            \\\"\\n            (resizing)=\\\"\\n              allDayEventResizing(allDayEvent, $event, dayColumnWidth)\\n            \\\"\\n            (resizeEnd)=\\\"allDayEventResizeEnded(allDayEvent)\\\"\\n            mwlDraggable\\n            dragActiveClass=\\\"cal-drag-active\\\"\\n            [dropData]=\\\"{ event: allDayEvent.event, calendarId: calendarId }\\\"\\n            [dragAxis]=\\\"{\\n              x: allDayEvent.event.draggable && allDayEventResizes.size === 0,\\n              y:\\n                !snapDraggedEvents &&\\n                allDayEvent.event.draggable &&\\n                allDayEventResizes.size === 0\\n            }\\\"\\n            [dragSnapGrid]=\\\"snapDraggedEvents ? { x: dayColumnWidth } : {}\\\"\\n            [validateDrag]=\\\"validateDrag\\\"\\n            (dragStart)=\\\"dragStarted(eventRowContainer, event)\\\"\\n            (dragging)=\\\"allDayEventDragMove()\\\"\\n            (dragEnd)=\\\"dragEnded(allDayEvent, $event, dayColumnWidth)\\\"\\n          >\\n            <div\\n              class=\\\"cal-resize-handle cal-resize-handle-before-start\\\"\\n              *ngIf=\\\"\\n                allDayEvent.event?.resizable?.beforeStart &&\\n                !allDayEvent.startsBeforeWeek\\n              \\\"\\n              mwlResizeHandle\\n              [resizeEdges]=\\\"{ left: true }\\\"\\n            ></div>\\n            <mwl-calendar-week-view-event\\n              [locale]=\\\"locale\\\"\\n              [weekEvent]=\\\"allDayEvent\\\"\\n              [tooltipPlacement]=\\\"tooltipPlacement\\\"\\n              [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n              [tooltipAppendToBody]=\\\"tooltipAppendToBody\\\"\\n              [tooltipDelay]=\\\"tooltipDelay\\\"\\n              [customTemplate]=\\\"eventTemplate\\\"\\n              [eventTitleTemplate]=\\\"eventTitleTemplate\\\"\\n              [eventActionsTemplate]=\\\"eventActionsTemplate\\\"\\n              [daysInWeek]=\\\"daysInWeek\\\"\\n              (eventClicked)=\\\"\\n                eventClicked.emit({\\n                  event: allDayEvent.event,\\n                  sourceEvent: $event.sourceEvent\\n                })\\n              \\\"\\n            >\\n            </mwl-calendar-week-view-event>\\n            <div\\n              class=\\\"cal-resize-handle cal-resize-handle-after-end\\\"\\n              *ngIf=\\\"\\n                allDayEvent.event?.resizable?.afterEnd &&\\n                !allDayEvent.endsAfterWeek\\n              \\\"\\n              mwlResizeHandle\\n              [resizeEdges]=\\\"{ right: true }\\\"\\n            ></div>\\n          </div>\\n        </div>\\n      </div>\\n      <div\\n        class=\\\"cal-time-events\\\"\\n        mwlDroppable\\n        (dragEnter)=\\\"dragEnter('time')\\\"\\n        (dragLeave)=\\\"dragLeave('time')\\\"\\n      >\\n        <div\\n          class=\\\"cal-time-label-column\\\"\\n          *ngIf=\\\"view.hourColumns.length > 0 && daysInWeek !== 1\\\"\\n        >\\n          <div\\n            *ngFor=\\\"\\n              let hour of view.hourColumns[0].hours;\\n              trackBy: trackByHour;\\n              let odd = odd\\n            \\\"\\n            class=\\\"cal-hour\\\"\\n            [class.cal-hour-odd]=\\\"odd\\\"\\n          >\\n            <mwl-calendar-week-view-hour-segment\\n              *ngFor=\\\"let segment of hour.segments; trackBy: trackByHourSegment\\\"\\n              [style.height.px]=\\\"hourSegmentHeight\\\"\\n              [segment]=\\\"segment\\\"\\n              [segmentHeight]=\\\"hourSegmentHeight\\\"\\n              [locale]=\\\"locale\\\"\\n              [customTemplate]=\\\"hourSegmentTemplate\\\"\\n              [isTimeLabel]=\\\"true\\\"\\n              [daysInWeek]=\\\"daysInWeek\\\"\\n            >\\n            </mwl-calendar-week-view-hour-segment>\\n          </div>\\n        </div>\\n        <div\\n          class=\\\"cal-day-columns\\\"\\n          [class.cal-resize-active]=\\\"timeEventResizes.size > 0\\\"\\n          #dayColumns\\n        >\\n          <div\\n            class=\\\"cal-day-column\\\"\\n            *ngFor=\\\"let column of view.hourColumns; trackBy: trackByHourColumn\\\"\\n          >\\n            <mwl-calendar-week-view-current-time-marker\\n              [columnDate]=\\\"column.date\\\"\\n              [dayStartHour]=\\\"dayStartHour\\\"\\n              [dayStartMinute]=\\\"dayStartMinute\\\"\\n              [dayEndHour]=\\\"dayEndHour\\\"\\n              [dayEndMinute]=\\\"dayEndMinute\\\"\\n              [hourSegments]=\\\"hourSegments\\\"\\n              [hourSegmentHeight]=\\\"hourSegmentHeight\\\"\\n              [customTemplate]=\\\"currentTimeMarkerTemplate\\\"\\n            ></mwl-calendar-week-view-current-time-marker>\\n            <div class=\\\"cal-events-container\\\">\\n              <div\\n                *ngFor=\\\"\\n                  let timeEvent of column.events;\\n                  trackBy: trackByWeekTimeEvent\\n                \\\"\\n                #event\\n                class=\\\"cal-event-container\\\"\\n                [class.cal-draggable]=\\\"\\n                  timeEvent.event.draggable && timeEventResizes.size === 0\\n                \\\"\\n                [class.cal-starts-within-day]=\\\"!timeEvent.startsBeforeDay\\\"\\n                [class.cal-ends-within-day]=\\\"!timeEvent.endsAfterDay\\\"\\n                [ngClass]=\\\"timeEvent.event.cssClass\\\"\\n                [hidden]=\\\"timeEvent.height === 0 && timeEvent.width === 0\\\"\\n                [style.top.px]=\\\"timeEvent.top\\\"\\n                [style.height.px]=\\\"timeEvent.height\\\"\\n                [style.left.%]=\\\"timeEvent.left\\\"\\n                [style.width.%]=\\\"timeEvent.width\\\"\\n                mwlResizable\\n                [resizeSnapGrid]=\\\"{\\n                  left: dayColumnWidth,\\n                  right: dayColumnWidth,\\n                  top: eventSnapSize || hourSegmentHeight,\\n                  bottom: eventSnapSize || hourSegmentHeight\\n                }\\\"\\n                [validateResize]=\\\"validateResize\\\"\\n                [allowNegativeResizes]=\\\"true\\\"\\n                (resizeStart)=\\\"\\n                  timeEventResizeStarted(dayColumns, timeEvent, $event)\\n                \\\"\\n                (resizing)=\\\"timeEventResizing(timeEvent, $event)\\\"\\n                (resizeEnd)=\\\"timeEventResizeEnded(timeEvent)\\\"\\n                mwlDraggable\\n                dragActiveClass=\\\"cal-drag-active\\\"\\n                [dropData]=\\\"{ event: timeEvent.event, calendarId: calendarId }\\\"\\n                [dragAxis]=\\\"{\\n                  x: timeEvent.event.draggable && timeEventResizes.size === 0,\\n                  y: timeEvent.event.draggable && timeEventResizes.size === 0\\n                }\\\"\\n                [dragSnapGrid]=\\\"\\n                  snapDraggedEvents\\n                    ? {\\n                        x: dayColumnWidth,\\n                        y: eventSnapSize || hourSegmentHeight\\n                      }\\n                    : {}\\n                \\\"\\n                [ghostDragEnabled]=\\\"!snapDraggedEvents\\\"\\n                [validateDrag]=\\\"validateDrag\\\"\\n                (dragStart)=\\\"dragStarted(dayColumns, event, timeEvent)\\\"\\n                (dragging)=\\\"dragMove(timeEvent, $event)\\\"\\n                (dragEnd)=\\\"dragEnded(timeEvent, $event, dayColumnWidth, true)\\\"\\n              >\\n                <div\\n                  class=\\\"cal-resize-handle cal-resize-handle-before-start\\\"\\n                  *ngIf=\\\"\\n                    timeEvent.event?.resizable?.beforeStart &&\\n                    !timeEvent.startsBeforeDay\\n                  \\\"\\n                  mwlResizeHandle\\n                  [resizeEdges]=\\\"{\\n                    left: true,\\n                    top: true\\n                  }\\\"\\n                ></div>\\n                <mwl-calendar-week-view-event\\n                  [locale]=\\\"locale\\\"\\n                  [weekEvent]=\\\"timeEvent\\\"\\n                  [tooltipPlacement]=\\\"tooltipPlacement\\\"\\n                  [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n                  [tooltipAppendToBody]=\\\"tooltipAppendToBody\\\"\\n                  [tooltipDisabled]=\\\"dragActive || timeEventResizes.size > 0\\\"\\n                  [tooltipDelay]=\\\"tooltipDelay\\\"\\n                  [customTemplate]=\\\"eventTemplate\\\"\\n                  [eventTitleTemplate]=\\\"eventTitleTemplate\\\"\\n                  [eventActionsTemplate]=\\\"eventActionsTemplate\\\"\\n                  [column]=\\\"column\\\"\\n                  [daysInWeek]=\\\"daysInWeek\\\"\\n                  (eventClicked)=\\\"\\n                    eventClicked.emit({\\n                      event: timeEvent.event,\\n                      sourceEvent: $event.sourceEvent\\n                    })\\n                  \\\"\\n                >\\n                </mwl-calendar-week-view-event>\\n                <div\\n                  class=\\\"cal-resize-handle cal-resize-handle-after-end\\\"\\n                  *ngIf=\\\"\\n                    timeEvent.event?.resizable?.afterEnd &&\\n                    !timeEvent.endsAfterDay\\n                  \\\"\\n                  mwlResizeHandle\\n                  [resizeEdges]=\\\"{\\n                    right: true,\\n                    bottom: true\\n                  }\\\"\\n                ></div>\\n              </div>\\n            </div>\\n\\n            <div\\n              *ngFor=\\\"\\n                let hour of column.hours;\\n                trackBy: trackByHour;\\n                let odd = odd\\n              \\\"\\n              class=\\\"cal-hour\\\"\\n              [class.cal-hour-odd]=\\\"odd\\\"\\n            >\\n              <mwl-calendar-week-view-hour-segment\\n                *ngFor=\\\"\\n                  let segment of hour.segments;\\n                  trackBy: trackByHourSegment\\n                \\\"\\n                [style.height.px]=\\\"hourSegmentHeight\\\"\\n                [segment]=\\\"segment\\\"\\n                [segmentHeight]=\\\"hourSegmentHeight\\\"\\n                [locale]=\\\"locale\\\"\\n                [customTemplate]=\\\"hourSegmentTemplate\\\"\\n                [daysInWeek]=\\\"daysInWeek\\\"\\n                (mwlClick)=\\\"\\n                  hourSegmentClicked.emit({\\n                    date: segment.date,\\n                    sourceEvent: $event\\n                  })\\n                \\\"\\n                [clickListenerDisabled]=\\\"\\n                  hourSegmentClicked.observers.length === 0\\n                \\\"\\n                mwlDroppable\\n                [dragOverClass]=\\\"\\n                  !dragActive || !snapDraggedEvents ? 'cal-drag-over' : null\\n                \\\"\\n                dragActiveClass=\\\"cal-drag-active\\\"\\n                (drop)=\\\"eventDropped($event, segment.date, false)\\\"\\n                (dragEnter)=\\\"dateDragEnter(segment.date)\\\"\\n                [isTimeLabel]=\\\"daysInWeek === 1\\\"\\n              >\\n              </mwl-calendar-week-view-hour-segment>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  \"\n            }),\n            __param(2, core.Inject(core.LOCALE_ID)),\n            __metadata(\"design:paramtypes\", [core.ChangeDetectorRef,\n                CalendarUtils, String, DateAdapter])\n        ], CalendarWeekViewComponent);\n        return CalendarWeekViewComponent;\n    }());\n\n    var CalendarWeekViewHeaderComponent = /** @class */ (function () {\n        function CalendarWeekViewHeaderComponent() {\n            this.dayHeaderClicked = new core.EventEmitter();\n            this.eventDropped = new core.EventEmitter();\n            this.dragEnter = new core.EventEmitter();\n            this.trackByWeekDayHeaderDate = trackByWeekDayHeaderDate;\n        }\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Array)\n        ], CalendarWeekViewHeaderComponent.prototype, \"days\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", String)\n        ], CalendarWeekViewHeaderComponent.prototype, \"locale\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", core.TemplateRef)\n        ], CalendarWeekViewHeaderComponent.prototype, \"customTemplate\", void 0);\n        __decorate([\n            core.Output(),\n            __metadata(\"design:type\", Object)\n        ], CalendarWeekViewHeaderComponent.prototype, \"dayHeaderClicked\", void 0);\n        __decorate([\n            core.Output(),\n            __metadata(\"design:type\", Object)\n        ], CalendarWeekViewHeaderComponent.prototype, \"eventDropped\", void 0);\n        __decorate([\n            core.Output(),\n            __metadata(\"design:type\", Object)\n        ], CalendarWeekViewHeaderComponent.prototype, \"dragEnter\", void 0);\n        CalendarWeekViewHeaderComponent = __decorate([\n            core.Component({\n                selector: 'mwl-calendar-week-view-header',\n                template: \"\\n    <ng-template\\n      #defaultTemplate\\n      let-days=\\\"days\\\"\\n      let-locale=\\\"locale\\\"\\n      let-dayHeaderClicked=\\\"dayHeaderClicked\\\"\\n      let-eventDropped=\\\"eventDropped\\\"\\n      let-trackByWeekDayHeaderDate=\\\"trackByWeekDayHeaderDate\\\"\\n      let-dragEnter=\\\"dragEnter\\\"\\n    >\\n      <div class=\\\"cal-day-headers\\\" role=\\\"row\\\">\\n        <div\\n          class=\\\"cal-header\\\"\\n          *ngFor=\\\"let day of days; trackBy: trackByWeekDayHeaderDate\\\"\\n          [class.cal-past]=\\\"day.isPast\\\"\\n          [class.cal-today]=\\\"day.isToday\\\"\\n          [class.cal-future]=\\\"day.isFuture\\\"\\n          [class.cal-weekend]=\\\"day.isWeekend\\\"\\n          [ngClass]=\\\"day.cssClass\\\"\\n          (mwlClick)=\\\"dayHeaderClicked.emit({ day: day, sourceEvent: $event })\\\"\\n          mwlDroppable\\n          dragOverClass=\\\"cal-drag-over\\\"\\n          (drop)=\\\"\\n            eventDropped.emit({\\n              event: $event.dropData.event,\\n              newStart: day.date\\n            })\\n          \\\"\\n          (dragEnter)=\\\"dragEnter.emit({ date: day.date })\\\"\\n          tabindex=\\\"0\\\"\\n          role=\\\"columnheader\\\"\\n        >\\n          <b>{{ day.date | calendarDate: 'weekViewColumnHeader':locale }}</b\\n          ><br />\\n          <span>{{\\n            day.date | calendarDate: 'weekViewColumnSubHeader':locale\\n          }}</span>\\n        </div>\\n      </div>\\n    </ng-template>\\n    <ng-template\\n      [ngTemplateOutlet]=\\\"customTemplate || defaultTemplate\\\"\\n      [ngTemplateOutletContext]=\\\"{\\n        days: days,\\n        locale: locale,\\n        dayHeaderClicked: dayHeaderClicked,\\n        eventDropped: eventDropped,\\n        dragEnter: dragEnter,\\n        trackByWeekDayHeaderDate: trackByWeekDayHeaderDate\\n      }\\\"\\n    >\\n    </ng-template>\\n  \"\n            })\n        ], CalendarWeekViewHeaderComponent);\n        return CalendarWeekViewHeaderComponent;\n    }());\n\n    var CalendarWeekViewEventComponent = /** @class */ (function () {\n        function CalendarWeekViewEventComponent() {\n            this.eventClicked = new core.EventEmitter();\n        }\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", String)\n        ], CalendarWeekViewEventComponent.prototype, \"locale\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CalendarWeekViewEventComponent.prototype, \"weekEvent\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CalendarWeekViewEventComponent.prototype, \"tooltipPlacement\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Boolean)\n        ], CalendarWeekViewEventComponent.prototype, \"tooltipAppendToBody\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Boolean)\n        ], CalendarWeekViewEventComponent.prototype, \"tooltipDisabled\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], CalendarWeekViewEventComponent.prototype, \"tooltipDelay\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", core.TemplateRef)\n        ], CalendarWeekViewEventComponent.prototype, \"customTemplate\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", core.TemplateRef)\n        ], CalendarWeekViewEventComponent.prototype, \"eventTitleTemplate\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", core.TemplateRef)\n        ], CalendarWeekViewEventComponent.prototype, \"eventActionsTemplate\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", core.TemplateRef)\n        ], CalendarWeekViewEventComponent.prototype, \"tooltipTemplate\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CalendarWeekViewEventComponent.prototype, \"column\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], CalendarWeekViewEventComponent.prototype, \"daysInWeek\", void 0);\n        __decorate([\n            core.Output(),\n            __metadata(\"design:type\", Object)\n        ], CalendarWeekViewEventComponent.prototype, \"eventClicked\", void 0);\n        CalendarWeekViewEventComponent = __decorate([\n            core.Component({\n                selector: 'mwl-calendar-week-view-event',\n                template: \"\\n    <ng-template\\n      #defaultTemplate\\n      let-weekEvent=\\\"weekEvent\\\"\\n      let-tooltipPlacement=\\\"tooltipPlacement\\\"\\n      let-eventClicked=\\\"eventClicked\\\"\\n      let-tooltipTemplate=\\\"tooltipTemplate\\\"\\n      let-tooltipAppendToBody=\\\"tooltipAppendToBody\\\"\\n      let-tooltipDisabled=\\\"tooltipDisabled\\\"\\n      let-tooltipDelay=\\\"tooltipDelay\\\"\\n      let-column=\\\"column\\\"\\n      let-daysInWeek=\\\"daysInWeek\\\"\\n    >\\n      <div\\n        class=\\\"cal-event\\\"\\n        [ngStyle]=\\\"{\\n          backgroundColor: weekEvent.event.color?.secondary,\\n          borderColor: weekEvent.event.color?.primary\\n        }\\\"\\n        [mwlCalendarTooltip]=\\\"\\n          !tooltipDisabled\\n            ? (weekEvent.event.title\\n              | calendarEventTitle\\n                : (daysInWeek === 1 ? 'dayTooltip' : 'weekTooltip')\\n                : weekEvent.event)\\n            : ''\\n        \\\"\\n        [tooltipPlacement]=\\\"tooltipPlacement\\\"\\n        [tooltipEvent]=\\\"weekEvent.event\\\"\\n        [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n        [tooltipAppendToBody]=\\\"tooltipAppendToBody\\\"\\n        [tooltipDelay]=\\\"tooltipDelay\\\"\\n        (mwlClick)=\\\"eventClicked.emit({ sourceEvent: $event })\\\"\\n        (mwlKeydownEnter)=\\\"eventClicked.emit({ sourceEvent: $event })\\\"\\n        tabindex=\\\"0\\\"\\n        role=\\\"application\\\"\\n        [attr.aria-label]=\\\"\\n          { event: weekEvent.event, locale: locale }\\n            | calendarA11y: 'eventDescription'\\n        \\\"\\n      >\\n        <mwl-calendar-event-actions\\n          [event]=\\\"weekEvent.event\\\"\\n          [customTemplate]=\\\"eventActionsTemplate\\\"\\n        >\\n        </mwl-calendar-event-actions>\\n        &ngsp;\\n        <mwl-calendar-event-title\\n          [event]=\\\"weekEvent.event\\\"\\n          [customTemplate]=\\\"eventTitleTemplate\\\"\\n          [view]=\\\"daysInWeek === 1 ? 'day' : 'week'\\\"\\n        >\\n        </mwl-calendar-event-title>\\n      </div>\\n    </ng-template>\\n    <ng-template\\n      [ngTemplateOutlet]=\\\"customTemplate || defaultTemplate\\\"\\n      [ngTemplateOutletContext]=\\\"{\\n        weekEvent: weekEvent,\\n        tooltipPlacement: tooltipPlacement,\\n        eventClicked: eventClicked,\\n        tooltipTemplate: tooltipTemplate,\\n        tooltipAppendToBody: tooltipAppendToBody,\\n        tooltipDisabled: tooltipDisabled,\\n        tooltipDelay: tooltipDelay,\\n        column: column,\\n        daysInWeek: daysInWeek\\n      }\\\"\\n    >\\n    </ng-template>\\n  \"\n            })\n        ], CalendarWeekViewEventComponent);\n        return CalendarWeekViewEventComponent;\n    }());\n\n    var CalendarWeekViewHourSegmentComponent = /** @class */ (function () {\n        function CalendarWeekViewHourSegmentComponent() {\n        }\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CalendarWeekViewHourSegmentComponent.prototype, \"segment\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], CalendarWeekViewHourSegmentComponent.prototype, \"segmentHeight\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", String)\n        ], CalendarWeekViewHourSegmentComponent.prototype, \"locale\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Boolean)\n        ], CalendarWeekViewHourSegmentComponent.prototype, \"isTimeLabel\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], CalendarWeekViewHourSegmentComponent.prototype, \"daysInWeek\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", core.TemplateRef)\n        ], CalendarWeekViewHourSegmentComponent.prototype, \"customTemplate\", void 0);\n        CalendarWeekViewHourSegmentComponent = __decorate([\n            core.Component({\n                selector: 'mwl-calendar-week-view-hour-segment',\n                template: \"\\n    <ng-template\\n      #defaultTemplate\\n      let-segment=\\\"segment\\\"\\n      let-locale=\\\"locale\\\"\\n      let-segmentHeight=\\\"segmentHeight\\\"\\n      let-isTimeLabel=\\\"isTimeLabel\\\"\\n      let-daysInWeek=\\\"daysInWeek\\\"\\n    >\\n      <div\\n        [attr.aria-hidden]=\\\"\\n          {}\\n            | calendarA11y\\n              : (daysInWeek === 1\\n                  ? 'hideDayHourSegment'\\n                  : 'hideWeekHourSegment')\\n        \\\"\\n        class=\\\"cal-hour-segment\\\"\\n        [style.height.px]=\\\"segmentHeight\\\"\\n        [class.cal-hour-start]=\\\"segment.isStart\\\"\\n        [class.cal-after-hour-start]=\\\"!segment.isStart\\\"\\n        [ngClass]=\\\"segment.cssClass\\\"\\n      >\\n        <div class=\\\"cal-time\\\" *ngIf=\\\"isTimeLabel\\\">\\n          {{\\n            segment.displayDate\\n              | calendarDate\\n                : (daysInWeek === 1 ? 'dayViewHour' : 'weekViewHour')\\n                : locale\\n          }}\\n        </div>\\n      </div>\\n    </ng-template>\\n    <ng-template\\n      [ngTemplateOutlet]=\\\"customTemplate || defaultTemplate\\\"\\n      [ngTemplateOutletContext]=\\\"{\\n        segment: segment,\\n        locale: locale,\\n        segmentHeight: segmentHeight,\\n        isTimeLabel: isTimeLabel,\\n        daysInWeek: daysInWeek\\n      }\\\"\\n    >\\n    </ng-template>\\n  \"\n            })\n        ], CalendarWeekViewHourSegmentComponent);\n        return CalendarWeekViewHourSegmentComponent;\n    }());\n\n    var CalendarWeekViewCurrentTimeMarkerComponent = /** @class */ (function () {\n        function CalendarWeekViewCurrentTimeMarkerComponent(dateAdapter) {\n            var _this = this;\n            this.dateAdapter = dateAdapter;\n            this.columnDate$ = new rxjs.BehaviorSubject(this.columnDate);\n            this.marker$ = rxjs.interval(60 * 1000).pipe(operators.startWith(0), operators.switchMapTo(this.columnDate$), operators.map(function (columnDate) {\n                var startOfDay = _this.dateAdapter.setMinutes(_this.dateAdapter.setHours(columnDate, _this.dayStartHour), _this.dayStartMinute);\n                var endOfDay = _this.dateAdapter.setMinutes(_this.dateAdapter.setHours(columnDate, _this.dayEndHour), _this.dayEndMinute);\n                var hourHeightModifier = (_this.hourSegments * _this.hourSegmentHeight) / 60;\n                var now = new Date();\n                return {\n                    isVisible: _this.dateAdapter.isSameDay(columnDate, now) &&\n                        now >= startOfDay &&\n                        now <= endOfDay,\n                    top: _this.dateAdapter.differenceInMinutes(now, startOfDay) *\n                        hourHeightModifier\n                };\n            }));\n        }\n        CalendarWeekViewCurrentTimeMarkerComponent.prototype.ngOnChanges = function (changes) {\n            if (changes.columnDate) {\n                this.columnDate$.next(changes.columnDate.currentValue);\n            }\n        };\n        CalendarWeekViewCurrentTimeMarkerComponent.ctorParameters = function () { return [\n            { type: DateAdapter }\n        ]; };\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Date)\n        ], CalendarWeekViewCurrentTimeMarkerComponent.prototype, \"columnDate\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], CalendarWeekViewCurrentTimeMarkerComponent.prototype, \"dayStartHour\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], CalendarWeekViewCurrentTimeMarkerComponent.prototype, \"dayStartMinute\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], CalendarWeekViewCurrentTimeMarkerComponent.prototype, \"dayEndHour\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], CalendarWeekViewCurrentTimeMarkerComponent.prototype, \"dayEndMinute\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], CalendarWeekViewCurrentTimeMarkerComponent.prototype, \"hourSegments\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], CalendarWeekViewCurrentTimeMarkerComponent.prototype, \"hourSegmentHeight\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", core.TemplateRef)\n        ], CalendarWeekViewCurrentTimeMarkerComponent.prototype, \"customTemplate\", void 0);\n        CalendarWeekViewCurrentTimeMarkerComponent = __decorate([\n            core.Component({\n                selector: 'mwl-calendar-week-view-current-time-marker',\n                template: \"\\n    <ng-template\\n      #defaultTemplate\\n      let-columnDate=\\\"columnDate\\\"\\n      let-dayStartHour=\\\"dayStartHour\\\"\\n      let-dayStartMinute=\\\"dayStartMinute\\\"\\n      let-dayEndHour=\\\"dayEndHour\\\"\\n      let-dayEndMinute=\\\"dayEndMinute\\\"\\n      let-isVisible=\\\"isVisible\\\"\\n      let-topPx=\\\"topPx\\\"\\n    >\\n      <div\\n        class=\\\"cal-current-time-marker\\\"\\n        *ngIf=\\\"isVisible\\\"\\n        [style.top.px]=\\\"topPx\\\"\\n      ></div>\\n    </ng-template>\\n    <ng-template\\n      [ngTemplateOutlet]=\\\"customTemplate || defaultTemplate\\\"\\n      [ngTemplateOutletContext]=\\\"{\\n        columnDate: columnDate,\\n        dayStartHour: dayStartHour,\\n        dayStartMinute: dayStartMinute,\\n        dayEndHour: dayEndHour,\\n        dayEndMinute: dayEndMinute,\\n        isVisible: (marker$ | async)?.isVisible,\\n        topPx: (marker$ | async)?.top\\n      }\\\"\\n    >\\n    </ng-template>\\n  \"\n            }),\n            __metadata(\"design:paramtypes\", [DateAdapter])\n        ], CalendarWeekViewCurrentTimeMarkerComponent);\n        return CalendarWeekViewCurrentTimeMarkerComponent;\n    }());\n\n    var CalendarWeekModule = /** @class */ (function () {\n        function CalendarWeekModule() {\n        }\n        CalendarWeekModule = __decorate([\n            core.NgModule({\n                imports: [\n                    common.CommonModule,\n                    angularResizableElement.ResizableModule,\n                    angularDraggableDroppable.DragAndDropModule,\n                    CalendarCommonModule\n                ],\n                declarations: [\n                    CalendarWeekViewComponent,\n                    CalendarWeekViewHeaderComponent,\n                    CalendarWeekViewEventComponent,\n                    CalendarWeekViewHourSegmentComponent,\n                    CalendarWeekViewCurrentTimeMarkerComponent\n                ],\n                exports: [\n                    angularResizableElement.ResizableModule,\n                    angularDraggableDroppable.DragAndDropModule,\n                    CalendarWeekViewComponent,\n                    CalendarWeekViewHeaderComponent,\n                    CalendarWeekViewEventComponent,\n                    CalendarWeekViewHourSegmentComponent,\n                    CalendarWeekViewCurrentTimeMarkerComponent\n                ]\n            })\n        ], CalendarWeekModule);\n        return CalendarWeekModule;\n    }());\n\n    /**\n     * Shows all events on a given day. Example usage:\n     *\n     * ```typescript\n     * <mwl-calendar-day-view\n     *  [viewDate]=\"viewDate\"\n     *  [events]=\"events\">\n     * </mwl-calendar-day-view>\n     * ```\n     */\n    var CalendarDayViewComponent = /** @class */ (function () {\n        function CalendarDayViewComponent() {\n            /**\n             * An array of events to display on view\n             * The schema is available here: https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63\n             */\n            this.events = [];\n            /**\n             * The number of segments in an hour. Must be <= 6\n             */\n            this.hourSegments = 2;\n            /**\n             * The height in pixels of each hour segment\n             */\n            this.hourSegmentHeight = 30;\n            /**\n             * The day start hours in 24 hour time. Must be 0-23\n             */\n            this.dayStartHour = 0;\n            /**\n             * The day start minutes. Must be 0-59\n             */\n            this.dayStartMinute = 0;\n            /**\n             * The day end hours in 24 hour time. Must be 0-23\n             */\n            this.dayEndHour = 23;\n            /**\n             * The day end minutes. Must be 0-59\n             */\n            this.dayEndMinute = 59;\n            /**\n             * The placement of the event tooltip\n             */\n            this.tooltipPlacement = 'auto';\n            /**\n             * Whether to append tooltips to the body or next to the trigger element\n             */\n            this.tooltipAppendToBody = true;\n            /**\n             * The delay in milliseconds before the tooltip should be displayed. If not provided the tooltip\n             * will be displayed immediately.\n             */\n            this.tooltipDelay = null;\n            /**\n             * Whether to snap events to a grid when dragging\n             */\n            this.snapDraggedEvents = true;\n            /**\n             * Called when an event title is clicked\n             */\n            this.eventClicked = new core.EventEmitter();\n            /**\n             * Called when an hour segment is clicked\n             */\n            this.hourSegmentClicked = new core.EventEmitter();\n            /**\n             * Called when an event is resized or dragged and dropped\n             */\n            this.eventTimesChanged = new core.EventEmitter();\n            /**\n             * An output that will be called before the view is rendered for the current day.\n             * If you add the `cssClass` property to an hour grid segment it will add that class to the hour segment in the template\n             */\n            this.beforeViewRender = new core.EventEmitter();\n        }\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Date)\n        ], CalendarDayViewComponent.prototype, \"viewDate\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Array)\n        ], CalendarDayViewComponent.prototype, \"events\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], CalendarDayViewComponent.prototype, \"hourSegments\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], CalendarDayViewComponent.prototype, \"hourSegmentHeight\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], CalendarDayViewComponent.prototype, \"dayStartHour\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], CalendarDayViewComponent.prototype, \"dayStartMinute\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], CalendarDayViewComponent.prototype, \"dayEndHour\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], CalendarDayViewComponent.prototype, \"dayEndMinute\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", rxjs.Subject)\n        ], CalendarDayViewComponent.prototype, \"refresh\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", String)\n        ], CalendarDayViewComponent.prototype, \"locale\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], CalendarDayViewComponent.prototype, \"eventSnapSize\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CalendarDayViewComponent.prototype, \"tooltipPlacement\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", core.TemplateRef)\n        ], CalendarDayViewComponent.prototype, \"tooltipTemplate\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Boolean)\n        ], CalendarDayViewComponent.prototype, \"tooltipAppendToBody\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], CalendarDayViewComponent.prototype, \"tooltipDelay\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", core.TemplateRef)\n        ], CalendarDayViewComponent.prototype, \"hourSegmentTemplate\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", core.TemplateRef)\n        ], CalendarDayViewComponent.prototype, \"eventTemplate\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", core.TemplateRef)\n        ], CalendarDayViewComponent.prototype, \"eventTitleTemplate\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", core.TemplateRef)\n        ], CalendarDayViewComponent.prototype, \"eventActionsTemplate\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Boolean)\n        ], CalendarDayViewComponent.prototype, \"snapDraggedEvents\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", core.TemplateRef)\n        ], CalendarDayViewComponent.prototype, \"allDayEventsLabelTemplate\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", core.TemplateRef)\n        ], CalendarDayViewComponent.prototype, \"currentTimeMarkerTemplate\", void 0);\n        __decorate([\n            core.Output(),\n            __metadata(\"design:type\", Object)\n        ], CalendarDayViewComponent.prototype, \"eventClicked\", void 0);\n        __decorate([\n            core.Output(),\n            __metadata(\"design:type\", Object)\n        ], CalendarDayViewComponent.prototype, \"hourSegmentClicked\", void 0);\n        __decorate([\n            core.Output(),\n            __metadata(\"design:type\", Object)\n        ], CalendarDayViewComponent.prototype, \"eventTimesChanged\", void 0);\n        __decorate([\n            core.Output(),\n            __metadata(\"design:type\", Object)\n        ], CalendarDayViewComponent.prototype, \"beforeViewRender\", void 0);\n        CalendarDayViewComponent = __decorate([\n            core.Component({\n                selector: 'mwl-calendar-day-view',\n                template: \"\\n    <mwl-calendar-week-view\\n      class=\\\"cal-day-view\\\"\\n      [daysInWeek]=\\\"1\\\"\\n      [viewDate]=\\\"viewDate\\\"\\n      [events]=\\\"events\\\"\\n      [hourSegments]=\\\"hourSegments\\\"\\n      [hourSegmentHeight]=\\\"hourSegmentHeight\\\"\\n      [dayStartHour]=\\\"dayStartHour\\\"\\n      [dayStartMinute]=\\\"dayStartMinute\\\"\\n      [dayEndHour]=\\\"dayEndHour\\\"\\n      [dayEndMinute]=\\\"dayEndMinute\\\"\\n      [refresh]=\\\"refresh\\\"\\n      [locale]=\\\"locale\\\"\\n      [eventSnapSize]=\\\"eventSnapSize\\\"\\n      [tooltipPlacement]=\\\"tooltipPlacement\\\"\\n      [tooltipTemplate]=\\\"tooltipTemplate\\\"\\n      [tooltipAppendToBody]=\\\"tooltipAppendToBody\\\"\\n      [tooltipDelay]=\\\"tooltipDelay\\\"\\n      [hourSegmentTemplate]=\\\"hourSegmentTemplate\\\"\\n      [eventTemplate]=\\\"eventTemplate\\\"\\n      [eventTitleTemplate]=\\\"eventTitleTemplate\\\"\\n      [eventActionsTemplate]=\\\"eventActionsTemplate\\\"\\n      [snapDraggedEvents]=\\\"snapDraggedEvents\\\"\\n      [allDayEventsLabelTemplate]=\\\"allDayEventsLabelTemplate\\\"\\n      [currentTimeMarkerTemplate]=\\\"currentTimeMarkerTemplate\\\"\\n      (eventClicked)=\\\"eventClicked.emit($event)\\\"\\n      (hourSegmentClicked)=\\\"hourSegmentClicked.emit($event)\\\"\\n      (eventTimesChanged)=\\\"eventTimesChanged.emit($event)\\\"\\n      (beforeViewRender)=\\\"beforeViewRender.emit($event)\\\"\\n    ></mwl-calendar-week-view>\\n  \"\n            })\n        ], CalendarDayViewComponent);\n        return CalendarDayViewComponent;\n    }());\n\n    var CalendarDayModule = /** @class */ (function () {\n        function CalendarDayModule() {\n        }\n        CalendarDayModule = __decorate([\n            core.NgModule({\n                imports: [common.CommonModule, CalendarCommonModule, CalendarWeekModule],\n                declarations: [CalendarDayViewComponent],\n                exports: [CalendarDayViewComponent]\n            })\n        ], CalendarDayModule);\n        return CalendarDayModule;\n    }());\n\n    /**\n     * The main module of this library. Example usage:\n     *\n     * ```typescript\n     * import { CalenderModule } from 'angular-calendar';\n     *\n     * @NgModule({\n     *   imports: [\n     *     CalenderModule.forRoot()\n     *   ]\n     * })\n     * class MyModule {}\n     * ```\n     *\n     */\n    var CalendarModule = /** @class */ (function () {\n        function CalendarModule() {\n        }\n        CalendarModule_1 = CalendarModule;\n        CalendarModule.forRoot = function (dateAdapter, config) {\n            if (config === void 0) { config = {}; }\n            return {\n                ngModule: CalendarModule_1,\n                providers: [\n                    dateAdapter,\n                    config.eventTitleFormatter || CalendarEventTitleFormatter,\n                    config.dateFormatter || CalendarDateFormatter,\n                    config.utils || CalendarUtils,\n                    config.a11y || CalendarA11y\n                ]\n            };\n        };\n        var CalendarModule_1;\n        CalendarModule = CalendarModule_1 = __decorate([\n            core.NgModule({\n                imports: [\n                    CalendarCommonModule,\n                    CalendarMonthModule,\n                    CalendarWeekModule,\n                    CalendarDayModule\n                ],\n                exports: [\n                    CalendarCommonModule,\n                    CalendarMonthModule,\n                    CalendarWeekModule,\n                    CalendarDayModule\n                ]\n            })\n        ], CalendarModule);\n        return CalendarModule;\n    }());\n\n    Object.defineProperty(exports, 'DAYS_OF_WEEK', {\n        enumerable: true,\n        get: function () {\n            return calendarUtils.DAYS_OF_WEEK;\n        }\n    });\n    exports.CalendarA11y = CalendarA11y;\n    exports.CalendarAngularDateFormatter = CalendarAngularDateFormatter;\n    exports.CalendarCommonModule = CalendarCommonModule;\n    exports.CalendarDateFormatter = CalendarDateFormatter;\n    exports.CalendarDayModule = CalendarDayModule;\n    exports.CalendarDayViewComponent = CalendarDayViewComponent;\n    exports.CalendarEventTitleFormatter = CalendarEventTitleFormatter;\n    exports.CalendarModule = CalendarModule;\n    exports.CalendarMomentDateFormatter = CalendarMomentDateFormatter;\n    exports.CalendarMonthModule = CalendarMonthModule;\n    exports.CalendarMonthViewComponent = CalendarMonthViewComponent;\n    exports.CalendarNativeDateFormatter = CalendarNativeDateFormatter;\n    exports.CalendarUtils = CalendarUtils;\n    exports.CalendarWeekModule = CalendarWeekModule;\n    exports.CalendarWeekViewComponent = CalendarWeekViewComponent;\n    exports.DateAdapter = DateAdapter;\n    exports.MOMENT = MOMENT;\n    exports.collapseAnimation = collapseAnimation;\n    exports.getWeekViewPeriod = getWeekViewPeriod;\n    exports.ɵa = CalendarOpenDayEventsComponent;\n    exports.ɵb = CalendarEventActionsComponent;\n    exports.ɵc = CalendarEventTitleComponent;\n    exports.ɵd = CalendarTooltipWindowComponent;\n    exports.ɵe = CalendarTooltipDirective;\n    exports.ɵf = CalendarPreviousViewDirective;\n    exports.ɵg = CalendarNextViewDirective;\n    exports.ɵh = CalendarTodayDirective;\n    exports.ɵi = CalendarDatePipe;\n    exports.ɵj = CalendarEventTitlePipe;\n    exports.ɵk = CalendarA11yPipe;\n    exports.ɵl = ClickDirective;\n    exports.ɵm = KeydownEnterDirective;\n    exports.ɵn = CalendarMonthCellComponent;\n    exports.ɵo = CalendarMonthViewHeaderComponent;\n    exports.ɵp = CalendarWeekViewHeaderComponent;\n    exports.ɵq = CalendarWeekViewEventComponent;\n    exports.ɵr = CalendarWeekViewHourSegmentComponent;\n    exports.ɵs = CalendarWeekViewCurrentTimeMarkerComponent;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"]}