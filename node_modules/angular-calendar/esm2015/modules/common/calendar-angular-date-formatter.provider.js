import * as tslib_1 from "tslib";
import { formatDate } from '@angular/common';
import { Injectable } from '@angular/core';
import { DateAdapter } from '../../date-adapters/date-adapter';
import { getWeekViewPeriod } from './util';
/**
 * This will use the angular date pipe to do all date formatting. It is the default date formatter used by the calendar.
 */
import * as ɵngcc0 from '@angular/core';
let CalendarAngularDateFormatter = class CalendarAngularDateFormatter {
    constructor(dateAdapter) {
        this.dateAdapter = dateAdapter;
    }
    /**
     * The month view header week day labels
     */
    monthViewColumnHeader({ date, locale }) {
        return formatDate(date, 'EEEE', locale);
    }
    /**
     * The month view cell day number
     */
    monthViewDayNumber({ date, locale }) {
        return formatDate(date, 'd', locale);
    }
    /**
     * The month view title
     */
    monthViewTitle({ date, locale }) {
        return formatDate(date, 'LLLL y', locale);
    }
    /**
     * The week view header week day labels
     */
    weekViewColumnHeader({ date, locale }) {
        return formatDate(date, 'EEEE', locale);
    }
    /**
     * The week view sub header day and month labels
     */
    weekViewColumnSubHeader({ date, locale }) {
        return formatDate(date, 'MMM d', locale);
    }
    /**
     * The week view title
     */
    weekViewTitle({ date, locale, weekStartsOn, excludeDays, daysInWeek }) {
        const { viewStart, viewEnd } = getWeekViewPeriod(this.dateAdapter, date, weekStartsOn, excludeDays, daysInWeek);
        const format = (dateToFormat, showYear) => formatDate(dateToFormat, 'MMM d' + (showYear ? ', yyyy' : ''), locale);
        return `${format(viewStart, viewStart.getUTCFullYear() !== viewEnd.getUTCFullYear())} - ${format(viewEnd, true)}`;
    }
    /**
     * The time formatting down the left hand side of the week view
     */
    weekViewHour({ date, locale }) {
        return formatDate(date, 'h a', locale);
    }
    /**
     * The time formatting down the left hand side of the day view
     */
    dayViewHour({ date, locale }) {
        return formatDate(date, 'h a', locale);
    }
    /**
     * The day view title
     */
    dayViewTitle({ date, locale }) {
        return formatDate(date, 'EEEE, MMMM d, y', locale);
    }
};
CalendarAngularDateFormatter.ɵfac = function CalendarAngularDateFormatter_Factory(t) { return new (t || CalendarAngularDateFormatter)(ɵngcc0.ɵɵinject(DateAdapter)); };
CalendarAngularDateFormatter.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: CalendarAngularDateFormatter, factory: CalendarAngularDateFormatter.ɵfac });
CalendarAngularDateFormatter.ctorParameters = () => [
    { type: DateAdapter }
];
CalendarAngularDateFormatter = tslib_1.__decorate([ tslib_1.__metadata("design:paramtypes", [DateAdapter])
], CalendarAngularDateFormatter);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CalendarAngularDateFormatter, [{
        type: Injectable
    }], function () { return [{ type: DateAdapter }]; }, null); })();
export { CalendarAngularDateFormatter };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNwcm8va3JpdHNhZGVlL1NWTi9DeWJlcnNvZnQvYXBleC9ub2RlX21vZHVsZXMvYW5ndWxhci1jYWxlbmRhci9lc20yMDE1L21vZHVsZXMvY29tbW9uL2NhbGVuZGFyLWFuZ3VsYXItZGF0ZS1mb3JtYXR0ZXIucHJvdmlkZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztBQVFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvSkE0REU7Ozs7bURBSWlELEFBRWhEOzs7O3FFQUM4QiIsImZpbGUiOiJjYWxlbmRhci1hbmd1bGFyLWRhdGUtZm9ybWF0dGVyLnByb3ZpZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGZvcm1hdERhdGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGF0ZUFkYXB0ZXIgfSBmcm9tICcuLi8uLi9kYXRlLWFkYXB0ZXJzL2RhdGUtYWRhcHRlcic7XG5pbXBvcnQgeyBnZXRXZWVrVmlld1BlcmlvZCB9IGZyb20gJy4vdXRpbCc7XG4vKipcbiAqIFRoaXMgd2lsbCB1c2UgdGhlIGFuZ3VsYXIgZGF0ZSBwaXBlIHRvIGRvIGFsbCBkYXRlIGZvcm1hdHRpbmcuIEl0IGlzIHRoZSBkZWZhdWx0IGRhdGUgZm9ybWF0dGVyIHVzZWQgYnkgdGhlIGNhbGVuZGFyLlxuICovXG5sZXQgQ2FsZW5kYXJBbmd1bGFyRGF0ZUZvcm1hdHRlciA9IGNsYXNzIENhbGVuZGFyQW5ndWxhckRhdGVGb3JtYXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKGRhdGVBZGFwdGVyKSB7XG4gICAgICAgIHRoaXMuZGF0ZUFkYXB0ZXIgPSBkYXRlQWRhcHRlcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIG1vbnRoIHZpZXcgaGVhZGVyIHdlZWsgZGF5IGxhYmVsc1xuICAgICAqL1xuICAgIG1vbnRoVmlld0NvbHVtbkhlYWRlcih7IGRhdGUsIGxvY2FsZSB9KSB7XG4gICAgICAgIHJldHVybiBmb3JtYXREYXRlKGRhdGUsICdFRUVFJywgbG9jYWxlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIG1vbnRoIHZpZXcgY2VsbCBkYXkgbnVtYmVyXG4gICAgICovXG4gICAgbW9udGhWaWV3RGF5TnVtYmVyKHsgZGF0ZSwgbG9jYWxlIH0pIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdERhdGUoZGF0ZSwgJ2QnLCBsb2NhbGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgbW9udGggdmlldyB0aXRsZVxuICAgICAqL1xuICAgIG1vbnRoVmlld1RpdGxlKHsgZGF0ZSwgbG9jYWxlIH0pIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdERhdGUoZGF0ZSwgJ0xMTEwgeScsIGxvY2FsZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSB3ZWVrIHZpZXcgaGVhZGVyIHdlZWsgZGF5IGxhYmVsc1xuICAgICAqL1xuICAgIHdlZWtWaWV3Q29sdW1uSGVhZGVyKHsgZGF0ZSwgbG9jYWxlIH0pIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdERhdGUoZGF0ZSwgJ0VFRUUnLCBsb2NhbGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgd2VlayB2aWV3IHN1YiBoZWFkZXIgZGF5IGFuZCBtb250aCBsYWJlbHNcbiAgICAgKi9cbiAgICB3ZWVrVmlld0NvbHVtblN1YkhlYWRlcih7IGRhdGUsIGxvY2FsZSB9KSB7XG4gICAgICAgIHJldHVybiBmb3JtYXREYXRlKGRhdGUsICdNTU0gZCcsIGxvY2FsZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSB3ZWVrIHZpZXcgdGl0bGVcbiAgICAgKi9cbiAgICB3ZWVrVmlld1RpdGxlKHsgZGF0ZSwgbG9jYWxlLCB3ZWVrU3RhcnRzT24sIGV4Y2x1ZGVEYXlzLCBkYXlzSW5XZWVrIH0pIHtcbiAgICAgICAgY29uc3QgeyB2aWV3U3RhcnQsIHZpZXdFbmQgfSA9IGdldFdlZWtWaWV3UGVyaW9kKHRoaXMuZGF0ZUFkYXB0ZXIsIGRhdGUsIHdlZWtTdGFydHNPbiwgZXhjbHVkZURheXMsIGRheXNJbldlZWspO1xuICAgICAgICBjb25zdCBmb3JtYXQgPSAoZGF0ZVRvRm9ybWF0LCBzaG93WWVhcikgPT4gZm9ybWF0RGF0ZShkYXRlVG9Gb3JtYXQsICdNTU0gZCcgKyAoc2hvd1llYXIgPyAnLCB5eXl5JyA6ICcnKSwgbG9jYWxlKTtcbiAgICAgICAgcmV0dXJuIGAke2Zvcm1hdCh2aWV3U3RhcnQsIHZpZXdTdGFydC5nZXRVVENGdWxsWWVhcigpICE9PSB2aWV3RW5kLmdldFVUQ0Z1bGxZZWFyKCkpfSAtICR7Zm9ybWF0KHZpZXdFbmQsIHRydWUpfWA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSB0aW1lIGZvcm1hdHRpbmcgZG93biB0aGUgbGVmdCBoYW5kIHNpZGUgb2YgdGhlIHdlZWsgdmlld1xuICAgICAqL1xuICAgIHdlZWtWaWV3SG91cih7IGRhdGUsIGxvY2FsZSB9KSB7XG4gICAgICAgIHJldHVybiBmb3JtYXREYXRlKGRhdGUsICdoIGEnLCBsb2NhbGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgdGltZSBmb3JtYXR0aW5nIGRvd24gdGhlIGxlZnQgaGFuZCBzaWRlIG9mIHRoZSBkYXkgdmlld1xuICAgICAqL1xuICAgIGRheVZpZXdIb3VyKHsgZGF0ZSwgbG9jYWxlIH0pIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdERhdGUoZGF0ZSwgJ2ggYScsIGxvY2FsZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBkYXkgdmlldyB0aXRsZVxuICAgICAqL1xuICAgIGRheVZpZXdUaXRsZSh7IGRhdGUsIGxvY2FsZSB9KSB7XG4gICAgICAgIHJldHVybiBmb3JtYXREYXRlKGRhdGUsICdFRUVFLCBNTU1NIGQsIHknLCBsb2NhbGUpO1xuICAgIH1cbn07XG5DYWxlbmRhckFuZ3VsYXJEYXRlRm9ybWF0dGVyLmN0b3JQYXJhbWV0ZXJzID0gKCkgPT4gW1xuICAgIHsgdHlwZTogRGF0ZUFkYXB0ZXIgfVxuXTtcbkNhbGVuZGFyQW5ndWxhckRhdGVGb3JtYXR0ZXIgPSB0c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgIEluamVjdGFibGUoKSxcbiAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbRGF0ZUFkYXB0ZXJdKVxuXSwgQ2FsZW5kYXJBbmd1bGFyRGF0ZUZvcm1hdHRlcik7XG5leHBvcnQgeyBDYWxlbmRhckFuZ3VsYXJEYXRlRm9ybWF0dGVyIH07XG4iXX0=