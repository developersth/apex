import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { DateAdapter } from '../../date-adapters/date-adapter';
import { getWeekViewPeriod } from './util';
/**
 * This will use <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Intl" target="_blank">Intl</a> API to do all date formatting.
 *
 * You will need to include a <a href="https://github.com/andyearnshaw/Intl.js/">polyfill</a> for older browsers.
 */
import * as ɵngcc0 from '@angular/core';
var CalendarNativeDateFormatter = /** @class */ (function () {
    function CalendarNativeDateFormatter(dateAdapter) {
        this.dateAdapter = dateAdapter;
    }
    /**
     * The month view header week day labels
     */
    CalendarNativeDateFormatter.prototype.monthViewColumnHeader = function (_a) {
        var date = _a.date, locale = _a.locale;
        return new Intl.DateTimeFormat(locale, { weekday: 'long' }).format(date);
    };
    /**
     * The month view cell day number
     */
    CalendarNativeDateFormatter.prototype.monthViewDayNumber = function (_a) {
        var date = _a.date, locale = _a.locale;
        return new Intl.DateTimeFormat(locale, { day: 'numeric' }).format(date);
    };
    /**
     * The month view title
     */
    CalendarNativeDateFormatter.prototype.monthViewTitle = function (_a) {
        var date = _a.date, locale = _a.locale;
        return new Intl.DateTimeFormat(locale, {
            year: 'numeric',
            month: 'long'
        }).format(date);
    };
    /**
     * The week view header week day labels
     */
    CalendarNativeDateFormatter.prototype.weekViewColumnHeader = function (_a) {
        var date = _a.date, locale = _a.locale;
        return new Intl.DateTimeFormat(locale, { weekday: 'long' }).format(date);
    };
    /**
     * The week view sub header day and month labels
     */
    CalendarNativeDateFormatter.prototype.weekViewColumnSubHeader = function (_a) {
        var date = _a.date, locale = _a.locale;
        return new Intl.DateTimeFormat(locale, {
            day: 'numeric',
            month: 'short'
        }).format(date);
    };
    /**
     * The week view title
     */
    CalendarNativeDateFormatter.prototype.weekViewTitle = function (_a) {
        var date = _a.date, locale = _a.locale, weekStartsOn = _a.weekStartsOn, excludeDays = _a.excludeDays, daysInWeek = _a.daysInWeek;
        var _b = getWeekViewPeriod(this.dateAdapter, date, weekStartsOn, excludeDays, daysInWeek), viewStart = _b.viewStart, viewEnd = _b.viewEnd;
        var format = function (dateToFormat, showYear) {
            return new Intl.DateTimeFormat(locale, {
                day: 'numeric',
                month: 'short',
                year: showYear ? 'numeric' : undefined
            }).format(dateToFormat);
        };
        return format(viewStart, viewStart.getUTCFullYear() !== viewEnd.getUTCFullYear()) + " - " + format(viewEnd, true);
    };
    /**
     * The time formatting down the left hand side of the week view
     */
    CalendarNativeDateFormatter.prototype.weekViewHour = function (_a) {
        var date = _a.date, locale = _a.locale;
        return new Intl.DateTimeFormat(locale, { hour: 'numeric' }).format(date);
    };
    /**
     * The time formatting down the left hand side of the day view
     */
    CalendarNativeDateFormatter.prototype.dayViewHour = function (_a) {
        var date = _a.date, locale = _a.locale;
        return new Intl.DateTimeFormat(locale, { hour: 'numeric' }).format(date);
    };
    /**
     * The day view title
     */
    CalendarNativeDateFormatter.prototype.dayViewTitle = function (_a) {
        var date = _a.date, locale = _a.locale;
        return new Intl.DateTimeFormat(locale, {
            day: 'numeric',
            month: 'long',
            year: 'numeric',
            weekday: 'long'
        }).format(date);
    };
    CalendarNativeDateFormatter.ctorParameters = function () { return [
        { type: DateAdapter }
    ]; };
    CalendarNativeDateFormatter = tslib_1.__decorate([ tslib_1.__metadata("design:paramtypes", [DateAdapter])
    ], CalendarNativeDateFormatter);
CalendarNativeDateFormatter.ɵfac = function CalendarNativeDateFormatter_Factory(t) { return new (t || CalendarNativeDateFormatter)(ɵngcc0.ɵɵinject(DateAdapter)); };
CalendarNativeDateFormatter.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: CalendarNativeDateFormatter, factory: function (t) { return CalendarNativeDateFormatter.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CalendarNativeDateFormatter, [{
        type: Injectable
    }], function () { return [{ type: DateAdapter }]; }, null); })();
    return CalendarNativeDateFormatter;
}());
export { CalendarNativeDateFormatter };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNwcm8va3JpdHNhZGVlL1NWTi9DeWJlcnNvZnQvYXBleC9ub2RlX21vZHVsZXMvYW5ndWxhci1jYWxlbmRhci9lc201L21vZHVsZXMvY29tbW9uL2NhbGVuZGFyLW5hdGl2ZS1kYXRlLWZvcm1hdHRlci5wcm92aWRlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7OztBQVNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztzREF5RnNELEFBRS9DOzs7Ozs7cUVBQzZCIiwiZmlsZSI6ImNhbGVuZGFyLW5hdGl2ZS1kYXRlLWZvcm1hdHRlci5wcm92aWRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEYXRlQWRhcHRlciB9IGZyb20gJy4uLy4uL2RhdGUtYWRhcHRlcnMvZGF0ZS1hZGFwdGVyJztcbmltcG9ydCB7IGdldFdlZWtWaWV3UGVyaW9kIH0gZnJvbSAnLi91dGlsJztcbi8qKlxuICogVGhpcyB3aWxsIHVzZSA8YSBocmVmPVwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvSW50bFwiIHRhcmdldD1cIl9ibGFua1wiPkludGw8L2E+IEFQSSB0byBkbyBhbGwgZGF0ZSBmb3JtYXR0aW5nLlxuICpcbiAqIFlvdSB3aWxsIG5lZWQgdG8gaW5jbHVkZSBhIDxhIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vYW5keWVhcm5zaGF3L0ludGwuanMvXCI+cG9seWZpbGw8L2E+IGZvciBvbGRlciBicm93c2Vycy5cbiAqL1xudmFyIENhbGVuZGFyTmF0aXZlRGF0ZUZvcm1hdHRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDYWxlbmRhck5hdGl2ZURhdGVGb3JtYXR0ZXIoZGF0ZUFkYXB0ZXIpIHtcbiAgICAgICAgdGhpcy5kYXRlQWRhcHRlciA9IGRhdGVBZGFwdGVyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgbW9udGggdmlldyBoZWFkZXIgd2VlayBkYXkgbGFiZWxzXG4gICAgICovXG4gICAgQ2FsZW5kYXJOYXRpdmVEYXRlRm9ybWF0dGVyLnByb3RvdHlwZS5tb250aFZpZXdDb2x1bW5IZWFkZXIgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIGRhdGUgPSBfYS5kYXRlLCBsb2NhbGUgPSBfYS5sb2NhbGU7XG4gICAgICAgIHJldHVybiBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChsb2NhbGUsIHsgd2Vla2RheTogJ2xvbmcnIH0pLmZvcm1hdChkYXRlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoZSBtb250aCB2aWV3IGNlbGwgZGF5IG51bWJlclxuICAgICAqL1xuICAgIENhbGVuZGFyTmF0aXZlRGF0ZUZvcm1hdHRlci5wcm90b3R5cGUubW9udGhWaWV3RGF5TnVtYmVyID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHZhciBkYXRlID0gX2EuZGF0ZSwgbG9jYWxlID0gX2EubG9jYWxlO1xuICAgICAgICByZXR1cm4gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jYWxlLCB7IGRheTogJ251bWVyaWMnIH0pLmZvcm1hdChkYXRlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoZSBtb250aCB2aWV3IHRpdGxlXG4gICAgICovXG4gICAgQ2FsZW5kYXJOYXRpdmVEYXRlRm9ybWF0dGVyLnByb3RvdHlwZS5tb250aFZpZXdUaXRsZSA9IGZ1bmN0aW9uIChfYSkge1xuICAgICAgICB2YXIgZGF0ZSA9IF9hLmRhdGUsIGxvY2FsZSA9IF9hLmxvY2FsZTtcbiAgICAgICAgcmV0dXJuIG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGxvY2FsZSwge1xuICAgICAgICAgICAgeWVhcjogJ251bWVyaWMnLFxuICAgICAgICAgICAgbW9udGg6ICdsb25nJ1xuICAgICAgICB9KS5mb3JtYXQoZGF0ZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUaGUgd2VlayB2aWV3IGhlYWRlciB3ZWVrIGRheSBsYWJlbHNcbiAgICAgKi9cbiAgICBDYWxlbmRhck5hdGl2ZURhdGVGb3JtYXR0ZXIucHJvdG90eXBlLndlZWtWaWV3Q29sdW1uSGVhZGVyID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHZhciBkYXRlID0gX2EuZGF0ZSwgbG9jYWxlID0gX2EubG9jYWxlO1xuICAgICAgICByZXR1cm4gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jYWxlLCB7IHdlZWtkYXk6ICdsb25nJyB9KS5mb3JtYXQoZGF0ZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUaGUgd2VlayB2aWV3IHN1YiBoZWFkZXIgZGF5IGFuZCBtb250aCBsYWJlbHNcbiAgICAgKi9cbiAgICBDYWxlbmRhck5hdGl2ZURhdGVGb3JtYXR0ZXIucHJvdG90eXBlLndlZWtWaWV3Q29sdW1uU3ViSGVhZGVyID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHZhciBkYXRlID0gX2EuZGF0ZSwgbG9jYWxlID0gX2EubG9jYWxlO1xuICAgICAgICByZXR1cm4gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jYWxlLCB7XG4gICAgICAgICAgICBkYXk6ICdudW1lcmljJyxcbiAgICAgICAgICAgIG1vbnRoOiAnc2hvcnQnXG4gICAgICAgIH0pLmZvcm1hdChkYXRlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoZSB3ZWVrIHZpZXcgdGl0bGVcbiAgICAgKi9cbiAgICBDYWxlbmRhck5hdGl2ZURhdGVGb3JtYXR0ZXIucHJvdG90eXBlLndlZWtWaWV3VGl0bGUgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIGRhdGUgPSBfYS5kYXRlLCBsb2NhbGUgPSBfYS5sb2NhbGUsIHdlZWtTdGFydHNPbiA9IF9hLndlZWtTdGFydHNPbiwgZXhjbHVkZURheXMgPSBfYS5leGNsdWRlRGF5cywgZGF5c0luV2VlayA9IF9hLmRheXNJbldlZWs7XG4gICAgICAgIHZhciBfYiA9IGdldFdlZWtWaWV3UGVyaW9kKHRoaXMuZGF0ZUFkYXB0ZXIsIGRhdGUsIHdlZWtTdGFydHNPbiwgZXhjbHVkZURheXMsIGRheXNJbldlZWspLCB2aWV3U3RhcnQgPSBfYi52aWV3U3RhcnQsIHZpZXdFbmQgPSBfYi52aWV3RW5kO1xuICAgICAgICB2YXIgZm9ybWF0ID0gZnVuY3Rpb24gKGRhdGVUb0Zvcm1hdCwgc2hvd1llYXIpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChsb2NhbGUsIHtcbiAgICAgICAgICAgICAgICBkYXk6ICdudW1lcmljJyxcbiAgICAgICAgICAgICAgICBtb250aDogJ3Nob3J0JyxcbiAgICAgICAgICAgICAgICB5ZWFyOiBzaG93WWVhciA/ICdudW1lcmljJyA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgfSkuZm9ybWF0KGRhdGVUb0Zvcm1hdCk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBmb3JtYXQodmlld1N0YXJ0LCB2aWV3U3RhcnQuZ2V0VVRDRnVsbFllYXIoKSAhPT0gdmlld0VuZC5nZXRVVENGdWxsWWVhcigpKSArIFwiIC0gXCIgKyBmb3JtYXQodmlld0VuZCwgdHJ1ZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUaGUgdGltZSBmb3JtYXR0aW5nIGRvd24gdGhlIGxlZnQgaGFuZCBzaWRlIG9mIHRoZSB3ZWVrIHZpZXdcbiAgICAgKi9cbiAgICBDYWxlbmRhck5hdGl2ZURhdGVGb3JtYXR0ZXIucHJvdG90eXBlLndlZWtWaWV3SG91ciA9IGZ1bmN0aW9uIChfYSkge1xuICAgICAgICB2YXIgZGF0ZSA9IF9hLmRhdGUsIGxvY2FsZSA9IF9hLmxvY2FsZTtcbiAgICAgICAgcmV0dXJuIG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGxvY2FsZSwgeyBob3VyOiAnbnVtZXJpYycgfSkuZm9ybWF0KGRhdGUpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVGhlIHRpbWUgZm9ybWF0dGluZyBkb3duIHRoZSBsZWZ0IGhhbmQgc2lkZSBvZiB0aGUgZGF5IHZpZXdcbiAgICAgKi9cbiAgICBDYWxlbmRhck5hdGl2ZURhdGVGb3JtYXR0ZXIucHJvdG90eXBlLmRheVZpZXdIb3VyID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHZhciBkYXRlID0gX2EuZGF0ZSwgbG9jYWxlID0gX2EubG9jYWxlO1xuICAgICAgICByZXR1cm4gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jYWxlLCB7IGhvdXI6ICdudW1lcmljJyB9KS5mb3JtYXQoZGF0ZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUaGUgZGF5IHZpZXcgdGl0bGVcbiAgICAgKi9cbiAgICBDYWxlbmRhck5hdGl2ZURhdGVGb3JtYXR0ZXIucHJvdG90eXBlLmRheVZpZXdUaXRsZSA9IGZ1bmN0aW9uIChfYSkge1xuICAgICAgICB2YXIgZGF0ZSA9IF9hLmRhdGUsIGxvY2FsZSA9IF9hLmxvY2FsZTtcbiAgICAgICAgcmV0dXJuIG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGxvY2FsZSwge1xuICAgICAgICAgICAgZGF5OiAnbnVtZXJpYycsXG4gICAgICAgICAgICBtb250aDogJ2xvbmcnLFxuICAgICAgICAgICAgeWVhcjogJ251bWVyaWMnLFxuICAgICAgICAgICAgd2Vla2RheTogJ2xvbmcnXG4gICAgICAgIH0pLmZvcm1hdChkYXRlKTtcbiAgICB9O1xuICAgIENhbGVuZGFyTmF0aXZlRGF0ZUZvcm1hdHRlci5jdG9yUGFyYW1ldGVycyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtcbiAgICAgICAgeyB0eXBlOiBEYXRlQWRhcHRlciB9XG4gICAgXTsgfTtcbiAgICBDYWxlbmRhck5hdGl2ZURhdGVGb3JtYXR0ZXIgPSB0c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgICAgICBJbmplY3RhYmxlKCksXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtEYXRlQWRhcHRlcl0pXG4gICAgXSwgQ2FsZW5kYXJOYXRpdmVEYXRlRm9ybWF0dGVyKTtcbiAgICByZXR1cm4gQ2FsZW5kYXJOYXRpdmVEYXRlRm9ybWF0dGVyO1xufSgpKTtcbmV4cG9ydCB7IENhbGVuZGFyTmF0aXZlRGF0ZUZvcm1hdHRlciB9O1xuIl19