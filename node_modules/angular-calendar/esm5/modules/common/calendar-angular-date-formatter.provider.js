import * as tslib_1 from "tslib";
import { formatDate } from '@angular/common';
import { Injectable } from '@angular/core';
import { DateAdapter } from '../../date-adapters/date-adapter';
import { getWeekViewPeriod } from './util';
/**
 * This will use the angular date pipe to do all date formatting. It is the default date formatter used by the calendar.
 */
import * as ɵngcc0 from '@angular/core';
var CalendarAngularDateFormatter = /** @class */ (function () {
    function CalendarAngularDateFormatter(dateAdapter) {
        this.dateAdapter = dateAdapter;
    }
    /**
     * The month view header week day labels
     */
    CalendarAngularDateFormatter.prototype.monthViewColumnHeader = function (_a) {
        var date = _a.date, locale = _a.locale;
        return formatDate(date, 'EEEE', locale);
    };
    /**
     * The month view cell day number
     */
    CalendarAngularDateFormatter.prototype.monthViewDayNumber = function (_a) {
        var date = _a.date, locale = _a.locale;
        return formatDate(date, 'd', locale);
    };
    /**
     * The month view title
     */
    CalendarAngularDateFormatter.prototype.monthViewTitle = function (_a) {
        var date = _a.date, locale = _a.locale;
        return formatDate(date, 'LLLL y', locale);
    };
    /**
     * The week view header week day labels
     */
    CalendarAngularDateFormatter.prototype.weekViewColumnHeader = function (_a) {
        var date = _a.date, locale = _a.locale;
        return formatDate(date, 'EEEE', locale);
    };
    /**
     * The week view sub header day and month labels
     */
    CalendarAngularDateFormatter.prototype.weekViewColumnSubHeader = function (_a) {
        var date = _a.date, locale = _a.locale;
        return formatDate(date, 'MMM d', locale);
    };
    /**
     * The week view title
     */
    CalendarAngularDateFormatter.prototype.weekViewTitle = function (_a) {
        var date = _a.date, locale = _a.locale, weekStartsOn = _a.weekStartsOn, excludeDays = _a.excludeDays, daysInWeek = _a.daysInWeek;
        var _b = getWeekViewPeriod(this.dateAdapter, date, weekStartsOn, excludeDays, daysInWeek), viewStart = _b.viewStart, viewEnd = _b.viewEnd;
        var format = function (dateToFormat, showYear) {
            return formatDate(dateToFormat, 'MMM d' + (showYear ? ', yyyy' : ''), locale);
        };
        return format(viewStart, viewStart.getUTCFullYear() !== viewEnd.getUTCFullYear()) + " - " + format(viewEnd, true);
    };
    /**
     * The time formatting down the left hand side of the week view
     */
    CalendarAngularDateFormatter.prototype.weekViewHour = function (_a) {
        var date = _a.date, locale = _a.locale;
        return formatDate(date, 'h a', locale);
    };
    /**
     * The time formatting down the left hand side of the day view
     */
    CalendarAngularDateFormatter.prototype.dayViewHour = function (_a) {
        var date = _a.date, locale = _a.locale;
        return formatDate(date, 'h a', locale);
    };
    /**
     * The day view title
     */
    CalendarAngularDateFormatter.prototype.dayViewTitle = function (_a) {
        var date = _a.date, locale = _a.locale;
        return formatDate(date, 'EEEE, MMMM d, y', locale);
    };
    CalendarAngularDateFormatter.ctorParameters = function () { return [
        { type: DateAdapter }
    ]; };
    CalendarAngularDateFormatter = tslib_1.__decorate([ tslib_1.__metadata("design:paramtypes", [DateAdapter])
    ], CalendarAngularDateFormatter);
CalendarAngularDateFormatter.ɵfac = function CalendarAngularDateFormatter_Factory(t) { return new (t || CalendarAngularDateFormatter)(ɵngcc0.ɵɵinject(DateAdapter)); };
CalendarAngularDateFormatter.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: CalendarAngularDateFormatter, factory: function (t) { return CalendarAngularDateFormatter.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CalendarAngularDateFormatter, [{
        type: Injectable
    }], function () { return [{ type: DateAdapter }]; }, null); })();
    return CalendarAngularDateFormatter;
}());
export { CalendarAngularDateFormatter };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNwcm8va3JpdHNhZGVlL1NWTi9DeWJlcnNvZnQvYXBleC9ub2RlX21vZHVsZXMvYW5ndWxhci1jYWxlbmRhci9lc201L21vZHVsZXMvY29tbW9uL2NhbGVuZGFyLWFuZ3VsYXItZGF0ZS1mb3JtYXR0ZXIucHJvdmlkZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztBQVFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt1REEwRXVELEFBRWhEOzs7Ozs7cUVBQzhCIiwiZmlsZSI6ImNhbGVuZGFyLWFuZ3VsYXItZGF0ZS1mb3JtYXR0ZXIucHJvdmlkZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgZm9ybWF0RGF0ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEYXRlQWRhcHRlciB9IGZyb20gJy4uLy4uL2RhdGUtYWRhcHRlcnMvZGF0ZS1hZGFwdGVyJztcbmltcG9ydCB7IGdldFdlZWtWaWV3UGVyaW9kIH0gZnJvbSAnLi91dGlsJztcbi8qKlxuICogVGhpcyB3aWxsIHVzZSB0aGUgYW5ndWxhciBkYXRlIHBpcGUgdG8gZG8gYWxsIGRhdGUgZm9ybWF0dGluZy4gSXQgaXMgdGhlIGRlZmF1bHQgZGF0ZSBmb3JtYXR0ZXIgdXNlZCBieSB0aGUgY2FsZW5kYXIuXG4gKi9cbnZhciBDYWxlbmRhckFuZ3VsYXJEYXRlRm9ybWF0dGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENhbGVuZGFyQW5ndWxhckRhdGVGb3JtYXR0ZXIoZGF0ZUFkYXB0ZXIpIHtcbiAgICAgICAgdGhpcy5kYXRlQWRhcHRlciA9IGRhdGVBZGFwdGVyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgbW9udGggdmlldyBoZWFkZXIgd2VlayBkYXkgbGFiZWxzXG4gICAgICovXG4gICAgQ2FsZW5kYXJBbmd1bGFyRGF0ZUZvcm1hdHRlci5wcm90b3R5cGUubW9udGhWaWV3Q29sdW1uSGVhZGVyID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHZhciBkYXRlID0gX2EuZGF0ZSwgbG9jYWxlID0gX2EubG9jYWxlO1xuICAgICAgICByZXR1cm4gZm9ybWF0RGF0ZShkYXRlLCAnRUVFRScsIGxvY2FsZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUaGUgbW9udGggdmlldyBjZWxsIGRheSBudW1iZXJcbiAgICAgKi9cbiAgICBDYWxlbmRhckFuZ3VsYXJEYXRlRm9ybWF0dGVyLnByb3RvdHlwZS5tb250aFZpZXdEYXlOdW1iZXIgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIGRhdGUgPSBfYS5kYXRlLCBsb2NhbGUgPSBfYS5sb2NhbGU7XG4gICAgICAgIHJldHVybiBmb3JtYXREYXRlKGRhdGUsICdkJywgbG9jYWxlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoZSBtb250aCB2aWV3IHRpdGxlXG4gICAgICovXG4gICAgQ2FsZW5kYXJBbmd1bGFyRGF0ZUZvcm1hdHRlci5wcm90b3R5cGUubW9udGhWaWV3VGl0bGUgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIGRhdGUgPSBfYS5kYXRlLCBsb2NhbGUgPSBfYS5sb2NhbGU7XG4gICAgICAgIHJldHVybiBmb3JtYXREYXRlKGRhdGUsICdMTExMIHknLCBsb2NhbGUpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVGhlIHdlZWsgdmlldyBoZWFkZXIgd2VlayBkYXkgbGFiZWxzXG4gICAgICovXG4gICAgQ2FsZW5kYXJBbmd1bGFyRGF0ZUZvcm1hdHRlci5wcm90b3R5cGUud2Vla1ZpZXdDb2x1bW5IZWFkZXIgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIGRhdGUgPSBfYS5kYXRlLCBsb2NhbGUgPSBfYS5sb2NhbGU7XG4gICAgICAgIHJldHVybiBmb3JtYXREYXRlKGRhdGUsICdFRUVFJywgbG9jYWxlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoZSB3ZWVrIHZpZXcgc3ViIGhlYWRlciBkYXkgYW5kIG1vbnRoIGxhYmVsc1xuICAgICAqL1xuICAgIENhbGVuZGFyQW5ndWxhckRhdGVGb3JtYXR0ZXIucHJvdG90eXBlLndlZWtWaWV3Q29sdW1uU3ViSGVhZGVyID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHZhciBkYXRlID0gX2EuZGF0ZSwgbG9jYWxlID0gX2EubG9jYWxlO1xuICAgICAgICByZXR1cm4gZm9ybWF0RGF0ZShkYXRlLCAnTU1NIGQnLCBsb2NhbGUpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVGhlIHdlZWsgdmlldyB0aXRsZVxuICAgICAqL1xuICAgIENhbGVuZGFyQW5ndWxhckRhdGVGb3JtYXR0ZXIucHJvdG90eXBlLndlZWtWaWV3VGl0bGUgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIGRhdGUgPSBfYS5kYXRlLCBsb2NhbGUgPSBfYS5sb2NhbGUsIHdlZWtTdGFydHNPbiA9IF9hLndlZWtTdGFydHNPbiwgZXhjbHVkZURheXMgPSBfYS5leGNsdWRlRGF5cywgZGF5c0luV2VlayA9IF9hLmRheXNJbldlZWs7XG4gICAgICAgIHZhciBfYiA9IGdldFdlZWtWaWV3UGVyaW9kKHRoaXMuZGF0ZUFkYXB0ZXIsIGRhdGUsIHdlZWtTdGFydHNPbiwgZXhjbHVkZURheXMsIGRheXNJbldlZWspLCB2aWV3U3RhcnQgPSBfYi52aWV3U3RhcnQsIHZpZXdFbmQgPSBfYi52aWV3RW5kO1xuICAgICAgICB2YXIgZm9ybWF0ID0gZnVuY3Rpb24gKGRhdGVUb0Zvcm1hdCwgc2hvd1llYXIpIHtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXREYXRlKGRhdGVUb0Zvcm1hdCwgJ01NTSBkJyArIChzaG93WWVhciA/ICcsIHl5eXknIDogJycpLCBsb2NhbGUpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gZm9ybWF0KHZpZXdTdGFydCwgdmlld1N0YXJ0LmdldFVUQ0Z1bGxZZWFyKCkgIT09IHZpZXdFbmQuZ2V0VVRDRnVsbFllYXIoKSkgKyBcIiAtIFwiICsgZm9ybWF0KHZpZXdFbmQsIHRydWUpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVGhlIHRpbWUgZm9ybWF0dGluZyBkb3duIHRoZSBsZWZ0IGhhbmQgc2lkZSBvZiB0aGUgd2VlayB2aWV3XG4gICAgICovXG4gICAgQ2FsZW5kYXJBbmd1bGFyRGF0ZUZvcm1hdHRlci5wcm90b3R5cGUud2Vla1ZpZXdIb3VyID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHZhciBkYXRlID0gX2EuZGF0ZSwgbG9jYWxlID0gX2EubG9jYWxlO1xuICAgICAgICByZXR1cm4gZm9ybWF0RGF0ZShkYXRlLCAnaCBhJywgbG9jYWxlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoZSB0aW1lIGZvcm1hdHRpbmcgZG93biB0aGUgbGVmdCBoYW5kIHNpZGUgb2YgdGhlIGRheSB2aWV3XG4gICAgICovXG4gICAgQ2FsZW5kYXJBbmd1bGFyRGF0ZUZvcm1hdHRlci5wcm90b3R5cGUuZGF5Vmlld0hvdXIgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIGRhdGUgPSBfYS5kYXRlLCBsb2NhbGUgPSBfYS5sb2NhbGU7XG4gICAgICAgIHJldHVybiBmb3JtYXREYXRlKGRhdGUsICdoIGEnLCBsb2NhbGUpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVGhlIGRheSB2aWV3IHRpdGxlXG4gICAgICovXG4gICAgQ2FsZW5kYXJBbmd1bGFyRGF0ZUZvcm1hdHRlci5wcm90b3R5cGUuZGF5Vmlld1RpdGxlID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHZhciBkYXRlID0gX2EuZGF0ZSwgbG9jYWxlID0gX2EubG9jYWxlO1xuICAgICAgICByZXR1cm4gZm9ybWF0RGF0ZShkYXRlLCAnRUVFRSwgTU1NTSBkLCB5JywgbG9jYWxlKTtcbiAgICB9O1xuICAgIENhbGVuZGFyQW5ndWxhckRhdGVGb3JtYXR0ZXIuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXG4gICAgICAgIHsgdHlwZTogRGF0ZUFkYXB0ZXIgfVxuICAgIF07IH07XG4gICAgQ2FsZW5kYXJBbmd1bGFyRGF0ZUZvcm1hdHRlciA9IHRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgICAgIEluamVjdGFibGUoKSxcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW0RhdGVBZGFwdGVyXSlcbiAgICBdLCBDYWxlbmRhckFuZ3VsYXJEYXRlRm9ybWF0dGVyKTtcbiAgICByZXR1cm4gQ2FsZW5kYXJBbmd1bGFyRGF0ZUZvcm1hdHRlcjtcbn0oKSk7XG5leHBvcnQgeyBDYWxlbmRhckFuZ3VsYXJEYXRlRm9ybWF0dGVyIH07XG4iXX0=