import * as tslib_1 from "tslib";
import { InjectionToken, Inject, Injectable } from '@angular/core';
import { getWeekViewPeriod } from './util';
import { DateAdapter } from '../../date-adapters/date-adapter';
import * as ɵngcc0 from '@angular/core';
export var MOMENT = new InjectionToken('Moment');
/**
 * This will use <a href="http://momentjs.com/" target="_blank">moment</a> to do all date formatting. To use this class:
 *
 * ```typescript
 * import { CalendarDateFormatter, CalendarMomentDateFormatter, MOMENT } from 'angular-calendar';
 * import moment from 'moment';
 *
 * // in your component
 * provide: [{
 *   provide: MOMENT, useValue: moment
 * }, {
 *   provide: CalendarDateFormatter, useClass: CalendarMomentDateFormatter
 * }]
 *
 * ```
 */
var CalendarMomentDateFormatter = /** @class */ (function () {
    /**
     * @hidden
     */
    function CalendarMomentDateFormatter(moment, dateAdapter) {
        this.moment = moment;
        this.dateAdapter = dateAdapter;
    }
    /**
     * The month view header week day labels
     */
    CalendarMomentDateFormatter.prototype.monthViewColumnHeader = function (_a) {
        var date = _a.date, locale = _a.locale;
        return this.moment(date)
            .locale(locale)
            .format('dddd');
    };
    /**
     * The month view cell day number
     */
    CalendarMomentDateFormatter.prototype.monthViewDayNumber = function (_a) {
        var date = _a.date, locale = _a.locale;
        return this.moment(date)
            .locale(locale)
            .format('D');
    };
    /**
     * The month view title
     */
    CalendarMomentDateFormatter.prototype.monthViewTitle = function (_a) {
        var date = _a.date, locale = _a.locale;
        return this.moment(date)
            .locale(locale)
            .format('MMMM YYYY');
    };
    /**
     * The week view header week day labels
     */
    CalendarMomentDateFormatter.prototype.weekViewColumnHeader = function (_a) {
        var date = _a.date, locale = _a.locale;
        return this.moment(date)
            .locale(locale)
            .format('dddd');
    };
    /**
     * The week view sub header day and month labels
     */
    CalendarMomentDateFormatter.prototype.weekViewColumnSubHeader = function (_a) {
        var date = _a.date, locale = _a.locale;
        return this.moment(date)
            .locale(locale)
            .format('MMM D');
    };
    /**
     * The week view title
     */
    CalendarMomentDateFormatter.prototype.weekViewTitle = function (_a) {
        var _this = this;
        var date = _a.date, locale = _a.locale, weekStartsOn = _a.weekStartsOn, excludeDays = _a.excludeDays, daysInWeek = _a.daysInWeek;
        var _b = getWeekViewPeriod(this.dateAdapter, date, weekStartsOn, excludeDays, daysInWeek), viewStart = _b.viewStart, viewEnd = _b.viewEnd;
        var format = function (dateToFormat, showYear) {
            return _this.moment(dateToFormat)
                .locale(locale)
                .format('MMM D' + (showYear ? ', YYYY' : ''));
        };
        return format(viewStart, viewStart.getUTCFullYear() !== viewEnd.getUTCFullYear()) + " - " + format(viewEnd, true);
    };
    /**
     * The time formatting down the left hand side of the week view
     */
    CalendarMomentDateFormatter.prototype.weekViewHour = function (_a) {
        var date = _a.date, locale = _a.locale;
        return this.moment(date)
            .locale(locale)
            .format('ha');
    };
    /**
     * The time formatting down the left hand side of the day view
     */
    CalendarMomentDateFormatter.prototype.dayViewHour = function (_a) {
        var date = _a.date, locale = _a.locale;
        return this.moment(date)
            .locale(locale)
            .format('ha');
    };
    /**
     * The day view title
     */
    CalendarMomentDateFormatter.prototype.dayViewTitle = function (_a) {
        var date = _a.date, locale = _a.locale;
        return this.moment(date)
            .locale(locale)
            .format('dddd, D MMMM, YYYY');
    };
    CalendarMomentDateFormatter.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [MOMENT,] }] },
        { type: DateAdapter }
    ]; };
    CalendarMomentDateFormatter = tslib_1.__decorate([ tslib_1.__param(0, Inject(MOMENT)),
        tslib_1.__metadata("design:paramtypes", [Object, DateAdapter])
    ], CalendarMomentDateFormatter);
CalendarMomentDateFormatter.ɵfac = function CalendarMomentDateFormatter_Factory(t) { return new (t || CalendarMomentDateFormatter)(ɵngcc0.ɵɵinject(MOMENT), ɵngcc0.ɵɵinject(DateAdapter)); };
CalendarMomentDateFormatter.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: CalendarMomentDateFormatter, factory: function (t) { return CalendarMomentDateFormatter.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CalendarMomentDateFormatter, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [MOMENT]
            }] }, { type: DateAdapter }]; }, null); })();
    return CalendarMomentDateFormatter;
}());
export { CalendarMomentDateFormatter };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNwcm8va3JpdHNhZGVlL1NWTi9DeWJlcnNvZnQvYXBleC9ub2RlX21vZHVsZXMvYW5ndWxhci1jYWxlbmRhci9lc201L21vZHVsZXMvY29tbW9uL2NhbGVuZGFyLW1vbWVudC1kYXRlLWZvcm1hdHRlci5wcm92aWRlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFJQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztzREFtSHNELEFBRS9DOzs7Ozs7Ozs7O3lEQUU2QiIsImZpbGUiOiJjYWxlbmRhci1tb21lbnQtZGF0ZS1mb3JtYXR0ZXIucHJvdmlkZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4sIEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZ2V0V2Vla1ZpZXdQZXJpb2QgfSBmcm9tICcuL3V0aWwnO1xuaW1wb3J0IHsgRGF0ZUFkYXB0ZXIgfSBmcm9tICcuLi8uLi9kYXRlLWFkYXB0ZXJzL2RhdGUtYWRhcHRlcic7XG5leHBvcnQgdmFyIE1PTUVOVCA9IG5ldyBJbmplY3Rpb25Ub2tlbignTW9tZW50Jyk7XG4vKipcbiAqIFRoaXMgd2lsbCB1c2UgPGEgaHJlZj1cImh0dHA6Ly9tb21lbnRqcy5jb20vXCIgdGFyZ2V0PVwiX2JsYW5rXCI+bW9tZW50PC9hPiB0byBkbyBhbGwgZGF0ZSBmb3JtYXR0aW5nLiBUbyB1c2UgdGhpcyBjbGFzczpcbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBDYWxlbmRhckRhdGVGb3JtYXR0ZXIsIENhbGVuZGFyTW9tZW50RGF0ZUZvcm1hdHRlciwgTU9NRU5UIH0gZnJvbSAnYW5ndWxhci1jYWxlbmRhcic7XG4gKiBpbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG4gKlxuICogLy8gaW4geW91ciBjb21wb25lbnRcbiAqIHByb3ZpZGU6IFt7XG4gKiAgIHByb3ZpZGU6IE1PTUVOVCwgdXNlVmFsdWU6IG1vbWVudFxuICogfSwge1xuICogICBwcm92aWRlOiBDYWxlbmRhckRhdGVGb3JtYXR0ZXIsIHVzZUNsYXNzOiBDYWxlbmRhck1vbWVudERhdGVGb3JtYXR0ZXJcbiAqIH1dXG4gKlxuICogYGBgXG4gKi9cbnZhciBDYWxlbmRhck1vbWVudERhdGVGb3JtYXR0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIENhbGVuZGFyTW9tZW50RGF0ZUZvcm1hdHRlcihtb21lbnQsIGRhdGVBZGFwdGVyKSB7XG4gICAgICAgIHRoaXMubW9tZW50ID0gbW9tZW50O1xuICAgICAgICB0aGlzLmRhdGVBZGFwdGVyID0gZGF0ZUFkYXB0ZXI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBtb250aCB2aWV3IGhlYWRlciB3ZWVrIGRheSBsYWJlbHNcbiAgICAgKi9cbiAgICBDYWxlbmRhck1vbWVudERhdGVGb3JtYXR0ZXIucHJvdG90eXBlLm1vbnRoVmlld0NvbHVtbkhlYWRlciA9IGZ1bmN0aW9uIChfYSkge1xuICAgICAgICB2YXIgZGF0ZSA9IF9hLmRhdGUsIGxvY2FsZSA9IF9hLmxvY2FsZTtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9tZW50KGRhdGUpXG4gICAgICAgICAgICAubG9jYWxlKGxvY2FsZSlcbiAgICAgICAgICAgIC5mb3JtYXQoJ2RkZGQnKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoZSBtb250aCB2aWV3IGNlbGwgZGF5IG51bWJlclxuICAgICAqL1xuICAgIENhbGVuZGFyTW9tZW50RGF0ZUZvcm1hdHRlci5wcm90b3R5cGUubW9udGhWaWV3RGF5TnVtYmVyID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHZhciBkYXRlID0gX2EuZGF0ZSwgbG9jYWxlID0gX2EubG9jYWxlO1xuICAgICAgICByZXR1cm4gdGhpcy5tb21lbnQoZGF0ZSlcbiAgICAgICAgICAgIC5sb2NhbGUobG9jYWxlKVxuICAgICAgICAgICAgLmZvcm1hdCgnRCcpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVGhlIG1vbnRoIHZpZXcgdGl0bGVcbiAgICAgKi9cbiAgICBDYWxlbmRhck1vbWVudERhdGVGb3JtYXR0ZXIucHJvdG90eXBlLm1vbnRoVmlld1RpdGxlID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHZhciBkYXRlID0gX2EuZGF0ZSwgbG9jYWxlID0gX2EubG9jYWxlO1xuICAgICAgICByZXR1cm4gdGhpcy5tb21lbnQoZGF0ZSlcbiAgICAgICAgICAgIC5sb2NhbGUobG9jYWxlKVxuICAgICAgICAgICAgLmZvcm1hdCgnTU1NTSBZWVlZJyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUaGUgd2VlayB2aWV3IGhlYWRlciB3ZWVrIGRheSBsYWJlbHNcbiAgICAgKi9cbiAgICBDYWxlbmRhck1vbWVudERhdGVGb3JtYXR0ZXIucHJvdG90eXBlLndlZWtWaWV3Q29sdW1uSGVhZGVyID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHZhciBkYXRlID0gX2EuZGF0ZSwgbG9jYWxlID0gX2EubG9jYWxlO1xuICAgICAgICByZXR1cm4gdGhpcy5tb21lbnQoZGF0ZSlcbiAgICAgICAgICAgIC5sb2NhbGUobG9jYWxlKVxuICAgICAgICAgICAgLmZvcm1hdCgnZGRkZCcpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVGhlIHdlZWsgdmlldyBzdWIgaGVhZGVyIGRheSBhbmQgbW9udGggbGFiZWxzXG4gICAgICovXG4gICAgQ2FsZW5kYXJNb21lbnREYXRlRm9ybWF0dGVyLnByb3RvdHlwZS53ZWVrVmlld0NvbHVtblN1YkhlYWRlciA9IGZ1bmN0aW9uIChfYSkge1xuICAgICAgICB2YXIgZGF0ZSA9IF9hLmRhdGUsIGxvY2FsZSA9IF9hLmxvY2FsZTtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9tZW50KGRhdGUpXG4gICAgICAgICAgICAubG9jYWxlKGxvY2FsZSlcbiAgICAgICAgICAgIC5mb3JtYXQoJ01NTSBEJyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUaGUgd2VlayB2aWV3IHRpdGxlXG4gICAgICovXG4gICAgQ2FsZW5kYXJNb21lbnREYXRlRm9ybWF0dGVyLnByb3RvdHlwZS53ZWVrVmlld1RpdGxlID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBkYXRlID0gX2EuZGF0ZSwgbG9jYWxlID0gX2EubG9jYWxlLCB3ZWVrU3RhcnRzT24gPSBfYS53ZWVrU3RhcnRzT24sIGV4Y2x1ZGVEYXlzID0gX2EuZXhjbHVkZURheXMsIGRheXNJbldlZWsgPSBfYS5kYXlzSW5XZWVrO1xuICAgICAgICB2YXIgX2IgPSBnZXRXZWVrVmlld1BlcmlvZCh0aGlzLmRhdGVBZGFwdGVyLCBkYXRlLCB3ZWVrU3RhcnRzT24sIGV4Y2x1ZGVEYXlzLCBkYXlzSW5XZWVrKSwgdmlld1N0YXJ0ID0gX2Iudmlld1N0YXJ0LCB2aWV3RW5kID0gX2Iudmlld0VuZDtcbiAgICAgICAgdmFyIGZvcm1hdCA9IGZ1bmN0aW9uIChkYXRlVG9Gb3JtYXQsIHNob3dZZWFyKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMubW9tZW50KGRhdGVUb0Zvcm1hdClcbiAgICAgICAgICAgICAgICAubG9jYWxlKGxvY2FsZSlcbiAgICAgICAgICAgICAgICAuZm9ybWF0KCdNTU0gRCcgKyAoc2hvd1llYXIgPyAnLCBZWVlZJyA6ICcnKSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBmb3JtYXQodmlld1N0YXJ0LCB2aWV3U3RhcnQuZ2V0VVRDRnVsbFllYXIoKSAhPT0gdmlld0VuZC5nZXRVVENGdWxsWWVhcigpKSArIFwiIC0gXCIgKyBmb3JtYXQodmlld0VuZCwgdHJ1ZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUaGUgdGltZSBmb3JtYXR0aW5nIGRvd24gdGhlIGxlZnQgaGFuZCBzaWRlIG9mIHRoZSB3ZWVrIHZpZXdcbiAgICAgKi9cbiAgICBDYWxlbmRhck1vbWVudERhdGVGb3JtYXR0ZXIucHJvdG90eXBlLndlZWtWaWV3SG91ciA9IGZ1bmN0aW9uIChfYSkge1xuICAgICAgICB2YXIgZGF0ZSA9IF9hLmRhdGUsIGxvY2FsZSA9IF9hLmxvY2FsZTtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9tZW50KGRhdGUpXG4gICAgICAgICAgICAubG9jYWxlKGxvY2FsZSlcbiAgICAgICAgICAgIC5mb3JtYXQoJ2hhJyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUaGUgdGltZSBmb3JtYXR0aW5nIGRvd24gdGhlIGxlZnQgaGFuZCBzaWRlIG9mIHRoZSBkYXkgdmlld1xuICAgICAqL1xuICAgIENhbGVuZGFyTW9tZW50RGF0ZUZvcm1hdHRlci5wcm90b3R5cGUuZGF5Vmlld0hvdXIgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIGRhdGUgPSBfYS5kYXRlLCBsb2NhbGUgPSBfYS5sb2NhbGU7XG4gICAgICAgIHJldHVybiB0aGlzLm1vbWVudChkYXRlKVxuICAgICAgICAgICAgLmxvY2FsZShsb2NhbGUpXG4gICAgICAgICAgICAuZm9ybWF0KCdoYScpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVGhlIGRheSB2aWV3IHRpdGxlXG4gICAgICovXG4gICAgQ2FsZW5kYXJNb21lbnREYXRlRm9ybWF0dGVyLnByb3RvdHlwZS5kYXlWaWV3VGl0bGUgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIGRhdGUgPSBfYS5kYXRlLCBsb2NhbGUgPSBfYS5sb2NhbGU7XG4gICAgICAgIHJldHVybiB0aGlzLm1vbWVudChkYXRlKVxuICAgICAgICAgICAgLmxvY2FsZShsb2NhbGUpXG4gICAgICAgICAgICAuZm9ybWF0KCdkZGRkLCBEIE1NTU0sIFlZWVknKTtcbiAgICB9O1xuICAgIENhbGVuZGFyTW9tZW50RGF0ZUZvcm1hdHRlci5jdG9yUGFyYW1ldGVycyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtcbiAgICAgICAgeyB0eXBlOiB1bmRlZmluZWQsIGRlY29yYXRvcnM6IFt7IHR5cGU6IEluamVjdCwgYXJnczogW01PTUVOVCxdIH1dIH0sXG4gICAgICAgIHsgdHlwZTogRGF0ZUFkYXB0ZXIgfVxuICAgIF07IH07XG4gICAgQ2FsZW5kYXJNb21lbnREYXRlRm9ybWF0dGVyID0gdHNsaWJfMS5fX2RlY29yYXRlKFtcbiAgICAgICAgSW5qZWN0YWJsZSgpLFxuICAgICAgICB0c2xpYl8xLl9fcGFyYW0oMCwgSW5qZWN0KE1PTUVOVCkpLFxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbT2JqZWN0LCBEYXRlQWRhcHRlcl0pXG4gICAgXSwgQ2FsZW5kYXJNb21lbnREYXRlRm9ybWF0dGVyKTtcbiAgICByZXR1cm4gQ2FsZW5kYXJNb21lbnREYXRlRm9ybWF0dGVyO1xufSgpKTtcbmV4cG9ydCB7IENhbGVuZGFyTW9tZW50RGF0ZUZvcm1hdHRlciB9O1xuIl19