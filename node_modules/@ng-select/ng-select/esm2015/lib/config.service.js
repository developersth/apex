/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export class NgSelectConfig {
    constructor() {
        this.notFoundText = 'No items found';
        this.typeToSearchText = 'Type to search';
        this.addTagText = 'Add item';
        this.loadingText = 'Loading...';
        this.clearAllText = 'Clear all';
        this.disableVirtualScroll = true;
        this.openOnEnter = true;
        this.appearance = 'underline';
    }
}
NgSelectConfig.ɵfac = function NgSelectConfig_Factory(t) { return new (t || NgSelectConfig)(); };
NgSelectConfig.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgSelectConfig, factory: NgSelectConfig.ɵfac, providedIn: 'root' });
/** @nocollapse */ NgSelectConfig.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgSelectConfig_Factory() { return new NgSelectConfig(); }, token: NgSelectConfig, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgSelectConfig, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, null); })();
if (false) {
    /** @type {?} */
    NgSelectConfig.prototype.placeholder;
    /** @type {?} */
    NgSelectConfig.prototype.notFoundText;
    /** @type {?} */
    NgSelectConfig.prototype.typeToSearchText;
    /** @type {?} */
    NgSelectConfig.prototype.addTagText;
    /** @type {?} */
    NgSelectConfig.prototype.loadingText;
    /** @type {?} */
    NgSelectConfig.prototype.clearAllText;
    /** @type {?} */
    NgSelectConfig.prototype.disableVirtualScroll;
    /** @type {?} */
    NgSelectConfig.prototype.openOnEnter;
    /** @type {?} */
    NgSelectConfig.prototype.appendTo;
    /** @type {?} */
    NgSelectConfig.prototype.bindValue;
    /** @type {?} */
    NgSelectConfig.prototype.appearance;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNwcm8va3JpdHNhZGVlL1NWTi9DeWJlcnNvZnQvYXBleC9ub2RlX21vZHVsZXMvQG5nLXNlbGVjdC9uZy1zZWxlY3QvZXNtMjAxNS9saWIvY29uZmlnLnNlcnZpY2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFNQTs7Ozs7Ozs7Ozs7OztDQVdDLDZIQUdDOzs7OztnREFDb00iLCJmaWxlIjoiY29uZmlnLnNlcnZpY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzLGV4dHJhUmVxdWlyZSxtaXNzaW5nT3ZlcnJpZGUsbWlzc2luZ1JldHVybix1bnVzZWRQcml2YXRlTWVtYmVycyx1c2VsZXNzQ29kZX0gY2hlY2tlZCBieSB0c2NcbiAqL1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMgaTAgZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmV4cG9ydCBjbGFzcyBOZ1NlbGVjdENvbmZpZyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMubm90Rm91bmRUZXh0ID0gJ05vIGl0ZW1zIGZvdW5kJztcbiAgICAgICAgdGhpcy50eXBlVG9TZWFyY2hUZXh0ID0gJ1R5cGUgdG8gc2VhcmNoJztcbiAgICAgICAgdGhpcy5hZGRUYWdUZXh0ID0gJ0FkZCBpdGVtJztcbiAgICAgICAgdGhpcy5sb2FkaW5nVGV4dCA9ICdMb2FkaW5nLi4uJztcbiAgICAgICAgdGhpcy5jbGVhckFsbFRleHQgPSAnQ2xlYXIgYWxsJztcbiAgICAgICAgdGhpcy5kaXNhYmxlVmlydHVhbFNjcm9sbCA9IHRydWU7XG4gICAgICAgIHRoaXMub3Blbk9uRW50ZXIgPSB0cnVlO1xuICAgICAgICB0aGlzLmFwcGVhcmFuY2UgPSAndW5kZXJsaW5lJztcbiAgICB9XG59XG5OZ1NlbGVjdENvbmZpZy5kZWNvcmF0b3JzID0gW1xuICAgIHsgdHlwZTogSW5qZWN0YWJsZSwgYXJnczogW3sgcHJvdmlkZWRJbjogJ3Jvb3QnIH0sXSB9XG5dO1xuLyoqIEBub2NvbGxhcHNlICovIE5nU2VsZWN0Q29uZmlnLm5nSW5qZWN0YWJsZURlZiA9IGkwLsm1ybVkZWZpbmVJbmplY3RhYmxlKHsgZmFjdG9yeTogZnVuY3Rpb24gTmdTZWxlY3RDb25maWdfRmFjdG9yeSgpIHsgcmV0dXJuIG5ldyBOZ1NlbGVjdENvbmZpZygpOyB9LCB0b2tlbjogTmdTZWxlY3RDb25maWcsIHByb3ZpZGVkSW46IFwicm9vdFwiIH0pO1xuaWYgKGZhbHNlKSB7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIE5nU2VsZWN0Q29uZmlnLnByb3RvdHlwZS5wbGFjZWhvbGRlcjtcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgTmdTZWxlY3RDb25maWcucHJvdG90eXBlLm5vdEZvdW5kVGV4dDtcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgTmdTZWxlY3RDb25maWcucHJvdG90eXBlLnR5cGVUb1NlYXJjaFRleHQ7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIE5nU2VsZWN0Q29uZmlnLnByb3RvdHlwZS5hZGRUYWdUZXh0O1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBOZ1NlbGVjdENvbmZpZy5wcm90b3R5cGUubG9hZGluZ1RleHQ7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIE5nU2VsZWN0Q29uZmlnLnByb3RvdHlwZS5jbGVhckFsbFRleHQ7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIE5nU2VsZWN0Q29uZmlnLnByb3RvdHlwZS5kaXNhYmxlVmlydHVhbFNjcm9sbDtcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgTmdTZWxlY3RDb25maWcucHJvdG90eXBlLm9wZW5PbkVudGVyO1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBOZ1NlbGVjdENvbmZpZy5wcm90b3R5cGUuYXBwZW5kVG87XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIE5nU2VsZWN0Q29uZmlnLnByb3RvdHlwZS5iaW5kVmFsdWU7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIE5nU2VsZWN0Q29uZmlnLnByb3RvdHlwZS5hcHBlYXJhbmNlO1xufVxuIl19