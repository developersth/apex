{"version":3,"sources":["/Users/macpro/kritsadee/SVN/Cybersoft/apex/node_modules/ngx-toastr/bundles/ngx-toastr.umd.js"],"names":[],"mappings":"AAAA;oKAC2E;qIACJ;gGACjC;wCACnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAA4D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;aAgNlE;;;;;;;;;2EAMuB;;;;;SAK3B;;;;;;;;;;gDAMwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uCAsOM,AAE5B;;;;;;;;;kCACkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BAoGC,AAEnB;;;;;;;;;kCACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oCA4SgB,AAEzB;;;;;;;;;wIACe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sDA4M4B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAgBpC;;;;;;;;;;;;;;;;;;;;;;;;2BAwBS;;;;;;;;;;;;gDAQF;;;;;;;;;;;;;;;;;;;;UAoBf;;;;;;;;;gDAK4B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iEA4K2B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAMpC;;;;;;;;;;;;;;;;;;;;;;;qCAuBQ;;;;;;;;;;;;gDAQF","file":"ngx-toastr.umd.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/animations'), require('rxjs'), require('@angular/platform-browser'), require('@angular/common')) :\n    typeof define === 'function' && define.amd ? define('ngx-toastr', ['exports', '@angular/core', '@angular/animations', 'rxjs', '@angular/platform-browser', '@angular/common'], factory) :\n    (global = global || self, factory(global['ngx-toastr'] = {}, global.ng.core, global.ng.animations, global.rxjs, global.ng.platformBrowser, global.ng.common));\n}(this, (function (exports, core, animations, rxjs, platformBrowser, common) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __rest(s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    }\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\r\n\r\n    function __exportStar(m, exports) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    }\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\r\n\r\n    function __spreadArrays() {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    function __await(v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    }\r\n\r\n    function __asyncGenerator(thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    }\r\n\r\n    function __asyncDelegator(o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    }\r\n\r\n    function __asyncValues(o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    }\r\n\r\n    function __makeTemplateObject(cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    function __importStar(mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result.default = mod;\r\n        return result;\r\n    }\r\n\r\n    function __importDefault(mod) {\r\n        return (mod && mod.__esModule) ? mod : { default: mod };\r\n    }\n\n    var ToastContainerDirective = /** @class */ (function () {\n        function ToastContainerDirective(el) {\n            this.el = el;\n        }\n        ToastContainerDirective.prototype.getContainerElement = function () {\n            return this.el.nativeElement;\n        };\n        ToastContainerDirective.ctorParameters = function () { return [\n            { type: core.ElementRef }\n        ]; };\n        ToastContainerDirective = __decorate([\n            core.Directive({\n                selector: '[toastContainer]',\n                exportAs: 'toastContainer',\n            })\n        ], ToastContainerDirective);\n        return ToastContainerDirective;\n    }());\n    var ToastContainerModule = /** @class */ (function () {\n        function ToastContainerModule() {\n        }\n        ToastContainerModule = __decorate([\n            core.NgModule({\n                declarations: [ToastContainerDirective],\n                exports: [ToastContainerDirective],\n            })\n        ], ToastContainerModule);\n        return ToastContainerModule;\n    }());\n\n    /**\n     * Everything a toast needs to launch\n     */\n    var ToastPackage = /** @class */ (function () {\n        function ToastPackage(toastId, config, message, title, toastType, toastRef) {\n            var _this = this;\n            this.toastId = toastId;\n            this.config = config;\n            this.message = message;\n            this.title = title;\n            this.toastType = toastType;\n            this.toastRef = toastRef;\n            this._onTap = new rxjs.Subject();\n            this._onAction = new rxjs.Subject();\n            this.toastRef.afterClosed().subscribe(function () {\n                _this._onAction.complete();\n                _this._onTap.complete();\n            });\n        }\n        /** Fired on click */\n        ToastPackage.prototype.triggerTap = function () {\n            this._onTap.next();\n            if (this.config.tapToDismiss) {\n                this._onTap.complete();\n            }\n        };\n        ToastPackage.prototype.onTap = function () {\n            return this._onTap.asObservable();\n        };\n        /** available for use in custom toast */\n        ToastPackage.prototype.triggerAction = function (action) {\n            this._onAction.next(action);\n        };\n        ToastPackage.prototype.onAction = function () {\n            return this._onAction.asObservable();\n        };\n        return ToastPackage;\n    }());\n    var DefaultNoComponentGlobalConfig = {\n        maxOpened: 0,\n        autoDismiss: false,\n        newestOnTop: true,\n        preventDuplicates: false,\n        countDuplicates: false,\n        resetTimeoutOnDuplicate: false,\n        iconClasses: {\n            error: 'toast-error',\n            info: 'toast-info',\n            success: 'toast-success',\n            warning: 'toast-warning',\n        },\n        // Individual\n        closeButton: false,\n        disableTimeOut: false,\n        timeOut: 5000,\n        extendedTimeOut: 1000,\n        enableHtml: false,\n        progressBar: false,\n        toastClass: 'ngx-toastr',\n        positionClass: 'toast-top-right',\n        titleClass: 'toast-title',\n        messageClass: 'toast-message',\n        easing: 'ease-in',\n        easeTime: 300,\n        tapToDismiss: true,\n        onActivateTick: false,\n        progressAnimation: 'decreasing',\n    };\n    var TOAST_CONFIG = new core.InjectionToken('ToastConfig');\n\n    /**\n     * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n     */\n    var ComponentPortal = /** @class */ (function () {\n        function ComponentPortal(component, injector) {\n            this.component = component;\n            this.injector = injector;\n        }\n        /** Attach this portal to a host. */\n        ComponentPortal.prototype.attach = function (host, newestOnTop) {\n            this._attachedHost = host;\n            return host.attach(this, newestOnTop);\n        };\n        /** Detach this portal from its host */\n        ComponentPortal.prototype.detach = function () {\n            var host = this._attachedHost;\n            if (host) {\n                this._attachedHost = undefined;\n                return host.detach();\n            }\n        };\n        Object.defineProperty(ComponentPortal.prototype, \"isAttached\", {\n            /** Whether this portal is attached to a host. */\n            get: function () {\n                return this._attachedHost != null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Sets the PortalHost reference without performing `attach()`. This is used directly by\n         * the PortalHost when it is performing an `attach()` or `detach()`.\n         */\n        ComponentPortal.prototype.setAttachedHost = function (host) {\n            this._attachedHost = host;\n        };\n        return ComponentPortal;\n    }());\n    /**\n     * Partial implementation of PortalHost that only deals with attaching a\n     * ComponentPortal\n     */\n    var BasePortalHost = /** @class */ (function () {\n        function BasePortalHost() {\n        }\n        BasePortalHost.prototype.attach = function (portal, newestOnTop) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal, newestOnTop);\n        };\n        BasePortalHost.prototype.detach = function () {\n            if (this._attachedPortal) {\n                this._attachedPortal.setAttachedHost();\n            }\n            this._attachedPortal = undefined;\n            if (this._disposeFn) {\n                this._disposeFn();\n                this._disposeFn = undefined;\n            }\n        };\n        BasePortalHost.prototype.setDisposeFn = function (fn) {\n            this._disposeFn = fn;\n        };\n        return BasePortalHost;\n    }());\n\n    /**\n     * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n     * application context.\n     *\n     * This is the only part of the portal core that directly touches the DOM.\n     */\n    var DomPortalHost = /** @class */ (function (_super) {\n        __extends(DomPortalHost, _super);\n        function DomPortalHost(_hostDomElement, _componentFactoryResolver, _appRef) {\n            var _this = _super.call(this) || this;\n            _this._hostDomElement = _hostDomElement;\n            _this._componentFactoryResolver = _componentFactoryResolver;\n            _this._appRef = _appRef;\n            return _this;\n        }\n        /**\n         * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n         * @param portal Portal to be attached\n         */\n        DomPortalHost.prototype.attachComponentPortal = function (portal, newestOnTop) {\n            var _this = this;\n            var componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n            var componentRef;\n            // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n            // for the component (in terms of Angular's component tree, not rendering).\n            // When the ViewContainerRef is missing, we use the factory to create the component directly\n            // and then manually attach the ChangeDetector for that component to the application (which\n            // happens automatically when using a ViewContainer).\n            componentRef = componentFactory.create(portal.injector);\n            // When creating a component outside of a ViewContainer, we need to manually register\n            // its ChangeDetector with the application. This API is unfortunately not yet published\n            // in Angular core. The change detector must also be deregistered when the component\n            // is destroyed to prevent memory leaks.\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn(function () {\n                _this._appRef.detachView(componentRef.hostView);\n                componentRef.destroy();\n            });\n            // At this point the component has been instantiated, so we move it to the location in the DOM\n            // where we want it to be rendered.\n            if (newestOnTop) {\n                this._hostDomElement.insertBefore(this._getComponentRootNode(componentRef), this._hostDomElement.firstChild);\n            }\n            else {\n                this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));\n            }\n            return componentRef;\n        };\n        /** Gets the root HTMLElement for an instantiated component. */\n        DomPortalHost.prototype._getComponentRootNode = function (componentRef) {\n            return componentRef.hostView.rootNodes[0];\n        };\n        return DomPortalHost;\n    }(BasePortalHost));\n\n    /** Container inside which all toasts will render. */\n    var OverlayContainer = /** @class */ (function () {\n        function OverlayContainer(_document) {\n            this._document = _document;\n        }\n        OverlayContainer.prototype.ngOnDestroy = function () {\n            if (this._containerElement && this._containerElement.parentNode) {\n                this._containerElement.parentNode.removeChild(this._containerElement);\n            }\n        };\n        /**\n         * This method returns the overlay container element. It will lazily\n         * create the element the first time  it is called to facilitate using\n         * the container in non-browser environments.\n         * @returns the container element\n         */\n        OverlayContainer.prototype.getContainerElement = function () {\n            if (!this._containerElement) {\n                this._createContainer();\n            }\n            return this._containerElement;\n        };\n        /**\n         * Create the overlay container element, which is simply a div\n         * with the 'cdk-overlay-container' class on the document body.\n         */\n        OverlayContainer.prototype._createContainer = function () {\n            var container = this._document.createElement('div');\n            container.classList.add('overlay-container');\n            this._document.body.appendChild(container);\n            this._containerElement = container;\n        };\n        OverlayContainer.ctorParameters = function () { return [\n            { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] }\n        ]; };\n        OverlayContainer.ɵprov = core[\"ɵɵdefineInjectable\"]({ factory: function OverlayContainer_Factory() { return new OverlayContainer(core[\"ɵɵinject\"](common.DOCUMENT)); }, token: OverlayContainer, providedIn: \"root\" });\n        OverlayContainer = __decorate([\n            core.Injectable({ providedIn: 'root' }),\n            __param(0, core.Inject(common.DOCUMENT))\n        ], OverlayContainer);\n        return OverlayContainer;\n    }());\n\n    /**\n     * Reference to an overlay that has been created with the Overlay service.\n     * Used to manipulate or dispose of said overlay.\n     */\n    var OverlayRef = /** @class */ (function () {\n        function OverlayRef(_portalHost) {\n            this._portalHost = _portalHost;\n        }\n        OverlayRef.prototype.attach = function (portal, newestOnTop) {\n            if (newestOnTop === void 0) { newestOnTop = true; }\n            return this._portalHost.attach(portal, newestOnTop);\n        };\n        /**\n         * Detaches an overlay from a portal.\n         * @returns Resolves when the overlay has been detached.\n         */\n        OverlayRef.prototype.detach = function () {\n            return this._portalHost.detach();\n        };\n        return OverlayRef;\n    }());\n\n    /**\n     * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n     * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n     * selects, etc. can all be built using overlays. The service should primarily be used by authors\n     * of re-usable components rather than developers building end-user applications.\n     *\n     * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n     */\n    var Overlay = /** @class */ (function () {\n        function Overlay(_overlayContainer, _componentFactoryResolver, _appRef, _document) {\n            this._overlayContainer = _overlayContainer;\n            this._componentFactoryResolver = _componentFactoryResolver;\n            this._appRef = _appRef;\n            this._document = _document;\n            // Namespace panes by overlay container\n            this._paneElements = new Map();\n        }\n        /**\n         * Creates an overlay.\n         * @returns A reference to the created overlay.\n         */\n        Overlay.prototype.create = function (positionClass, overlayContainer) {\n            // get existing pane if possible\n            return this._createOverlayRef(this.getPaneElement(positionClass, overlayContainer));\n        };\n        Overlay.prototype.getPaneElement = function (positionClass, overlayContainer) {\n            if (positionClass === void 0) { positionClass = ''; }\n            if (!this._paneElements.get(overlayContainer)) {\n                this._paneElements.set(overlayContainer, {});\n            }\n            if (!this._paneElements.get(overlayContainer)[positionClass]) {\n                this._paneElements.get(overlayContainer)[positionClass] = this._createPaneElement(positionClass, overlayContainer);\n            }\n            return this._paneElements.get(overlayContainer)[positionClass];\n        };\n        /**\n         * Creates the DOM element for an overlay and appends it to the overlay container.\n         * @returns Newly-created pane element\n         */\n        Overlay.prototype._createPaneElement = function (positionClass, overlayContainer) {\n            var pane = this._document.createElement('div');\n            pane.id = 'toast-container';\n            pane.classList.add(positionClass);\n            pane.classList.add('toast-container');\n            if (!overlayContainer) {\n                this._overlayContainer.getContainerElement().appendChild(pane);\n            }\n            else {\n                overlayContainer.getContainerElement().appendChild(pane);\n            }\n            return pane;\n        };\n        /**\n         * Create a DomPortalHost into which the overlay content can be loaded.\n         * @param pane The DOM element to turn into a portal host.\n         * @returns A portal host for the given DOM element.\n         */\n        Overlay.prototype._createPortalHost = function (pane) {\n            return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef);\n        };\n        /**\n         * Creates an OverlayRef for an overlay in the given DOM element.\n         * @param pane DOM element for the overlay\n         */\n        Overlay.prototype._createOverlayRef = function (pane) {\n            return new OverlayRef(this._createPortalHost(pane));\n        };\n        Overlay.ctorParameters = function () { return [\n            { type: OverlayContainer },\n            { type: core.ComponentFactoryResolver },\n            { type: core.ApplicationRef },\n            { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] }\n        ]; };\n        Overlay.ɵprov = core[\"ɵɵdefineInjectable\"]({ factory: function Overlay_Factory() { return new Overlay(core[\"ɵɵinject\"](OverlayContainer), core[\"ɵɵinject\"](core.ComponentFactoryResolver), core[\"ɵɵinject\"](core.ApplicationRef), core[\"ɵɵinject\"](common.DOCUMENT)); }, token: Overlay, providedIn: \"root\" });\n        Overlay = __decorate([\n            core.Injectable({ providedIn: 'root' }),\n            __param(3, core.Inject(common.DOCUMENT))\n        ], Overlay);\n        return Overlay;\n    }());\n\n    /**\n     * Reference to a toast opened via the Toastr service.\n     */\n    var ToastRef = /** @class */ (function () {\n        function ToastRef(_overlayRef) {\n            this._overlayRef = _overlayRef;\n            /** Count of duplicates of this toast */\n            this.duplicatesCount = 0;\n            /** Subject for notifying the user that the toast has finished closing. */\n            this._afterClosed = new rxjs.Subject();\n            /** triggered when toast is activated */\n            this._activate = new rxjs.Subject();\n            /** notifies the toast that it should close before the timeout */\n            this._manualClose = new rxjs.Subject();\n            /** notifies the toast that it should reset the timeouts */\n            this._resetTimeout = new rxjs.Subject();\n            /** notifies the toast that it should count a duplicate toast */\n            this._countDuplicate = new rxjs.Subject();\n        }\n        ToastRef.prototype.manualClose = function () {\n            this._manualClose.next();\n            this._manualClose.complete();\n        };\n        ToastRef.prototype.manualClosed = function () {\n            return this._manualClose.asObservable();\n        };\n        ToastRef.prototype.timeoutReset = function () {\n            return this._resetTimeout.asObservable();\n        };\n        ToastRef.prototype.countDuplicate = function () {\n            return this._countDuplicate.asObservable();\n        };\n        /**\n         * Close the toast.\n         */\n        ToastRef.prototype.close = function () {\n            this._overlayRef.detach();\n            this._afterClosed.next();\n            this._manualClose.next();\n            this._afterClosed.complete();\n            this._manualClose.complete();\n            this._activate.complete();\n            this._resetTimeout.complete();\n            this._countDuplicate.complete();\n        };\n        /** Gets an observable that is notified when the toast is finished closing. */\n        ToastRef.prototype.afterClosed = function () {\n            return this._afterClosed.asObservable();\n        };\n        ToastRef.prototype.isInactive = function () {\n            return this._activate.isStopped;\n        };\n        ToastRef.prototype.activate = function () {\n            this._activate.next();\n            this._activate.complete();\n        };\n        /** Gets an observable that is notified when the toast has started opening. */\n        ToastRef.prototype.afterActivate = function () {\n            return this._activate.asObservable();\n        };\n        /** Reset the toast timouts and count duplicates */\n        ToastRef.prototype.onDuplicate = function (resetTimeout, countDuplicate) {\n            if (resetTimeout) {\n                this._resetTimeout.next();\n            }\n            if (countDuplicate) {\n                this._countDuplicate.next(++this.duplicatesCount);\n            }\n        };\n        return ToastRef;\n    }());\n    /** Custom injector type specifically for instantiating components with a toast. */\n    var ToastInjector = /** @class */ (function () {\n        function ToastInjector(_toastPackage, _parentInjector) {\n            this._toastPackage = _toastPackage;\n            this._parentInjector = _parentInjector;\n        }\n        ToastInjector.prototype.get = function (token, notFoundValue, flags) {\n            if (token === ToastPackage) {\n                return this._toastPackage;\n            }\n            return this._parentInjector.get(token, notFoundValue, flags);\n        };\n        return ToastInjector;\n    }());\n\n    var ToastrService = /** @class */ (function () {\n        function ToastrService(token, overlay, _injector, sanitizer, ngZone) {\n            this.overlay = overlay;\n            this._injector = _injector;\n            this.sanitizer = sanitizer;\n            this.ngZone = ngZone;\n            this.currentlyActive = 0;\n            this.toasts = [];\n            this.index = 0;\n            this.toastrConfig = __assign(__assign({}, token.default), token.config);\n            if (token.config.iconClasses) {\n                this.toastrConfig.iconClasses = __assign(__assign({}, token.default.iconClasses), token.config.iconClasses);\n            }\n        }\n        /** show toast */\n        ToastrService.prototype.show = function (message, title, override, type) {\n            if (override === void 0) { override = {}; }\n            if (type === void 0) { type = ''; }\n            return this._preBuildNotification(type, message, title, this.applyConfig(override));\n        };\n        /** show successful toast */\n        ToastrService.prototype.success = function (message, title, override) {\n            if (override === void 0) { override = {}; }\n            var type = this.toastrConfig.iconClasses.success || '';\n            return this._preBuildNotification(type, message, title, this.applyConfig(override));\n        };\n        /** show error toast */\n        ToastrService.prototype.error = function (message, title, override) {\n            if (override === void 0) { override = {}; }\n            var type = this.toastrConfig.iconClasses.error || '';\n            return this._preBuildNotification(type, message, title, this.applyConfig(override));\n        };\n        /** show info toast */\n        ToastrService.prototype.info = function (message, title, override) {\n            if (override === void 0) { override = {}; }\n            var type = this.toastrConfig.iconClasses.info || '';\n            return this._preBuildNotification(type, message, title, this.applyConfig(override));\n        };\n        /** show warning toast */\n        ToastrService.prototype.warning = function (message, title, override) {\n            if (override === void 0) { override = {}; }\n            var type = this.toastrConfig.iconClasses.warning || '';\n            return this._preBuildNotification(type, message, title, this.applyConfig(override));\n        };\n        /**\n         * Remove all or a single toast by id\n         */\n        ToastrService.prototype.clear = function (toastId) {\n            var e_1, _a;\n            try {\n                // Call every toastRef manualClose function\n                for (var _b = __values(this.toasts), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var toast = _c.value;\n                    if (toastId !== undefined) {\n                        if (toast.toastId === toastId) {\n                            toast.toastRef.manualClose();\n                            return;\n                        }\n                    }\n                    else {\n                        toast.toastRef.manualClose();\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        };\n        /**\n         * Remove and destroy a single toast by id\n         */\n        ToastrService.prototype.remove = function (toastId) {\n            var found = this._findToast(toastId);\n            if (!found) {\n                return false;\n            }\n            found.activeToast.toastRef.close();\n            this.toasts.splice(found.index, 1);\n            this.currentlyActive = this.currentlyActive - 1;\n            if (!this.toastrConfig.maxOpened || !this.toasts.length) {\n                return false;\n            }\n            if (this.currentlyActive < this.toastrConfig.maxOpened &&\n                this.toasts[this.currentlyActive]) {\n                var p = this.toasts[this.currentlyActive].toastRef;\n                if (!p.isInactive()) {\n                    this.currentlyActive = this.currentlyActive + 1;\n                    p.activate();\n                }\n            }\n            return true;\n        };\n        /**\n         * Determines if toast message is already shown\n         */\n        ToastrService.prototype.findDuplicate = function (message, resetOnDuplicate, countDuplicates) {\n            var e_2, _a;\n            try {\n                for (var _b = __values(this.toasts), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var toast = _c.value;\n                    if (toast.message === message) {\n                        toast.toastRef.onDuplicate(resetOnDuplicate, countDuplicates);\n                        return toast;\n                    }\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n            return null;\n        };\n        /** create a clone of global config and apply individual settings */\n        ToastrService.prototype.applyConfig = function (override) {\n            if (override === void 0) { override = {}; }\n            return __assign(__assign({}, this.toastrConfig), override);\n        };\n        /**\n         * Find toast object by id\n         */\n        ToastrService.prototype._findToast = function (toastId) {\n            for (var i = 0; i < this.toasts.length; i++) {\n                if (this.toasts[i].toastId === toastId) {\n                    return { index: i, activeToast: this.toasts[i] };\n                }\n            }\n            return null;\n        };\n        /**\n         * Determines the need to run inside angular's zone then builds the toast\n         */\n        ToastrService.prototype._preBuildNotification = function (toastType, message, title, config) {\n            var _this = this;\n            if (config.onActivateTick) {\n                return this.ngZone.run(function () {\n                    return _this._buildNotification(toastType, message, title, config);\n                });\n            }\n            return this._buildNotification(toastType, message, title, config);\n        };\n        /**\n         * Creates and attaches toast data to component\n         * returns the active toast, or in case preventDuplicates is enabled the original/non-duplicate active toast.\n         */\n        ToastrService.prototype._buildNotification = function (toastType, message, title, config) {\n            if (!config.toastComponent) {\n                throw new Error('toastComponent required');\n            }\n            // max opened and auto dismiss = true\n            // if timeout = 0 resetting it would result in setting this.hideTime = Date.now(). Hence, we only want to reset timeout if there is\n            // a timeout at all\n            var duplicate = this.findDuplicate(message, this.toastrConfig.resetTimeoutOnDuplicate && config.timeOut > 0, this.toastrConfig.countDuplicates);\n            if (message && this.toastrConfig.preventDuplicates && duplicate !== null) {\n                return duplicate;\n            }\n            this.previousToastMessage = message;\n            var keepInactive = false;\n            if (this.toastrConfig.maxOpened &&\n                this.currentlyActive >= this.toastrConfig.maxOpened) {\n                keepInactive = true;\n                if (this.toastrConfig.autoDismiss) {\n                    this.clear(this.toasts[0].toastId);\n                }\n            }\n            var overlayRef = this.overlay.create(config.positionClass, this.overlayContainer);\n            this.index = this.index + 1;\n            var sanitizedMessage = message;\n            if (message && config.enableHtml) {\n                sanitizedMessage = this.sanitizer.sanitize(core.SecurityContext.HTML, message);\n            }\n            var toastRef = new ToastRef(overlayRef);\n            var toastPackage = new ToastPackage(this.index, config, sanitizedMessage, title, toastType, toastRef);\n            var toastInjector = new ToastInjector(toastPackage, this._injector);\n            var component = new ComponentPortal(config.toastComponent, toastInjector);\n            var portal = overlayRef.attach(component, this.toastrConfig.newestOnTop);\n            toastRef.componentInstance = portal.instance;\n            var ins = {\n                toastId: this.index,\n                message: message || '',\n                toastRef: toastRef,\n                onShown: toastRef.afterActivate(),\n                onHidden: toastRef.afterClosed(),\n                onTap: toastPackage.onTap(),\n                onAction: toastPackage.onAction(),\n                portal: portal\n            };\n            if (!keepInactive) {\n                this.currentlyActive = this.currentlyActive + 1;\n                setTimeout(function () {\n                    ins.toastRef.activate();\n                });\n            }\n            this.toasts.push(ins);\n            return ins;\n        };\n        ToastrService.ctorParameters = function () { return [\n            { type: undefined, decorators: [{ type: core.Inject, args: [TOAST_CONFIG,] }] },\n            { type: Overlay },\n            { type: core.Injector },\n            { type: platformBrowser.DomSanitizer },\n            { type: core.NgZone }\n        ]; };\n        ToastrService.ɵprov = core[\"ɵɵdefineInjectable\"]({ factory: function ToastrService_Factory() { return new ToastrService(core[\"ɵɵinject\"](TOAST_CONFIG), core[\"ɵɵinject\"](Overlay), core[\"ɵɵinject\"](core.INJECTOR), core[\"ɵɵinject\"](platformBrowser.DomSanitizer), core[\"ɵɵinject\"](core.NgZone)); }, token: ToastrService, providedIn: \"root\" });\n        ToastrService = __decorate([\n            core.Injectable({ providedIn: 'root' }),\n            __param(0, core.Inject(TOAST_CONFIG))\n        ], ToastrService);\n        return ToastrService;\n    }());\n\n    var Toast = /** @class */ (function () {\n        function Toast(toastrService, toastPackage, ngZone) {\n            var _this = this;\n            this.toastrService = toastrService;\n            this.toastPackage = toastPackage;\n            this.ngZone = ngZone;\n            /** width of progress bar */\n            this.width = -1;\n            /** a combination of toast type and options.toastClass */\n            this.toastClasses = '';\n            /** controls animation */\n            this.state = {\n                value: 'inactive',\n                params: {\n                    easeTime: this.toastPackage.config.easeTime,\n                    easing: 'ease-in'\n                }\n            };\n            this.message = toastPackage.message;\n            this.title = toastPackage.title;\n            this.options = toastPackage.config;\n            this.originalTimeout = toastPackage.config.timeOut;\n            this.toastClasses = toastPackage.toastType + \" \" + toastPackage.config.toastClass;\n            this.sub = toastPackage.toastRef.afterActivate().subscribe(function () {\n                _this.activateToast();\n            });\n            this.sub1 = toastPackage.toastRef.manualClosed().subscribe(function () {\n                _this.remove();\n            });\n            this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(function () {\n                _this.resetTimeout();\n            });\n            this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(function (count) {\n                _this.duplicatesCount = count;\n            });\n        }\n        Object.defineProperty(Toast.prototype, \"displayStyle\", {\n            /** hides component when waiting to be displayed */\n            get: function () {\n                if (this.state.value === 'inactive') {\n                    return 'none';\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Toast.prototype.ngOnDestroy = function () {\n            this.sub.unsubscribe();\n            this.sub1.unsubscribe();\n            this.sub2.unsubscribe();\n            this.sub3.unsubscribe();\n            clearInterval(this.intervalId);\n            clearTimeout(this.timeout);\n        };\n        /**\n         * activates toast and sets timeout\n         */\n        Toast.prototype.activateToast = function () {\n            var _this = this;\n            this.state = __assign(__assign({}, this.state), { value: 'active' });\n            if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n                this.outsideTimeout(function () { return _this.remove(); }, this.options.timeOut);\n                this.hideTime = new Date().getTime() + this.options.timeOut;\n                if (this.options.progressBar) {\n                    this.outsideInterval(function () { return _this.updateProgress(); }, 10);\n                }\n            }\n        };\n        /**\n         * updates progress bar width\n         */\n        Toast.prototype.updateProgress = function () {\n            if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n                return;\n            }\n            var now = new Date().getTime();\n            var remaining = this.hideTime - now;\n            this.width = (remaining / this.options.timeOut) * 100;\n            if (this.options.progressAnimation === 'increasing') {\n                this.width = 100 - this.width;\n            }\n            if (this.width <= 0) {\n                this.width = 0;\n            }\n            if (this.width >= 100) {\n                this.width = 100;\n            }\n        };\n        Toast.prototype.resetTimeout = function () {\n            var _this = this;\n            clearTimeout(this.timeout);\n            clearInterval(this.intervalId);\n            this.state = __assign(__assign({}, this.state), { value: 'active' });\n            this.outsideTimeout(function () { return _this.remove(); }, this.originalTimeout);\n            this.options.timeOut = this.originalTimeout;\n            this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n            this.width = -1;\n            if (this.options.progressBar) {\n                this.outsideInterval(function () { return _this.updateProgress(); }, 10);\n            }\n        };\n        /**\n         * tells toastrService to remove this toast after animation time\n         */\n        Toast.prototype.remove = function () {\n            var _this = this;\n            if (this.state.value === 'removed') {\n                return;\n            }\n            clearTimeout(this.timeout);\n            this.state = __assign(__assign({}, this.state), { value: 'removed' });\n            this.outsideTimeout(function () { return _this.toastrService.remove(_this.toastPackage.toastId); }, +this.toastPackage.config.easeTime);\n        };\n        Toast.prototype.tapToast = function () {\n            if (this.state.value === 'removed') {\n                return;\n            }\n            this.toastPackage.triggerTap();\n            if (this.options.tapToDismiss) {\n                this.remove();\n            }\n        };\n        Toast.prototype.stickAround = function () {\n            if (this.state.value === 'removed') {\n                return;\n            }\n            clearTimeout(this.timeout);\n            this.options.timeOut = 0;\n            this.hideTime = 0;\n            // disable progressBar\n            clearInterval(this.intervalId);\n            this.width = 0;\n        };\n        Toast.prototype.delayedHideToast = function () {\n            var _this = this;\n            if ((this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut') ||\n                this.options.extendedTimeOut === 0 ||\n                this.state.value === 'removed') {\n                return;\n            }\n            this.outsideTimeout(function () { return _this.remove(); }, this.options.extendedTimeOut);\n            this.options.timeOut = this.options.extendedTimeOut;\n            this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n            this.width = -1;\n            if (this.options.progressBar) {\n                this.outsideInterval(function () { return _this.updateProgress(); }, 10);\n            }\n        };\n        Toast.prototype.outsideTimeout = function (func, timeout) {\n            var _this = this;\n            if (this.ngZone) {\n                this.ngZone.runOutsideAngular(function () {\n                    return (_this.timeout = setTimeout(function () { return _this.runInsideAngular(func); }, timeout));\n                });\n            }\n            else {\n                this.timeout = setTimeout(function () { return func(); }, timeout);\n            }\n        };\n        Toast.prototype.outsideInterval = function (func, timeout) {\n            var _this = this;\n            if (this.ngZone) {\n                this.ngZone.runOutsideAngular(function () {\n                    return (_this.intervalId = setInterval(function () { return _this.runInsideAngular(func); }, timeout));\n                });\n            }\n            else {\n                this.intervalId = setInterval(function () { return func(); }, timeout);\n            }\n        };\n        Toast.prototype.runInsideAngular = function (func) {\n            if (this.ngZone) {\n                this.ngZone.run(function () { return func(); });\n            }\n            else {\n                func();\n            }\n        };\n        Toast.ctorParameters = function () { return [\n            { type: ToastrService },\n            { type: ToastPackage },\n            { type: core.NgZone }\n        ]; };\n        __decorate([\n            core.HostBinding('class')\n        ], Toast.prototype, \"toastClasses\", void 0);\n        __decorate([\n            core.HostBinding('@flyInOut')\n        ], Toast.prototype, \"state\", void 0);\n        __decorate([\n            core.HostBinding('style.display')\n        ], Toast.prototype, \"displayStyle\", null);\n        __decorate([\n            core.HostListener('click')\n        ], Toast.prototype, \"tapToast\", null);\n        __decorate([\n            core.HostListener('mouseenter')\n        ], Toast.prototype, \"stickAround\", null);\n        __decorate([\n            core.HostListener('mouseleave')\n        ], Toast.prototype, \"delayedHideToast\", null);\n        Toast = __decorate([\n            core.Component({\n                selector: '[toast-component]',\n                template: \"\\n  <button *ngIf=\\\"options.closeButton\\\" (click)=\\\"remove()\\\" class=\\\"toast-close-button\\\" aria-label=\\\"Close\\\">\\n    <span aria-hidden=\\\"true\\\">&times;</span>\\n  </button>\\n  <div *ngIf=\\\"title\\\" [class]=\\\"options.titleClass\\\" [attr.aria-label]=\\\"title\\\">\\n    {{ title }} <ng-container *ngIf=\\\"duplicatesCount\\\">[{{ duplicatesCount + 1 }}]</ng-container>\\n  </div>\\n  <div *ngIf=\\\"message && options.enableHtml\\\" role=\\\"alertdialog\\\" aria-live=\\\"polite\\\"\\n    [class]=\\\"options.messageClass\\\" [innerHTML]=\\\"message\\\">\\n  </div>\\n  <div *ngIf=\\\"message && !options.enableHtml\\\" role=\\\"alertdialog\\\" aria-live=\\\"polite\\\"\\n    [class]=\\\"options.messageClass\\\" [attr.aria-label]=\\\"message\\\">\\n    {{ message }}\\n  </div>\\n  <div *ngIf=\\\"options.progressBar\\\">\\n    <div class=\\\"toast-progress\\\" [style.width]=\\\"width + '%'\\\"></div>\\n  </div>\\n  \",\n                animations: [\n                    animations.trigger('flyInOut', [\n                        animations.state('inactive', animations.style({ opacity: 0 })),\n                        animations.state('active', animations.style({ opacity: 1 })),\n                        animations.state('removed', animations.style({ opacity: 0 })),\n                        animations.transition('inactive => active', animations.animate('{{ easeTime }}ms {{ easing }}')),\n                        animations.transition('active => removed', animations.animate('{{ easeTime }}ms {{ easing }}'))\n                    ])\n                ],\n                preserveWhitespaces: false\n            })\n        ], Toast);\n        return Toast;\n    }());\n\n    var DefaultGlobalConfig = __assign(__assign({}, DefaultNoComponentGlobalConfig), { toastComponent: Toast });\n    var ToastrModule = /** @class */ (function () {\n        function ToastrModule() {\n        }\n        ToastrModule_1 = ToastrModule;\n        ToastrModule.forRoot = function (config) {\n            if (config === void 0) { config = {}; }\n            return {\n                ngModule: ToastrModule_1,\n                providers: [\n                    {\n                        provide: TOAST_CONFIG,\n                        useValue: {\n                            default: DefaultGlobalConfig,\n                            config: config,\n                        },\n                    },\n                ],\n            };\n        };\n        var ToastrModule_1;\n        ToastrModule = ToastrModule_1 = __decorate([\n            core.NgModule({\n                imports: [common.CommonModule],\n                declarations: [Toast],\n                exports: [Toast],\n                entryComponents: [Toast],\n            })\n        ], ToastrModule);\n        return ToastrModule;\n    }());\n    var ToastrComponentlessModule = /** @class */ (function () {\n        function ToastrComponentlessModule() {\n        }\n        ToastrComponentlessModule.forRoot = function (config) {\n            if (config === void 0) { config = {}; }\n            return {\n                ngModule: ToastrModule,\n                providers: [\n                    {\n                        provide: TOAST_CONFIG,\n                        useValue: {\n                            default: DefaultNoComponentGlobalConfig,\n                            config: config,\n                        },\n                    },\n                ],\n            };\n        };\n        ToastrComponentlessModule = __decorate([\n            core.NgModule({\n                imports: [common.CommonModule],\n            })\n        ], ToastrComponentlessModule);\n        return ToastrComponentlessModule;\n    }());\n\n    var ToastNoAnimation = /** @class */ (function () {\n        function ToastNoAnimation(toastrService, toastPackage, appRef) {\n            var _this = this;\n            this.toastrService = toastrService;\n            this.toastPackage = toastPackage;\n            this.appRef = appRef;\n            /** width of progress bar */\n            this.width = -1;\n            /** a combination of toast type and options.toastClass */\n            this.toastClasses = '';\n            /** controls animation */\n            this.state = 'inactive';\n            this.message = toastPackage.message;\n            this.title = toastPackage.title;\n            this.options = toastPackage.config;\n            this.originalTimeout = toastPackage.config.timeOut;\n            this.toastClasses = toastPackage.toastType + \" \" + toastPackage.config.toastClass;\n            this.sub = toastPackage.toastRef.afterActivate().subscribe(function () {\n                _this.activateToast();\n            });\n            this.sub1 = toastPackage.toastRef.manualClosed().subscribe(function () {\n                _this.remove();\n            });\n            this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(function () {\n                _this.resetTimeout();\n            });\n            this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(function (count) {\n                _this.duplicatesCount = count;\n            });\n        }\n        Object.defineProperty(ToastNoAnimation.prototype, \"displayStyle\", {\n            /** hides component when waiting to be displayed */\n            get: function () {\n                if (this.state === 'inactive') {\n                    return 'none';\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        ToastNoAnimation.prototype.ngOnDestroy = function () {\n            this.sub.unsubscribe();\n            this.sub1.unsubscribe();\n            this.sub2.unsubscribe();\n            this.sub3.unsubscribe();\n            clearInterval(this.intervalId);\n            clearTimeout(this.timeout);\n        };\n        /**\n         * activates toast and sets timeout\n         */\n        ToastNoAnimation.prototype.activateToast = function () {\n            var _this = this;\n            this.state = 'active';\n            if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n                this.timeout = setTimeout(function () {\n                    _this.remove();\n                }, this.options.timeOut);\n                this.hideTime = new Date().getTime() + this.options.timeOut;\n                if (this.options.progressBar) {\n                    this.intervalId = setInterval(function () { return _this.updateProgress(); }, 10);\n                }\n            }\n            if (this.options.onActivateTick) {\n                this.appRef.tick();\n            }\n        };\n        /**\n         * updates progress bar width\n         */\n        ToastNoAnimation.prototype.updateProgress = function () {\n            if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n                return;\n            }\n            var now = new Date().getTime();\n            var remaining = this.hideTime - now;\n            this.width = (remaining / this.options.timeOut) * 100;\n            if (this.options.progressAnimation === 'increasing') {\n                this.width = 100 - this.width;\n            }\n            if (this.width <= 0) {\n                this.width = 0;\n            }\n            if (this.width >= 100) {\n                this.width = 100;\n            }\n        };\n        ToastNoAnimation.prototype.resetTimeout = function () {\n            var _this = this;\n            clearTimeout(this.timeout);\n            clearInterval(this.intervalId);\n            this.state = 'active';\n            this.options.timeOut = this.originalTimeout;\n            this.timeout = setTimeout(function () { return _this.remove(); }, this.originalTimeout);\n            this.hideTime = new Date().getTime() + (this.originalTimeout || 0);\n            this.width = -1;\n            if (this.options.progressBar) {\n                this.intervalId = setInterval(function () { return _this.updateProgress(); }, 10);\n            }\n        };\n        /**\n         * tells toastrService to remove this toast after animation time\n         */\n        ToastNoAnimation.prototype.remove = function () {\n            var _this = this;\n            if (this.state === 'removed') {\n                return;\n            }\n            clearTimeout(this.timeout);\n            this.state = 'removed';\n            this.timeout = setTimeout(function () {\n                return _this.toastrService.remove(_this.toastPackage.toastId);\n            });\n        };\n        ToastNoAnimation.prototype.tapToast = function () {\n            if (this.state === 'removed') {\n                return;\n            }\n            this.toastPackage.triggerTap();\n            if (this.options.tapToDismiss) {\n                this.remove();\n            }\n        };\n        ToastNoAnimation.prototype.stickAround = function () {\n            if (this.state === 'removed') {\n                return;\n            }\n            clearTimeout(this.timeout);\n            this.options.timeOut = 0;\n            this.hideTime = 0;\n            // disable progressBar\n            clearInterval(this.intervalId);\n            this.width = 0;\n        };\n        ToastNoAnimation.prototype.delayedHideToast = function () {\n            var _this = this;\n            if ((this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut') ||\n                this.options.extendedTimeOut === 0 ||\n                this.state === 'removed') {\n                return;\n            }\n            this.timeout = setTimeout(function () { return _this.remove(); }, this.options.extendedTimeOut);\n            this.options.timeOut = this.options.extendedTimeOut;\n            this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n            this.width = -1;\n            if (this.options.progressBar) {\n                this.intervalId = setInterval(function () { return _this.updateProgress(); }, 10);\n            }\n        };\n        ToastNoAnimation.ctorParameters = function () { return [\n            { type: ToastrService },\n            { type: ToastPackage },\n            { type: core.ApplicationRef }\n        ]; };\n        __decorate([\n            core.HostBinding('class')\n        ], ToastNoAnimation.prototype, \"toastClasses\", void 0);\n        __decorate([\n            core.HostBinding('style.display')\n        ], ToastNoAnimation.prototype, \"displayStyle\", null);\n        __decorate([\n            core.HostListener('click')\n        ], ToastNoAnimation.prototype, \"tapToast\", null);\n        __decorate([\n            core.HostListener('mouseenter')\n        ], ToastNoAnimation.prototype, \"stickAround\", null);\n        __decorate([\n            core.HostListener('mouseleave')\n        ], ToastNoAnimation.prototype, \"delayedHideToast\", null);\n        ToastNoAnimation = __decorate([\n            core.Component({\n                selector: '[toast-component]',\n                template: \"\\n  <button *ngIf=\\\"options.closeButton\\\" (click)=\\\"remove()\\\" class=\\\"toast-close-button\\\" aria-label=\\\"Close\\\">\\n    <span aria-hidden=\\\"true\\\">&times;</span>\\n  </button>\\n  <div *ngIf=\\\"title\\\" [class]=\\\"options.titleClass\\\" [attr.aria-label]=\\\"title\\\">\\n    {{ title }} <ng-container *ngIf=\\\"duplicatesCount\\\">[{{ duplicatesCount + 1 }}]</ng-container>\\n  </div>\\n  <div *ngIf=\\\"message && options.enableHtml\\\" role=\\\"alert\\\" aria-live=\\\"polite\\\"\\n    [class]=\\\"options.messageClass\\\" [innerHTML]=\\\"message\\\">\\n  </div>\\n  <div *ngIf=\\\"message && !options.enableHtml\\\" role=\\\"alert\\\" aria-live=\\\"polite\\\"\\n    [class]=\\\"options.messageClass\\\" [attr.aria-label]=\\\"message\\\">\\n    {{ message }}\\n  </div>\\n  <div *ngIf=\\\"options.progressBar\\\">\\n    <div class=\\\"toast-progress\\\" [style.width]=\\\"width + '%'\\\"></div>\\n  </div>\\n  \"\n            })\n        ], ToastNoAnimation);\n        return ToastNoAnimation;\n    }());\n    var DefaultNoAnimationsGlobalConfig = __assign(__assign({}, DefaultNoComponentGlobalConfig), { toastComponent: ToastNoAnimation });\n    var ToastNoAnimationModule = /** @class */ (function () {\n        function ToastNoAnimationModule() {\n        }\n        ToastNoAnimationModule_1 = ToastNoAnimationModule;\n        ToastNoAnimationModule.forRoot = function (config) {\n            if (config === void 0) { config = {}; }\n            return {\n                ngModule: ToastNoAnimationModule_1,\n                providers: [\n                    {\n                        provide: TOAST_CONFIG,\n                        useValue: {\n                            default: DefaultNoAnimationsGlobalConfig,\n                            config: config,\n                        },\n                    },\n                ],\n            };\n        };\n        var ToastNoAnimationModule_1;\n        ToastNoAnimationModule = ToastNoAnimationModule_1 = __decorate([\n            core.NgModule({\n                imports: [common.CommonModule],\n                declarations: [ToastNoAnimation],\n                exports: [ToastNoAnimation],\n                entryComponents: [ToastNoAnimation],\n            })\n        ], ToastNoAnimationModule);\n        return ToastNoAnimationModule;\n    }());\n\n    exports.BasePortalHost = BasePortalHost;\n    exports.ComponentPortal = ComponentPortal;\n    exports.DefaultGlobalConfig = DefaultGlobalConfig;\n    exports.DefaultNoAnimationsGlobalConfig = DefaultNoAnimationsGlobalConfig;\n    exports.DefaultNoComponentGlobalConfig = DefaultNoComponentGlobalConfig;\n    exports.Overlay = Overlay;\n    exports.OverlayContainer = OverlayContainer;\n    exports.OverlayRef = OverlayRef;\n    exports.TOAST_CONFIG = TOAST_CONFIG;\n    exports.Toast = Toast;\n    exports.ToastContainerDirective = ToastContainerDirective;\n    exports.ToastContainerModule = ToastContainerModule;\n    exports.ToastInjector = ToastInjector;\n    exports.ToastNoAnimation = ToastNoAnimation;\n    exports.ToastNoAnimationModule = ToastNoAnimationModule;\n    exports.ToastPackage = ToastPackage;\n    exports.ToastRef = ToastRef;\n    exports.ToastrComponentlessModule = ToastrComponentlessModule;\n    exports.ToastrModule = ToastrModule;\n    exports.ToastrService = ToastrService;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"]}