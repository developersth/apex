import { __decorate, __param } from "tslib";
import { isPlatformServer } from '@angular/common';
import { QUILL_CONFIG_TOKEN } from './quill-editor.interfaces';
import { AfterViewInit, Component, ElementRef, Inject, Input, OnChanges, PLATFORM_ID, Renderer2, SimpleChanges, ViewEncapsulation } from '@angular/core';
import { defaultModules } from './quill-defaults';
import { getFormat } from './helpers';
import * as ɵngcc0 from '@angular/core';
var Quill = null;
var QuillViewComponent = /** @class */ (function () {
    function QuillViewComponent(platformId, config, renderer, elementRef) {
        var _this = this;
        this.platformId = platformId;
        this.config = config;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.strict = true;
        this.customOptions = [];
        this.preserveWhitespace = false;
        this.valueSetter = function (quillEditor, value) {
            var format = getFormat(_this.format, _this.config.format);
            var content = value;
            if (format === 'html' || format === 'text') {
                content = quillEditor.clipboard.convert(value);
            }
            else if (format === 'json') {
                try {
                    content = JSON.parse(value);
                }
                catch (e) {
                    content = [{ insert: value }];
                }
            }
            quillEditor.setContents(content);
        };
    }
    QuillViewComponent.prototype.ngOnChanges = function (changes) {
        if (!this.quillEditor) {
            return;
        }
        if (changes.content) {
            this.valueSetter(this.quillEditor, changes.content.currentValue);
        }
    };
    QuillViewComponent.prototype.ngAfterViewInit = function () {
        if (isPlatformServer(this.platformId)) {
            return;
        }
        if (!Quill) {
            Quill = require('quill');
        }
        var modules = Object.assign({}, this.modules || (this.config.modules || defaultModules));
        modules.toolbar = false;
        this.customOptions.forEach(function (customOption) {
            var newCustomOption = Quill.import(customOption.import);
            newCustomOption.whitelist = customOption.whitelist;
            Quill.register(newCustomOption, true);
        });
        var debug = this.debug;
        if (!debug && debug !== false && this.config.debug) {
            debug = this.config.debug;
        }
        var formats = this.formats;
        if (!formats && formats === undefined) {
            formats = this.config.formats ? Object.assign({}, this.config.formats) : (this.config.formats === null ? null : undefined);
        }
        var theme = this.theme || (this.config.theme ? this.config.theme : 'snow');
        this.elementRef.nativeElement.insertAdjacentHTML('afterbegin', this.preserveWhitespace ? '<pre quill-view-element></pre>' : '<div quill-view-element></div>');
        this.editorElem = this.elementRef.nativeElement.querySelector('[quill-view-element]');
        this.quillEditor = new Quill(this.editorElem, {
            debug: debug,
            formats: formats,
            modules: modules,
            readOnly: true,
            strict: this.strict,
            theme: theme
        });
        this.renderer.addClass(this.editorElem, 'ngx-quill-view');
        if (this.content) {
            this.valueSetter(this.quillEditor, this.content);
        }
    };
    QuillViewComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [QUILL_CONFIG_TOKEN,] }] },
        { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
    ]; };
    __decorate([
        Input()
    ], QuillViewComponent.prototype, "format", void 0);
    __decorate([
        Input()
    ], QuillViewComponent.prototype, "theme", void 0);
    __decorate([
        Input()
    ], QuillViewComponent.prototype, "modules", void 0);
    __decorate([
        Input()
    ], QuillViewComponent.prototype, "debug", void 0);
    __decorate([
        Input()
    ], QuillViewComponent.prototype, "formats", void 0);
    __decorate([
        Input()
    ], QuillViewComponent.prototype, "strict", void 0);
    __decorate([
        Input()
    ], QuillViewComponent.prototype, "content", void 0);
    __decorate([
        Input()
    ], QuillViewComponent.prototype, "customOptions", void 0);
    __decorate([
        Input()
    ], QuillViewComponent.prototype, "preserveWhitespace", void 0);
    QuillViewComponent = __decorate([ __param(0, Inject(PLATFORM_ID)),
        __param(1, Inject(QUILL_CONFIG_TOKEN)),
        __param(2, Inject(Renderer2)),
        __param(3, Inject(ElementRef))
    ], QuillViewComponent);
QuillViewComponent.ɵfac = function QuillViewComponent_Factory(t) { return new (t || QuillViewComponent)(ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(QUILL_CONFIG_TOKEN), ɵngcc0.ɵɵdirectiveInject(Renderer2), ɵngcc0.ɵɵdirectiveInject(ElementRef)); };
QuillViewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: QuillViewComponent, selectors: [["quill-view"]], inputs: { strict: "strict", customOptions: "customOptions", preserveWhitespace: "preserveWhitespace", format: "format", theme: "theme", modules: "modules", debug: "debug", formats: "formats", content: "content" }, features: [ɵngcc0.ɵɵNgOnChangesFeature()], decls: 0, vars: 0, template: function QuillViewComponent_Template(rf, ctx) { }, styles: ["\n.ql-container.ngx-quill-view {\n  border: 0;\n}\n"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(QuillViewComponent, [{
        type: Component,
        args: [{
                encapsulation: ViewEncapsulation.None,
                selector: 'quill-view',
                template: "\n",
                styles: ["\n.ql-container.ngx-quill-view {\n  border: 0;\n}\n"]
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [QUILL_CONFIG_TOKEN]
            }] }, { type: ɵngcc0.Renderer2, decorators: [{
                type: Inject,
                args: [Renderer2]
            }] }, { type: ɵngcc0.ElementRef, decorators: [{
                type: Inject,
                args: [ElementRef]
            }] }]; }, { strict: [{
            type: Input
        }], customOptions: [{
            type: Input
        }], preserveWhitespace: [{
            type: Input
        }], format: [{
            type: Input
        }], theme: [{
            type: Input
        }], modules: [{
            type: Input
        }], debug: [{
            type: Input
        }], formats: [{
            type: Input
        }], content: [{
            type: Input
        }] }); })();
    return QuillViewComponent;
}());
export { QuillViewComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNwcm8va3JpdHNhZGVlL1NWTi9DeWJlcnNvZnQvYXBleC9ub2RlX21vZHVsZXMvbmd4LXF1aWxsL2VzbTUvc3JjL3F1aWxsLXZpZXcuY29tcG9uZW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBTUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3FDQTJHcUMsQUFPOUI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFJb0IiLCJmaWxlIjoicXVpbGwtdmlldy5jb21wb25lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2RlY29yYXRlLCBfX3BhcmFtIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpc1BsYXRmb3JtU2VydmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IFFVSUxMX0NPTkZJR19UT0tFTiB9IGZyb20gJy4vcXVpbGwtZWRpdG9yLmludGVyZmFjZXMnO1xuaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBJbmplY3QsIElucHV0LCBPbkNoYW5nZXMsIFBMQVRGT1JNX0lELCBSZW5kZXJlcjIsIFNpbXBsZUNoYW5nZXMsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBkZWZhdWx0TW9kdWxlcyB9IGZyb20gJy4vcXVpbGwtZGVmYXVsdHMnO1xuaW1wb3J0IHsgZ2V0Rm9ybWF0IH0gZnJvbSAnLi9oZWxwZXJzJztcbnZhciBRdWlsbCA9IG51bGw7XG52YXIgUXVpbGxWaWV3Q29tcG9uZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFF1aWxsVmlld0NvbXBvbmVudChwbGF0Zm9ybUlkLCBjb25maWcsIHJlbmRlcmVyLCBlbGVtZW50UmVmKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMucGxhdGZvcm1JZCA9IHBsYXRmb3JtSWQ7XG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgICAgICB0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgICAgIHRoaXMuZWxlbWVudFJlZiA9IGVsZW1lbnRSZWY7XG4gICAgICAgIHRoaXMuc3RyaWN0ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5jdXN0b21PcHRpb25zID0gW107XG4gICAgICAgIHRoaXMucHJlc2VydmVXaGl0ZXNwYWNlID0gZmFsc2U7XG4gICAgICAgIHRoaXMudmFsdWVTZXR0ZXIgPSBmdW5jdGlvbiAocXVpbGxFZGl0b3IsIHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgZm9ybWF0ID0gZ2V0Rm9ybWF0KF90aGlzLmZvcm1hdCwgX3RoaXMuY29uZmlnLmZvcm1hdCk7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHZhbHVlO1xuICAgICAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ2h0bWwnIHx8IGZvcm1hdCA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgICAgICAgY29udGVudCA9IHF1aWxsRWRpdG9yLmNsaXBib2FyZC5jb252ZXJ0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGZvcm1hdCA9PT0gJ2pzb24nKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudCA9IEpTT04ucGFyc2UodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gW3sgaW5zZXJ0OiB2YWx1ZSB9XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBxdWlsbEVkaXRvci5zZXRDb250ZW50cyhjb250ZW50KTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgUXVpbGxWaWV3Q29tcG9uZW50LnByb3RvdHlwZS5uZ09uQ2hhbmdlcyA9IGZ1bmN0aW9uIChjaGFuZ2VzKSB7XG4gICAgICAgIGlmICghdGhpcy5xdWlsbEVkaXRvcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGFuZ2VzLmNvbnRlbnQpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWVTZXR0ZXIodGhpcy5xdWlsbEVkaXRvciwgY2hhbmdlcy5jb250ZW50LmN1cnJlbnRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFF1aWxsVmlld0NvbXBvbmVudC5wcm90b3R5cGUubmdBZnRlclZpZXdJbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaXNQbGF0Zm9ybVNlcnZlcih0aGlzLnBsYXRmb3JtSWQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFRdWlsbCkge1xuICAgICAgICAgICAgUXVpbGwgPSByZXF1aXJlKCdxdWlsbCcpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtb2R1bGVzID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5tb2R1bGVzIHx8ICh0aGlzLmNvbmZpZy5tb2R1bGVzIHx8IGRlZmF1bHRNb2R1bGVzKSk7XG4gICAgICAgIG1vZHVsZXMudG9vbGJhciA9IGZhbHNlO1xuICAgICAgICB0aGlzLmN1c3RvbU9wdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoY3VzdG9tT3B0aW9uKSB7XG4gICAgICAgICAgICB2YXIgbmV3Q3VzdG9tT3B0aW9uID0gUXVpbGwuaW1wb3J0KGN1c3RvbU9wdGlvbi5pbXBvcnQpO1xuICAgICAgICAgICAgbmV3Q3VzdG9tT3B0aW9uLndoaXRlbGlzdCA9IGN1c3RvbU9wdGlvbi53aGl0ZWxpc3Q7XG4gICAgICAgICAgICBRdWlsbC5yZWdpc3RlcihuZXdDdXN0b21PcHRpb24sIHRydWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGRlYnVnID0gdGhpcy5kZWJ1ZztcbiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBkZWJ1ZyAhPT0gZmFsc2UgJiYgdGhpcy5jb25maWcuZGVidWcpIHtcbiAgICAgICAgICAgIGRlYnVnID0gdGhpcy5jb25maWcuZGVidWc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZvcm1hdHMgPSB0aGlzLmZvcm1hdHM7XG4gICAgICAgIGlmICghZm9ybWF0cyAmJiBmb3JtYXRzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGZvcm1hdHMgPSB0aGlzLmNvbmZpZy5mb3JtYXRzID8gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5jb25maWcuZm9ybWF0cykgOiAodGhpcy5jb25maWcuZm9ybWF0cyA9PT0gbnVsbCA/IG51bGwgOiB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aGVtZSA9IHRoaXMudGhlbWUgfHwgKHRoaXMuY29uZmlnLnRoZW1lID8gdGhpcy5jb25maWcudGhlbWUgOiAnc25vdycpO1xuICAgICAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyYmVnaW4nLCB0aGlzLnByZXNlcnZlV2hpdGVzcGFjZSA/ICc8cHJlIHF1aWxsLXZpZXctZWxlbWVudD48L3ByZT4nIDogJzxkaXYgcXVpbGwtdmlldy1lbGVtZW50PjwvZGl2PicpO1xuICAgICAgICB0aGlzLmVkaXRvckVsZW0gPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCdbcXVpbGwtdmlldy1lbGVtZW50XScpO1xuICAgICAgICB0aGlzLnF1aWxsRWRpdG9yID0gbmV3IFF1aWxsKHRoaXMuZWRpdG9yRWxlbSwge1xuICAgICAgICAgICAgZGVidWc6IGRlYnVnLFxuICAgICAgICAgICAgZm9ybWF0czogZm9ybWF0cyxcbiAgICAgICAgICAgIG1vZHVsZXM6IG1vZHVsZXMsXG4gICAgICAgICAgICByZWFkT25seTogdHJ1ZSxcbiAgICAgICAgICAgIHN0cmljdDogdGhpcy5zdHJpY3QsXG4gICAgICAgICAgICB0aGVtZTogdGhlbWVcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lZGl0b3JFbGVtLCAnbmd4LXF1aWxsLXZpZXcnKTtcbiAgICAgICAgaWYgKHRoaXMuY29udGVudCkge1xuICAgICAgICAgICAgdGhpcy52YWx1ZVNldHRlcih0aGlzLnF1aWxsRWRpdG9yLCB0aGlzLmNvbnRlbnQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBRdWlsbFZpZXdDb21wb25lbnQuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXG4gICAgICAgIHsgdHlwZTogdW5kZWZpbmVkLCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBJbmplY3QsIGFyZ3M6IFtQTEFURk9STV9JRCxdIH1dIH0sXG4gICAgICAgIHsgdHlwZTogdW5kZWZpbmVkLCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBJbmplY3QsIGFyZ3M6IFtRVUlMTF9DT05GSUdfVE9LRU4sXSB9XSB9LFxuICAgICAgICB7IHR5cGU6IFJlbmRlcmVyMiwgZGVjb3JhdG9yczogW3sgdHlwZTogSW5qZWN0LCBhcmdzOiBbUmVuZGVyZXIyLF0gfV0gfSxcbiAgICAgICAgeyB0eXBlOiBFbGVtZW50UmVmLCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBJbmplY3QsIGFyZ3M6IFtFbGVtZW50UmVmLF0gfV0gfVxuICAgIF07IH07XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIElucHV0KClcbiAgICBdLCBRdWlsbFZpZXdDb21wb25lbnQucHJvdG90eXBlLCBcImZvcm1hdFwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBJbnB1dCgpXG4gICAgXSwgUXVpbGxWaWV3Q29tcG9uZW50LnByb3RvdHlwZSwgXCJ0aGVtZVwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBJbnB1dCgpXG4gICAgXSwgUXVpbGxWaWV3Q29tcG9uZW50LnByb3RvdHlwZSwgXCJtb2R1bGVzXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIElucHV0KClcbiAgICBdLCBRdWlsbFZpZXdDb21wb25lbnQucHJvdG90eXBlLCBcImRlYnVnXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIElucHV0KClcbiAgICBdLCBRdWlsbFZpZXdDb21wb25lbnQucHJvdG90eXBlLCBcImZvcm1hdHNcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgSW5wdXQoKVxuICAgIF0sIFF1aWxsVmlld0NvbXBvbmVudC5wcm90b3R5cGUsIFwic3RyaWN0XCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIElucHV0KClcbiAgICBdLCBRdWlsbFZpZXdDb21wb25lbnQucHJvdG90eXBlLCBcImNvbnRlbnRcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgSW5wdXQoKVxuICAgIF0sIFF1aWxsVmlld0NvbXBvbmVudC5wcm90b3R5cGUsIFwiY3VzdG9tT3B0aW9uc1wiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBJbnB1dCgpXG4gICAgXSwgUXVpbGxWaWV3Q29tcG9uZW50LnByb3RvdHlwZSwgXCJwcmVzZXJ2ZVdoaXRlc3BhY2VcIiwgdm9pZCAwKTtcbiAgICBRdWlsbFZpZXdDb21wb25lbnQgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgQ29tcG9uZW50KHtcbiAgICAgICAgICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gICAgICAgICAgICBzZWxlY3RvcjogJ3F1aWxsLXZpZXcnLFxuICAgICAgICAgICAgdGVtcGxhdGU6IFwiXFxuXCIsXG4gICAgICAgICAgICBzdHlsZXM6IFtcIlxcbi5xbC1jb250YWluZXIubmd4LXF1aWxsLXZpZXcge1xcbiAgYm9yZGVyOiAwO1xcbn1cXG5cIl1cbiAgICAgICAgfSksXG4gICAgICAgIF9fcGFyYW0oMCwgSW5qZWN0KFBMQVRGT1JNX0lEKSksXG4gICAgICAgIF9fcGFyYW0oMSwgSW5qZWN0KFFVSUxMX0NPTkZJR19UT0tFTikpLFxuICAgICAgICBfX3BhcmFtKDIsIEluamVjdChSZW5kZXJlcjIpKSxcbiAgICAgICAgX19wYXJhbSgzLCBJbmplY3QoRWxlbWVudFJlZikpXG4gICAgXSwgUXVpbGxWaWV3Q29tcG9uZW50KTtcbiAgICByZXR1cm4gUXVpbGxWaWV3Q29tcG9uZW50O1xufSgpKTtcbmV4cG9ydCB7IFF1aWxsVmlld0NvbXBvbmVudCB9O1xuIl19