{"version":3,"sources":["/Users/macpro/kritsadee/SVN/Cybersoft/apex/node_modules/ngx-quill/bundles/ngx-quill.umd.js"],"names":[],"mappings":"AAAA;oKAC2E;oIACL;gGAChC;wCACnB;;;AAAioEA6tBA,AAoBzD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAOsB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6CAmCY,AAOlC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAEwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yCA+GM,AAO9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAIoB;;;;;;;;;;;;;;;;;;;0BAmBL;;;;;;;;;;;;;;;;;;;;gDAYF","file":"ngx-quill.umd.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@angular/platform-browser'), require('@angular/forms')) :\n    typeof define === 'function' && define.amd ? define('ngx-quill', ['exports', '@angular/common', '@angular/core', '@angular/platform-browser', '@angular/forms'], factory) :\n    (global = global || self, factory(global['ngx-quill'] = {}, global.ng.common, global.ng.core, global.ng.platformBrowser, global.ng.forms));\n}(this, (function (exports, common, core, platformBrowser, forms) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __rest(s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    }\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\r\n\r\n    function __exportStar(m, exports) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    }\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\r\n\r\n    function __spreadArrays() {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    function __await(v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    }\r\n\r\n    function __asyncGenerator(thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    }\r\n\r\n    function __asyncDelegator(o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    }\r\n\r\n    function __asyncValues(o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    }\r\n\r\n    function __makeTemplateObject(cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    function __importStar(mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result.default = mod;\r\n        return result;\r\n    }\r\n\r\n    function __importDefault(mod) {\r\n        return (mod && mod.__esModule) ? mod : { default: mod };\r\n    }\n\n    var defaultModules = {\n        toolbar: [\n            ['bold', 'italic', 'underline', 'strike'],\n            ['blockquote', 'code-block'],\n            [{ header: 1 }, { header: 2 }],\n            [{ list: 'ordered' }, { list: 'bullet' }],\n            [{ script: 'sub' }, { script: 'super' }],\n            [{ indent: '-1' }, { indent: '+1' }],\n            [{ direction: 'rtl' }],\n            [{ size: ['small', false, 'large', 'huge'] }],\n            [{ header: [1, 2, 3, 4, 5, 6, false] }],\n            [\n                { color: [] },\n                { background: [] }\n            ],\n            [{ font: [] }],\n            [{ align: [] }],\n            ['clean'],\n            ['link', 'image', 'video'] // link and image, video\n        ]\n    };\n\n    var QUILL_CONFIG_TOKEN = new core.InjectionToken('config');\n\n    var getFormat = function (format, configFormat) {\n        var passedFormat = format || configFormat;\n        return passedFormat || 'html';\n    };\n\n    var Quill = null;\n    var QuillEditorComponent = /** @class */ (function () {\n        function QuillEditorComponent(elementRef, domSanitizer, doc, platformId, renderer, zone, config) {\n            var _this = this;\n            this.elementRef = elementRef;\n            this.domSanitizer = domSanitizer;\n            this.doc = doc;\n            this.platformId = platformId;\n            this.renderer = renderer;\n            this.zone = zone;\n            this.config = config;\n            this.required = false;\n            this.customToolbarPosition = 'top';\n            this.sanitize = false;\n            this.styles = null;\n            this.strict = true;\n            this.customOptions = [];\n            this.preserveWhitespace = false;\n            this.onEditorCreated = new core.EventEmitter();\n            this.onEditorChanged = new core.EventEmitter();\n            this.onContentChanged = new core.EventEmitter();\n            this.onSelectionChanged = new core.EventEmitter();\n            this.onFocus = new core.EventEmitter();\n            this.onBlur = new core.EventEmitter();\n            this.disabled = false; // used to store initial value before ViewInit\n            this.valueGetter = function (quillEditor, editorElement) {\n                var html = editorElement.querySelector('.ql-editor').innerHTML;\n                if (html === '<p><br></p>' || html === '<div><br></div>') {\n                    html = null;\n                }\n                var modelValue = html;\n                var format = getFormat(_this.format, _this.config.format);\n                if (format === 'text') {\n                    modelValue = quillEditor.getText();\n                }\n                else if (format === 'object') {\n                    modelValue = quillEditor.getContents();\n                }\n                else if (format === 'json') {\n                    try {\n                        modelValue = JSON.stringify(quillEditor.getContents());\n                    }\n                    catch (e) {\n                        modelValue = quillEditor.getText();\n                    }\n                }\n                return modelValue;\n            };\n            this.valueSetter = function (quillEditor, value) {\n                var format = getFormat(_this.format, _this.config.format);\n                if (format === 'html') {\n                    if (_this.sanitize) {\n                        value = _this.domSanitizer.sanitize(core.SecurityContext.HTML, value);\n                    }\n                    return quillEditor.clipboard.convert(value);\n                }\n                else if (format === 'json') {\n                    try {\n                        return JSON.parse(value);\n                    }\n                    catch (e) {\n                        return [{ insert: value }];\n                    }\n                }\n                return value;\n            };\n            this.selectionChangeHandler = function (range, oldRange, source) {\n                var shouldTriggerOnModelTouched = !range && _this.onModelTouched;\n                // only emit changes when there's any listener\n                if (!_this.onBlur.observers.length &&\n                    !_this.onFocus.observers.length &&\n                    !_this.onSelectionChanged.observers.length &&\n                    !shouldTriggerOnModelTouched) {\n                    return;\n                }\n                _this.zone.run(function () {\n                    if (range === null) {\n                        _this.onBlur.emit({\n                            editor: _this.quillEditor,\n                            source: source\n                        });\n                    }\n                    else if (oldRange === null) {\n                        _this.onFocus.emit({\n                            editor: _this.quillEditor,\n                            source: source\n                        });\n                    }\n                    _this.onSelectionChanged.emit({\n                        editor: _this.quillEditor,\n                        oldRange: oldRange,\n                        range: range,\n                        source: source\n                    });\n                    if (shouldTriggerOnModelTouched) {\n                        _this.onModelTouched();\n                    }\n                });\n            };\n            this.textChangeHandler = function (delta, oldDelta, source) {\n                // only emit changes emitted by user interactions\n                var text = _this.quillEditor.getText();\n                var content = _this.quillEditor.getContents();\n                var html = _this.editorElem.querySelector('.ql-editor').innerHTML;\n                if (html === '<p><br></p>' || html === '<div><br></div>') {\n                    html = null;\n                }\n                var trackChanges = _this.trackChanges || _this.config.trackChanges;\n                var shouldTriggerOnModelChange = (source === Quill.sources.USER || trackChanges && trackChanges === 'all') && _this.onModelChange;\n                // only emit changes when there's any listener\n                if (!_this.onContentChanged.observers.length && !shouldTriggerOnModelChange) {\n                    return;\n                }\n                _this.zone.run(function () {\n                    if (shouldTriggerOnModelChange) {\n                        _this.onModelChange(_this.valueGetter(_this.quillEditor, _this.editorElem));\n                    }\n                    _this.onContentChanged.emit({\n                        content: content,\n                        delta: delta,\n                        editor: _this.quillEditor,\n                        html: html,\n                        oldDelta: oldDelta,\n                        source: source,\n                        text: text\n                    });\n                });\n            };\n            this.editorChangeHandler = function (event, current, old, source) {\n                // only emit changes when there's any listener\n                if (!_this.onEditorChanged.observers.length) {\n                    return;\n                }\n                // only emit changes emitted by user interactions\n                if (event === 'text-change') {\n                    var text_1 = _this.quillEditor.getText();\n                    var content_1 = _this.quillEditor.getContents();\n                    var html_1 = _this.editorElem.querySelector('.ql-editor').innerHTML;\n                    if (html_1 === '<p><br></p>' || html_1 === '<div><br></div>') {\n                        html_1 = null;\n                    }\n                    _this.zone.run(function () {\n                        _this.onEditorChanged.emit({\n                            content: content_1,\n                            delta: current,\n                            editor: _this.quillEditor,\n                            event: event,\n                            html: html_1,\n                            oldDelta: old,\n                            source: source,\n                            text: text_1\n                        });\n                    });\n                }\n                else {\n                    _this.onEditorChanged.emit({\n                        editor: _this.quillEditor,\n                        event: event,\n                        oldRange: old,\n                        range: current,\n                        source: source\n                    });\n                }\n            };\n        }\n        QuillEditorComponent_1 = QuillEditorComponent;\n        QuillEditorComponent.normalizeClassNames = function (classes) {\n            var classList = classes.trim().split(' ');\n            return classList.reduce(function (prev, cur) {\n                var trimmed = cur.trim();\n                if (trimmed) {\n                    prev.push(trimmed);\n                }\n                return prev;\n            }, []);\n        };\n        QuillEditorComponent.prototype.onModelChange = function (_modelValue) { };\n        QuillEditorComponent.prototype.onModelTouched = function () { };\n        QuillEditorComponent.prototype.ngAfterViewInit = function () {\n            var _this = this;\n            if (common.isPlatformServer(this.platformId)) {\n                return;\n            }\n            if (!Quill) {\n                this.zone.runOutsideAngular(function () {\n                    Quill = require('quill');\n                });\n            }\n            this.elementRef.nativeElement.insertAdjacentHTML(this.customToolbarPosition === 'top' ? 'beforeend' : 'afterbegin', this.preserveWhitespace ? '<pre quill-editor-element></pre>' : '<div quill-editor-element></div>');\n            this.editorElem = this.elementRef.nativeElement.querySelector('[quill-editor-element]');\n            var toolbarElem = this.elementRef.nativeElement.querySelector('[quill-editor-toolbar]');\n            var modules = Object.assign({}, this.modules || (this.config.modules || defaultModules));\n            if (toolbarElem) {\n                modules.toolbar = toolbarElem;\n            }\n            else if (modules.toolbar === undefined) {\n                modules.toolbar = defaultModules.toolbar;\n            }\n            var placeholder = this.placeholder !== undefined ? this.placeholder : this.config.placeholder;\n            if (placeholder === undefined) {\n                placeholder = 'Insert text here ...';\n            }\n            if (this.styles) {\n                Object.keys(this.styles).forEach(function (key) {\n                    _this.renderer.setStyle(_this.editorElem, key, _this.styles[key]);\n                });\n            }\n            if (this.classes) {\n                this.addClasses(this.classes);\n            }\n            this.customOptions.forEach(function (customOption) {\n                var newCustomOption = Quill.import(customOption.import);\n                newCustomOption.whitelist = customOption.whitelist;\n                Quill.register(newCustomOption, true);\n            });\n            var bounds = this.bounds && this.bounds === 'self' ? this.editorElem : this.bounds;\n            if (!bounds) {\n                bounds = this.config.bounds ? this.config.bounds : this.doc.body;\n            }\n            var debug = this.debug;\n            if (!debug && debug !== false && this.config.debug) {\n                debug = this.config.debug;\n            }\n            var readOnly = this.readOnly;\n            if (!readOnly && this.readOnly !== false) {\n                readOnly = this.config.readOnly !== undefined ? this.config.readOnly : false;\n            }\n            var scrollingContainer = this.scrollingContainer;\n            if (!scrollingContainer && this.scrollingContainer !== null) {\n                scrollingContainer = this.config.scrollingContainer === null || this.config.scrollingContainer ? this.config.scrollingContainer : null;\n            }\n            var formats = this.formats;\n            if (!formats && formats === undefined) {\n                formats = this.config.formats ? __spread(this.config.formats) : (this.config.formats === null ? null : undefined);\n            }\n            this.zone.runOutsideAngular(function () {\n                _this.quillEditor = new Quill(_this.editorElem, {\n                    bounds: bounds,\n                    debug: debug,\n                    formats: formats,\n                    modules: modules,\n                    placeholder: placeholder,\n                    readOnly: readOnly,\n                    scrollingContainer: scrollingContainer,\n                    strict: _this.strict,\n                    theme: _this.theme || (_this.config.theme ? _this.config.theme : 'snow')\n                });\n            });\n            if (this.content) {\n                var format = getFormat(this.format, this.config.format);\n                if (format === 'object') {\n                    this.quillEditor.setContents(this.content, 'silent');\n                }\n                else if (format === 'text') {\n                    this.quillEditor.setText(this.content, 'silent');\n                }\n                else if (format === 'json') {\n                    try {\n                        this.quillEditor.setContents(JSON.parse(this.content), 'silent');\n                    }\n                    catch (e) {\n                        this.quillEditor.setText(this.content, 'silent');\n                    }\n                }\n                else {\n                    if (this.sanitize) {\n                        this.content = this.domSanitizer.sanitize(core.SecurityContext.HTML, this.content);\n                    }\n                    var contents = this.quillEditor.clipboard.convert(this.content);\n                    this.quillEditor.setContents(contents, 'silent');\n                }\n                this.quillEditor.history.clear();\n            }\n            // initialize disabled status based on this.disabled as default value\n            this.setDisabledState();\n            // triggered if selection or text changed\n            this.quillEditor.on('editor-change', this.editorChangeHandler);\n            // mark model as touched if editor lost focus\n            this.quillEditor.on('selection-change', this.selectionChangeHandler);\n            // update model if text changes\n            this.quillEditor.on('text-change', this.textChangeHandler);\n            // trigger created in a timeout to avoid changed models after checked\n            // if you are using the editor api in created output to change the editor content\n            setTimeout(function () { return _this.onEditorCreated.emit(_this.quillEditor); });\n        };\n        QuillEditorComponent.prototype.ngOnDestroy = function () {\n            if (this.quillEditor) {\n                this.quillEditor.off('selection-change', this.selectionChangeHandler);\n                this.quillEditor.off('text-change', this.textChangeHandler);\n                this.quillEditor.off('editor-change', this.editorChangeHandler);\n            }\n        };\n        QuillEditorComponent.prototype.ngOnChanges = function (changes) {\n            var _this = this;\n            if (!this.quillEditor) {\n                return;\n            }\n            // tslint:disable:no-string-literal\n            if (changes['readOnly']) {\n                this.quillEditor.enable(!changes['readOnly'].currentValue);\n            }\n            if (changes['placeholder']) {\n                this.quillEditor.root.dataset.placeholder =\n                    changes['placeholder'].currentValue;\n            }\n            if (changes['styles']) {\n                var currentStyling = changes['styles'].currentValue;\n                var previousStyling = changes['styles'].previousValue;\n                if (previousStyling) {\n                    Object.keys(previousStyling).forEach(function (key) {\n                        _this.renderer.removeStyle(_this.editorElem, key);\n                    });\n                }\n                if (currentStyling) {\n                    Object.keys(currentStyling).forEach(function (key) {\n                        _this.renderer.setStyle(_this.editorElem, key, _this.styles[key]);\n                    });\n                }\n            }\n            if (changes['classes']) {\n                var currentClasses = changes['classes'].currentValue;\n                var previousClasses = changes['classes'].previousValue;\n                if (previousClasses) {\n                    this.removeClasses(previousClasses);\n                }\n                if (currentClasses) {\n                    this.addClasses(currentClasses);\n                }\n            }\n            // tslint:enable:no-string-literal\n        };\n        QuillEditorComponent.prototype.addClasses = function (classList) {\n            var _this = this;\n            QuillEditorComponent_1.normalizeClassNames(classList).forEach(function (c) {\n                _this.renderer.addClass(_this.editorElem, c);\n            });\n        };\n        QuillEditorComponent.prototype.removeClasses = function (classList) {\n            var _this = this;\n            QuillEditorComponent_1.normalizeClassNames(classList).forEach(function (c) {\n                _this.renderer.removeClass(_this.editorElem, c);\n            });\n        };\n        QuillEditorComponent.prototype.writeValue = function (currentValue) {\n            this.content = currentValue;\n            var format = getFormat(this.format, this.config.format);\n            if (this.quillEditor) {\n                if (currentValue) {\n                    if (format === 'text') {\n                        this.quillEditor.setText(currentValue);\n                    }\n                    else {\n                        this.quillEditor.setContents(this.valueSetter(this.quillEditor, this.content));\n                    }\n                    return;\n                }\n                this.quillEditor.setText('');\n            }\n        };\n        QuillEditorComponent.prototype.setDisabledState = function (isDisabled) {\n            if (isDisabled === void 0) { isDisabled = this.disabled; }\n            // store initial value to set appropriate disabled status after ViewInit\n            this.disabled = isDisabled;\n            if (this.quillEditor) {\n                if (isDisabled) {\n                    this.quillEditor.disable();\n                    this.renderer.setAttribute(this.elementRef.nativeElement, 'disabled', 'disabled');\n                }\n                else {\n                    if (!this.readOnly) {\n                        this.quillEditor.enable();\n                    }\n                    this.renderer.removeAttribute(this.elementRef.nativeElement, 'disabled');\n                }\n            }\n        };\n        QuillEditorComponent.prototype.registerOnChange = function (fn) {\n            this.onModelChange = fn;\n        };\n        QuillEditorComponent.prototype.registerOnTouched = function (fn) {\n            this.onModelTouched = fn;\n        };\n        QuillEditorComponent.prototype.validate = function () {\n            if (!this.quillEditor) {\n                return null;\n            }\n            var err = {};\n            var valid = true;\n            var textLength = this.quillEditor.getText().trim().length;\n            if (this.minLength && textLength && textLength < this.minLength) {\n                err.minLengthError = {\n                    given: textLength,\n                    minLength: this.minLength\n                };\n                valid = false;\n            }\n            if (this.maxLength && textLength > this.maxLength) {\n                err.maxLengthError = {\n                    given: textLength,\n                    maxLength: this.maxLength\n                };\n                valid = false;\n            }\n            if (this.required && !textLength) {\n                err.requiredError = {\n                    empty: true\n                };\n                valid = false;\n            }\n            return valid ? null : err;\n        };\n        var QuillEditorComponent_1;\n        QuillEditorComponent.ctorParameters = function () { return [\n            { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] },\n            { type: platformBrowser.DomSanitizer, decorators: [{ type: core.Inject, args: [platformBrowser.DomSanitizer,] }] },\n            { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },\n            { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] },\n            { type: core.Renderer2, decorators: [{ type: core.Inject, args: [core.Renderer2,] }] },\n            { type: core.NgZone, decorators: [{ type: core.Inject, args: [core.NgZone,] }] },\n            { type: undefined, decorators: [{ type: core.Inject, args: [QUILL_CONFIG_TOKEN,] }] }\n        ]; };\n        __decorate([\n            core.Input()\n        ], QuillEditorComponent.prototype, \"format\", void 0);\n        __decorate([\n            core.Input()\n        ], QuillEditorComponent.prototype, \"theme\", void 0);\n        __decorate([\n            core.Input()\n        ], QuillEditorComponent.prototype, \"modules\", void 0);\n        __decorate([\n            core.Input()\n        ], QuillEditorComponent.prototype, \"debug\", void 0);\n        __decorate([\n            core.Input()\n        ], QuillEditorComponent.prototype, \"readOnly\", void 0);\n        __decorate([\n            core.Input()\n        ], QuillEditorComponent.prototype, \"placeholder\", void 0);\n        __decorate([\n            core.Input()\n        ], QuillEditorComponent.prototype, \"maxLength\", void 0);\n        __decorate([\n            core.Input()\n        ], QuillEditorComponent.prototype, \"minLength\", void 0);\n        __decorate([\n            core.Input()\n        ], QuillEditorComponent.prototype, \"required\", void 0);\n        __decorate([\n            core.Input()\n        ], QuillEditorComponent.prototype, \"formats\", void 0);\n        __decorate([\n            core.Input()\n        ], QuillEditorComponent.prototype, \"customToolbarPosition\", void 0);\n        __decorate([\n            core.Input()\n        ], QuillEditorComponent.prototype, \"sanitize\", void 0);\n        __decorate([\n            core.Input()\n        ], QuillEditorComponent.prototype, \"styles\", void 0);\n        __decorate([\n            core.Input()\n        ], QuillEditorComponent.prototype, \"strict\", void 0);\n        __decorate([\n            core.Input()\n        ], QuillEditorComponent.prototype, \"scrollingContainer\", void 0);\n        __decorate([\n            core.Input()\n        ], QuillEditorComponent.prototype, \"bounds\", void 0);\n        __decorate([\n            core.Input()\n        ], QuillEditorComponent.prototype, \"customOptions\", void 0);\n        __decorate([\n            core.Input()\n        ], QuillEditorComponent.prototype, \"trackChanges\", void 0);\n        __decorate([\n            core.Input()\n        ], QuillEditorComponent.prototype, \"preserveWhitespace\", void 0);\n        __decorate([\n            core.Input()\n        ], QuillEditorComponent.prototype, \"classes\", void 0);\n        __decorate([\n            core.Output()\n        ], QuillEditorComponent.prototype, \"onEditorCreated\", void 0);\n        __decorate([\n            core.Output()\n        ], QuillEditorComponent.prototype, \"onEditorChanged\", void 0);\n        __decorate([\n            core.Output()\n        ], QuillEditorComponent.prototype, \"onContentChanged\", void 0);\n        __decorate([\n            core.Output()\n        ], QuillEditorComponent.prototype, \"onSelectionChanged\", void 0);\n        __decorate([\n            core.Output()\n        ], QuillEditorComponent.prototype, \"onFocus\", void 0);\n        __decorate([\n            core.Output()\n        ], QuillEditorComponent.prototype, \"onBlur\", void 0);\n        __decorate([\n            core.Input()\n        ], QuillEditorComponent.prototype, \"valueGetter\", void 0);\n        __decorate([\n            core.Input()\n        ], QuillEditorComponent.prototype, \"valueSetter\", void 0);\n        QuillEditorComponent = QuillEditorComponent_1 = __decorate([\n            core.Component({\n                encapsulation: core.ViewEncapsulation.None,\n                providers: [\n                    {\n                        multi: true,\n                        provide: forms.NG_VALUE_ACCESSOR,\n                        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                        useExisting: core.forwardRef(function () { return QuillEditorComponent_1; })\n                    },\n                    {\n                        multi: true,\n                        provide: forms.NG_VALIDATORS,\n                        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                        useExisting: core.forwardRef(function () { return QuillEditorComponent_1; })\n                    }\n                ],\n                selector: 'quill-editor',\n                template: \"\\n  <ng-content select=\\\"[quill-editor-toolbar]\\\"></ng-content>\\n\"\n            }),\n            __param(0, core.Inject(core.ElementRef)),\n            __param(1, core.Inject(platformBrowser.DomSanitizer)),\n            __param(2, core.Inject(common.DOCUMENT)),\n            __param(3, core.Inject(core.PLATFORM_ID)),\n            __param(4, core.Inject(core.Renderer2)),\n            __param(5, core.Inject(core.NgZone)),\n            __param(6, core.Inject(QUILL_CONFIG_TOKEN))\n        ], QuillEditorComponent);\n        return QuillEditorComponent;\n    }());\n\n    var QuillViewHTMLComponent = /** @class */ (function () {\n        function QuillViewHTMLComponent(sanitizer, config) {\n            this.sanitizer = sanitizer;\n            this.config = config;\n            this.innerHTML = '';\n            this.themeClass = 'ql-snow';\n            this.content = '';\n        }\n        QuillViewHTMLComponent.prototype.ngOnChanges = function (changes) {\n            if (changes.theme) {\n                var theme = changes.theme.currentValue || (this.config.theme ? this.config.theme : 'snow');\n                this.themeClass = \"ql-\" + theme + \" ngx-quill-view-html\";\n            }\n            else if (!this.theme) {\n                var theme = this.config.theme ? this.config.theme : 'snow';\n                this.themeClass = \"ql-\" + theme + \" ngx-quill-view-html\";\n            }\n            if (changes.content) {\n                this.innerHTML = this.sanitizer.bypassSecurityTrustHtml(changes.content.currentValue);\n            }\n        };\n        QuillViewHTMLComponent.ctorParameters = function () { return [\n            { type: platformBrowser.DomSanitizer, decorators: [{ type: core.Inject, args: [platformBrowser.DomSanitizer,] }] },\n            { type: undefined, decorators: [{ type: core.Inject, args: [QUILL_CONFIG_TOKEN,] }] }\n        ]; };\n        __decorate([\n            core.Input()\n        ], QuillViewHTMLComponent.prototype, \"content\", void 0);\n        __decorate([\n            core.Input()\n        ], QuillViewHTMLComponent.prototype, \"theme\", void 0);\n        QuillViewHTMLComponent = __decorate([\n            core.Component({\n                encapsulation: core.ViewEncapsulation.None,\n                selector: 'quill-view-html',\n                template: \"\\n  <div class=\\\"ql-container\\\" [ngClass]=\\\"themeClass\\\">\\n    <div class=\\\"ql-editor\\\" [innerHTML]=\\\"innerHTML\\\">\\n    </div>\\n  </div>\\n\",\n                styles: [\"\\n.ql-container.ngx-quill-view-html {\\n  border: 0;\\n}\\n\"]\n            }),\n            __param(0, core.Inject(platformBrowser.DomSanitizer)),\n            __param(1, core.Inject(QUILL_CONFIG_TOKEN))\n        ], QuillViewHTMLComponent);\n        return QuillViewHTMLComponent;\n    }());\n\n    var Quill$1 = null;\n    var QuillViewComponent = /** @class */ (function () {\n        function QuillViewComponent(platformId, config, renderer, elementRef) {\n            var _this = this;\n            this.platformId = platformId;\n            this.config = config;\n            this.renderer = renderer;\n            this.elementRef = elementRef;\n            this.strict = true;\n            this.customOptions = [];\n            this.preserveWhitespace = false;\n            this.valueSetter = function (quillEditor, value) {\n                var format = getFormat(_this.format, _this.config.format);\n                var content = value;\n                if (format === 'html' || format === 'text') {\n                    content = quillEditor.clipboard.convert(value);\n                }\n                else if (format === 'json') {\n                    try {\n                        content = JSON.parse(value);\n                    }\n                    catch (e) {\n                        content = [{ insert: value }];\n                    }\n                }\n                quillEditor.setContents(content);\n            };\n        }\n        QuillViewComponent.prototype.ngOnChanges = function (changes) {\n            if (!this.quillEditor) {\n                return;\n            }\n            if (changes.content) {\n                this.valueSetter(this.quillEditor, changes.content.currentValue);\n            }\n        };\n        QuillViewComponent.prototype.ngAfterViewInit = function () {\n            if (common.isPlatformServer(this.platformId)) {\n                return;\n            }\n            if (!Quill$1) {\n                Quill$1 = require('quill');\n            }\n            var modules = Object.assign({}, this.modules || (this.config.modules || defaultModules));\n            modules.toolbar = false;\n            this.customOptions.forEach(function (customOption) {\n                var newCustomOption = Quill$1.import(customOption.import);\n                newCustomOption.whitelist = customOption.whitelist;\n                Quill$1.register(newCustomOption, true);\n            });\n            var debug = this.debug;\n            if (!debug && debug !== false && this.config.debug) {\n                debug = this.config.debug;\n            }\n            var formats = this.formats;\n            if (!formats && formats === undefined) {\n                formats = this.config.formats ? Object.assign({}, this.config.formats) : (this.config.formats === null ? null : undefined);\n            }\n            var theme = this.theme || (this.config.theme ? this.config.theme : 'snow');\n            this.elementRef.nativeElement.insertAdjacentHTML('afterbegin', this.preserveWhitespace ? '<pre quill-view-element></pre>' : '<div quill-view-element></div>');\n            this.editorElem = this.elementRef.nativeElement.querySelector('[quill-view-element]');\n            this.quillEditor = new Quill$1(this.editorElem, {\n                debug: debug,\n                formats: formats,\n                modules: modules,\n                readOnly: true,\n                strict: this.strict,\n                theme: theme\n            });\n            this.renderer.addClass(this.editorElem, 'ngx-quill-view');\n            if (this.content) {\n                this.valueSetter(this.quillEditor, this.content);\n            }\n        };\n        QuillViewComponent.ctorParameters = function () { return [\n            { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] },\n            { type: undefined, decorators: [{ type: core.Inject, args: [QUILL_CONFIG_TOKEN,] }] },\n            { type: core.Renderer2, decorators: [{ type: core.Inject, args: [core.Renderer2,] }] },\n            { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }\n        ]; };\n        __decorate([\n            core.Input()\n        ], QuillViewComponent.prototype, \"format\", void 0);\n        __decorate([\n            core.Input()\n        ], QuillViewComponent.prototype, \"theme\", void 0);\n        __decorate([\n            core.Input()\n        ], QuillViewComponent.prototype, \"modules\", void 0);\n        __decorate([\n            core.Input()\n        ], QuillViewComponent.prototype, \"debug\", void 0);\n        __decorate([\n            core.Input()\n        ], QuillViewComponent.prototype, \"formats\", void 0);\n        __decorate([\n            core.Input()\n        ], QuillViewComponent.prototype, \"strict\", void 0);\n        __decorate([\n            core.Input()\n        ], QuillViewComponent.prototype, \"content\", void 0);\n        __decorate([\n            core.Input()\n        ], QuillViewComponent.prototype, \"customOptions\", void 0);\n        __decorate([\n            core.Input()\n        ], QuillViewComponent.prototype, \"preserveWhitespace\", void 0);\n        QuillViewComponent = __decorate([\n            core.Component({\n                encapsulation: core.ViewEncapsulation.None,\n                selector: 'quill-view',\n                template: \"\\n\",\n                styles: [\"\\n.ql-container.ngx-quill-view {\\n  border: 0;\\n}\\n\"]\n            }),\n            __param(0, core.Inject(core.PLATFORM_ID)),\n            __param(1, core.Inject(QUILL_CONFIG_TOKEN)),\n            __param(2, core.Inject(core.Renderer2)),\n            __param(3, core.Inject(core.ElementRef))\n        ], QuillViewComponent);\n        return QuillViewComponent;\n    }());\n\n    var QuillModule = /** @class */ (function () {\n        function QuillModule() {\n        }\n        QuillModule_1 = QuillModule;\n        QuillModule.forRoot = function (config) {\n            return {\n                ngModule: QuillModule_1,\n                providers: [\n                    {\n                        provide: QUILL_CONFIG_TOKEN,\n                        useValue: config || { modules: defaultModules }\n                    }\n                ]\n            };\n        };\n        var QuillModule_1;\n        QuillModule = QuillModule_1 = __decorate([\n            core.NgModule({\n                declarations: [\n                    QuillEditorComponent,\n                    QuillViewComponent,\n                    QuillViewHTMLComponent\n                ],\n                exports: [QuillEditorComponent, QuillViewComponent, QuillViewHTMLComponent],\n                imports: [common.CommonModule],\n                providers: []\n            })\n        ], QuillModule);\n        return QuillModule;\n    }());\n\n    exports.QUILL_CONFIG_TOKEN = QUILL_CONFIG_TOKEN;\n    exports.QuillEditorComponent = QuillEditorComponent;\n    exports.QuillModule = QuillModule;\n    exports.QuillViewComponent = QuillViewComponent;\n    exports.QuillViewHTMLComponent = QuillViewHTMLComponent;\n    exports.defaultModules = defaultModules;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"]}