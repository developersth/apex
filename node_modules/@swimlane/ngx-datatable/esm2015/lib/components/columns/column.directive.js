/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, TemplateRef, ContentChild, Input } from '@angular/core';
import { DataTableColumnHeaderDirective } from './column-header.directive';
import { DataTableColumnCellDirective } from './column-cell.directive';
import { DataTableColumnCellTreeToggle } from './tree.directive';
import { ColumnChangesService } from '../../services/column-changes.service';
import * as ɵngcc0 from '@angular/core';
export class DataTableColumnDirective {
    /**
     * @param {?} columnChangesService
     */
    constructor(columnChangesService) {
        this.columnChangesService = columnChangesService;
        this.isFirstChange = true;
    }
    /**
     * @return {?}
     */
    get cellTemplate() {
        return this._cellTemplateInput || this._cellTemplateQuery;
    }
    /**
     * @return {?}
     */
    get headerTemplate() {
        return this._headerTemplateInput || this._headerTemplateQuery;
    }
    /**
     * @return {?}
     */
    get treeToggleTemplate() {
        return this._treeToggleTemplateInput || this._treeToggleTemplateQuery;
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        if (this.isFirstChange) {
            this.isFirstChange = false;
        }
        else {
            this.columnChangesService.onInputChange();
        }
    }
}
DataTableColumnDirective.ɵfac = function DataTableColumnDirective_Factory(t) { return new (t || DataTableColumnDirective)(ɵngcc0.ɵɵdirectiveInject(ColumnChangesService)); };
DataTableColumnDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DataTableColumnDirective, selectors: [["ngx-datatable-column"]], contentQueries: function DataTableColumnDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵstaticContentQuery(dirIndex, DataTableColumnCellDirective, true, TemplateRef);
        ɵngcc0.ɵɵstaticContentQuery(dirIndex, DataTableColumnHeaderDirective, true, TemplateRef);
        ɵngcc0.ɵɵstaticContentQuery(dirIndex, DataTableColumnCellTreeToggle, true, TemplateRef);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._cellTemplateQuery = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._headerTemplateQuery = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._treeToggleTemplateQuery = _t.first);
    } }, inputs: { name: "name", prop: "prop", frozenLeft: "frozenLeft", frozenRight: "frozenRight", flexGrow: "flexGrow", resizeable: "resizeable", comparator: "comparator", pipe: "pipe", sortable: "sortable", draggable: "draggable", canAutoResize: "canAutoResize", minWidth: "minWidth", width: "width", maxWidth: "maxWidth", checkboxable: "checkboxable", headerCheckboxable: "headerCheckboxable", headerClass: "headerClass", cellClass: "cellClass", isTreeColumn: "isTreeColumn", treeLevelIndent: "treeLevelIndent", summaryFunc: "summaryFunc", summaryTemplate: "summaryTemplate", _cellTemplateInput: ["cellTemplate", "_cellTemplateInput"], _headerTemplateInput: ["headerTemplate", "_headerTemplateInput"], _treeToggleTemplateInput: ["treeToggleTemplate", "_treeToggleTemplateInput"] }, features: [ɵngcc0.ɵɵNgOnChangesFeature()] });
/** @nocollapse */
DataTableColumnDirective.ctorParameters = () => [
    { type: ColumnChangesService }
];
DataTableColumnDirective.propDecorators = {
    name: [{ type: Input }],
    prop: [{ type: Input }],
    frozenLeft: [{ type: Input }],
    frozenRight: [{ type: Input }],
    flexGrow: [{ type: Input }],
    resizeable: [{ type: Input }],
    comparator: [{ type: Input }],
    pipe: [{ type: Input }],
    sortable: [{ type: Input }],
    draggable: [{ type: Input }],
    canAutoResize: [{ type: Input }],
    minWidth: [{ type: Input }],
    width: [{ type: Input }],
    maxWidth: [{ type: Input }],
    checkboxable: [{ type: Input }],
    headerCheckboxable: [{ type: Input }],
    headerClass: [{ type: Input }],
    cellClass: [{ type: Input }],
    isTreeColumn: [{ type: Input }],
    treeLevelIndent: [{ type: Input }],
    summaryFunc: [{ type: Input }],
    summaryTemplate: [{ type: Input }],
    _cellTemplateInput: [{ type: Input, args: ['cellTemplate',] }],
    _cellTemplateQuery: [{ type: ContentChild, args: [DataTableColumnCellDirective, { read: TemplateRef, static: true },] }],
    _headerTemplateInput: [{ type: Input, args: ['headerTemplate',] }],
    _headerTemplateQuery: [{ type: ContentChild, args: [DataTableColumnHeaderDirective, { read: TemplateRef, static: true },] }],
    _treeToggleTemplateInput: [{ type: Input, args: ['treeToggleTemplate',] }],
    _treeToggleTemplateQuery: [{ type: ContentChild, args: [DataTableColumnCellTreeToggle, { read: TemplateRef, static: true },] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataTableColumnDirective, [{
        type: Directive,
        args: [{ selector: 'ngx-datatable-column' }]
    }], function () { return [{ type: ColumnChangesService }]; }, { name: [{
            type: Input
        }], prop: [{
            type: Input
        }], frozenLeft: [{
            type: Input
        }], frozenRight: [{
            type: Input
        }], flexGrow: [{
            type: Input
        }], resizeable: [{
            type: Input
        }], comparator: [{
            type: Input
        }], pipe: [{
            type: Input
        }], sortable: [{
            type: Input
        }], draggable: [{
            type: Input
        }], canAutoResize: [{
            type: Input
        }], minWidth: [{
            type: Input
        }], width: [{
            type: Input
        }], maxWidth: [{
            type: Input
        }], checkboxable: [{
            type: Input
        }], headerCheckboxable: [{
            type: Input
        }], headerClass: [{
            type: Input
        }], cellClass: [{
            type: Input
        }], isTreeColumn: [{
            type: Input
        }], treeLevelIndent: [{
            type: Input
        }], summaryFunc: [{
            type: Input
        }], summaryTemplate: [{
            type: Input
        }], _cellTemplateInput: [{
            type: Input,
            args: ['cellTemplate']
        }], _cellTemplateQuery: [{
            type: ContentChild,
            args: [DataTableColumnCellDirective, { read: TemplateRef, static: true }]
        }], _headerTemplateInput: [{
            type: Input,
            args: ['headerTemplate']
        }], _headerTemplateQuery: [{
            type: ContentChild,
            args: [DataTableColumnHeaderDirective, { read: TemplateRef, static: true }]
        }], _treeToggleTemplateInput: [{
            type: Input,
            args: ['treeToggleTemplate']
        }], _treeToggleTemplateQuery: [{
            type: ContentChild,
            args: [DataTableColumnCellTreeToggle, { read: TemplateRef, static: true }]
        }] }); })();
if (false) {
    /** @type {?} */
    DataTableColumnDirective.prototype.name;
    /** @type {?} */
    DataTableColumnDirective.prototype.prop;
    /** @type {?} */
    DataTableColumnDirective.prototype.frozenLeft;
    /** @type {?} */
    DataTableColumnDirective.prototype.frozenRight;
    /** @type {?} */
    DataTableColumnDirective.prototype.flexGrow;
    /** @type {?} */
    DataTableColumnDirective.prototype.resizeable;
    /** @type {?} */
    DataTableColumnDirective.prototype.comparator;
    /** @type {?} */
    DataTableColumnDirective.prototype.pipe;
    /** @type {?} */
    DataTableColumnDirective.prototype.sortable;
    /** @type {?} */
    DataTableColumnDirective.prototype.draggable;
    /** @type {?} */
    DataTableColumnDirective.prototype.canAutoResize;
    /** @type {?} */
    DataTableColumnDirective.prototype.minWidth;
    /** @type {?} */
    DataTableColumnDirective.prototype.width;
    /** @type {?} */
    DataTableColumnDirective.prototype.maxWidth;
    /** @type {?} */
    DataTableColumnDirective.prototype.checkboxable;
    /** @type {?} */
    DataTableColumnDirective.prototype.headerCheckboxable;
    /** @type {?} */
    DataTableColumnDirective.prototype.headerClass;
    /** @type {?} */
    DataTableColumnDirective.prototype.cellClass;
    /** @type {?} */
    DataTableColumnDirective.prototype.isTreeColumn;
    /** @type {?} */
    DataTableColumnDirective.prototype.treeLevelIndent;
    /** @type {?} */
    DataTableColumnDirective.prototype.summaryFunc;
    /** @type {?} */
    DataTableColumnDirective.prototype.summaryTemplate;
    /** @type {?} */
    DataTableColumnDirective.prototype._cellTemplateInput;
    /** @type {?} */
    DataTableColumnDirective.prototype._cellTemplateQuery;
    /** @type {?} */
    DataTableColumnDirective.prototype._headerTemplateInput;
    /** @type {?} */
    DataTableColumnDirective.prototype._headerTemplateQuery;
    /** @type {?} */
    DataTableColumnDirective.prototype._treeToggleTemplateInput;
    /** @type {?} */
    DataTableColumnDirective.prototype._treeToggleTemplateQuery;
    /**
     * @type {?}
     * @private
     */
    DataTableColumnDirective.prototype.isFirstChange;
    /**
     * @type {?}
     * @private
     */
    DataTableColumnDirective.prototype.columnChangesService;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNwcm8va3JpdHNhZGVlL1NWTi9DeWJlcnNvZnQvYXBleC9ub2RlX21vZHVsZXMvQHN3aW1sYW5lL25neC1kYXRhdGFibGUvZXNtMjAxNS9saWIvY29tcG9uZW50cy9jb2x1bW5zL2NvbHVtbi5kaXJlY3RpdmUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7QUFTQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBcUNDLCt6QkFHQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFrQ0EiLCJmaWxlIjoiY29sdW1uLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXMsY29uc3RhbnRQcm9wZXJ0eSxleHRyYVJlcXVpcmUsbWlzc2luZ092ZXJyaWRlLG1pc3NpbmdSZXR1cm4sdW51c2VkUHJpdmF0ZU1lbWJlcnMsdXNlbGVzc0NvZGV9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbmltcG9ydCB7IERpcmVjdGl2ZSwgVGVtcGxhdGVSZWYsIENvbnRlbnRDaGlsZCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERhdGFUYWJsZUNvbHVtbkhlYWRlckRpcmVjdGl2ZSB9IGZyb20gJy4vY29sdW1uLWhlYWRlci5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgRGF0YVRhYmxlQ29sdW1uQ2VsbERpcmVjdGl2ZSB9IGZyb20gJy4vY29sdW1uLWNlbGwuZGlyZWN0aXZlJztcbmltcG9ydCB7IERhdGFUYWJsZUNvbHVtbkNlbGxUcmVlVG9nZ2xlIH0gZnJvbSAnLi90cmVlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBDb2x1bW5DaGFuZ2VzU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2NvbHVtbi1jaGFuZ2VzLnNlcnZpY2UnO1xuZXhwb3J0IGNsYXNzIERhdGFUYWJsZUNvbHVtbkRpcmVjdGl2ZSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBjb2x1bW5DaGFuZ2VzU2VydmljZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNvbHVtbkNoYW5nZXNTZXJ2aWNlKSB7XG4gICAgICAgIHRoaXMuY29sdW1uQ2hhbmdlc1NlcnZpY2UgPSBjb2x1bW5DaGFuZ2VzU2VydmljZTtcbiAgICAgICAgdGhpcy5pc0ZpcnN0Q2hhbmdlID0gdHJ1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBnZXQgY2VsbFRlbXBsYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2VsbFRlbXBsYXRlSW5wdXQgfHwgdGhpcy5fY2VsbFRlbXBsYXRlUXVlcnk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZ2V0IGhlYWRlclRlbXBsYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faGVhZGVyVGVtcGxhdGVJbnB1dCB8fCB0aGlzLl9oZWFkZXJUZW1wbGF0ZVF1ZXJ5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGdldCB0cmVlVG9nZ2xlVGVtcGxhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90cmVlVG9nZ2xlVGVtcGxhdGVJbnB1dCB8fCB0aGlzLl90cmVlVG9nZ2xlVGVtcGxhdGVRdWVyeTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBuZ09uQ2hhbmdlcygpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNGaXJzdENoYW5nZSkge1xuICAgICAgICAgICAgdGhpcy5pc0ZpcnN0Q2hhbmdlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNvbHVtbkNoYW5nZXNTZXJ2aWNlLm9uSW5wdXRDaGFuZ2UoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbkRhdGFUYWJsZUNvbHVtbkRpcmVjdGl2ZS5kZWNvcmF0b3JzID0gW1xuICAgIHsgdHlwZTogRGlyZWN0aXZlLCBhcmdzOiBbeyBzZWxlY3RvcjogJ25neC1kYXRhdGFibGUtY29sdW1uJyB9LF0gfVxuXTtcbi8qKiBAbm9jb2xsYXBzZSAqL1xuRGF0YVRhYmxlQ29sdW1uRGlyZWN0aXZlLmN0b3JQYXJhbWV0ZXJzID0gKCkgPT4gW1xuICAgIHsgdHlwZTogQ29sdW1uQ2hhbmdlc1NlcnZpY2UgfVxuXTtcbkRhdGFUYWJsZUNvbHVtbkRpcmVjdGl2ZS5wcm9wRGVjb3JhdG9ycyA9IHtcbiAgICBuYW1lOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICBwcm9wOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICBmcm96ZW5MZWZ0OiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICBmcm96ZW5SaWdodDogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgZmxleEdyb3c6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIHJlc2l6ZWFibGU6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIGNvbXBhcmF0b3I6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIHBpcGU6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIHNvcnRhYmxlOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICBkcmFnZ2FibGU6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIGNhbkF1dG9SZXNpemU6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIG1pbldpZHRoOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICB3aWR0aDogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgbWF4V2lkdGg6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIGNoZWNrYm94YWJsZTogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgaGVhZGVyQ2hlY2tib3hhYmxlOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICBoZWFkZXJDbGFzczogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgY2VsbENsYXNzOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICBpc1RyZWVDb2x1bW46IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIHRyZWVMZXZlbEluZGVudDogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgc3VtbWFyeUZ1bmM6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIHN1bW1hcnlUZW1wbGF0ZTogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgX2NlbGxUZW1wbGF0ZUlucHV0OiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydjZWxsVGVtcGxhdGUnLF0gfV0sXG4gICAgX2NlbGxUZW1wbGF0ZVF1ZXJ5OiBbeyB0eXBlOiBDb250ZW50Q2hpbGQsIGFyZ3M6IFtEYXRhVGFibGVDb2x1bW5DZWxsRGlyZWN0aXZlLCB7IHJlYWQ6IFRlbXBsYXRlUmVmLCBzdGF0aWM6IHRydWUgfSxdIH1dLFxuICAgIF9oZWFkZXJUZW1wbGF0ZUlucHV0OiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydoZWFkZXJUZW1wbGF0ZScsXSB9XSxcbiAgICBfaGVhZGVyVGVtcGxhdGVRdWVyeTogW3sgdHlwZTogQ29udGVudENoaWxkLCBhcmdzOiBbRGF0YVRhYmxlQ29sdW1uSGVhZGVyRGlyZWN0aXZlLCB7IHJlYWQ6IFRlbXBsYXRlUmVmLCBzdGF0aWM6IHRydWUgfSxdIH1dLFxuICAgIF90cmVlVG9nZ2xlVGVtcGxhdGVJbnB1dDogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsndHJlZVRvZ2dsZVRlbXBsYXRlJyxdIH1dLFxuICAgIF90cmVlVG9nZ2xlVGVtcGxhdGVRdWVyeTogW3sgdHlwZTogQ29udGVudENoaWxkLCBhcmdzOiBbRGF0YVRhYmxlQ29sdW1uQ2VsbFRyZWVUb2dnbGUsIHsgcmVhZDogVGVtcGxhdGVSZWYsIHN0YXRpYzogdHJ1ZSB9LF0gfV1cbn07XG5pZiAoZmFsc2UpIHtcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgRGF0YVRhYmxlQ29sdW1uRGlyZWN0aXZlLnByb3RvdHlwZS5uYW1lO1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBEYXRhVGFibGVDb2x1bW5EaXJlY3RpdmUucHJvdG90eXBlLnByb3A7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIERhdGFUYWJsZUNvbHVtbkRpcmVjdGl2ZS5wcm90b3R5cGUuZnJvemVuTGVmdDtcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgRGF0YVRhYmxlQ29sdW1uRGlyZWN0aXZlLnByb3RvdHlwZS5mcm96ZW5SaWdodDtcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgRGF0YVRhYmxlQ29sdW1uRGlyZWN0aXZlLnByb3RvdHlwZS5mbGV4R3JvdztcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgRGF0YVRhYmxlQ29sdW1uRGlyZWN0aXZlLnByb3RvdHlwZS5yZXNpemVhYmxlO1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBEYXRhVGFibGVDb2x1bW5EaXJlY3RpdmUucHJvdG90eXBlLmNvbXBhcmF0b3I7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIERhdGFUYWJsZUNvbHVtbkRpcmVjdGl2ZS5wcm90b3R5cGUucGlwZTtcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgRGF0YVRhYmxlQ29sdW1uRGlyZWN0aXZlLnByb3RvdHlwZS5zb3J0YWJsZTtcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgRGF0YVRhYmxlQ29sdW1uRGlyZWN0aXZlLnByb3RvdHlwZS5kcmFnZ2FibGU7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIERhdGFUYWJsZUNvbHVtbkRpcmVjdGl2ZS5wcm90b3R5cGUuY2FuQXV0b1Jlc2l6ZTtcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgRGF0YVRhYmxlQ29sdW1uRGlyZWN0aXZlLnByb3RvdHlwZS5taW5XaWR0aDtcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgRGF0YVRhYmxlQ29sdW1uRGlyZWN0aXZlLnByb3RvdHlwZS53aWR0aDtcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgRGF0YVRhYmxlQ29sdW1uRGlyZWN0aXZlLnByb3RvdHlwZS5tYXhXaWR0aDtcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgRGF0YVRhYmxlQ29sdW1uRGlyZWN0aXZlLnByb3RvdHlwZS5jaGVja2JveGFibGU7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIERhdGFUYWJsZUNvbHVtbkRpcmVjdGl2ZS5wcm90b3R5cGUuaGVhZGVyQ2hlY2tib3hhYmxlO1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBEYXRhVGFibGVDb2x1bW5EaXJlY3RpdmUucHJvdG90eXBlLmhlYWRlckNsYXNzO1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBEYXRhVGFibGVDb2x1bW5EaXJlY3RpdmUucHJvdG90eXBlLmNlbGxDbGFzcztcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgRGF0YVRhYmxlQ29sdW1uRGlyZWN0aXZlLnByb3RvdHlwZS5pc1RyZWVDb2x1bW47XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIERhdGFUYWJsZUNvbHVtbkRpcmVjdGl2ZS5wcm90b3R5cGUudHJlZUxldmVsSW5kZW50O1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBEYXRhVGFibGVDb2x1bW5EaXJlY3RpdmUucHJvdG90eXBlLnN1bW1hcnlGdW5jO1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBEYXRhVGFibGVDb2x1bW5EaXJlY3RpdmUucHJvdG90eXBlLnN1bW1hcnlUZW1wbGF0ZTtcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgRGF0YVRhYmxlQ29sdW1uRGlyZWN0aXZlLnByb3RvdHlwZS5fY2VsbFRlbXBsYXRlSW5wdXQ7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIERhdGFUYWJsZUNvbHVtbkRpcmVjdGl2ZS5wcm90b3R5cGUuX2NlbGxUZW1wbGF0ZVF1ZXJ5O1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBEYXRhVGFibGVDb2x1bW5EaXJlY3RpdmUucHJvdG90eXBlLl9oZWFkZXJUZW1wbGF0ZUlucHV0O1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBEYXRhVGFibGVDb2x1bW5EaXJlY3RpdmUucHJvdG90eXBlLl9oZWFkZXJUZW1wbGF0ZVF1ZXJ5O1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBEYXRhVGFibGVDb2x1bW5EaXJlY3RpdmUucHJvdG90eXBlLl90cmVlVG9nZ2xlVGVtcGxhdGVJbnB1dDtcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgRGF0YVRhYmxlQ29sdW1uRGlyZWN0aXZlLnByb3RvdHlwZS5fdHJlZVRvZ2dsZVRlbXBsYXRlUXVlcnk7XG4gICAgLyoqXG4gICAgICogQHR5cGUgez99XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBEYXRhVGFibGVDb2x1bW5EaXJlY3RpdmUucHJvdG90eXBlLmlzRmlyc3RDaGFuZ2U7XG4gICAgLyoqXG4gICAgICogQHR5cGUgez99XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBEYXRhVGFibGVDb2x1bW5EaXJlY3RpdmUucHJvdG90eXBlLmNvbHVtbkNoYW5nZXNTZXJ2aWNlO1xufVxuIl19