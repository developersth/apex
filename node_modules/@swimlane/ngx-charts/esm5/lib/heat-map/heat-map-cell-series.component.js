import { __decorate } from "tslib";
import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { formatLabel, escapeLabel } from '../common/label.helper';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from './heat-map-cell.component';
import * as ɵngcc3 from '../common/tooltip/tooltip.directive';

var _c0 = ["ngx-charts-heat-map-cell-series", ""];
var _c1 = function (a0, a1, a2) { return { series: a0, name: a1, value: a2 }; };
function HeatCellSeriesComponent__svg_g_0_Template(rf, ctx) { if (rf & 1) {
    var _r292 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(0, "g", 1);
    ɵngcc0.ɵɵlistener("select", function HeatCellSeriesComponent__svg_g_0_Template__svg_g_select_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r292); var c_r290 = ctx.$implicit; var ctx_r291 = ɵngcc0.ɵɵnextContext(); return ctx_r291.onClick(c_r290.cell); })("activate", function HeatCellSeriesComponent__svg_g_0_Template__svg_g_activate_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r292); var c_r290 = ctx.$implicit; var ctx_r293 = ɵngcc0.ɵɵnextContext(); return ctx_r293.activate.emit(c_r290.cell); })("deactivate", function HeatCellSeriesComponent__svg_g_0_Template__svg_g_deactivate_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r292); var c_r290 = ctx.$implicit; var ctx_r294 = ɵngcc0.ɵɵnextContext(); return ctx_r294.deactivate.emit(c_r290.cell); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var c_r290 = ctx.$implicit;
    var ctx_r289 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("x", c_r290.x)("y", c_r290.y)("width", c_r290.width)("height", c_r290.height)("fill", c_r290.fill)("data", c_r290.data)("gradient", ctx_r289.gradient)("animations", ctx_r289.animations)("tooltipDisabled", ctx_r289.tooltipDisabled)("tooltipPlacement", "top")("tooltipType", "tooltip")("tooltipTitle", ctx_r289.tooltipTemplate ? undefined : ctx_r289.tooltipText(c_r290))("tooltipTemplate", ctx_r289.tooltipTemplate)("tooltipContext", ɵngcc0.ɵɵpureFunction3(14, _c1, c_r290.series, c_r290.label, c_r290.data));
} }
var HeatCellSeriesComponent = /** @class */ (function () {
    function HeatCellSeriesComponent() {
        this.tooltipDisabled = false;
        this.animations = true;
        this.select = new EventEmitter();
        this.activate = new EventEmitter();
        this.deactivate = new EventEmitter();
    }
    HeatCellSeriesComponent.prototype.ngOnInit = function () {
        if (!this.tooltipText) {
            this.tooltipText = this.getTooltipText;
        }
    };
    HeatCellSeriesComponent.prototype.ngOnChanges = function (changes) {
        this.update();
    };
    HeatCellSeriesComponent.prototype.update = function () {
        this.cells = this.getCells();
    };
    HeatCellSeriesComponent.prototype.getCells = function () {
        var _this = this;
        var cells = [];
        this.data.map(function (row) {
            row.series.map(function (cell) {
                var value = cell.value;
                cell.series = row.name;
                cells.push({
                    row: row,
                    cell: cell,
                    x: _this.xScale(row.name),
                    y: _this.yScale(cell.name),
                    width: _this.xScale.bandwidth(),
                    height: _this.yScale.bandwidth(),
                    fill: _this.colors.getColor(value),
                    data: value,
                    label: formatLabel(cell.name),
                    series: row.name
                });
            });
        });
        return cells;
    };
    HeatCellSeriesComponent.prototype.getTooltipText = function (_a) {
        var label = _a.label, data = _a.data, series = _a.series;
        return "\n      <span class=\"tooltip-label\">" + escapeLabel(series) + " \u2022 " + escapeLabel(label) + "</span>\n      <span class=\"tooltip-val\">" + data.toLocaleString() + "</span>\n    ";
    };
    HeatCellSeriesComponent.prototype.trackBy = function (index, item) {
        return item.tooltipText;
    };
    HeatCellSeriesComponent.prototype.onClick = function (data) {
        this.select.emit(data);
    };
    __decorate([
        Input()
    ], HeatCellSeriesComponent.prototype, "data", void 0);
    __decorate([
        Input()
    ], HeatCellSeriesComponent.prototype, "colors", void 0);
    __decorate([
        Input()
    ], HeatCellSeriesComponent.prototype, "xScale", void 0);
    __decorate([
        Input()
    ], HeatCellSeriesComponent.prototype, "yScale", void 0);
    __decorate([
        Input()
    ], HeatCellSeriesComponent.prototype, "gradient", void 0);
    __decorate([
        Input()
    ], HeatCellSeriesComponent.prototype, "tooltipDisabled", void 0);
    __decorate([
        Input()
    ], HeatCellSeriesComponent.prototype, "tooltipText", void 0);
    __decorate([
        Input()
    ], HeatCellSeriesComponent.prototype, "tooltipTemplate", void 0);
    __decorate([
        Input()
    ], HeatCellSeriesComponent.prototype, "animations", void 0);
    __decorate([
        Output()
    ], HeatCellSeriesComponent.prototype, "select", void 0);
    __decorate([
        Output()
    ], HeatCellSeriesComponent.prototype, "activate", void 0);
    __decorate([
        Output()
    ], HeatCellSeriesComponent.prototype, "deactivate", void 0);
HeatCellSeriesComponent.ɵfac = function HeatCellSeriesComponent_Factory(t) { return new (t || HeatCellSeriesComponent)(); };
HeatCellSeriesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: HeatCellSeriesComponent, selectors: [["g", "ngx-charts-heat-map-cell-series", ""]], inputs: { tooltipDisabled: "tooltipDisabled", animations: "animations", tooltipText: "tooltipText", data: "data", colors: "colors", xScale: "xScale", yScale: "yScale", gradient: "gradient", tooltipTemplate: "tooltipTemplate" }, outputs: { select: "select", activate: "activate", deactivate: "deactivate" }, features: [ɵngcc0.ɵɵNgOnChangesFeature()], attrs: _c0, decls: 1, vars: 2, consts: [["ngx-charts-heat-map-cell", "", "ngx-tooltip", "", 3, "x", "y", "width", "height", "fill", "data", "gradient", "animations", "tooltipDisabled", "tooltipPlacement", "tooltipType", "tooltipTitle", "tooltipTemplate", "tooltipContext", "select", "activate", "deactivate", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["ngx-charts-heat-map-cell", "", "ngx-tooltip", "", 3, "x", "y", "width", "height", "fill", "data", "gradient", "animations", "tooltipDisabled", "tooltipPlacement", "tooltipType", "tooltipTitle", "tooltipTemplate", "tooltipContext", "select", "activate", "deactivate"]], template: function HeatCellSeriesComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, HeatCellSeriesComponent__svg_g_0_Template, 1, 18, "g", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngForOf", ctx.cells)("ngForTrackBy", ctx.trackBy);
    } }, directives: [ɵngcc1.NgForOf, ɵngcc2.HeatMapCellComponent, ɵngcc3.TooltipDirective], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HeatCellSeriesComponent, [{
        type: Component,
        args: [{
                selector: 'g[ngx-charts-heat-map-cell-series]',
                template: "\n    <svg:g\n      ngx-charts-heat-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [data]=\"c.data\"\n      (select)=\"onClick(c.cell)\"\n      (activate)=\"activate.emit(c.cell)\"\n      (deactivate)=\"deactivate.emit(c.cell)\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"'top'\"\n      [tooltipType]=\"'tooltip'\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"{ series: c.series, name: c.label, value: c.data }\"\n    ></svg:g>\n  ",
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return []; }, { tooltipDisabled: [{
            type: Input
        }], animations: [{
            type: Input
        }], select: [{
            type: Output
        }], activate: [{
            type: Output
        }], deactivate: [{
            type: Output
        }], tooltipText: [{
            type: Input
        }], data: [{
            type: Input
        }], colors: [{
            type: Input
        }], xScale: [{
            type: Input
        }], yScale: [{
            type: Input
        }], gradient: [{
            type: Input
        }], tooltipTemplate: [{
            type: Input
        }] }); })();
    return HeatCellSeriesComponent;
}());
export { HeatCellSeriesComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNwcm8va3JpdHNhZGVlL1NWTi9DeWJlcnNvZnQvYXBleC9ub2RlX21vZHVsZXMvQHN3aW1sYW5lL25neC1jaGFydHMvZXNtNS9saWIvaGVhdC1tYXAvaGVhdC1tYXAtY2VsbC1zZXJpZXMuY29tcG9uZW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFHQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2dFQXVGZ0U7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQU9oQyIsImZpbGUiOiJoZWF0LW1hcC1jZWxsLXNlcmllcy5jb21wb25lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2RlY29yYXRlIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGZvcm1hdExhYmVsLCBlc2NhcGVMYWJlbCB9IGZyb20gJy4uL2NvbW1vbi9sYWJlbC5oZWxwZXInO1xudmFyIEhlYXRDZWxsU2VyaWVzQ29tcG9uZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEhlYXRDZWxsU2VyaWVzQ29tcG9uZW50KCkge1xuICAgICAgICB0aGlzLnRvb2x0aXBEaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmFuaW1hdGlvbnMgPSB0cnVlO1xuICAgICAgICB0aGlzLnNlbGVjdCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5hY3RpdmF0ZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5kZWFjdGl2YXRlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgIH1cbiAgICBIZWF0Q2VsbFNlcmllc0NvbXBvbmVudC5wcm90b3R5cGUubmdPbkluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy50b29sdGlwVGV4dCkge1xuICAgICAgICAgICAgdGhpcy50b29sdGlwVGV4dCA9IHRoaXMuZ2V0VG9vbHRpcFRleHQ7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEhlYXRDZWxsU2VyaWVzQ29tcG9uZW50LnByb3RvdHlwZS5uZ09uQ2hhbmdlcyA9IGZ1bmN0aW9uIChjaGFuZ2VzKSB7XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfTtcbiAgICBIZWF0Q2VsbFNlcmllc0NvbXBvbmVudC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmNlbGxzID0gdGhpcy5nZXRDZWxscygpO1xuICAgIH07XG4gICAgSGVhdENlbGxTZXJpZXNDb21wb25lbnQucHJvdG90eXBlLmdldENlbGxzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgY2VsbHMgPSBbXTtcbiAgICAgICAgdGhpcy5kYXRhLm1hcChmdW5jdGlvbiAocm93KSB7XG4gICAgICAgICAgICByb3cuc2VyaWVzLm1hcChmdW5jdGlvbiAoY2VsbCkge1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGNlbGwudmFsdWU7XG4gICAgICAgICAgICAgICAgY2VsbC5zZXJpZXMgPSByb3cubmFtZTtcbiAgICAgICAgICAgICAgICBjZWxscy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgcm93OiByb3csXG4gICAgICAgICAgICAgICAgICAgIGNlbGw6IGNlbGwsXG4gICAgICAgICAgICAgICAgICAgIHg6IF90aGlzLnhTY2FsZShyb3cubmFtZSksXG4gICAgICAgICAgICAgICAgICAgIHk6IF90aGlzLnlTY2FsZShjZWxsLm5hbWUpLFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogX3RoaXMueFNjYWxlLmJhbmR3aWR0aCgpLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IF90aGlzLnlTY2FsZS5iYW5kd2lkdGgoKSxcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogX3RoaXMuY29sb3JzLmdldENvbG9yKHZhbHVlKSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiBmb3JtYXRMYWJlbChjZWxsLm5hbWUpLFxuICAgICAgICAgICAgICAgICAgICBzZXJpZXM6IHJvdy5uYW1lXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjZWxscztcbiAgICB9O1xuICAgIEhlYXRDZWxsU2VyaWVzQ29tcG9uZW50LnByb3RvdHlwZS5nZXRUb29sdGlwVGV4dCA9IGZ1bmN0aW9uIChfYSkge1xuICAgICAgICB2YXIgbGFiZWwgPSBfYS5sYWJlbCwgZGF0YSA9IF9hLmRhdGEsIHNlcmllcyA9IF9hLnNlcmllcztcbiAgICAgICAgcmV0dXJuIFwiXFxuICAgICAgPHNwYW4gY2xhc3M9XFxcInRvb2x0aXAtbGFiZWxcXFwiPlwiICsgZXNjYXBlTGFiZWwoc2VyaWVzKSArIFwiIFxcdTIwMjIgXCIgKyBlc2NhcGVMYWJlbChsYWJlbCkgKyBcIjwvc3Bhbj5cXG4gICAgICA8c3BhbiBjbGFzcz1cXFwidG9vbHRpcC12YWxcXFwiPlwiICsgZGF0YS50b0xvY2FsZVN0cmluZygpICsgXCI8L3NwYW4+XFxuICAgIFwiO1xuICAgIH07XG4gICAgSGVhdENlbGxTZXJpZXNDb21wb25lbnQucHJvdG90eXBlLnRyYWNrQnkgPSBmdW5jdGlvbiAoaW5kZXgsIGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0udG9vbHRpcFRleHQ7XG4gICAgfTtcbiAgICBIZWF0Q2VsbFNlcmllc0NvbXBvbmVudC5wcm90b3R5cGUub25DbGljayA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0LmVtaXQoZGF0YSk7XG4gICAgfTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgSW5wdXQoKVxuICAgIF0sIEhlYXRDZWxsU2VyaWVzQ29tcG9uZW50LnByb3RvdHlwZSwgXCJkYXRhXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIElucHV0KClcbiAgICBdLCBIZWF0Q2VsbFNlcmllc0NvbXBvbmVudC5wcm90b3R5cGUsIFwiY29sb3JzXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIElucHV0KClcbiAgICBdLCBIZWF0Q2VsbFNlcmllc0NvbXBvbmVudC5wcm90b3R5cGUsIFwieFNjYWxlXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIElucHV0KClcbiAgICBdLCBIZWF0Q2VsbFNlcmllc0NvbXBvbmVudC5wcm90b3R5cGUsIFwieVNjYWxlXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIElucHV0KClcbiAgICBdLCBIZWF0Q2VsbFNlcmllc0NvbXBvbmVudC5wcm90b3R5cGUsIFwiZ3JhZGllbnRcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgSW5wdXQoKVxuICAgIF0sIEhlYXRDZWxsU2VyaWVzQ29tcG9uZW50LnByb3RvdHlwZSwgXCJ0b29sdGlwRGlzYWJsZWRcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgSW5wdXQoKVxuICAgIF0sIEhlYXRDZWxsU2VyaWVzQ29tcG9uZW50LnByb3RvdHlwZSwgXCJ0b29sdGlwVGV4dFwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBJbnB1dCgpXG4gICAgXSwgSGVhdENlbGxTZXJpZXNDb21wb25lbnQucHJvdG90eXBlLCBcInRvb2x0aXBUZW1wbGF0ZVwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBJbnB1dCgpXG4gICAgXSwgSGVhdENlbGxTZXJpZXNDb21wb25lbnQucHJvdG90eXBlLCBcImFuaW1hdGlvbnNcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgT3V0cHV0KClcbiAgICBdLCBIZWF0Q2VsbFNlcmllc0NvbXBvbmVudC5wcm90b3R5cGUsIFwic2VsZWN0XCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIE91dHB1dCgpXG4gICAgXSwgSGVhdENlbGxTZXJpZXNDb21wb25lbnQucHJvdG90eXBlLCBcImFjdGl2YXRlXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIE91dHB1dCgpXG4gICAgXSwgSGVhdENlbGxTZXJpZXNDb21wb25lbnQucHJvdG90eXBlLCBcImRlYWN0aXZhdGVcIiwgdm9pZCAwKTtcbiAgICBIZWF0Q2VsbFNlcmllc0NvbXBvbmVudCA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBDb21wb25lbnQoe1xuICAgICAgICAgICAgc2VsZWN0b3I6ICdnW25neC1jaGFydHMtaGVhdC1tYXAtY2VsbC1zZXJpZXNdJyxcbiAgICAgICAgICAgIHRlbXBsYXRlOiBcIlxcbiAgICA8c3ZnOmdcXG4gICAgICBuZ3gtY2hhcnRzLWhlYXQtbWFwLWNlbGxcXG4gICAgICAqbmdGb3I9XFxcImxldCBjIG9mIGNlbGxzOyB0cmFja0J5OiB0cmFja0J5XFxcIlxcbiAgICAgIFt4XT1cXFwiYy54XFxcIlxcbiAgICAgIFt5XT1cXFwiYy55XFxcIlxcbiAgICAgIFt3aWR0aF09XFxcImMud2lkdGhcXFwiXFxuICAgICAgW2hlaWdodF09XFxcImMuaGVpZ2h0XFxcIlxcbiAgICAgIFtmaWxsXT1cXFwiYy5maWxsXFxcIlxcbiAgICAgIFtkYXRhXT1cXFwiYy5kYXRhXFxcIlxcbiAgICAgIChzZWxlY3QpPVxcXCJvbkNsaWNrKGMuY2VsbClcXFwiXFxuICAgICAgKGFjdGl2YXRlKT1cXFwiYWN0aXZhdGUuZW1pdChjLmNlbGwpXFxcIlxcbiAgICAgIChkZWFjdGl2YXRlKT1cXFwiZGVhY3RpdmF0ZS5lbWl0KGMuY2VsbClcXFwiXFxuICAgICAgW2dyYWRpZW50XT1cXFwiZ3JhZGllbnRcXFwiXFxuICAgICAgW2FuaW1hdGlvbnNdPVxcXCJhbmltYXRpb25zXFxcIlxcbiAgICAgIG5neC10b29sdGlwXFxuICAgICAgW3Rvb2x0aXBEaXNhYmxlZF09XFxcInRvb2x0aXBEaXNhYmxlZFxcXCJcXG4gICAgICBbdG9vbHRpcFBsYWNlbWVudF09XFxcIid0b3AnXFxcIlxcbiAgICAgIFt0b29sdGlwVHlwZV09XFxcIid0b29sdGlwJ1xcXCJcXG4gICAgICBbdG9vbHRpcFRpdGxlXT1cXFwidG9vbHRpcFRlbXBsYXRlID8gdW5kZWZpbmVkIDogdG9vbHRpcFRleHQoYylcXFwiXFxuICAgICAgW3Rvb2x0aXBUZW1wbGF0ZV09XFxcInRvb2x0aXBUZW1wbGF0ZVxcXCJcXG4gICAgICBbdG9vbHRpcENvbnRleHRdPVxcXCJ7IHNlcmllczogYy5zZXJpZXMsIG5hbWU6IGMubGFiZWwsIHZhbHVlOiBjLmRhdGEgfVxcXCJcXG4gICAgPjwvc3ZnOmc+XFxuICBcIixcbiAgICAgICAgICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG4gICAgICAgIH0pXG4gICAgXSwgSGVhdENlbGxTZXJpZXNDb21wb25lbnQpO1xuICAgIHJldHVybiBIZWF0Q2VsbFNlcmllc0NvbXBvbmVudDtcbn0oKSk7XG5leHBvcnQgeyBIZWF0Q2VsbFNlcmllc0NvbXBvbmVudCB9O1xuIl19