import { __decorate, __extends, __read, __spread, __values } from "tslib";
import { Component, Input, Output, EventEmitter, HostListener, ViewEncapsulation, ChangeDetectionStrategy, ContentChild } from '@angular/core';
import { scaleLinear, scalePoint, scaleTime } from 'd3-scale';
import { curveLinear } from 'd3-shape';
import { calculateViewDimensions } from '../common/view-dimensions.helper';
import { ColorHelper } from '../common/color.helper';
import { BaseChartComponent } from '../common/base-chart.component';
import { id } from '../utils/id';
import { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../common/charts/chart.component';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '../common/axes/x-axis.component';
import * as ɵngcc4 from '../common/axes/y-axis.component';
import * as ɵngcc5 from './area-series.component';
import * as ɵngcc6 from '../common/tooltip-area.component';
import * as ɵngcc7 from '../common/circle-series.component';
import * as ɵngcc8 from '../common/timeline/timeline.component';

var _c0 = ["tooltipTemplate"];
var _c1 = ["seriesTooltipTemplate"];
function AreaChartNormalizedComponent__svg_g_5_Template(rf, ctx) { if (rf & 1) {
    var _r113 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(0, "g", 7);
    ɵngcc0.ɵɵlistener("dimensionsChanged", function AreaChartNormalizedComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r113); var ctx_r112 = ɵngcc0.ɵɵnextContext(); return ctx_r112.updateXAxisHeight($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r107 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("xScale", ctx_r107.xScale)("dims", ctx_r107.dims)("showGridLines", ctx_r107.showGridLines)("showLabel", ctx_r107.showXAxisLabel)("labelText", ctx_r107.xAxisLabel)("trimTicks", ctx_r107.trimXAxisTicks)("rotateTicks", ctx_r107.rotateXAxisTicks)("maxTickLength", ctx_r107.maxXAxisTickLength)("tickFormatting", ctx_r107.xAxisTickFormatting)("ticks", ctx_r107.xAxisTicks);
} }
function AreaChartNormalizedComponent__svg_g_6_Template(rf, ctx) { if (rf & 1) {
    var _r115 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(0, "g", 8);
    ɵngcc0.ɵɵlistener("dimensionsChanged", function AreaChartNormalizedComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r115); var ctx_r114 = ɵngcc0.ɵɵnextContext(); return ctx_r114.updateYAxisWidth($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r108 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("yScale", ctx_r108.yScale)("dims", ctx_r108.dims)("showGridLines", ctx_r108.showGridLines)("showLabel", ctx_r108.showYAxisLabel)("labelText", ctx_r108.yAxisLabel)("trimTicks", ctx_r108.trimYAxisTicks)("maxTickLength", ctx_r108.maxYAxisTickLength)("tickFormatting", ctx_r108.yAxisTickFormatting)("ticks", ctx_r108.yAxisTicks);
} }
function AreaChartNormalizedComponent__svg_g_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(0, "g");
    ɵngcc0.ɵɵelement(1, "g", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var series_r116 = ctx.$implicit;
    var ctx_r109 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("xScale", ctx_r109.xScale)("yScale", ctx_r109.yScale)("colors", ctx_r109.colors)("data", series_r116)("scaleType", ctx_r109.scaleType)("activeEntries", ctx_r109.activeEntries)("gradient", ctx_r109.gradient)("curve", ctx_r109.curve)("animations", ctx_r109.animations);
} }
function AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template(rf, ctx) { if (rf & 1) {
    var _r120 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(0, "g");
    ɵngcc0.ɵɵelementStart(1, "g", 13);
    ɵngcc0.ɵɵlistener("select", function AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template__svg_g_select_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r120); var series_r118 = ctx.$implicit; var ctx_r119 = ɵngcc0.ɵɵnextContext(2); return ctx_r119.onClick($event, series_r118); })("activate", function AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template__svg_g_activate_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r120); var ctx_r121 = ɵngcc0.ɵɵnextContext(2); return ctx_r121.onActivate($event); })("deactivate", function AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template__svg_g_deactivate_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r120); var ctx_r122 = ɵngcc0.ɵɵnextContext(2); return ctx_r122.onDeactivate($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var series_r118 = ctx.$implicit;
    var ctx_r117 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("xScale", ctx_r117.xScale)("yScale", ctx_r117.yScale)("colors", ctx_r117.colors)("activeEntries", ctx_r117.activeEntries)("data", series_r118)("scaleType", ctx_r117.scaleType)("visibleValue", ctx_r117.hoveredVertical)("tooltipDisabled", ctx_r117.tooltipDisabled)("tooltipTemplate", ctx_r117.tooltipTemplate);
} }
function AreaChartNormalizedComponent__svg_g_9_Template(rf, ctx) { if (rf & 1) {
    var _r124 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(0, "g", 10);
    ɵngcc0.ɵɵlistener("mouseleave", function AreaChartNormalizedComponent__svg_g_9_Template__svg_g_mouseleave_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r124); var ctx_r123 = ɵngcc0.ɵɵnextContext(); return ctx_r123.hideCircles(); });
    ɵngcc0.ɵɵelementStart(1, "g", 11);
    ɵngcc0.ɵɵlistener("hover", function AreaChartNormalizedComponent__svg_g_9_Template__svg_g_hover_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r124); var ctx_r125 = ɵngcc0.ɵɵnextContext(); return ctx_r125.updateHoveredVertical($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(2, AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template, 2, 9, "g", 12);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r110 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("dims", ctx_r110.dims)("xSet", ctx_r110.xSet)("xScale", ctx_r110.xScale)("yScale", ctx_r110.yScale)("results", ctx_r110.results)("colors", ctx_r110.colors)("showPercentage", true)("tooltipDisabled", ctx_r110.tooltipDisabled)("tooltipTemplate", ctx_r110.seriesTooltipTemplate);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r110.results);
} }
function AreaChartNormalizedComponent__svg_g_10__svg_g_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(0, "g");
    ɵngcc0.ɵɵelement(1, "g", 15);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var series_r127 = ctx.$implicit;
    var ctx_r126 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("xScale", ctx_r126.timelineXScale)("yScale", ctx_r126.timelineYScale)("colors", ctx_r126.colors)("data", series_r127)("scaleType", ctx_r126.scaleType)("gradient", ctx_r126.gradient)("curve", ctx_r126.curve)("animations", ctx_r126.animations);
} }
var _c2 = function (a0, a1) { return [a0, a1]; };
function AreaChartNormalizedComponent__svg_g_10_Template(rf, ctx) { if (rf & 1) {
    var _r129 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(0, "g", 14);
    ɵngcc0.ɵɵlistener("onDomainChange", function AreaChartNormalizedComponent__svg_g_10_Template__svg_g_onDomainChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r129); var ctx_r128 = ɵngcc0.ɵɵnextContext(); return ctx_r128.updateDomain($event); });
    ɵngcc0.ɵɵtemplate(1, AreaChartNormalizedComponent__svg_g_10__svg_g_1_Template, 2, 8, "g", 4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r111 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("results", ctx_r111.results)("view", ɵngcc0.ɵɵpureFunction2(10, _c2, ctx_r111.timelineWidth, ctx_r111.height))("height", ctx_r111.timelineHeight)("scheme", ctx_r111.scheme)("customColors", ctx_r111.customColors)("legend", ctx_r111.legend)("scaleType", ctx_r111.scaleType);
    ɵngcc0.ɵɵattribute("transform", ctx_r111.timelineTransform);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r111.results)("ngForTrackBy", ctx_r111.trackBy);
} }
var AreaChartNormalizedComponent = /** @class */ (function (_super) {
    __extends(AreaChartNormalizedComponent, _super);
    function AreaChartNormalizedComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.legend = false;
        _this.legendTitle = 'Legend';
        _this.legendPosition = 'right';
        _this.showGridLines = true;
        _this.curve = curveLinear;
        _this.activeEntries = [];
        _this.trimXAxisTicks = true;
        _this.trimYAxisTicks = true;
        _this.rotateXAxisTicks = true;
        _this.maxXAxisTickLength = 16;
        _this.maxYAxisTickLength = 16;
        _this.roundDomains = false;
        _this.tooltipDisabled = false;
        _this.activate = new EventEmitter();
        _this.deactivate = new EventEmitter();
        _this.margin = [10, 20, 10, 20];
        _this.xAxisHeight = 0;
        _this.yAxisWidth = 0;
        _this.timelineHeight = 50;
        _this.timelinePadding = 10;
        return _this;
    }
    AreaChartNormalizedComponent.prototype.update = function () {
        var _this = this;
        _super.prototype.update.call(this);
        this.dims = calculateViewDimensions({
            width: this.width,
            height: this.height,
            margins: this.margin,
            showXAxis: this.xAxis,
            showYAxis: this.yAxis,
            xAxisHeight: this.xAxisHeight,
            yAxisWidth: this.yAxisWidth,
            showXLabel: this.showXAxisLabel,
            showYLabel: this.showYAxisLabel,
            showLegend: this.legend,
            legendType: this.schemeType,
            legendPosition: this.legendPosition
        });
        if (this.timeline) {
            this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;
        }
        this.xDomain = this.getXDomain();
        if (this.filteredDomain) {
            this.xDomain = this.filteredDomain;
        }
        this.yDomain = this.getYDomain();
        this.seriesDomain = this.getSeriesDomain();
        this.xScale = this.getXScale(this.xDomain, this.dims.width);
        this.yScale = this.getYScale(this.yDomain, this.dims.height);
        var _loop_1 = function (i) {
            var e_1, _a, e_2, _b;
            var val = this_1.xSet[i];
            var d0 = 0;
            var total = 0;
            try {
                for (var _c = (e_1 = void 0, __values(this_1.results)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var group = _d.value;
                    var d = group.series.find(function (item) {
                        var a = item.name;
                        var b = val;
                        if (_this.scaleType === 'time') {
                            a = a.valueOf();
                            b = b.valueOf();
                        }
                        return a === b;
                    });
                    if (d) {
                        total += d.value;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
            try {
                for (var _e = (e_2 = void 0, __values(this_1.results)), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var group = _f.value;
                    var d = group.series.find(function (item) {
                        var a = item.name;
                        var b = val;
                        if (_this.scaleType === 'time') {
                            a = a.valueOf();
                            b = b.valueOf();
                        }
                        return a === b;
                    });
                    if (d) {
                        d.d0 = d0;
                        d.d1 = d0 + d.value;
                        d0 += d.value;
                    }
                    else {
                        d = {
                            name: val,
                            value: 0,
                            d0: d0,
                            d1: d0
                        };
                        group.series.push(d);
                    }
                    if (total > 0) {
                        d.d0 = (d.d0 * 100) / total;
                        d.d1 = (d.d1 * 100) / total;
                    }
                    else {
                        d.d0 = 0;
                        d.d1 = 0;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_2) throw e_2.error; }
            }
        };
        var this_1 = this;
        for (var i = 0; i < this.xSet.length; i++) {
            _loop_1(i);
        }
        this.updateTimeline();
        this.setColors();
        this.legendOptions = this.getLegendOptions();
        this.transform = "translate(" + this.dims.xOffset + " , " + this.margin[0] + ")";
        this.clipPathId = 'clip' + id().toString();
        this.clipPath = "url(#" + this.clipPathId + ")";
    };
    AreaChartNormalizedComponent.prototype.updateTimeline = function () {
        if (this.timeline) {
            this.timelineWidth = this.dims.width;
            this.timelineXDomain = this.getXDomain();
            this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);
            this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);
            this.timelineTransform = "translate(" + this.dims.xOffset + ", " + -this.margin[2] + ")";
        }
    };
    AreaChartNormalizedComponent.prototype.getXDomain = function () {
        var values = getUniqueXDomainValues(this.results);
        this.scaleType = getScaleType(values);
        var domain = [];
        if (this.scaleType === 'time') {
            var min = Math.min.apply(Math, __spread(values));
            var max = Math.max.apply(Math, __spread(values));
            domain = [new Date(min), new Date(max)];
            this.xSet = __spread(values).sort(function (a, b) {
                var aDate = a.getTime();
                var bDate = b.getTime();
                if (aDate > bDate)
                    return 1;
                if (bDate > aDate)
                    return -1;
                return 0;
            });
        }
        else if (this.scaleType === 'linear') {
            values = values.map(function (v) { return Number(v); });
            var min = Math.min.apply(Math, __spread(values));
            var max = Math.max.apply(Math, __spread(values));
            domain = [min, max];
            // Use compare function to sort numbers numerically
            this.xSet = __spread(values).sort(function (a, b) { return a - b; });
        }
        else {
            domain = values;
            this.xSet = values;
        }
        return domain;
    };
    AreaChartNormalizedComponent.prototype.getYDomain = function () {
        return [0, 100];
    };
    AreaChartNormalizedComponent.prototype.getSeriesDomain = function () {
        return this.results.map(function (d) { return d.name; });
    };
    AreaChartNormalizedComponent.prototype.getXScale = function (domain, width) {
        var scale;
        if (this.scaleType === 'time') {
            scale = scaleTime();
        }
        else if (this.scaleType === 'linear') {
            scale = scaleLinear();
        }
        else if (this.scaleType === 'ordinal') {
            scale = scalePoint().padding(0.1);
        }
        scale.range([0, width]).domain(domain);
        return this.roundDomains ? scale.nice() : scale;
    };
    AreaChartNormalizedComponent.prototype.getYScale = function (domain, height) {
        var scale = scaleLinear()
            .range([height, 0])
            .domain(domain);
        return this.roundDomains ? scale.nice() : scale;
    };
    AreaChartNormalizedComponent.prototype.updateDomain = function (domain) {
        this.filteredDomain = domain;
        this.xDomain = this.filteredDomain;
        this.xScale = this.getXScale(this.xDomain, this.dims.width);
    };
    AreaChartNormalizedComponent.prototype.updateHoveredVertical = function (item) {
        this.hoveredVertical = item.value;
        this.deactivateAll();
    };
    AreaChartNormalizedComponent.prototype.hideCircles = function () {
        this.hoveredVertical = null;
        this.deactivateAll();
    };
    AreaChartNormalizedComponent.prototype.onClick = function (data, series) {
        if (series) {
            data.series = series.name;
        }
        this.select.emit(data);
    };
    AreaChartNormalizedComponent.prototype.trackBy = function (index, item) {
        return item.name;
    };
    AreaChartNormalizedComponent.prototype.setColors = function () {
        var domain;
        if (this.schemeType === 'ordinal') {
            domain = this.seriesDomain;
        }
        else {
            domain = this.yDomain;
        }
        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);
    };
    AreaChartNormalizedComponent.prototype.getLegendOptions = function () {
        var opts = {
            scaleType: this.schemeType,
            colors: undefined,
            domain: [],
            title: undefined,
            position: this.legendPosition
        };
        if (opts.scaleType === 'ordinal') {
            opts.domain = this.seriesDomain;
            opts.colors = this.colors;
            opts.title = this.legendTitle;
        }
        else {
            opts.domain = this.yDomain;
            opts.colors = this.colors.scale;
        }
        return opts;
    };
    AreaChartNormalizedComponent.prototype.updateYAxisWidth = function (_a) {
        var width = _a.width;
        this.yAxisWidth = width;
        this.update();
    };
    AreaChartNormalizedComponent.prototype.updateXAxisHeight = function (_a) {
        var height = _a.height;
        this.xAxisHeight = height;
        this.update();
    };
    AreaChartNormalizedComponent.prototype.onActivate = function (item) {
        var idx = this.activeEntries.findIndex(function (d) {
            return d.name === item.name && d.value === item.value;
        });
        if (idx > -1) {
            return;
        }
        this.activeEntries = __spread([item], this.activeEntries);
        this.activate.emit({ value: item, entries: this.activeEntries });
    };
    AreaChartNormalizedComponent.prototype.onDeactivate = function (item) {
        var idx = this.activeEntries.findIndex(function (d) {
            return d.name === item.name && d.value === item.value;
        });
        this.activeEntries.splice(idx, 1);
        this.activeEntries = __spread(this.activeEntries);
        this.deactivate.emit({ value: item, entries: this.activeEntries });
    };
    AreaChartNormalizedComponent.prototype.deactivateAll = function () {
        var e_3, _a;
        this.activeEntries = __spread(this.activeEntries);
        try {
            for (var _b = __values(this.activeEntries), _c = _b.next(); !_c.done; _c = _b.next()) {
                var entry = _c.value;
                this.deactivate.emit({ value: entry, entries: [] });
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        this.activeEntries = [];
    };
    __decorate([
        Input()
    ], AreaChartNormalizedComponent.prototype, "legend", void 0);
    __decorate([
        Input()
    ], AreaChartNormalizedComponent.prototype, "legendTitle", void 0);
    __decorate([
        Input()
    ], AreaChartNormalizedComponent.prototype, "legendPosition", void 0);
    __decorate([
        Input()
    ], AreaChartNormalizedComponent.prototype, "xAxis", void 0);
    __decorate([
        Input()
    ], AreaChartNormalizedComponent.prototype, "yAxis", void 0);
    __decorate([
        Input()
    ], AreaChartNormalizedComponent.prototype, "showXAxisLabel", void 0);
    __decorate([
        Input()
    ], AreaChartNormalizedComponent.prototype, "showYAxisLabel", void 0);
    __decorate([
        Input()
    ], AreaChartNormalizedComponent.prototype, "xAxisLabel", void 0);
    __decorate([
        Input()
    ], AreaChartNormalizedComponent.prototype, "yAxisLabel", void 0);
    __decorate([
        Input()
    ], AreaChartNormalizedComponent.prototype, "timeline", void 0);
    __decorate([
        Input()
    ], AreaChartNormalizedComponent.prototype, "gradient", void 0);
    __decorate([
        Input()
    ], AreaChartNormalizedComponent.prototype, "showGridLines", void 0);
    __decorate([
        Input()
    ], AreaChartNormalizedComponent.prototype, "curve", void 0);
    __decorate([
        Input()
    ], AreaChartNormalizedComponent.prototype, "activeEntries", void 0);
    __decorate([
        Input()
    ], AreaChartNormalizedComponent.prototype, "schemeType", void 0);
    __decorate([
        Input()
    ], AreaChartNormalizedComponent.prototype, "trimXAxisTicks", void 0);
    __decorate([
        Input()
    ], AreaChartNormalizedComponent.prototype, "trimYAxisTicks", void 0);
    __decorate([
        Input()
    ], AreaChartNormalizedComponent.prototype, "rotateXAxisTicks", void 0);
    __decorate([
        Input()
    ], AreaChartNormalizedComponent.prototype, "maxXAxisTickLength", void 0);
    __decorate([
        Input()
    ], AreaChartNormalizedComponent.prototype, "maxYAxisTickLength", void 0);
    __decorate([
        Input()
    ], AreaChartNormalizedComponent.prototype, "xAxisTickFormatting", void 0);
    __decorate([
        Input()
    ], AreaChartNormalizedComponent.prototype, "yAxisTickFormatting", void 0);
    __decorate([
        Input()
    ], AreaChartNormalizedComponent.prototype, "xAxisTicks", void 0);
    __decorate([
        Input()
    ], AreaChartNormalizedComponent.prototype, "yAxisTicks", void 0);
    __decorate([
        Input()
    ], AreaChartNormalizedComponent.prototype, "roundDomains", void 0);
    __decorate([
        Input()
    ], AreaChartNormalizedComponent.prototype, "tooltipDisabled", void 0);
    __decorate([
        Output()
    ], AreaChartNormalizedComponent.prototype, "activate", void 0);
    __decorate([
        Output()
    ], AreaChartNormalizedComponent.prototype, "deactivate", void 0);
    __decorate([
        ContentChild('tooltipTemplate')
    ], AreaChartNormalizedComponent.prototype, "tooltipTemplate", void 0);
    __decorate([
        ContentChild('seriesTooltipTemplate')
    ], AreaChartNormalizedComponent.prototype, "seriesTooltipTemplate", void 0);
    __decorate([
        HostListener('mouseleave')
    ], AreaChartNormalizedComponent.prototype, "hideCircles", null);
AreaChartNormalizedComponent.ɵfac = function AreaChartNormalizedComponent_Factory(t) { return ɵAreaChartNormalizedComponent_BaseFactory(t || AreaChartNormalizedComponent); };
AreaChartNormalizedComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AreaChartNormalizedComponent, selectors: [["ngx-charts-area-chart-normalized"]], contentQueries: function AreaChartNormalizedComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c0, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c1, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.seriesTooltipTemplate = _t.first);
    } }, hostBindings: function AreaChartNormalizedComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("mouseleave", function AreaChartNormalizedComponent_mouseleave_HostBindingHandler($event) { return ctx.hideCircles(); });
    } }, inputs: { activeEntries: "activeEntries", legend: "legend", legendTitle: "legendTitle", legendPosition: "legendPosition", xAxis: "xAxis", yAxis: "yAxis", showXAxisLabel: "showXAxisLabel", showYAxisLabel: "showYAxisLabel", xAxisLabel: "xAxisLabel", yAxisLabel: "yAxisLabel", timeline: "timeline", gradient: "gradient", showGridLines: "showGridLines", curve: "curve", schemeType: "schemeType", trimXAxisTicks: "trimXAxisTicks", trimYAxisTicks: "trimYAxisTicks", rotateXAxisTicks: "rotateXAxisTicks", maxXAxisTickLength: "maxXAxisTickLength", maxYAxisTickLength: "maxYAxisTickLength", xAxisTickFormatting: "xAxisTickFormatting", yAxisTickFormatting: "yAxisTickFormatting", xAxisTicks: "xAxisTicks", yAxisTicks: "yAxisTicks", roundDomains: "roundDomains", tooltipDisabled: "tooltipDisabled" }, outputs: { activate: "activate", deactivate: "deactivate" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 11, vars: 20, consts: [[3, "view", "showLegend", "legendOptions", "activeEntries", "animations", "legendLabelClick", "legendLabelActivate", "legendLabelDeactivate"], [1, "area-chart", "chart"], ["ngx-charts-x-axis", "", 3, "xScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "rotateTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged", 4, "ngIf"], ["ngx-charts-y-axis", "", 3, "yScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged", 4, "ngIf"], [4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "mouseleave", 4, "ngIf"], ["ngx-charts-timeline", "", 3, "results", "view", "height", "scheme", "customColors", "legend", "scaleType", "onDomainChange", 4, "ngIf"], ["ngx-charts-x-axis", "", 3, "xScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "rotateTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged"], ["ngx-charts-y-axis", "", 3, "yScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged"], ["ngx-charts-area-series", "", "normalized", "true", 3, "xScale", "yScale", "colors", "data", "scaleType", "activeEntries", "gradient", "curve", "animations"], [3, "mouseleave"], ["ngx-charts-tooltip-area", "", 3, "dims", "xSet", "xScale", "yScale", "results", "colors", "showPercentage", "tooltipDisabled", "tooltipTemplate", "hover"], [4, "ngFor", "ngForOf"], ["ngx-charts-circle-series", "", "type", "stacked", 3, "xScale", "yScale", "colors", "activeEntries", "data", "scaleType", "visibleValue", "tooltipDisabled", "tooltipTemplate", "select", "activate", "deactivate"], ["ngx-charts-timeline", "", 3, "results", "view", "height", "scheme", "customColors", "legend", "scaleType", "onDomainChange"], ["ngx-charts-area-series", "", "normalized", "true", 3, "xScale", "yScale", "colors", "data", "scaleType", "gradient", "curve", "animations"]], template: function AreaChartNormalizedComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "ngx-charts-chart", 0);
        ɵngcc0.ɵɵlistener("legendLabelClick", function AreaChartNormalizedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) { return ctx.onClick($event); })("legendLabelActivate", function AreaChartNormalizedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) { return ctx.onActivate($event); })("legendLabelDeactivate", function AreaChartNormalizedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) { return ctx.onDeactivate($event); });
        ɵngcc0.ɵɵnamespaceSVG();
        ɵngcc0.ɵɵelementStart(1, "defs");
        ɵngcc0.ɵɵelementStart(2, "clipPath");
        ɵngcc0.ɵɵelement(3, "rect");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "g", 1);
        ɵngcc0.ɵɵtemplate(5, AreaChartNormalizedComponent__svg_g_5_Template, 1, 10, "g", 2);
        ɵngcc0.ɵɵtemplate(6, AreaChartNormalizedComponent__svg_g_6_Template, 1, 9, "g", 3);
        ɵngcc0.ɵɵelementStart(7, "g");
        ɵngcc0.ɵɵtemplate(8, AreaChartNormalizedComponent__svg_g_8_Template, 2, 9, "g", 4);
        ɵngcc0.ɵɵtemplate(9, AreaChartNormalizedComponent__svg_g_9_Template, 3, 10, "g", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(10, AreaChartNormalizedComponent__svg_g_10_Template, 2, 13, "g", 6);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("view", ɵngcc0.ɵɵpureFunction2(17, _c2, ctx.width, ctx.height))("showLegend", ctx.legend)("legendOptions", ctx.legendOptions)("activeEntries", ctx.activeEntries)("animations", ctx.animations);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵattribute("id", ctx.clipPathId);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵattribute("width", ctx.dims.width + 10)("height", ctx.dims.height + 10)("transform", "translate(-5, -5)");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵattribute("transform", ctx.transform);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.xAxis);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.yAxis);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵattribute("clip-path", ctx.clipPath);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.results)("ngForTrackBy", ctx.trackBy);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.tooltipDisabled);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.timeline && ctx.scaleType != "ordinal");
    } }, directives: [ɵngcc1.ChartComponent, ɵngcc2.NgIf, ɵngcc2.NgForOf, ɵngcc3.XAxisComponent, ɵngcc4.YAxisComponent, ɵngcc5.AreaSeriesComponent, ɵngcc6.TooltipArea, ɵngcc7.CircleSeriesComponent, ɵngcc8.Timeline], styles: [".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;-webkit-transition:opacity .1s ease-in-out;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:0}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:0}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{-webkit-transition:opacity .1s ease-in-out;transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}"], encapsulation: 2, changeDetection: 0 });
var ɵAreaChartNormalizedComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(AreaChartNormalizedComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AreaChartNormalizedComponent, [{
        type: Component,
        args: [{
                selector: 'ngx-charts-area-chart-normalized',
                template: "\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [activeEntries]=\"activeEntries\"\n              [gradient]=\"gradient\"\n              normalized=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [showPercentage]=\"true\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                type=\"stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            normalized=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  ",
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                styles: [".ngx-charts{float:left;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;-webkit-transition:opacity .1s ease-in-out;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus{outline:0}.ngx-charts .arc.hidden,.ngx-charts .bar.hidden,.ngx-charts .card.hidden,.ngx-charts .cell.hidden{display:none}.ngx-charts g:focus{outline:0}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .polar-series-path.inactive{-webkit-transition:opacity .1s ease-in-out;transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}"]
            }]
    }], null, { hideCircles: [{
            type: HostListener,
            args: ['mouseleave']
        }], activeEntries: [{
            type: Input
        }], legend: [{
            type: Input
        }], legendTitle: [{
            type: Input
        }], legendPosition: [{
            type: Input
        }], xAxis: [{
            type: Input
        }], yAxis: [{
            type: Input
        }], showXAxisLabel: [{
            type: Input
        }], showYAxisLabel: [{
            type: Input
        }], xAxisLabel: [{
            type: Input
        }], yAxisLabel: [{
            type: Input
        }], timeline: [{
            type: Input
        }], gradient: [{
            type: Input
        }], showGridLines: [{
            type: Input
        }], curve: [{
            type: Input
        }], schemeType: [{
            type: Input
        }], trimXAxisTicks: [{
            type: Input
        }], trimYAxisTicks: [{
            type: Input
        }], rotateXAxisTicks: [{
            type: Input
        }], maxXAxisTickLength: [{
            type: Input
        }], maxYAxisTickLength: [{
            type: Input
        }], xAxisTickFormatting: [{
            type: Input
        }], yAxisTickFormatting: [{
            type: Input
        }], xAxisTicks: [{
            type: Input
        }], yAxisTicks: [{
            type: Input
        }], roundDomains: [{
            type: Input
        }], tooltipDisabled: [{
            type: Input
        }], activate: [{
            type: Output
        }], deactivate: [{
            type: Output
        }], tooltipTemplate: [{
            type: ContentChild,
            args: ['tooltipTemplate']
        }], seriesTooltipTemplate: [{
            type: ContentChild,
            args: ['seriesTooltipTemplate']
        }] }); })();
    return AreaChartNormalizedComponent;
}(BaseChartComponent));
export { AreaChartNormalizedComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNwcm8va3JpdHNhZGVlL1NWTi9DeWJlcnNvZnQvYXBleC9ub2RlX21vZHVsZXMvQHN3aW1sYW5lL25neC1jaGFydHMvZXNtNS9saWIvYXJlYS1jaGFydC9hcmVhLWNoYXJ0LW5vcm1hbGl6ZWQuY29tcG9uZW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBU0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0VBMFlvRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQVMvQiIsImZpbGUiOiJhcmVhLWNoYXJ0LW5vcm1hbGl6ZWQuY29tcG9uZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19kZWNvcmF0ZSwgX19leHRlbmRzLCBfX3JlYWQsIF9fc3ByZWFkLCBfX3ZhbHVlcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIEhvc3RMaXN0ZW5lciwgVmlld0VuY2Fwc3VsYXRpb24sIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb250ZW50Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHNjYWxlTGluZWFyLCBzY2FsZVBvaW50LCBzY2FsZVRpbWUgfSBmcm9tICdkMy1zY2FsZSc7XG5pbXBvcnQgeyBjdXJ2ZUxpbmVhciB9IGZyb20gJ2QzLXNoYXBlJztcbmltcG9ydCB7IGNhbGN1bGF0ZVZpZXdEaW1lbnNpb25zIH0gZnJvbSAnLi4vY29tbW9uL3ZpZXctZGltZW5zaW9ucy5oZWxwZXInO1xuaW1wb3J0IHsgQ29sb3JIZWxwZXIgfSBmcm9tICcuLi9jb21tb24vY29sb3IuaGVscGVyJztcbmltcG9ydCB7IEJhc2VDaGFydENvbXBvbmVudCB9IGZyb20gJy4uL2NvbW1vbi9iYXNlLWNoYXJ0LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBpZCB9IGZyb20gJy4uL3V0aWxzL2lkJztcbmltcG9ydCB7IGdldFVuaXF1ZVhEb21haW5WYWx1ZXMsIGdldFNjYWxlVHlwZSB9IGZyb20gJy4uL2NvbW1vbi9kb21haW4uaGVscGVyJztcbnZhciBBcmVhQ2hhcnROb3JtYWxpemVkQ29tcG9uZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBcmVhQ2hhcnROb3JtYWxpemVkQ29tcG9uZW50LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFyZWFDaGFydE5vcm1hbGl6ZWRDb21wb25lbnQoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5sZWdlbmQgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMubGVnZW5kVGl0bGUgPSAnTGVnZW5kJztcbiAgICAgICAgX3RoaXMubGVnZW5kUG9zaXRpb24gPSAncmlnaHQnO1xuICAgICAgICBfdGhpcy5zaG93R3JpZExpbmVzID0gdHJ1ZTtcbiAgICAgICAgX3RoaXMuY3VydmUgPSBjdXJ2ZUxpbmVhcjtcbiAgICAgICAgX3RoaXMuYWN0aXZlRW50cmllcyA9IFtdO1xuICAgICAgICBfdGhpcy50cmltWEF4aXNUaWNrcyA9IHRydWU7XG4gICAgICAgIF90aGlzLnRyaW1ZQXhpc1RpY2tzID0gdHJ1ZTtcbiAgICAgICAgX3RoaXMucm90YXRlWEF4aXNUaWNrcyA9IHRydWU7XG4gICAgICAgIF90aGlzLm1heFhBeGlzVGlja0xlbmd0aCA9IDE2O1xuICAgICAgICBfdGhpcy5tYXhZQXhpc1RpY2tMZW5ndGggPSAxNjtcbiAgICAgICAgX3RoaXMucm91bmREb21haW5zID0gZmFsc2U7XG4gICAgICAgIF90aGlzLnRvb2x0aXBEaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5hY3RpdmF0ZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgX3RoaXMuZGVhY3RpdmF0ZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgX3RoaXMubWFyZ2luID0gWzEwLCAyMCwgMTAsIDIwXTtcbiAgICAgICAgX3RoaXMueEF4aXNIZWlnaHQgPSAwO1xuICAgICAgICBfdGhpcy55QXhpc1dpZHRoID0gMDtcbiAgICAgICAgX3RoaXMudGltZWxpbmVIZWlnaHQgPSA1MDtcbiAgICAgICAgX3RoaXMudGltZWxpbmVQYWRkaW5nID0gMTA7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQXJlYUNoYXJ0Tm9ybWFsaXplZENvbXBvbmVudC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVwZGF0ZS5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLmRpbXMgPSBjYWxjdWxhdGVWaWV3RGltZW5zaW9ucyh7XG4gICAgICAgICAgICB3aWR0aDogdGhpcy53aWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogdGhpcy5oZWlnaHQsXG4gICAgICAgICAgICBtYXJnaW5zOiB0aGlzLm1hcmdpbixcbiAgICAgICAgICAgIHNob3dYQXhpczogdGhpcy54QXhpcyxcbiAgICAgICAgICAgIHNob3dZQXhpczogdGhpcy55QXhpcyxcbiAgICAgICAgICAgIHhBeGlzSGVpZ2h0OiB0aGlzLnhBeGlzSGVpZ2h0LFxuICAgICAgICAgICAgeUF4aXNXaWR0aDogdGhpcy55QXhpc1dpZHRoLFxuICAgICAgICAgICAgc2hvd1hMYWJlbDogdGhpcy5zaG93WEF4aXNMYWJlbCxcbiAgICAgICAgICAgIHNob3dZTGFiZWw6IHRoaXMuc2hvd1lBeGlzTGFiZWwsXG4gICAgICAgICAgICBzaG93TGVnZW5kOiB0aGlzLmxlZ2VuZCxcbiAgICAgICAgICAgIGxlZ2VuZFR5cGU6IHRoaXMuc2NoZW1lVHlwZSxcbiAgICAgICAgICAgIGxlZ2VuZFBvc2l0aW9uOiB0aGlzLmxlZ2VuZFBvc2l0aW9uXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodGhpcy50aW1lbGluZSkge1xuICAgICAgICAgICAgdGhpcy5kaW1zLmhlaWdodCAtPSB0aGlzLnRpbWVsaW5lSGVpZ2h0ICsgdGhpcy5tYXJnaW5bMl0gKyB0aGlzLnRpbWVsaW5lUGFkZGluZztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnhEb21haW4gPSB0aGlzLmdldFhEb21haW4oKTtcbiAgICAgICAgaWYgKHRoaXMuZmlsdGVyZWREb21haW4pIHtcbiAgICAgICAgICAgIHRoaXMueERvbWFpbiA9IHRoaXMuZmlsdGVyZWREb21haW47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy55RG9tYWluID0gdGhpcy5nZXRZRG9tYWluKCk7XG4gICAgICAgIHRoaXMuc2VyaWVzRG9tYWluID0gdGhpcy5nZXRTZXJpZXNEb21haW4oKTtcbiAgICAgICAgdGhpcy54U2NhbGUgPSB0aGlzLmdldFhTY2FsZSh0aGlzLnhEb21haW4sIHRoaXMuZGltcy53aWR0aCk7XG4gICAgICAgIHRoaXMueVNjYWxlID0gdGhpcy5nZXRZU2NhbGUodGhpcy55RG9tYWluLCB0aGlzLmRpbXMuaGVpZ2h0KTtcbiAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgdmFyIGVfMSwgX2EsIGVfMiwgX2I7XG4gICAgICAgICAgICB2YXIgdmFsID0gdGhpc18xLnhTZXRbaV07XG4gICAgICAgICAgICB2YXIgZDAgPSAwO1xuICAgICAgICAgICAgdmFyIHRvdGFsID0gMDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2MgPSAoZV8xID0gdm9pZCAwLCBfX3ZhbHVlcyh0aGlzXzEucmVzdWx0cykpLCBfZCA9IF9jLm5leHQoKTsgIV9kLmRvbmU7IF9kID0gX2MubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBncm91cCA9IF9kLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IGdyb3VwLnNlcmllcy5maW5kKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IGl0ZW0ubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiID0gdmFsO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLnNjYWxlVHlwZSA9PT0gJ3RpbWUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IGEudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIgPSBiLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhID09PSBiO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsICs9IGQudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9kICYmICFfZC5kb25lICYmIChfYSA9IF9jLnJldHVybikpIF9hLmNhbGwoX2MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9lID0gKGVfMiA9IHZvaWQgMCwgX192YWx1ZXModGhpc18xLnJlc3VsdHMpKSwgX2YgPSBfZS5uZXh0KCk7ICFfZi5kb25lOyBfZiA9IF9lLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZ3JvdXAgPSBfZi52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSBncm91cC5zZXJpZXMuZmluZChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBpdGVtLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYiA9IHZhbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5zY2FsZVR5cGUgPT09ICd0aW1lJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBhLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiID0gYi52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYSA9PT0gYjtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLmQwID0gZDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLmQxID0gZDAgKyBkLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZDAgKz0gZC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogdmFsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQwOiBkMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkMTogZDBcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cC5zZXJpZXMucHVzaChkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodG90YWwgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLmQwID0gKGQuZDAgKiAxMDApIC8gdG90YWw7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLmQxID0gKGQuZDEgKiAxMDApIC8gdG90YWw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLmQwID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQuZDEgPSAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVfMl8xKSB7IGVfMiA9IHsgZXJyb3I6IGVfMl8xIH07IH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfZiAmJiAhX2YuZG9uZSAmJiAoX2IgPSBfZS5yZXR1cm4pKSBfYi5jYWxsKF9lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzIpIHRocm93IGVfMi5lcnJvcjsgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgdGhpc18xID0gdGhpcztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnhTZXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIF9sb29wXzEoaSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cGRhdGVUaW1lbGluZSgpO1xuICAgICAgICB0aGlzLnNldENvbG9ycygpO1xuICAgICAgICB0aGlzLmxlZ2VuZE9wdGlvbnMgPSB0aGlzLmdldExlZ2VuZE9wdGlvbnMoKTtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm0gPSBcInRyYW5zbGF0ZShcIiArIHRoaXMuZGltcy54T2Zmc2V0ICsgXCIgLCBcIiArIHRoaXMubWFyZ2luWzBdICsgXCIpXCI7XG4gICAgICAgIHRoaXMuY2xpcFBhdGhJZCA9ICdjbGlwJyArIGlkKCkudG9TdHJpbmcoKTtcbiAgICAgICAgdGhpcy5jbGlwUGF0aCA9IFwidXJsKCNcIiArIHRoaXMuY2xpcFBhdGhJZCArIFwiKVwiO1xuICAgIH07XG4gICAgQXJlYUNoYXJ0Tm9ybWFsaXplZENvbXBvbmVudC5wcm90b3R5cGUudXBkYXRlVGltZWxpbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnRpbWVsaW5lKSB7XG4gICAgICAgICAgICB0aGlzLnRpbWVsaW5lV2lkdGggPSB0aGlzLmRpbXMud2lkdGg7XG4gICAgICAgICAgICB0aGlzLnRpbWVsaW5lWERvbWFpbiA9IHRoaXMuZ2V0WERvbWFpbigpO1xuICAgICAgICAgICAgdGhpcy50aW1lbGluZVhTY2FsZSA9IHRoaXMuZ2V0WFNjYWxlKHRoaXMudGltZWxpbmVYRG9tYWluLCB0aGlzLnRpbWVsaW5lV2lkdGgpO1xuICAgICAgICAgICAgdGhpcy50aW1lbGluZVlTY2FsZSA9IHRoaXMuZ2V0WVNjYWxlKHRoaXMueURvbWFpbiwgdGhpcy50aW1lbGluZUhlaWdodCk7XG4gICAgICAgICAgICB0aGlzLnRpbWVsaW5lVHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUoXCIgKyB0aGlzLmRpbXMueE9mZnNldCArIFwiLCBcIiArIC10aGlzLm1hcmdpblsyXSArIFwiKVwiO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBcmVhQ2hhcnROb3JtYWxpemVkQ29tcG9uZW50LnByb3RvdHlwZS5nZXRYRG9tYWluID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdmFsdWVzID0gZ2V0VW5pcXVlWERvbWFpblZhbHVlcyh0aGlzLnJlc3VsdHMpO1xuICAgICAgICB0aGlzLnNjYWxlVHlwZSA9IGdldFNjYWxlVHlwZSh2YWx1ZXMpO1xuICAgICAgICB2YXIgZG9tYWluID0gW107XG4gICAgICAgIGlmICh0aGlzLnNjYWxlVHlwZSA9PT0gJ3RpbWUnKSB7XG4gICAgICAgICAgICB2YXIgbWluID0gTWF0aC5taW4uYXBwbHkoTWF0aCwgX19zcHJlYWQodmFsdWVzKSk7XG4gICAgICAgICAgICB2YXIgbWF4ID0gTWF0aC5tYXguYXBwbHkoTWF0aCwgX19zcHJlYWQodmFsdWVzKSk7XG4gICAgICAgICAgICBkb21haW4gPSBbbmV3IERhdGUobWluKSwgbmV3IERhdGUobWF4KV07XG4gICAgICAgICAgICB0aGlzLnhTZXQgPSBfX3NwcmVhZCh2YWx1ZXMpLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgICB2YXIgYURhdGUgPSBhLmdldFRpbWUoKTtcbiAgICAgICAgICAgICAgICB2YXIgYkRhdGUgPSBiLmdldFRpbWUoKTtcbiAgICAgICAgICAgICAgICBpZiAoYURhdGUgPiBiRGF0ZSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgaWYgKGJEYXRlID4gYURhdGUpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuc2NhbGVUeXBlID09PSAnbGluZWFyJykge1xuICAgICAgICAgICAgdmFsdWVzID0gdmFsdWVzLm1hcChmdW5jdGlvbiAodikgeyByZXR1cm4gTnVtYmVyKHYpOyB9KTtcbiAgICAgICAgICAgIHZhciBtaW4gPSBNYXRoLm1pbi5hcHBseShNYXRoLCBfX3NwcmVhZCh2YWx1ZXMpKTtcbiAgICAgICAgICAgIHZhciBtYXggPSBNYXRoLm1heC5hcHBseShNYXRoLCBfX3NwcmVhZCh2YWx1ZXMpKTtcbiAgICAgICAgICAgIGRvbWFpbiA9IFttaW4sIG1heF07XG4gICAgICAgICAgICAvLyBVc2UgY29tcGFyZSBmdW5jdGlvbiB0byBzb3J0IG51bWJlcnMgbnVtZXJpY2FsbHlcbiAgICAgICAgICAgIHRoaXMueFNldCA9IF9fc3ByZWFkKHZhbHVlcykuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYSAtIGI7IH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZG9tYWluID0gdmFsdWVzO1xuICAgICAgICAgICAgdGhpcy54U2V0ID0gdmFsdWVzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkb21haW47XG4gICAgfTtcbiAgICBBcmVhQ2hhcnROb3JtYWxpemVkQ29tcG9uZW50LnByb3RvdHlwZS5nZXRZRG9tYWluID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gWzAsIDEwMF07XG4gICAgfTtcbiAgICBBcmVhQ2hhcnROb3JtYWxpemVkQ29tcG9uZW50LnByb3RvdHlwZS5nZXRTZXJpZXNEb21haW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlc3VsdHMubWFwKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLm5hbWU7IH0pO1xuICAgIH07XG4gICAgQXJlYUNoYXJ0Tm9ybWFsaXplZENvbXBvbmVudC5wcm90b3R5cGUuZ2V0WFNjYWxlID0gZnVuY3Rpb24gKGRvbWFpbiwgd2lkdGgpIHtcbiAgICAgICAgdmFyIHNjYWxlO1xuICAgICAgICBpZiAodGhpcy5zY2FsZVR5cGUgPT09ICd0aW1lJykge1xuICAgICAgICAgICAgc2NhbGUgPSBzY2FsZVRpbWUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnNjYWxlVHlwZSA9PT0gJ2xpbmVhcicpIHtcbiAgICAgICAgICAgIHNjYWxlID0gc2NhbGVMaW5lYXIoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnNjYWxlVHlwZSA9PT0gJ29yZGluYWwnKSB7XG4gICAgICAgICAgICBzY2FsZSA9IHNjYWxlUG9pbnQoKS5wYWRkaW5nKDAuMSk7XG4gICAgICAgIH1cbiAgICAgICAgc2NhbGUucmFuZ2UoWzAsIHdpZHRoXSkuZG9tYWluKGRvbWFpbik7XG4gICAgICAgIHJldHVybiB0aGlzLnJvdW5kRG9tYWlucyA/IHNjYWxlLm5pY2UoKSA6IHNjYWxlO1xuICAgIH07XG4gICAgQXJlYUNoYXJ0Tm9ybWFsaXplZENvbXBvbmVudC5wcm90b3R5cGUuZ2V0WVNjYWxlID0gZnVuY3Rpb24gKGRvbWFpbiwgaGVpZ2h0KSB7XG4gICAgICAgIHZhciBzY2FsZSA9IHNjYWxlTGluZWFyKClcbiAgICAgICAgICAgIC5yYW5nZShbaGVpZ2h0LCAwXSlcbiAgICAgICAgICAgIC5kb21haW4oZG9tYWluKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucm91bmREb21haW5zID8gc2NhbGUubmljZSgpIDogc2NhbGU7XG4gICAgfTtcbiAgICBBcmVhQ2hhcnROb3JtYWxpemVkQ29tcG9uZW50LnByb3RvdHlwZS51cGRhdGVEb21haW4gPSBmdW5jdGlvbiAoZG9tYWluKSB7XG4gICAgICAgIHRoaXMuZmlsdGVyZWREb21haW4gPSBkb21haW47XG4gICAgICAgIHRoaXMueERvbWFpbiA9IHRoaXMuZmlsdGVyZWREb21haW47XG4gICAgICAgIHRoaXMueFNjYWxlID0gdGhpcy5nZXRYU2NhbGUodGhpcy54RG9tYWluLCB0aGlzLmRpbXMud2lkdGgpO1xuICAgIH07XG4gICAgQXJlYUNoYXJ0Tm9ybWFsaXplZENvbXBvbmVudC5wcm90b3R5cGUudXBkYXRlSG92ZXJlZFZlcnRpY2FsID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgdGhpcy5ob3ZlcmVkVmVydGljYWwgPSBpdGVtLnZhbHVlO1xuICAgICAgICB0aGlzLmRlYWN0aXZhdGVBbGwoKTtcbiAgICB9O1xuICAgIEFyZWFDaGFydE5vcm1hbGl6ZWRDb21wb25lbnQucHJvdG90eXBlLmhpZGVDaXJjbGVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmhvdmVyZWRWZXJ0aWNhbCA9IG51bGw7XG4gICAgICAgIHRoaXMuZGVhY3RpdmF0ZUFsbCgpO1xuICAgIH07XG4gICAgQXJlYUNoYXJ0Tm9ybWFsaXplZENvbXBvbmVudC5wcm90b3R5cGUub25DbGljayA9IGZ1bmN0aW9uIChkYXRhLCBzZXJpZXMpIHtcbiAgICAgICAgaWYgKHNlcmllcykge1xuICAgICAgICAgICAgZGF0YS5zZXJpZXMgPSBzZXJpZXMubmFtZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNlbGVjdC5lbWl0KGRhdGEpO1xuICAgIH07XG4gICAgQXJlYUNoYXJ0Tm9ybWFsaXplZENvbXBvbmVudC5wcm90b3R5cGUudHJhY2tCeSA9IGZ1bmN0aW9uIChpbmRleCwgaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbS5uYW1lO1xuICAgIH07XG4gICAgQXJlYUNoYXJ0Tm9ybWFsaXplZENvbXBvbmVudC5wcm90b3R5cGUuc2V0Q29sb3JzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZG9tYWluO1xuICAgICAgICBpZiAodGhpcy5zY2hlbWVUeXBlID09PSAnb3JkaW5hbCcpIHtcbiAgICAgICAgICAgIGRvbWFpbiA9IHRoaXMuc2VyaWVzRG9tYWluO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZG9tYWluID0gdGhpcy55RG9tYWluO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29sb3JzID0gbmV3IENvbG9ySGVscGVyKHRoaXMuc2NoZW1lLCB0aGlzLnNjaGVtZVR5cGUsIGRvbWFpbiwgdGhpcy5jdXN0b21Db2xvcnMpO1xuICAgIH07XG4gICAgQXJlYUNoYXJ0Tm9ybWFsaXplZENvbXBvbmVudC5wcm90b3R5cGUuZ2V0TGVnZW5kT3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9wdHMgPSB7XG4gICAgICAgICAgICBzY2FsZVR5cGU6IHRoaXMuc2NoZW1lVHlwZSxcbiAgICAgICAgICAgIGNvbG9yczogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZG9tYWluOiBbXSxcbiAgICAgICAgICAgIHRpdGxlOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBwb3NpdGlvbjogdGhpcy5sZWdlbmRQb3NpdGlvblxuICAgICAgICB9O1xuICAgICAgICBpZiAob3B0cy5zY2FsZVR5cGUgPT09ICdvcmRpbmFsJykge1xuICAgICAgICAgICAgb3B0cy5kb21haW4gPSB0aGlzLnNlcmllc0RvbWFpbjtcbiAgICAgICAgICAgIG9wdHMuY29sb3JzID0gdGhpcy5jb2xvcnM7XG4gICAgICAgICAgICBvcHRzLnRpdGxlID0gdGhpcy5sZWdlbmRUaXRsZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9wdHMuZG9tYWluID0gdGhpcy55RG9tYWluO1xuICAgICAgICAgICAgb3B0cy5jb2xvcnMgPSB0aGlzLmNvbG9ycy5zY2FsZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3B0cztcbiAgICB9O1xuICAgIEFyZWFDaGFydE5vcm1hbGl6ZWRDb21wb25lbnQucHJvdG90eXBlLnVwZGF0ZVlBeGlzV2lkdGggPSBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIHdpZHRoID0gX2Eud2lkdGg7XG4gICAgICAgIHRoaXMueUF4aXNXaWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIH07XG4gICAgQXJlYUNoYXJ0Tm9ybWFsaXplZENvbXBvbmVudC5wcm90b3R5cGUudXBkYXRlWEF4aXNIZWlnaHQgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIGhlaWdodCA9IF9hLmhlaWdodDtcbiAgICAgICAgdGhpcy54QXhpc0hlaWdodCA9IGhlaWdodDtcbiAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICB9O1xuICAgIEFyZWFDaGFydE5vcm1hbGl6ZWRDb21wb25lbnQucHJvdG90eXBlLm9uQWN0aXZhdGUgPSBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICB2YXIgaWR4ID0gdGhpcy5hY3RpdmVFbnRyaWVzLmZpbmRJbmRleChmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgcmV0dXJuIGQubmFtZSA9PT0gaXRlbS5uYW1lICYmIGQudmFsdWUgPT09IGl0ZW0udmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoaWR4ID4gLTEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFjdGl2ZUVudHJpZXMgPSBfX3NwcmVhZChbaXRlbV0sIHRoaXMuYWN0aXZlRW50cmllcyk7XG4gICAgICAgIHRoaXMuYWN0aXZhdGUuZW1pdCh7IHZhbHVlOiBpdGVtLCBlbnRyaWVzOiB0aGlzLmFjdGl2ZUVudHJpZXMgfSk7XG4gICAgfTtcbiAgICBBcmVhQ2hhcnROb3JtYWxpemVkQ29tcG9uZW50LnByb3RvdHlwZS5vbkRlYWN0aXZhdGUgPSBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICB2YXIgaWR4ID0gdGhpcy5hY3RpdmVFbnRyaWVzLmZpbmRJbmRleChmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgcmV0dXJuIGQubmFtZSA9PT0gaXRlbS5uYW1lICYmIGQudmFsdWUgPT09IGl0ZW0udmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmFjdGl2ZUVudHJpZXMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgIHRoaXMuYWN0aXZlRW50cmllcyA9IF9fc3ByZWFkKHRoaXMuYWN0aXZlRW50cmllcyk7XG4gICAgICAgIHRoaXMuZGVhY3RpdmF0ZS5lbWl0KHsgdmFsdWU6IGl0ZW0sIGVudHJpZXM6IHRoaXMuYWN0aXZlRW50cmllcyB9KTtcbiAgICB9O1xuICAgIEFyZWFDaGFydE5vcm1hbGl6ZWRDb21wb25lbnQucHJvdG90eXBlLmRlYWN0aXZhdGVBbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlXzMsIF9hO1xuICAgICAgICB0aGlzLmFjdGl2ZUVudHJpZXMgPSBfX3NwcmVhZCh0aGlzLmFjdGl2ZUVudHJpZXMpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yICh2YXIgX2IgPSBfX3ZhbHVlcyh0aGlzLmFjdGl2ZUVudHJpZXMpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVudHJ5ID0gX2MudmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy5kZWFjdGl2YXRlLmVtaXQoeyB2YWx1ZTogZW50cnksIGVudHJpZXM6IFtdIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlXzNfMSkgeyBlXzMgPSB7IGVycm9yOiBlXzNfMSB9OyB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMykgdGhyb3cgZV8zLmVycm9yOyB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hY3RpdmVFbnRyaWVzID0gW107XG4gICAgfTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgSW5wdXQoKVxuICAgIF0sIEFyZWFDaGFydE5vcm1hbGl6ZWRDb21wb25lbnQucHJvdG90eXBlLCBcImxlZ2VuZFwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBJbnB1dCgpXG4gICAgXSwgQXJlYUNoYXJ0Tm9ybWFsaXplZENvbXBvbmVudC5wcm90b3R5cGUsIFwibGVnZW5kVGl0bGVcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgSW5wdXQoKVxuICAgIF0sIEFyZWFDaGFydE5vcm1hbGl6ZWRDb21wb25lbnQucHJvdG90eXBlLCBcImxlZ2VuZFBvc2l0aW9uXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIElucHV0KClcbiAgICBdLCBBcmVhQ2hhcnROb3JtYWxpemVkQ29tcG9uZW50LnByb3RvdHlwZSwgXCJ4QXhpc1wiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBJbnB1dCgpXG4gICAgXSwgQXJlYUNoYXJ0Tm9ybWFsaXplZENvbXBvbmVudC5wcm90b3R5cGUsIFwieUF4aXNcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgSW5wdXQoKVxuICAgIF0sIEFyZWFDaGFydE5vcm1hbGl6ZWRDb21wb25lbnQucHJvdG90eXBlLCBcInNob3dYQXhpc0xhYmVsXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIElucHV0KClcbiAgICBdLCBBcmVhQ2hhcnROb3JtYWxpemVkQ29tcG9uZW50LnByb3RvdHlwZSwgXCJzaG93WUF4aXNMYWJlbFwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBJbnB1dCgpXG4gICAgXSwgQXJlYUNoYXJ0Tm9ybWFsaXplZENvbXBvbmVudC5wcm90b3R5cGUsIFwieEF4aXNMYWJlbFwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBJbnB1dCgpXG4gICAgXSwgQXJlYUNoYXJ0Tm9ybWFsaXplZENvbXBvbmVudC5wcm90b3R5cGUsIFwieUF4aXNMYWJlbFwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBJbnB1dCgpXG4gICAgXSwgQXJlYUNoYXJ0Tm9ybWFsaXplZENvbXBvbmVudC5wcm90b3R5cGUsIFwidGltZWxpbmVcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgSW5wdXQoKVxuICAgIF0sIEFyZWFDaGFydE5vcm1hbGl6ZWRDb21wb25lbnQucHJvdG90eXBlLCBcImdyYWRpZW50XCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIElucHV0KClcbiAgICBdLCBBcmVhQ2hhcnROb3JtYWxpemVkQ29tcG9uZW50LnByb3RvdHlwZSwgXCJzaG93R3JpZExpbmVzXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIElucHV0KClcbiAgICBdLCBBcmVhQ2hhcnROb3JtYWxpemVkQ29tcG9uZW50LnByb3RvdHlwZSwgXCJjdXJ2ZVwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBJbnB1dCgpXG4gICAgXSwgQXJlYUNoYXJ0Tm9ybWFsaXplZENvbXBvbmVudC5wcm90b3R5cGUsIFwiYWN0aXZlRW50cmllc1wiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBJbnB1dCgpXG4gICAgXSwgQXJlYUNoYXJ0Tm9ybWFsaXplZENvbXBvbmVudC5wcm90b3R5cGUsIFwic2NoZW1lVHlwZVwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBJbnB1dCgpXG4gICAgXSwgQXJlYUNoYXJ0Tm9ybWFsaXplZENvbXBvbmVudC5wcm90b3R5cGUsIFwidHJpbVhBeGlzVGlja3NcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgSW5wdXQoKVxuICAgIF0sIEFyZWFDaGFydE5vcm1hbGl6ZWRDb21wb25lbnQucHJvdG90eXBlLCBcInRyaW1ZQXhpc1RpY2tzXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIElucHV0KClcbiAgICBdLCBBcmVhQ2hhcnROb3JtYWxpemVkQ29tcG9uZW50LnByb3RvdHlwZSwgXCJyb3RhdGVYQXhpc1RpY2tzXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIElucHV0KClcbiAgICBdLCBBcmVhQ2hhcnROb3JtYWxpemVkQ29tcG9uZW50LnByb3RvdHlwZSwgXCJtYXhYQXhpc1RpY2tMZW5ndGhcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgSW5wdXQoKVxuICAgIF0sIEFyZWFDaGFydE5vcm1hbGl6ZWRDb21wb25lbnQucHJvdG90eXBlLCBcIm1heFlBeGlzVGlja0xlbmd0aFwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBJbnB1dCgpXG4gICAgXSwgQXJlYUNoYXJ0Tm9ybWFsaXplZENvbXBvbmVudC5wcm90b3R5cGUsIFwieEF4aXNUaWNrRm9ybWF0dGluZ1wiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBJbnB1dCgpXG4gICAgXSwgQXJlYUNoYXJ0Tm9ybWFsaXplZENvbXBvbmVudC5wcm90b3R5cGUsIFwieUF4aXNUaWNrRm9ybWF0dGluZ1wiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBJbnB1dCgpXG4gICAgXSwgQXJlYUNoYXJ0Tm9ybWFsaXplZENvbXBvbmVudC5wcm90b3R5cGUsIFwieEF4aXNUaWNrc1wiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBJbnB1dCgpXG4gICAgXSwgQXJlYUNoYXJ0Tm9ybWFsaXplZENvbXBvbmVudC5wcm90b3R5cGUsIFwieUF4aXNUaWNrc1wiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBJbnB1dCgpXG4gICAgXSwgQXJlYUNoYXJ0Tm9ybWFsaXplZENvbXBvbmVudC5wcm90b3R5cGUsIFwicm91bmREb21haW5zXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIElucHV0KClcbiAgICBdLCBBcmVhQ2hhcnROb3JtYWxpemVkQ29tcG9uZW50LnByb3RvdHlwZSwgXCJ0b29sdGlwRGlzYWJsZWRcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgT3V0cHV0KClcbiAgICBdLCBBcmVhQ2hhcnROb3JtYWxpemVkQ29tcG9uZW50LnByb3RvdHlwZSwgXCJhY3RpdmF0ZVwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBPdXRwdXQoKVxuICAgIF0sIEFyZWFDaGFydE5vcm1hbGl6ZWRDb21wb25lbnQucHJvdG90eXBlLCBcImRlYWN0aXZhdGVcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgQ29udGVudENoaWxkKCd0b29sdGlwVGVtcGxhdGUnKVxuICAgIF0sIEFyZWFDaGFydE5vcm1hbGl6ZWRDb21wb25lbnQucHJvdG90eXBlLCBcInRvb2x0aXBUZW1wbGF0ZVwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBDb250ZW50Q2hpbGQoJ3Nlcmllc1Rvb2x0aXBUZW1wbGF0ZScpXG4gICAgXSwgQXJlYUNoYXJ0Tm9ybWFsaXplZENvbXBvbmVudC5wcm90b3R5cGUsIFwic2VyaWVzVG9vbHRpcFRlbXBsYXRlXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIEhvc3RMaXN0ZW5lcignbW91c2VsZWF2ZScpXG4gICAgXSwgQXJlYUNoYXJ0Tm9ybWFsaXplZENvbXBvbmVudC5wcm90b3R5cGUsIFwiaGlkZUNpcmNsZXNcIiwgbnVsbCk7XG4gICAgQXJlYUNoYXJ0Tm9ybWFsaXplZENvbXBvbmVudCA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBDb21wb25lbnQoe1xuICAgICAgICAgICAgc2VsZWN0b3I6ICduZ3gtY2hhcnRzLWFyZWEtY2hhcnQtbm9ybWFsaXplZCcsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogXCJcXG4gICAgPG5neC1jaGFydHMtY2hhcnRcXG4gICAgICBbdmlld109XFxcIlt3aWR0aCwgaGVpZ2h0XVxcXCJcXG4gICAgICBbc2hvd0xlZ2VuZF09XFxcImxlZ2VuZFxcXCJcXG4gICAgICBbbGVnZW5kT3B0aW9uc109XFxcImxlZ2VuZE9wdGlvbnNcXFwiXFxuICAgICAgW2FjdGl2ZUVudHJpZXNdPVxcXCJhY3RpdmVFbnRyaWVzXFxcIlxcbiAgICAgIFthbmltYXRpb25zXT1cXFwiYW5pbWF0aW9uc1xcXCJcXG4gICAgICAobGVnZW5kTGFiZWxDbGljayk9XFxcIm9uQ2xpY2soJGV2ZW50KVxcXCJcXG4gICAgICAobGVnZW5kTGFiZWxBY3RpdmF0ZSk9XFxcIm9uQWN0aXZhdGUoJGV2ZW50KVxcXCJcXG4gICAgICAobGVnZW5kTGFiZWxEZWFjdGl2YXRlKT1cXFwib25EZWFjdGl2YXRlKCRldmVudClcXFwiXFxuICAgID5cXG4gICAgICA8c3ZnOmRlZnM+XFxuICAgICAgICA8c3ZnOmNsaXBQYXRoIFthdHRyLmlkXT1cXFwiY2xpcFBhdGhJZFxcXCI+XFxuICAgICAgICAgIDxzdmc6cmVjdFxcbiAgICAgICAgICAgIFthdHRyLndpZHRoXT1cXFwiZGltcy53aWR0aCArIDEwXFxcIlxcbiAgICAgICAgICAgIFthdHRyLmhlaWdodF09XFxcImRpbXMuaGVpZ2h0ICsgMTBcXFwiXFxuICAgICAgICAgICAgW2F0dHIudHJhbnNmb3JtXT1cXFwiJ3RyYW5zbGF0ZSgtNSwgLTUpJ1xcXCJcXG4gICAgICAgICAgLz5cXG4gICAgICAgIDwvc3ZnOmNsaXBQYXRoPlxcbiAgICAgIDwvc3ZnOmRlZnM+XFxuICAgICAgPHN2ZzpnIFthdHRyLnRyYW5zZm9ybV09XFxcInRyYW5zZm9ybVxcXCIgY2xhc3M9XFxcImFyZWEtY2hhcnQgY2hhcnRcXFwiPlxcbiAgICAgICAgPHN2ZzpnXFxuICAgICAgICAgIG5neC1jaGFydHMteC1heGlzXFxuICAgICAgICAgICpuZ0lmPVxcXCJ4QXhpc1xcXCJcXG4gICAgICAgICAgW3hTY2FsZV09XFxcInhTY2FsZVxcXCJcXG4gICAgICAgICAgW2RpbXNdPVxcXCJkaW1zXFxcIlxcbiAgICAgICAgICBbc2hvd0dyaWRMaW5lc109XFxcInNob3dHcmlkTGluZXNcXFwiXFxuICAgICAgICAgIFtzaG93TGFiZWxdPVxcXCJzaG93WEF4aXNMYWJlbFxcXCJcXG4gICAgICAgICAgW2xhYmVsVGV4dF09XFxcInhBeGlzTGFiZWxcXFwiXFxuICAgICAgICAgIFt0cmltVGlja3NdPVxcXCJ0cmltWEF4aXNUaWNrc1xcXCJcXG4gICAgICAgICAgW3JvdGF0ZVRpY2tzXT1cXFwicm90YXRlWEF4aXNUaWNrc1xcXCJcXG4gICAgICAgICAgW21heFRpY2tMZW5ndGhdPVxcXCJtYXhYQXhpc1RpY2tMZW5ndGhcXFwiXFxuICAgICAgICAgIFt0aWNrRm9ybWF0dGluZ109XFxcInhBeGlzVGlja0Zvcm1hdHRpbmdcXFwiXFxuICAgICAgICAgIFt0aWNrc109XFxcInhBeGlzVGlja3NcXFwiXFxuICAgICAgICAgIChkaW1lbnNpb25zQ2hhbmdlZCk9XFxcInVwZGF0ZVhBeGlzSGVpZ2h0KCRldmVudClcXFwiXFxuICAgICAgICA+PC9zdmc6Zz5cXG4gICAgICAgIDxzdmc6Z1xcbiAgICAgICAgICBuZ3gtY2hhcnRzLXktYXhpc1xcbiAgICAgICAgICAqbmdJZj1cXFwieUF4aXNcXFwiXFxuICAgICAgICAgIFt5U2NhbGVdPVxcXCJ5U2NhbGVcXFwiXFxuICAgICAgICAgIFtkaW1zXT1cXFwiZGltc1xcXCJcXG4gICAgICAgICAgW3Nob3dHcmlkTGluZXNdPVxcXCJzaG93R3JpZExpbmVzXFxcIlxcbiAgICAgICAgICBbc2hvd0xhYmVsXT1cXFwic2hvd1lBeGlzTGFiZWxcXFwiXFxuICAgICAgICAgIFtsYWJlbFRleHRdPVxcXCJ5QXhpc0xhYmVsXFxcIlxcbiAgICAgICAgICBbdHJpbVRpY2tzXT1cXFwidHJpbVlBeGlzVGlja3NcXFwiXFxuICAgICAgICAgIFttYXhUaWNrTGVuZ3RoXT1cXFwibWF4WUF4aXNUaWNrTGVuZ3RoXFxcIlxcbiAgICAgICAgICBbdGlja0Zvcm1hdHRpbmddPVxcXCJ5QXhpc1RpY2tGb3JtYXR0aW5nXFxcIlxcbiAgICAgICAgICBbdGlja3NdPVxcXCJ5QXhpc1RpY2tzXFxcIlxcbiAgICAgICAgICAoZGltZW5zaW9uc0NoYW5nZWQpPVxcXCJ1cGRhdGVZQXhpc1dpZHRoKCRldmVudClcXFwiXFxuICAgICAgICA+PC9zdmc6Zz5cXG4gICAgICAgIDxzdmc6ZyBbYXR0ci5jbGlwLXBhdGhdPVxcXCJjbGlwUGF0aFxcXCI+XFxuICAgICAgICAgIDxzdmc6ZyAqbmdGb3I9XFxcImxldCBzZXJpZXMgb2YgcmVzdWx0czsgdHJhY2tCeTogdHJhY2tCeVxcXCI+XFxuICAgICAgICAgICAgPHN2ZzpnXFxuICAgICAgICAgICAgICBuZ3gtY2hhcnRzLWFyZWEtc2VyaWVzXFxuICAgICAgICAgICAgICBbeFNjYWxlXT1cXFwieFNjYWxlXFxcIlxcbiAgICAgICAgICAgICAgW3lTY2FsZV09XFxcInlTY2FsZVxcXCJcXG4gICAgICAgICAgICAgIFtjb2xvcnNdPVxcXCJjb2xvcnNcXFwiXFxuICAgICAgICAgICAgICBbZGF0YV09XFxcInNlcmllc1xcXCJcXG4gICAgICAgICAgICAgIFtzY2FsZVR5cGVdPVxcXCJzY2FsZVR5cGVcXFwiXFxuICAgICAgICAgICAgICBbYWN0aXZlRW50cmllc109XFxcImFjdGl2ZUVudHJpZXNcXFwiXFxuICAgICAgICAgICAgICBbZ3JhZGllbnRdPVxcXCJncmFkaWVudFxcXCJcXG4gICAgICAgICAgICAgIG5vcm1hbGl6ZWQ9XFxcInRydWVcXFwiXFxuICAgICAgICAgICAgICBbY3VydmVdPVxcXCJjdXJ2ZVxcXCJcXG4gICAgICAgICAgICAgIFthbmltYXRpb25zXT1cXFwiYW5pbWF0aW9uc1xcXCJcXG4gICAgICAgICAgICAvPlxcbiAgICAgICAgICA8L3N2ZzpnPlxcblxcbiAgICAgICAgICA8c3ZnOmcgKm5nSWY9XFxcIiF0b29sdGlwRGlzYWJsZWRcXFwiIChtb3VzZWxlYXZlKT1cXFwiaGlkZUNpcmNsZXMoKVxcXCI+XFxuICAgICAgICAgICAgPHN2ZzpnXFxuICAgICAgICAgICAgICBuZ3gtY2hhcnRzLXRvb2x0aXAtYXJlYVxcbiAgICAgICAgICAgICAgW2RpbXNdPVxcXCJkaW1zXFxcIlxcbiAgICAgICAgICAgICAgW3hTZXRdPVxcXCJ4U2V0XFxcIlxcbiAgICAgICAgICAgICAgW3hTY2FsZV09XFxcInhTY2FsZVxcXCJcXG4gICAgICAgICAgICAgIFt5U2NhbGVdPVxcXCJ5U2NhbGVcXFwiXFxuICAgICAgICAgICAgICBbcmVzdWx0c109XFxcInJlc3VsdHNcXFwiXFxuICAgICAgICAgICAgICBbY29sb3JzXT1cXFwiY29sb3JzXFxcIlxcbiAgICAgICAgICAgICAgW3Nob3dQZXJjZW50YWdlXT1cXFwidHJ1ZVxcXCJcXG4gICAgICAgICAgICAgIFt0b29sdGlwRGlzYWJsZWRdPVxcXCJ0b29sdGlwRGlzYWJsZWRcXFwiXFxuICAgICAgICAgICAgICBbdG9vbHRpcFRlbXBsYXRlXT1cXFwic2VyaWVzVG9vbHRpcFRlbXBsYXRlXFxcIlxcbiAgICAgICAgICAgICAgKGhvdmVyKT1cXFwidXBkYXRlSG92ZXJlZFZlcnRpY2FsKCRldmVudClcXFwiXFxuICAgICAgICAgICAgLz5cXG5cXG4gICAgICAgICAgICA8c3ZnOmcgKm5nRm9yPVxcXCJsZXQgc2VyaWVzIG9mIHJlc3VsdHNcXFwiPlxcbiAgICAgICAgICAgICAgPHN2ZzpnXFxuICAgICAgICAgICAgICAgIG5neC1jaGFydHMtY2lyY2xlLXNlcmllc1xcbiAgICAgICAgICAgICAgICB0eXBlPVxcXCJzdGFja2VkXFxcIlxcbiAgICAgICAgICAgICAgICBbeFNjYWxlXT1cXFwieFNjYWxlXFxcIlxcbiAgICAgICAgICAgICAgICBbeVNjYWxlXT1cXFwieVNjYWxlXFxcIlxcbiAgICAgICAgICAgICAgICBbY29sb3JzXT1cXFwiY29sb3JzXFxcIlxcbiAgICAgICAgICAgICAgICBbYWN0aXZlRW50cmllc109XFxcImFjdGl2ZUVudHJpZXNcXFwiXFxuICAgICAgICAgICAgICAgIFtkYXRhXT1cXFwic2VyaWVzXFxcIlxcbiAgICAgICAgICAgICAgICBbc2NhbGVUeXBlXT1cXFwic2NhbGVUeXBlXFxcIlxcbiAgICAgICAgICAgICAgICBbdmlzaWJsZVZhbHVlXT1cXFwiaG92ZXJlZFZlcnRpY2FsXFxcIlxcbiAgICAgICAgICAgICAgICBbdG9vbHRpcERpc2FibGVkXT1cXFwidG9vbHRpcERpc2FibGVkXFxcIlxcbiAgICAgICAgICAgICAgICBbdG9vbHRpcFRlbXBsYXRlXT1cXFwidG9vbHRpcFRlbXBsYXRlXFxcIlxcbiAgICAgICAgICAgICAgICAoc2VsZWN0KT1cXFwib25DbGljaygkZXZlbnQsIHNlcmllcylcXFwiXFxuICAgICAgICAgICAgICAgIChhY3RpdmF0ZSk9XFxcIm9uQWN0aXZhdGUoJGV2ZW50KVxcXCJcXG4gICAgICAgICAgICAgICAgKGRlYWN0aXZhdGUpPVxcXCJvbkRlYWN0aXZhdGUoJGV2ZW50KVxcXCJcXG4gICAgICAgICAgICAgIC8+XFxuICAgICAgICAgICAgPC9zdmc6Zz5cXG4gICAgICAgICAgPC9zdmc6Zz5cXG4gICAgICAgIDwvc3ZnOmc+XFxuICAgICAgPC9zdmc6Zz5cXG4gICAgICA8c3ZnOmdcXG4gICAgICAgIG5neC1jaGFydHMtdGltZWxpbmVcXG4gICAgICAgICpuZ0lmPVxcXCJ0aW1lbGluZSAmJiBzY2FsZVR5cGUgIT0gJ29yZGluYWwnXFxcIlxcbiAgICAgICAgW2F0dHIudHJhbnNmb3JtXT1cXFwidGltZWxpbmVUcmFuc2Zvcm1cXFwiXFxuICAgICAgICBbcmVzdWx0c109XFxcInJlc3VsdHNcXFwiXFxuICAgICAgICBbdmlld109XFxcIlt0aW1lbGluZVdpZHRoLCBoZWlnaHRdXFxcIlxcbiAgICAgICAgW2hlaWdodF09XFxcInRpbWVsaW5lSGVpZ2h0XFxcIlxcbiAgICAgICAgW3NjaGVtZV09XFxcInNjaGVtZVxcXCJcXG4gICAgICAgIFtjdXN0b21Db2xvcnNdPVxcXCJjdXN0b21Db2xvcnNcXFwiXFxuICAgICAgICBbbGVnZW5kXT1cXFwibGVnZW5kXFxcIlxcbiAgICAgICAgW3NjYWxlVHlwZV09XFxcInNjYWxlVHlwZVxcXCJcXG4gICAgICAgIChvbkRvbWFpbkNoYW5nZSk9XFxcInVwZGF0ZURvbWFpbigkZXZlbnQpXFxcIlxcbiAgICAgID5cXG4gICAgICAgIDxzdmc6ZyAqbmdGb3I9XFxcImxldCBzZXJpZXMgb2YgcmVzdWx0czsgdHJhY2tCeTogdHJhY2tCeVxcXCI+XFxuICAgICAgICAgIDxzdmc6Z1xcbiAgICAgICAgICAgIG5neC1jaGFydHMtYXJlYS1zZXJpZXNcXG4gICAgICAgICAgICBbeFNjYWxlXT1cXFwidGltZWxpbmVYU2NhbGVcXFwiXFxuICAgICAgICAgICAgW3lTY2FsZV09XFxcInRpbWVsaW5lWVNjYWxlXFxcIlxcbiAgICAgICAgICAgIFtjb2xvcnNdPVxcXCJjb2xvcnNcXFwiXFxuICAgICAgICAgICAgW2RhdGFdPVxcXCJzZXJpZXNcXFwiXFxuICAgICAgICAgICAgW3NjYWxlVHlwZV09XFxcInNjYWxlVHlwZVxcXCJcXG4gICAgICAgICAgICBbZ3JhZGllbnRdPVxcXCJncmFkaWVudFxcXCJcXG4gICAgICAgICAgICBub3JtYWxpemVkPVxcXCJ0cnVlXFxcIlxcbiAgICAgICAgICAgIFtjdXJ2ZV09XFxcImN1cnZlXFxcIlxcbiAgICAgICAgICAgIFthbmltYXRpb25zXT1cXFwiYW5pbWF0aW9uc1xcXCJcXG4gICAgICAgICAgLz5cXG4gICAgICAgIDwvc3ZnOmc+XFxuICAgICAgPC9zdmc6Zz5cXG4gICAgPC9uZ3gtY2hhcnRzLWNoYXJ0PlxcbiAgXCIsXG4gICAgICAgICAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICAgICAgICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gICAgICAgICAgICBzdHlsZXM6IFtcIi5uZ3gtY2hhcnRze2Zsb2F0OmxlZnQ7b3ZlcmZsb3c6dmlzaWJsZX0ubmd4LWNoYXJ0cyAuYXJjLC5uZ3gtY2hhcnRzIC5iYXIsLm5neC1jaGFydHMgLmNpcmNsZXtjdXJzb3I6cG9pbnRlcn0ubmd4LWNoYXJ0cyAuYXJjLmFjdGl2ZSwubmd4LWNoYXJ0cyAuYXJjOmhvdmVyLC5uZ3gtY2hhcnRzIC5iYXIuYWN0aXZlLC5uZ3gtY2hhcnRzIC5iYXI6aG92ZXIsLm5neC1jaGFydHMgLmNhcmQuYWN0aXZlLC5uZ3gtY2hhcnRzIC5jYXJkOmhvdmVyLC5uZ3gtY2hhcnRzIC5jZWxsLmFjdGl2ZSwubmd4LWNoYXJ0cyAuY2VsbDpob3ZlcntvcGFjaXR5Oi44Oy13ZWJraXQtdHJhbnNpdGlvbjpvcGFjaXR5IC4xcyBlYXNlLWluLW91dDt0cmFuc2l0aW9uOm9wYWNpdHkgLjFzIGVhc2UtaW4tb3V0fS5uZ3gtY2hhcnRzIC5hcmM6Zm9jdXMsLm5neC1jaGFydHMgLmJhcjpmb2N1cywubmd4LWNoYXJ0cyAuY2FyZDpmb2N1cywubmd4LWNoYXJ0cyAuY2VsbDpmb2N1c3tvdXRsaW5lOjB9Lm5neC1jaGFydHMgLmFyYy5oaWRkZW4sLm5neC1jaGFydHMgLmJhci5oaWRkZW4sLm5neC1jaGFydHMgLmNhcmQuaGlkZGVuLC5uZ3gtY2hhcnRzIC5jZWxsLmhpZGRlbntkaXNwbGF5Om5vbmV9Lm5neC1jaGFydHMgZzpmb2N1c3tvdXRsaW5lOjB9Lm5neC1jaGFydHMgLmFyZWEtc2VyaWVzLmluYWN0aXZlLC5uZ3gtY2hhcnRzIC5saW5lLXNlcmllcy1yYW5nZS5pbmFjdGl2ZSwubmd4LWNoYXJ0cyAubGluZS1zZXJpZXMuaW5hY3RpdmUsLm5neC1jaGFydHMgLnBvbGFyLXNlcmllcy1hcmVhLmluYWN0aXZlLC5uZ3gtY2hhcnRzIC5wb2xhci1zZXJpZXMtcGF0aC5pbmFjdGl2ZXstd2Via2l0LXRyYW5zaXRpb246b3BhY2l0eSAuMXMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjpvcGFjaXR5IC4xcyBlYXNlLWluLW91dDtvcGFjaXR5Oi4yfS5uZ3gtY2hhcnRzIC5saW5lLWhpZ2hsaWdodHtkaXNwbGF5Om5vbmV9Lm5neC1jaGFydHMgLmxpbmUtaGlnaGxpZ2h0LmFjdGl2ZXtkaXNwbGF5OmJsb2NrfS5uZ3gtY2hhcnRzIC5hcmVhe29wYWNpdHk6LjZ9Lm5neC1jaGFydHMgLmNpcmNsZTpob3ZlcntjdXJzb3I6cG9pbnRlcn0ubmd4LWNoYXJ0cyAubGFiZWx7Zm9udC1zaXplOjEycHg7Zm9udC13ZWlnaHQ6NDAwfS5uZ3gtY2hhcnRzIC50b29sdGlwLWFuY2hvcntmaWxsOiMwMDB9Lm5neC1jaGFydHMgLmdyaWRsaW5lLXBhdGh7c3Ryb2tlOiNkZGQ7c3Ryb2tlLXdpZHRoOjE7ZmlsbDpub25lfS5uZ3gtY2hhcnRzIC5yZWZsaW5lLXBhdGh7c3Ryb2tlOiNhOGIyYzc7c3Ryb2tlLXdpZHRoOjE7c3Ryb2tlLWRhc2hhcnJheTo1O3N0cm9rZS1kYXNob2Zmc2V0OjV9Lm5neC1jaGFydHMgLnJlZmxpbmUtbGFiZWx7Zm9udC1zaXplOjlweH0ubmd4LWNoYXJ0cyAucmVmZXJlbmNlLWFyZWF7ZmlsbC1vcGFjaXR5Oi4wNTtmaWxsOiMwMDB9Lm5neC1jaGFydHMgLmdyaWRsaW5lLXBhdGgtZG90dGVke3N0cm9rZTojZGRkO3N0cm9rZS13aWR0aDoxO2ZpbGw6bm9uZTtzdHJva2UtZGFzaGFycmF5OjEsMjA7c3Ryb2tlLWRhc2hvZmZzZXQ6M30ubmd4LWNoYXJ0cyAuZ3JpZC1wYW5lbCByZWN0e2ZpbGw6bm9uZX0ubmd4LWNoYXJ0cyAuZ3JpZC1wYW5lbC5vZGQgcmVjdHtmaWxsOnJnYmEoMCwwLDAsLjA1KX1cIl1cbiAgICAgICAgfSlcbiAgICBdLCBBcmVhQ2hhcnROb3JtYWxpemVkQ29tcG9uZW50KTtcbiAgICByZXR1cm4gQXJlYUNoYXJ0Tm9ybWFsaXplZENvbXBvbmVudDtcbn0oQmFzZUNoYXJ0Q29tcG9uZW50KSk7XG5leHBvcnQgeyBBcmVhQ2hhcnROb3JtYWxpemVkQ29tcG9uZW50IH07XG4iXX0=