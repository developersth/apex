import { __decorate } from "tslib";
import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { escapeLabel } from '../common/label.helper';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from './tree-map-cell.component';
import * as ɵngcc3 from '../common/tooltip/tooltip.directive';

var _c0 = ["ngx-charts-tree-map-cell-series", ""];
function TreeMapCellSeriesComponent__svg_g_0_Template(rf, ctx) { if (rf & 1) {
    var _r396 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(0, "g", 1);
    ɵngcc0.ɵɵlistener("select", function TreeMapCellSeriesComponent__svg_g_0_Template__svg_g_select_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r396); var ctx_r395 = ɵngcc0.ɵɵnextContext(); return ctx_r395.onClick($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var c_r394 = ctx.$implicit;
    var ctx_r393 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("data", c_r394.data)("x", c_r394.x)("y", c_r394.y)("width", c_r394.width)("height", c_r394.height)("fill", c_r394.fill)("label", c_r394.label)("value", c_r394.value)("valueType", c_r394.valueType)("valueFormatting", ctx_r393.valueFormatting)("labelFormatting", ctx_r393.labelFormatting)("gradient", ctx_r393.gradient)("animations", ctx_r393.animations)("tooltipDisabled", ctx_r393.tooltipDisabled)("tooltipPlacement", "top")("tooltipType", "tooltip")("tooltipTitle", ctx_r393.tooltipTemplate ? undefined : ctx_r393.getTooltipText(c_r394))("tooltipTemplate", ctx_r393.tooltipTemplate)("tooltipContext", c_r394.data);
} }
var TreeMapCellSeriesComponent = /** @class */ (function () {
    function TreeMapCellSeriesComponent() {
        this.gradient = false;
        this.tooltipDisabled = false;
        this.animations = true;
        this.select = new EventEmitter();
    }
    TreeMapCellSeriesComponent.prototype.ngOnChanges = function (changes) {
        this.cells = this.getCells();
    };
    TreeMapCellSeriesComponent.prototype.getCells = function () {
        var _this = this;
        return this.data.children
            .filter(function (d) {
            return d.depth === 1;
        })
            .map(function (d, index) {
            var label = d.id;
            return {
                data: d.data,
                x: d.x0,
                y: d.y0,
                width: d.x1 - d.x0,
                height: d.y1 - d.y0,
                fill: _this.colors.getColor(label),
                label: label,
                value: d.value,
                valueType: d.valueType
            };
        });
    };
    TreeMapCellSeriesComponent.prototype.getTooltipText = function (_a) {
        var label = _a.label, value = _a.value;
        return "\n      <span class=\"tooltip-label\">" + escapeLabel(label) + "</span>\n      <span class=\"tooltip-val\">" + value.toLocaleString() + "</span>\n    ";
    };
    TreeMapCellSeriesComponent.prototype.onClick = function (data) {
        this.select.emit(data);
    };
    TreeMapCellSeriesComponent.prototype.trackBy = function (index, item) {
        return item.label;
    };
    __decorate([
        Input()
    ], TreeMapCellSeriesComponent.prototype, "data", void 0);
    __decorate([
        Input()
    ], TreeMapCellSeriesComponent.prototype, "dims", void 0);
    __decorate([
        Input()
    ], TreeMapCellSeriesComponent.prototype, "colors", void 0);
    __decorate([
        Input()
    ], TreeMapCellSeriesComponent.prototype, "valueFormatting", void 0);
    __decorate([
        Input()
    ], TreeMapCellSeriesComponent.prototype, "labelFormatting", void 0);
    __decorate([
        Input()
    ], TreeMapCellSeriesComponent.prototype, "gradient", void 0);
    __decorate([
        Input()
    ], TreeMapCellSeriesComponent.prototype, "tooltipDisabled", void 0);
    __decorate([
        Input()
    ], TreeMapCellSeriesComponent.prototype, "tooltipTemplate", void 0);
    __decorate([
        Input()
    ], TreeMapCellSeriesComponent.prototype, "animations", void 0);
    __decorate([
        Output()
    ], TreeMapCellSeriesComponent.prototype, "select", void 0);
TreeMapCellSeriesComponent.ɵfac = function TreeMapCellSeriesComponent_Factory(t) { return new (t || TreeMapCellSeriesComponent)(); };
TreeMapCellSeriesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TreeMapCellSeriesComponent, selectors: [["g", "ngx-charts-tree-map-cell-series", ""]], inputs: { gradient: "gradient", tooltipDisabled: "tooltipDisabled", animations: "animations", data: "data", dims: "dims", colors: "colors", valueFormatting: "valueFormatting", labelFormatting: "labelFormatting", tooltipTemplate: "tooltipTemplate" }, outputs: { select: "select" }, features: [ɵngcc0.ɵɵNgOnChangesFeature()], attrs: _c0, decls: 1, vars: 2, consts: [["ngx-charts-tree-map-cell", "", "ngx-tooltip", "", 3, "data", "x", "y", "width", "height", "fill", "label", "value", "valueType", "valueFormatting", "labelFormatting", "gradient", "animations", "tooltipDisabled", "tooltipPlacement", "tooltipType", "tooltipTitle", "tooltipTemplate", "tooltipContext", "select", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["ngx-charts-tree-map-cell", "", "ngx-tooltip", "", 3, "data", "x", "y", "width", "height", "fill", "label", "value", "valueType", "valueFormatting", "labelFormatting", "gradient", "animations", "tooltipDisabled", "tooltipPlacement", "tooltipType", "tooltipTitle", "tooltipTemplate", "tooltipContext", "select"]], template: function TreeMapCellSeriesComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, TreeMapCellSeriesComponent__svg_g_0_Template, 1, 19, "g", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngForOf", ctx.cells)("ngForTrackBy", ctx.trackBy);
    } }, directives: [ɵngcc1.NgForOf, ɵngcc2.TreeMapCellComponent, ɵngcc3.TooltipDirective], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TreeMapCellSeriesComponent, [{
        type: Component,
        args: [{
                selector: 'g[ngx-charts-tree-map-cell-series]',
                template: "\n    <svg:g\n      ngx-charts-tree-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [data]=\"c.data\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [label]=\"c.label\"\n      [value]=\"c.value\"\n      [valueType]=\"c.valueType\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"'top'\"\n      [tooltipType]=\"'tooltip'\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"c.data\"\n    ></svg:g>\n  ",
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return []; }, { gradient: [{
            type: Input
        }], tooltipDisabled: [{
            type: Input
        }], animations: [{
            type: Input
        }], select: [{
            type: Output
        }], data: [{
            type: Input
        }], dims: [{
            type: Input
        }], colors: [{
            type: Input
        }], valueFormatting: [{
            type: Input
        }], labelFormatting: [{
            type: Input
        }], tooltipTemplate: [{
            type: Input
        }] }); })();
    return TreeMapCellSeriesComponent;
}());
export { TreeMapCellSeriesComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNwcm8va3JpdHNhZGVlL1NWTi9DeWJlcnNvZnQvYXBleC9ub2RlX21vZHVsZXMvQHN3aW1sYW5lL25neC1jaGFydHMvZXNtNS9saWIvdHJlZS1tYXAvdHJlZS1tYXAtY2VsbC1zZXJpZXMuY29tcG9uZW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUdBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OytEQXNFK0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBTzVCIiwiZmlsZSI6InRyZWUtbWFwLWNlbGwtc2VyaWVzLmNvbXBvbmVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fZGVjb3JhdGUgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZXNjYXBlTGFiZWwgfSBmcm9tICcuLi9jb21tb24vbGFiZWwuaGVscGVyJztcbnZhciBUcmVlTWFwQ2VsbFNlcmllc0NvbXBvbmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUcmVlTWFwQ2VsbFNlcmllc0NvbXBvbmVudCgpIHtcbiAgICAgICAgdGhpcy5ncmFkaWVudCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnRvb2x0aXBEaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmFuaW1hdGlvbnMgPSB0cnVlO1xuICAgICAgICB0aGlzLnNlbGVjdCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICB9XG4gICAgVHJlZU1hcENlbGxTZXJpZXNDb21wb25lbnQucHJvdG90eXBlLm5nT25DaGFuZ2VzID0gZnVuY3Rpb24gKGNoYW5nZXMpIHtcbiAgICAgICAgdGhpcy5jZWxscyA9IHRoaXMuZ2V0Q2VsbHMoKTtcbiAgICB9O1xuICAgIFRyZWVNYXBDZWxsU2VyaWVzQ29tcG9uZW50LnByb3RvdHlwZS5nZXRDZWxscyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5jaGlsZHJlblxuICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgcmV0dXJuIGQuZGVwdGggPT09IDE7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChkLCBpbmRleCkge1xuICAgICAgICAgICAgdmFyIGxhYmVsID0gZC5pZDtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZGF0YTogZC5kYXRhLFxuICAgICAgICAgICAgICAgIHg6IGQueDAsXG4gICAgICAgICAgICAgICAgeTogZC55MCxcbiAgICAgICAgICAgICAgICB3aWR0aDogZC54MSAtIGQueDAsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBkLnkxIC0gZC55MCxcbiAgICAgICAgICAgICAgICBmaWxsOiBfdGhpcy5jb2xvcnMuZ2V0Q29sb3IobGFiZWwpLFxuICAgICAgICAgICAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgICAgICAgICAgICB2YWx1ZTogZC52YWx1ZSxcbiAgICAgICAgICAgICAgICB2YWx1ZVR5cGU6IGQudmFsdWVUeXBlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFRyZWVNYXBDZWxsU2VyaWVzQ29tcG9uZW50LnByb3RvdHlwZS5nZXRUb29sdGlwVGV4dCA9IGZ1bmN0aW9uIChfYSkge1xuICAgICAgICB2YXIgbGFiZWwgPSBfYS5sYWJlbCwgdmFsdWUgPSBfYS52YWx1ZTtcbiAgICAgICAgcmV0dXJuIFwiXFxuICAgICAgPHNwYW4gY2xhc3M9XFxcInRvb2x0aXAtbGFiZWxcXFwiPlwiICsgZXNjYXBlTGFiZWwobGFiZWwpICsgXCI8L3NwYW4+XFxuICAgICAgPHNwYW4gY2xhc3M9XFxcInRvb2x0aXAtdmFsXFxcIj5cIiArIHZhbHVlLnRvTG9jYWxlU3RyaW5nKCkgKyBcIjwvc3Bhbj5cXG4gICAgXCI7XG4gICAgfTtcbiAgICBUcmVlTWFwQ2VsbFNlcmllc0NvbXBvbmVudC5wcm90b3R5cGUub25DbGljayA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0LmVtaXQoZGF0YSk7XG4gICAgfTtcbiAgICBUcmVlTWFwQ2VsbFNlcmllc0NvbXBvbmVudC5wcm90b3R5cGUudHJhY2tCeSA9IGZ1bmN0aW9uIChpbmRleCwgaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbS5sYWJlbDtcbiAgICB9O1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBJbnB1dCgpXG4gICAgXSwgVHJlZU1hcENlbGxTZXJpZXNDb21wb25lbnQucHJvdG90eXBlLCBcImRhdGFcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgSW5wdXQoKVxuICAgIF0sIFRyZWVNYXBDZWxsU2VyaWVzQ29tcG9uZW50LnByb3RvdHlwZSwgXCJkaW1zXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIElucHV0KClcbiAgICBdLCBUcmVlTWFwQ2VsbFNlcmllc0NvbXBvbmVudC5wcm90b3R5cGUsIFwiY29sb3JzXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIElucHV0KClcbiAgICBdLCBUcmVlTWFwQ2VsbFNlcmllc0NvbXBvbmVudC5wcm90b3R5cGUsIFwidmFsdWVGb3JtYXR0aW5nXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIElucHV0KClcbiAgICBdLCBUcmVlTWFwQ2VsbFNlcmllc0NvbXBvbmVudC5wcm90b3R5cGUsIFwibGFiZWxGb3JtYXR0aW5nXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIElucHV0KClcbiAgICBdLCBUcmVlTWFwQ2VsbFNlcmllc0NvbXBvbmVudC5wcm90b3R5cGUsIFwiZ3JhZGllbnRcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgSW5wdXQoKVxuICAgIF0sIFRyZWVNYXBDZWxsU2VyaWVzQ29tcG9uZW50LnByb3RvdHlwZSwgXCJ0b29sdGlwRGlzYWJsZWRcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgSW5wdXQoKVxuICAgIF0sIFRyZWVNYXBDZWxsU2VyaWVzQ29tcG9uZW50LnByb3RvdHlwZSwgXCJ0b29sdGlwVGVtcGxhdGVcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgSW5wdXQoKVxuICAgIF0sIFRyZWVNYXBDZWxsU2VyaWVzQ29tcG9uZW50LnByb3RvdHlwZSwgXCJhbmltYXRpb25zXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIE91dHB1dCgpXG4gICAgXSwgVHJlZU1hcENlbGxTZXJpZXNDb21wb25lbnQucHJvdG90eXBlLCBcInNlbGVjdFwiLCB2b2lkIDApO1xuICAgIFRyZWVNYXBDZWxsU2VyaWVzQ29tcG9uZW50ID0gX19kZWNvcmF0ZShbXG4gICAgICAgIENvbXBvbmVudCh7XG4gICAgICAgICAgICBzZWxlY3RvcjogJ2dbbmd4LWNoYXJ0cy10cmVlLW1hcC1jZWxsLXNlcmllc10nLFxuICAgICAgICAgICAgdGVtcGxhdGU6IFwiXFxuICAgIDxzdmc6Z1xcbiAgICAgIG5neC1jaGFydHMtdHJlZS1tYXAtY2VsbFxcbiAgICAgICpuZ0Zvcj1cXFwibGV0IGMgb2YgY2VsbHM7IHRyYWNrQnk6IHRyYWNrQnlcXFwiXFxuICAgICAgW2RhdGFdPVxcXCJjLmRhdGFcXFwiXFxuICAgICAgW3hdPVxcXCJjLnhcXFwiXFxuICAgICAgW3ldPVxcXCJjLnlcXFwiXFxuICAgICAgW3dpZHRoXT1cXFwiYy53aWR0aFxcXCJcXG4gICAgICBbaGVpZ2h0XT1cXFwiYy5oZWlnaHRcXFwiXFxuICAgICAgW2ZpbGxdPVxcXCJjLmZpbGxcXFwiXFxuICAgICAgW2xhYmVsXT1cXFwiYy5sYWJlbFxcXCJcXG4gICAgICBbdmFsdWVdPVxcXCJjLnZhbHVlXFxcIlxcbiAgICAgIFt2YWx1ZVR5cGVdPVxcXCJjLnZhbHVlVHlwZVxcXCJcXG4gICAgICBbdmFsdWVGb3JtYXR0aW5nXT1cXFwidmFsdWVGb3JtYXR0aW5nXFxcIlxcbiAgICAgIFtsYWJlbEZvcm1hdHRpbmddPVxcXCJsYWJlbEZvcm1hdHRpbmdcXFwiXFxuICAgICAgW2dyYWRpZW50XT1cXFwiZ3JhZGllbnRcXFwiXFxuICAgICAgW2FuaW1hdGlvbnNdPVxcXCJhbmltYXRpb25zXFxcIlxcbiAgICAgIChzZWxlY3QpPVxcXCJvbkNsaWNrKCRldmVudClcXFwiXFxuICAgICAgbmd4LXRvb2x0aXBcXG4gICAgICBbdG9vbHRpcERpc2FibGVkXT1cXFwidG9vbHRpcERpc2FibGVkXFxcIlxcbiAgICAgIFt0b29sdGlwUGxhY2VtZW50XT1cXFwiJ3RvcCdcXFwiXFxuICAgICAgW3Rvb2x0aXBUeXBlXT1cXFwiJ3Rvb2x0aXAnXFxcIlxcbiAgICAgIFt0b29sdGlwVGl0bGVdPVxcXCJ0b29sdGlwVGVtcGxhdGUgPyB1bmRlZmluZWQgOiBnZXRUb29sdGlwVGV4dChjKVxcXCJcXG4gICAgICBbdG9vbHRpcFRlbXBsYXRlXT1cXFwidG9vbHRpcFRlbXBsYXRlXFxcIlxcbiAgICAgIFt0b29sdGlwQ29udGV4dF09XFxcImMuZGF0YVxcXCJcXG4gICAgPjwvc3ZnOmc+XFxuICBcIixcbiAgICAgICAgICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG4gICAgICAgIH0pXG4gICAgXSwgVHJlZU1hcENlbGxTZXJpZXNDb21wb25lbnQpO1xuICAgIHJldHVybiBUcmVlTWFwQ2VsbFNlcmllc0NvbXBvbmVudDtcbn0oKSk7XG5leHBvcnQgeyBUcmVlTWFwQ2VsbFNlcmllc0NvbXBvbmVudCB9O1xuIl19