import { __decorate, __extends, __read, __spread } from "tslib";
import { Component, Input, Output, EventEmitter, ViewEncapsulation, ChangeDetectionStrategy, ContentChild } from '@angular/core';
import { treemap, stratify } from 'd3-hierarchy';
import { BaseChartComponent } from '../common/base-chart.component';
import { calculateViewDimensions } from '../common/view-dimensions.helper';
import { ColorHelper } from '../common/color.helper';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../common/charts/chart.component';
import * as ɵngcc2 from './tree-map-cell-series.component';

var _c0 = ["tooltipTemplate"];
var _c1 = function (a0, a1) { return [a0, a1]; };
var TreeMapComponent = /** @class */ (function (_super) {
    __extends(TreeMapComponent, _super);
    function TreeMapComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.tooltipDisabled = false;
        _this.gradient = false;
        _this.select = new EventEmitter();
        _this.margin = [10, 10, 10, 10];
        return _this;
    }
    TreeMapComponent.prototype.update = function () {
        _super.prototype.update.call(this);
        this.dims = calculateViewDimensions({
            width: this.width,
            height: this.height,
            margins: this.margin
        });
        this.domain = this.getDomain();
        this.treemap = treemap().size([this.dims.width, this.dims.height]);
        var rootNode = {
            name: 'root',
            value: 0,
            isRoot: true
        };
        var root = stratify()
            .id(function (d) {
            var label = d.name;
            if (label.constructor.name === 'Date') {
                label = label.toLocaleDateString();
            }
            else {
                label = label.toLocaleString();
            }
            return label;
        })
            .parentId(function (d) { return (d.isRoot ? null : 'root'); })(__spread([rootNode], this.results))
            .sum(function (d) { return d.value; });
        this.data = this.treemap(root);
        this.setColors();
        this.transform = "translate(" + this.dims.xOffset + " , " + this.margin[0] + ")";
    };
    TreeMapComponent.prototype.getDomain = function () {
        return this.results.map(function (d) { return d.name; });
    };
    TreeMapComponent.prototype.onClick = function (data) {
        this.select.emit(data);
    };
    TreeMapComponent.prototype.setColors = function () {
        this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);
    };
    __decorate([
        Input()
    ], TreeMapComponent.prototype, "results", void 0);
    __decorate([
        Input()
    ], TreeMapComponent.prototype, "tooltipDisabled", void 0);
    __decorate([
        Input()
    ], TreeMapComponent.prototype, "valueFormatting", void 0);
    __decorate([
        Input()
    ], TreeMapComponent.prototype, "labelFormatting", void 0);
    __decorate([
        Input()
    ], TreeMapComponent.prototype, "gradient", void 0);
    __decorate([
        Output()
    ], TreeMapComponent.prototype, "select", void 0);
    __decorate([
        ContentChild('tooltipTemplate')
    ], TreeMapComponent.prototype, "tooltipTemplate", void 0);
TreeMapComponent.ɵfac = function TreeMapComponent_Factory(t) { return ɵTreeMapComponent_BaseFactory(t || TreeMapComponent); };
TreeMapComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TreeMapComponent, selectors: [["ngx-charts-tree-map"]], contentQueries: function TreeMapComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);
    } }, inputs: { results: "results", tooltipDisabled: "tooltipDisabled", valueFormatting: "valueFormatting", labelFormatting: "labelFormatting", gradient: "gradient" }, outputs: { select: "select" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 16, consts: [[3, "view", "showLegend", "animations"], [1, "tree-map", "chart"], ["ngx-charts-tree-map-cell-series", "", 3, "colors", "data", "dims", "tooltipDisabled", "tooltipTemplate", "valueFormatting", "labelFormatting", "gradient", "animations", "select"]], template: function TreeMapComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "ngx-charts-chart", 0);
        ɵngcc0.ɵɵnamespaceSVG();
        ɵngcc0.ɵɵelementStart(1, "g", 1);
        ɵngcc0.ɵɵelementStart(2, "g", 2);
        ɵngcc0.ɵɵlistener("select", function TreeMapComponent_Template__svg_g_select_2_listener($event) { return ctx.onClick($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("view", ɵngcc0.ɵɵpureFunction2(13, _c1, ctx.width, ctx.height))("showLegend", false)("animations", ctx.animations);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵattribute("transform", ctx.transform);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("colors", ctx.colors)("data", ctx.data)("dims", ctx.dims)("tooltipDisabled", ctx.tooltipDisabled)("tooltipTemplate", ctx.tooltipTemplate)("valueFormatting", ctx.valueFormatting)("labelFormatting", ctx.labelFormatting)("gradient", ctx.gradient)("animations", ctx.animations);
    } }, directives: [ɵngcc1.ChartComponent, ɵngcc2.TreeMapCellSeriesComponent], styles: [".tree-map .treemap-val{font-size:1.3em;padding-top:5px;display:inline-block}.tree-map .treemap-label p{display:table-cell;text-align:center;line-height:1.2em;vertical-align:middle}"], encapsulation: 2, changeDetection: 0 });
var ɵTreeMapComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TreeMapComponent);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TreeMapComponent, [{
        type: Component,
        args: [{
                selector: 'ngx-charts-tree-map',
                template: "\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"tree-map chart\">\n        <svg:g\n          ngx-charts-tree-map-cell-series\n          [colors]=\"colors\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  ",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".tree-map .treemap-val{font-size:1.3em;padding-top:5px;display:inline-block}.tree-map .treemap-label p{display:table-cell;text-align:center;line-height:1.2em;vertical-align:middle}"]
            }]
    }], null, { results: [{
            type: Input
        }], tooltipDisabled: [{
            type: Input
        }], valueFormatting: [{
            type: Input
        }], labelFormatting: [{
            type: Input
        }], gradient: [{
            type: Input
        }], select: [{
            type: Output
        }], tooltipTemplate: [{
            type: ContentChild,
            args: ['tooltipTemplate']
        }] }); })();
    return TreeMapComponent;
}(BaseChartComponent));
export { TreeMapComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNwcm8va3JpdHNhZGVlL1NWTi9DeWJlcnNvZnQvYXBleC9ub2RlX21vZHVsZXMvQHN3aW1sYW5lL25neC1jaGFydHMvZXNtNS9saWIvdHJlZS1tYXAvdHJlZS1tYXAuY29tcG9uZW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7QUFNQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs4REFzRThEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBU3JDIiwiZmlsZSI6InRyZWUtbWFwLmNvbXBvbmVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fZGVjb3JhdGUsIF9fZXh0ZW5kcywgX19yZWFkLCBfX3NwcmVhZCB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIFZpZXdFbmNhcHN1bGF0aW9uLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29udGVudENoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyB0cmVlbWFwLCBzdHJhdGlmeSB9IGZyb20gJ2QzLWhpZXJhcmNoeSc7XG5pbXBvcnQgeyBCYXNlQ2hhcnRDb21wb25lbnQgfSBmcm9tICcuLi9jb21tb24vYmFzZS1jaGFydC5jb21wb25lbnQnO1xuaW1wb3J0IHsgY2FsY3VsYXRlVmlld0RpbWVuc2lvbnMgfSBmcm9tICcuLi9jb21tb24vdmlldy1kaW1lbnNpb25zLmhlbHBlcic7XG5pbXBvcnQgeyBDb2xvckhlbHBlciB9IGZyb20gJy4uL2NvbW1vbi9jb2xvci5oZWxwZXInO1xudmFyIFRyZWVNYXBDb21wb25lbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFRyZWVNYXBDb21wb25lbnQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVHJlZU1hcENvbXBvbmVudCgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnRvb2x0aXBEaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5ncmFkaWVudCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5zZWxlY3QgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIF90aGlzLm1hcmdpbiA9IFsxMCwgMTAsIDEwLCAxMF07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgVHJlZU1hcENvbXBvbmVudC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVwZGF0ZS5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLmRpbXMgPSBjYWxjdWxhdGVWaWV3RGltZW5zaW9ucyh7XG4gICAgICAgICAgICB3aWR0aDogdGhpcy53aWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogdGhpcy5oZWlnaHQsXG4gICAgICAgICAgICBtYXJnaW5zOiB0aGlzLm1hcmdpblxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5kb21haW4gPSB0aGlzLmdldERvbWFpbigpO1xuICAgICAgICB0aGlzLnRyZWVtYXAgPSB0cmVlbWFwKCkuc2l6ZShbdGhpcy5kaW1zLndpZHRoLCB0aGlzLmRpbXMuaGVpZ2h0XSk7XG4gICAgICAgIHZhciByb290Tm9kZSA9IHtcbiAgICAgICAgICAgIG5hbWU6ICdyb290JyxcbiAgICAgICAgICAgIHZhbHVlOiAwLFxuICAgICAgICAgICAgaXNSb290OiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIHZhciByb290ID0gc3RyYXRpZnkoKVxuICAgICAgICAgICAgLmlkKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICB2YXIgbGFiZWwgPSBkLm5hbWU7XG4gICAgICAgICAgICBpZiAobGFiZWwuY29uc3RydWN0b3IubmFtZSA9PT0gJ0RhdGUnKSB7XG4gICAgICAgICAgICAgICAgbGFiZWwgPSBsYWJlbC50b0xvY2FsZURhdGVTdHJpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxhYmVsID0gbGFiZWwudG9Mb2NhbGVTdHJpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBsYWJlbDtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5wYXJlbnRJZChmdW5jdGlvbiAoZCkgeyByZXR1cm4gKGQuaXNSb290ID8gbnVsbCA6ICdyb290Jyk7IH0pKF9fc3ByZWFkKFtyb290Tm9kZV0sIHRoaXMucmVzdWx0cykpXG4gICAgICAgICAgICAuc3VtKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLnZhbHVlOyB9KTtcbiAgICAgICAgdGhpcy5kYXRhID0gdGhpcy50cmVlbWFwKHJvb3QpO1xuICAgICAgICB0aGlzLnNldENvbG9ycygpO1xuICAgICAgICB0aGlzLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlKFwiICsgdGhpcy5kaW1zLnhPZmZzZXQgKyBcIiAsIFwiICsgdGhpcy5tYXJnaW5bMF0gKyBcIilcIjtcbiAgICB9O1xuICAgIFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLmdldERvbWFpbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzdWx0cy5tYXAoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQubmFtZTsgfSk7XG4gICAgfTtcbiAgICBUcmVlTWFwQ29tcG9uZW50LnByb3RvdHlwZS5vbkNsaWNrID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdGhpcy5zZWxlY3QuZW1pdChkYXRhKTtcbiAgICB9O1xuICAgIFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLnNldENvbG9ycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jb2xvcnMgPSBuZXcgQ29sb3JIZWxwZXIodGhpcy5zY2hlbWUsICdvcmRpbmFsJywgdGhpcy5kb21haW4sIHRoaXMuY3VzdG9tQ29sb3JzKTtcbiAgICB9O1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBJbnB1dCgpXG4gICAgXSwgVHJlZU1hcENvbXBvbmVudC5wcm90b3R5cGUsIFwicmVzdWx0c1wiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBJbnB1dCgpXG4gICAgXSwgVHJlZU1hcENvbXBvbmVudC5wcm90b3R5cGUsIFwidG9vbHRpcERpc2FibGVkXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIElucHV0KClcbiAgICBdLCBUcmVlTWFwQ29tcG9uZW50LnByb3RvdHlwZSwgXCJ2YWx1ZUZvcm1hdHRpbmdcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgSW5wdXQoKVxuICAgIF0sIFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcImxhYmVsRm9ybWF0dGluZ1wiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBJbnB1dCgpXG4gICAgXSwgVHJlZU1hcENvbXBvbmVudC5wcm90b3R5cGUsIFwiZ3JhZGllbnRcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgT3V0cHV0KClcbiAgICBdLCBUcmVlTWFwQ29tcG9uZW50LnByb3RvdHlwZSwgXCJzZWxlY3RcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgQ29udGVudENoaWxkKCd0b29sdGlwVGVtcGxhdGUnKVxuICAgIF0sIFRyZWVNYXBDb21wb25lbnQucHJvdG90eXBlLCBcInRvb2x0aXBUZW1wbGF0ZVwiLCB2b2lkIDApO1xuICAgIFRyZWVNYXBDb21wb25lbnQgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgQ29tcG9uZW50KHtcbiAgICAgICAgICAgIHNlbGVjdG9yOiAnbmd4LWNoYXJ0cy10cmVlLW1hcCcsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogXCJcXG4gICAgPG5neC1jaGFydHMtY2hhcnQgW3ZpZXddPVxcXCJbd2lkdGgsIGhlaWdodF1cXFwiIFtzaG93TGVnZW5kXT1cXFwiZmFsc2VcXFwiIFthbmltYXRpb25zXT1cXFwiYW5pbWF0aW9uc1xcXCI+XFxuICAgICAgPHN2ZzpnIFthdHRyLnRyYW5zZm9ybV09XFxcInRyYW5zZm9ybVxcXCIgY2xhc3M9XFxcInRyZWUtbWFwIGNoYXJ0XFxcIj5cXG4gICAgICAgIDxzdmc6Z1xcbiAgICAgICAgICBuZ3gtY2hhcnRzLXRyZWUtbWFwLWNlbGwtc2VyaWVzXFxuICAgICAgICAgIFtjb2xvcnNdPVxcXCJjb2xvcnNcXFwiXFxuICAgICAgICAgIFtkYXRhXT1cXFwiZGF0YVxcXCJcXG4gICAgICAgICAgW2RpbXNdPVxcXCJkaW1zXFxcIlxcbiAgICAgICAgICBbdG9vbHRpcERpc2FibGVkXT1cXFwidG9vbHRpcERpc2FibGVkXFxcIlxcbiAgICAgICAgICBbdG9vbHRpcFRlbXBsYXRlXT1cXFwidG9vbHRpcFRlbXBsYXRlXFxcIlxcbiAgICAgICAgICBbdmFsdWVGb3JtYXR0aW5nXT1cXFwidmFsdWVGb3JtYXR0aW5nXFxcIlxcbiAgICAgICAgICBbbGFiZWxGb3JtYXR0aW5nXT1cXFwibGFiZWxGb3JtYXR0aW5nXFxcIlxcbiAgICAgICAgICBbZ3JhZGllbnRdPVxcXCJncmFkaWVudFxcXCJcXG4gICAgICAgICAgW2FuaW1hdGlvbnNdPVxcXCJhbmltYXRpb25zXFxcIlxcbiAgICAgICAgICAoc2VsZWN0KT1cXFwib25DbGljaygkZXZlbnQpXFxcIlxcbiAgICAgICAgLz5cXG4gICAgICA8L3N2ZzpnPlxcbiAgICA8L25neC1jaGFydHMtY2hhcnQ+XFxuICBcIixcbiAgICAgICAgICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gICAgICAgICAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICAgICAgICAgIHN0eWxlczogW1wiLnRyZWUtbWFwIC50cmVlbWFwLXZhbHtmb250LXNpemU6MS4zZW07cGFkZGluZy10b3A6NXB4O2Rpc3BsYXk6aW5saW5lLWJsb2NrfS50cmVlLW1hcCAudHJlZW1hcC1sYWJlbCBwe2Rpc3BsYXk6dGFibGUtY2VsbDt0ZXh0LWFsaWduOmNlbnRlcjtsaW5lLWhlaWdodDoxLjJlbTt2ZXJ0aWNhbC1hbGlnbjptaWRkbGV9XCJdXG4gICAgICAgIH0pXG4gICAgXSwgVHJlZU1hcENvbXBvbmVudCk7XG4gICAgcmV0dXJuIFRyZWVNYXBDb21wb25lbnQ7XG59KEJhc2VDaGFydENvbXBvbmVudCkpO1xuZXhwb3J0IHsgVHJlZU1hcENvbXBvbmVudCB9O1xuIl19