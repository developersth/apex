import { __decorate } from "tslib";
import { Component, Input, Output, EventEmitter, ChangeDetectorRef, OnDestroy, ElementRef } from '@angular/core';
import { count, decimalChecker } from './count.helper';
/**
 * Count up component
 *
 * Loosely inspired by:
 *  - https://github.com/izupet/angular2-counto
 *  - https://inorganik.github.io/countUp.js/
 *
 * @export
 */
import * as ɵngcc0 from '@angular/core';

const _c0 = ["ngx-charts-count-up", ""];
let CountUpDirective = class CountUpDirective {
    constructor(cd, element) {
        this.cd = cd;
        this.countDuration = 1;
        this.countPrefix = '';
        this.countSuffix = '';
        this.countChange = new EventEmitter();
        this.countFinish = new EventEmitter();
        this.value = '';
        this._countDecimals = 0;
        this._countTo = 0;
        this._countFrom = 0;
        this.nativeElement = element.nativeElement;
    }
    set countDecimals(val) {
        this._countDecimals = val;
    }
    get countDecimals() {
        if (this._countDecimals)
            return this._countDecimals;
        return decimalChecker(this.countTo);
    }
    set countTo(val) {
        this._countTo = parseFloat(val);
        this.start();
    }
    get countTo() {
        return this._countTo;
    }
    set countFrom(val) {
        this._countFrom = parseFloat(val);
        this.start();
    }
    get countFrom() {
        return this._countFrom;
    }
    ngOnDestroy() {
        cancelAnimationFrame(this.animationReq);
    }
    start() {
        cancelAnimationFrame(this.animationReq);
        const valueFormatting = this.valueFormatting || (value => `${this.countPrefix}${value.toLocaleString()}${this.countSuffix}`);
        const callback = ({ value, progress, finished }) => {
            this.value = valueFormatting(value);
            this.cd.markForCheck();
            if (!finished)
                this.countChange.emit({ value: this.value, progress });
            if (finished)
                this.countFinish.emit({ value: this.value, progress });
        };
        this.animationReq = count(this.countFrom, this.countTo, this.countDecimals, this.countDuration, callback);
    }
};
CountUpDirective.ɵfac = function CountUpDirective_Factory(t) { return new (t || CountUpDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
CountUpDirective.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CountUpDirective, selectors: [["", "ngx-charts-count-up", ""]], inputs: { countDuration: "countDuration", countPrefix: "countPrefix", countSuffix: "countSuffix", countDecimals: "countDecimals", countTo: "countTo", countFrom: "countFrom", valueFormatting: "valueFormatting" }, outputs: { countChange: "countChange", countFinish: "countFinish" }, attrs: _c0, decls: 1, vars: 1, template: function CountUpDirective_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtext(0);
    } if (rf & 2) {
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.value, " ");
    } }, encapsulation: 2 });
CountUpDirective.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef }
];
__decorate([
    Input()
], CountUpDirective.prototype, "countDuration", void 0);
__decorate([
    Input()
], CountUpDirective.prototype, "countPrefix", void 0);
__decorate([
    Input()
], CountUpDirective.prototype, "countSuffix", void 0);
__decorate([
    Input()
], CountUpDirective.prototype, "valueFormatting", void 0);
__decorate([
    Input()
], CountUpDirective.prototype, "countDecimals", null);
__decorate([
    Input()
], CountUpDirective.prototype, "countTo", null);
__decorate([
    Input()
], CountUpDirective.prototype, "countFrom", null);
__decorate([
    Output()
], CountUpDirective.prototype, "countChange", void 0);
__decorate([
    Output()
], CountUpDirective.prototype, "countFinish", void 0);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CountUpDirective, [{
        type: Component,
        args: [{
                selector: '[ngx-charts-count-up]',
                template: `
    {{ value }}
  `
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }]; }, { countDuration: [{
            type: Input
        }], countPrefix: [{
            type: Input
        }], countSuffix: [{
            type: Input
        }], countChange: [{
            type: Output
        }], countFinish: [{
            type: Output
        }], countDecimals: [{
            type: Input
        }], countTo: [{
            type: Input
        }], countFrom: [{
            type: Input
        }], valueFormatting: [{
            type: Input
        }] }); })();
export { CountUpDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNwcm8va3JpdHNhZGVlL1NWTi9DeWJlcnNvZnQvYXBleC9ub2RlX21vZHVsZXMvQHN3aW1sYW5lL25neC1jaGFydHMvZXNtMjAxNS9saWIvY29tbW9uL2NvdW50L2NvdW50LmRpcmVjdGl2ZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0FBWUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NkJBb0RFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3NEQStCb0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFRakMiLCJmaWxlIjoiY291bnQuZGlyZWN0aXZlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19kZWNvcmF0ZSB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIENoYW5nZURldGVjdG9yUmVmLCBPbkRlc3Ryb3ksIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGNvdW50LCBkZWNpbWFsQ2hlY2tlciB9IGZyb20gJy4vY291bnQuaGVscGVyJztcbi8qKlxuICogQ291bnQgdXAgY29tcG9uZW50XG4gKlxuICogTG9vc2VseSBpbnNwaXJlZCBieTpcbiAqICAtIGh0dHBzOi8vZ2l0aHViLmNvbS9penVwZXQvYW5ndWxhcjItY291bnRvXG4gKiAgLSBodHRwczovL2lub3JnYW5pay5naXRodWIuaW8vY291bnRVcC5qcy9cbiAqXG4gKiBAZXhwb3J0XG4gKi9cbmxldCBDb3VudFVwRGlyZWN0aXZlID0gY2xhc3MgQ291bnRVcERpcmVjdGl2ZSB7XG4gICAgY29uc3RydWN0b3IoY2QsIGVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5jZCA9IGNkO1xuICAgICAgICB0aGlzLmNvdW50RHVyYXRpb24gPSAxO1xuICAgICAgICB0aGlzLmNvdW50UHJlZml4ID0gJyc7XG4gICAgICAgIHRoaXMuY291bnRTdWZmaXggPSAnJztcbiAgICAgICAgdGhpcy5jb3VudENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5jb3VudEZpbmlzaCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy52YWx1ZSA9ICcnO1xuICAgICAgICB0aGlzLl9jb3VudERlY2ltYWxzID0gMDtcbiAgICAgICAgdGhpcy5fY291bnRUbyA9IDA7XG4gICAgICAgIHRoaXMuX2NvdW50RnJvbSA9IDA7XG4gICAgICAgIHRoaXMubmF0aXZlRWxlbWVudCA9IGVsZW1lbnQubmF0aXZlRWxlbWVudDtcbiAgICB9XG4gICAgc2V0IGNvdW50RGVjaW1hbHModmFsKSB7XG4gICAgICAgIHRoaXMuX2NvdW50RGVjaW1hbHMgPSB2YWw7XG4gICAgfVxuICAgIGdldCBjb3VudERlY2ltYWxzKCkge1xuICAgICAgICBpZiAodGhpcy5fY291bnREZWNpbWFscylcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb3VudERlY2ltYWxzO1xuICAgICAgICByZXR1cm4gZGVjaW1hbENoZWNrZXIodGhpcy5jb3VudFRvKTtcbiAgICB9XG4gICAgc2V0IGNvdW50VG8odmFsKSB7XG4gICAgICAgIHRoaXMuX2NvdW50VG8gPSBwYXJzZUZsb2F0KHZhbCk7XG4gICAgICAgIHRoaXMuc3RhcnQoKTtcbiAgICB9XG4gICAgZ2V0IGNvdW50VG8oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb3VudFRvO1xuICAgIH1cbiAgICBzZXQgY291bnRGcm9tKHZhbCkge1xuICAgICAgICB0aGlzLl9jb3VudEZyb20gPSBwYXJzZUZsb2F0KHZhbCk7XG4gICAgICAgIHRoaXMuc3RhcnQoKTtcbiAgICB9XG4gICAgZ2V0IGNvdW50RnJvbSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvdW50RnJvbTtcbiAgICB9XG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuYW5pbWF0aW9uUmVxKTtcbiAgICB9XG4gICAgc3RhcnQoKSB7XG4gICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuYW5pbWF0aW9uUmVxKTtcbiAgICAgICAgY29uc3QgdmFsdWVGb3JtYXR0aW5nID0gdGhpcy52YWx1ZUZvcm1hdHRpbmcgfHwgKHZhbHVlID0+IGAke3RoaXMuY291bnRQcmVmaXh9JHt2YWx1ZS50b0xvY2FsZVN0cmluZygpfSR7dGhpcy5jb3VudFN1ZmZpeH1gKTtcbiAgICAgICAgY29uc3QgY2FsbGJhY2sgPSAoeyB2YWx1ZSwgcHJvZ3Jlc3MsIGZpbmlzaGVkIH0pID0+IHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZUZvcm1hdHRpbmcodmFsdWUpO1xuICAgICAgICAgICAgdGhpcy5jZC5tYXJrRm9yQ2hlY2soKTtcbiAgICAgICAgICAgIGlmICghZmluaXNoZWQpXG4gICAgICAgICAgICAgICAgdGhpcy5jb3VudENoYW5nZS5lbWl0KHsgdmFsdWU6IHRoaXMudmFsdWUsIHByb2dyZXNzIH0pO1xuICAgICAgICAgICAgaWYgKGZpbmlzaGVkKVxuICAgICAgICAgICAgICAgIHRoaXMuY291bnRGaW5pc2guZW1pdCh7IHZhbHVlOiB0aGlzLnZhbHVlLCBwcm9ncmVzcyB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5hbmltYXRpb25SZXEgPSBjb3VudCh0aGlzLmNvdW50RnJvbSwgdGhpcy5jb3VudFRvLCB0aGlzLmNvdW50RGVjaW1hbHMsIHRoaXMuY291bnREdXJhdGlvbiwgY2FsbGJhY2spO1xuICAgIH1cbn07XG5Db3VudFVwRGlyZWN0aXZlLmN0b3JQYXJhbWV0ZXJzID0gKCkgPT4gW1xuICAgIHsgdHlwZTogQ2hhbmdlRGV0ZWN0b3JSZWYgfSxcbiAgICB7IHR5cGU6IEVsZW1lbnRSZWYgfVxuXTtcbl9fZGVjb3JhdGUoW1xuICAgIElucHV0KClcbl0sIENvdW50VXBEaXJlY3RpdmUucHJvdG90eXBlLCBcImNvdW50RHVyYXRpb25cIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIElucHV0KClcbl0sIENvdW50VXBEaXJlY3RpdmUucHJvdG90eXBlLCBcImNvdW50UHJlZml4XCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBJbnB1dCgpXG5dLCBDb3VudFVwRGlyZWN0aXZlLnByb3RvdHlwZSwgXCJjb3VudFN1ZmZpeFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgSW5wdXQoKVxuXSwgQ291bnRVcERpcmVjdGl2ZS5wcm90b3R5cGUsIFwidmFsdWVGb3JtYXR0aW5nXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBJbnB1dCgpXG5dLCBDb3VudFVwRGlyZWN0aXZlLnByb3RvdHlwZSwgXCJjb3VudERlY2ltYWxzXCIsIG51bGwpO1xuX19kZWNvcmF0ZShbXG4gICAgSW5wdXQoKVxuXSwgQ291bnRVcERpcmVjdGl2ZS5wcm90b3R5cGUsIFwiY291bnRUb1wiLCBudWxsKTtcbl9fZGVjb3JhdGUoW1xuICAgIElucHV0KClcbl0sIENvdW50VXBEaXJlY3RpdmUucHJvdG90eXBlLCBcImNvdW50RnJvbVwiLCBudWxsKTtcbl9fZGVjb3JhdGUoW1xuICAgIE91dHB1dCgpXG5dLCBDb3VudFVwRGlyZWN0aXZlLnByb3RvdHlwZSwgXCJjb3VudENoYW5nZVwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgT3V0cHV0KClcbl0sIENvdW50VXBEaXJlY3RpdmUucHJvdG90eXBlLCBcImNvdW50RmluaXNoXCIsIHZvaWQgMCk7XG5Db3VudFVwRGlyZWN0aXZlID0gX19kZWNvcmF0ZShbXG4gICAgQ29tcG9uZW50KHtcbiAgICAgICAgc2VsZWN0b3I6ICdbbmd4LWNoYXJ0cy1jb3VudC11cF0nLFxuICAgICAgICB0ZW1wbGF0ZTogYFxuICAgIHt7IHZhbHVlIH19XG4gIGBcbiAgICB9KVxuXSwgQ291bnRVcERpcmVjdGl2ZSk7XG5leHBvcnQgeyBDb3VudFVwRGlyZWN0aXZlIH07XG4iXX0=