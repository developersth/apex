{"version":3,"sources":["/Users/macpro/kritsadee/SVN/Cybersoft/apex/node_modules/ngx-custom-validators/bundles/ngx-custom-validators.umd.js"],"names":[],"mappings":"AAAA;oGAC2E;kGACO;qDAC5C;yBACpkEAggBgD;;;;;;;;;;;oBAMjC;;;;;;;;;;;;;;UAcvB;;;;;;;;;gDAMkB;;;;;;;;;;;;;;UAclB;;;;;;;;;gDAMsB;;;;;;;;;;;;;;UActB;;;;;;;;;gDAMgB;;;;;;;;;;;;;;UAchB;;;;;;;;;gDAMmB;;;;;;;;;;;;;;UAcnB;;;;;;;;;gDAMkB;;;;;;;;;;;;;;UAclB;;;;;;;;;gDAMiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sDAkC2B;;;;;;;;;;;oBAM3B;;;;;;;;;;;;;;;;;;;;;0DAqB+B;;;;;;;;;;;oBAM7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yDAkC4B;;;;;;;;;;;oBAMxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+DAkC8B;;;;;;;;;;;oBAMzB;;;;;;;;;;;;;;UAc5B;;;;;;;;;gDAMgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sDAkC4B;;;;;;;;;;;oBAMxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4DAkC8B;;;;;;;;;;;oBAMzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kDAkCe;;;;;;;;;;;oBAMzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0DAkCiC;;;;;;;;;;;oBAM7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kDAkCqB;;;;;;;;;;;oBAMzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0DAkCiC;;;;;;;;;;;oBAM7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4DAkC+B;;;;;;;;;;;oBAM9B;;;;;;;;;;;;;;;;;;;;;gEAqBkC;;;;;;;;;;;oBAMhC;;;;;;;;;;;;;;UActB;;;;;;;;;gDAMkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4DAkCgC;;;;;;;;;;;oBAM9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sDAkCwB;;;;;;;;;;;oBAM3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kEAkCuC;;;;;;;;;;;oBAMjC;;;;;;;;;;;;;;UAcvB;;;;;;;;;gDAMe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oDAkC2B;;;;;;;;;;;oBAM1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA8DjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAMqB","file":"ngx-custom-validators.umd.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms')) :\n    typeof define === 'function' && define.amd ? define('ngx-custom-validators', ['exports', '@angular/core', '@angular/forms'], factory) :\n    (global = global || self, factory(global['ngx-custom-validators'] = {}, global.ng.core, global.ng.forms));\n}(this, function (exports, core, forms) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\n\n    function isPresent(obj) {\n        return obj !== undefined && obj !== null;\n    }\n    function isDate(obj) {\n        try {\n            var date = new Date(obj);\n            return !isNaN(date.getTime());\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    function parseDate(obj) {\n        try {\n            // Moment.js\n            if (obj._d instanceof Date) {\n                var d = obj._d;\n                var month = +d.getMonth() + 1;\n                var day = +d.getDate();\n                return d.getFullYear() + \"-\" + formatDayOrMonth(month) + \"-\" + formatDayOrMonth(day);\n            }\n            // NgbDateStruct\n            if (typeof obj === 'object' && obj.year != null && obj.month != null && obj.day != null) {\n                var month = +obj.month;\n                var day = +obj.day;\n                return obj.year + \"-\" + formatDayOrMonth(month) + \"-\" + formatDayOrMonth(day);\n            }\n        }\n        catch (e) { }\n        return obj;\n    }\n    function formatDayOrMonth(month) {\n        return month < 10 ? \"0\" + month : month;\n    }\n\n    var arrayLength = function (value) {\n        return function (control) {\n            if (isPresent(forms.Validators.required(control))) {\n                return null;\n            }\n            var obj = control.value;\n            return Array.isArray(obj) && obj.length >= +value ? null : { arrayLength: { minLength: value } };\n        };\n    };\n\n    var base64 = function (control) {\n        if (isPresent(forms.Validators.required(control))) {\n            return null;\n        }\n        var v = control.value;\n        return /^(?:[A-Z0-9+\\/]{4})*(?:[A-Z0-9+\\/]{2}==|[A-Z0-9+\\/]{3}=|[A-Z0-9+\\/]{4})$/i.test(v) ? null : { base64: true };\n    };\n\n    var creditCard = function (control) {\n        if (isPresent(forms.Validators.required(control))) {\n            return null;\n        }\n        var v = control.value;\n        var sanitized = v.replace(/[^0-9]+/g, '');\n        // problem with chrome\n        /* tslint:disable */\n        if (!(/^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11}|(?:9792)\\d{12})$/.test(sanitized))) {\n            return { creditCard: true };\n        }\n        /* tslint:enable */\n        var sum = 0;\n        var digit;\n        var tmpNum;\n        var shouldDouble;\n        for (var i = sanitized.length - 1; i >= 0; i--) {\n            digit = sanitized.substring(i, (i + 1));\n            tmpNum = parseInt(digit, 10);\n            if (shouldDouble) {\n                tmpNum *= 2;\n                if (tmpNum >= 10) {\n                    sum += ((tmpNum % 10) + 1);\n                }\n                else {\n                    sum += tmpNum;\n                }\n            }\n            else {\n                sum += tmpNum;\n            }\n            shouldDouble = !shouldDouble;\n        }\n        if (Boolean((sum % 10) === 0 ? sanitized : false)) {\n            return null;\n        }\n        return { creditCard: true };\n    };\n\n    var date = function (control) {\n        if (isPresent(forms.Validators.required(control))) {\n            return null;\n        }\n        var v = control.value;\n        v = parseDate(v);\n        return isDate(v) ? null : { date: true };\n    };\n\n    var dateISO = function (control) {\n        if (isPresent(forms.Validators.required(control))) {\n            return null;\n        }\n        var v = control.value;\n        return /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/.test(v) ? null : { dateISO: true };\n    };\n\n    var digits = function (control) {\n        if (isPresent(forms.Validators.required(control))) {\n            return null;\n        }\n        var v = control.value;\n        return /^\\d+$/.test(v) ? null : { digits: true };\n    };\n\n    var email = function (control) {\n        if (isPresent(forms.Validators.required(control))) {\n            return null;\n        }\n        var v = control.value;\n        /* tslint:disable */\n        return /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(v) ? null : { 'email': true };\n        /* tslint:enable */\n    };\n\n    var equal = function (val) {\n        return function (control) {\n            if (isPresent(forms.Validators.required(control))) {\n                return null;\n            }\n            var v = control.value;\n            return val === v ? null : { equal: { value: val } };\n        };\n    };\n\n    var equalTo = function (equalControl) {\n        var subscribe = false;\n        return function (control) {\n            if (!subscribe) {\n                subscribe = true;\n                equalControl.valueChanges.subscribe(function () {\n                    control.updateValueAndValidity();\n                });\n            }\n            var v = control.value;\n            return equalControl.value === v ? null : { equalTo: { control: equalControl, value: equalControl.value } };\n        };\n    };\n\n    var gt = function (value) {\n        return function (control) {\n            if (!isPresent(value)) {\n                return null;\n            }\n            if (isPresent(forms.Validators.required(control))) {\n                return null;\n            }\n            var v = +control.value;\n            return v > +value ? null : { gt: { value: value } };\n        };\n    };\n\n    var gte = function (value) {\n        return function (control) {\n            if (!isPresent(value)) {\n                return null;\n            }\n            if (isPresent(forms.Validators.required(control))) {\n                return null;\n            }\n            var v = +control.value;\n            return v >= +value ? null : { gte: { value: value } };\n        };\n    };\n\n    var json = function (control) {\n        if (isPresent(forms.Validators.required(control))) {\n            return null;\n        }\n        var v = control.value;\n        try {\n            var obj = JSON.parse(v);\n            if (Boolean(obj) && typeof obj === 'object') {\n                return null;\n            }\n        }\n        catch (e) { }\n        return { json: true };\n    };\n\n    var lt = function (value) {\n        return function (control) {\n            if (!isPresent(value)) {\n                return null;\n            }\n            if (isPresent(forms.Validators.required(control))) {\n                return null;\n            }\n            var v = +control.value;\n            return v < +value ? null : { lt: { value: value } };\n        };\n    };\n\n    var lte = function (value) {\n        return function (control) {\n            if (!isPresent(value)) {\n                return null;\n            }\n            if (isPresent(forms.Validators.required(control))) {\n                return null;\n            }\n            var v = +control.value;\n            return v <= +value ? null : { lte: { value: value } };\n        };\n    };\n\n    var max = function (value) {\n        return function (control) {\n            if (!isPresent(value)) {\n                return null;\n            }\n            if (isPresent(forms.Validators.required(control))) {\n                return null;\n            }\n            var v = +control.value;\n            return v <= +value ? null : { max: { value: value } };\n        };\n    };\n\n    var maxDate = function (maxInput) {\n        var value;\n        var subscribe = false;\n        var maxValue = maxInput;\n        var isForm = maxInput instanceof forms.FormControl || maxInput instanceof forms.NgModel;\n        return function (control) {\n            if (!subscribe && isForm) {\n                subscribe = true;\n                maxInput.valueChanges.subscribe(function () {\n                    control.updateValueAndValidity();\n                });\n            }\n            if (isForm) {\n                maxValue = maxInput.value;\n            }\n            value = parseDate(maxValue);\n            if (!isDate(value) && !(value instanceof Function)) {\n                if (value == null) {\n                    return null;\n                }\n                else if (isForm) {\n                    return { maxDate: { error: 'maxDate is invalid' } };\n                }\n                else {\n                    throw Error('maxDate value must be or return a formatted date');\n                }\n            }\n            if (isPresent(forms.Validators.required(control))) {\n                return null;\n            }\n            var d = new Date(parseDate(control.value)).getTime();\n            if (!isDate(d)) {\n                return { value: true };\n            }\n            if (value instanceof Function) {\n                value = value();\n            }\n            return d <= new Date(value).getTime() ? null : (isForm ? { maxDate: { control: maxInput, value: maxInput.value } } : { maxDate: { value: maxValue, control: undefined } });\n        };\n    };\n\n    var min = function (value) {\n        return function (control) {\n            if (!isPresent(value)) {\n                return null;\n            }\n            if (isPresent(forms.Validators.required(control))) {\n                return null;\n            }\n            var v = +control.value;\n            return v >= +value ? null : { min: { value: value } };\n        };\n    };\n\n    var minDate = function (minInput) {\n        var value;\n        var subscribe = false;\n        var minValue = minInput;\n        var isForm = minInput instanceof forms.FormControl || minInput instanceof forms.NgModel;\n        return function (control) {\n            if (!subscribe && isForm) {\n                subscribe = true;\n                minInput.valueChanges.subscribe(function () {\n                    control.updateValueAndValidity();\n                });\n            }\n            if (isForm) {\n                minValue = minInput.value;\n            }\n            value = parseDate(minValue);\n            if (!isDate(value) && !(value instanceof Function)) {\n                if (value == null) {\n                    return null;\n                }\n                else if (isForm) {\n                    return { minDate: { error: 'minDate is invalid' } };\n                }\n                else {\n                    throw Error('minDate value must be or return a formatted date');\n                }\n            }\n            if (isPresent(forms.Validators.required(control))) {\n                return null;\n            }\n            var d = new Date(parseDate(control.value)).getTime();\n            if (!isDate(d)) {\n                return { value: true };\n            }\n            if (value instanceof Function) {\n                value = value();\n            }\n            return d >= new Date(value).getTime() ? null : (isForm ? { minDate: { control: minInput, value: minInput.value } } : { minDate: { value: minValue, control: undefined } });\n        };\n    };\n\n    var notEqual = function (val) {\n        return function (control) {\n            if (isPresent(forms.Validators.required(control))) {\n                return null;\n            }\n            var v = control.value;\n            return val !== v ? null : { notEqual: { value: val } };\n        };\n    };\n\n    var notEqualTo = function (notEqualControl) {\n        var subscribe = false;\n        return function (control) {\n            if (!subscribe) {\n                subscribe = true;\n                notEqualControl.valueChanges.subscribe(function () {\n                    control.updateValueAndValidity();\n                });\n            }\n            var v = control.value;\n            if (notEqualControl.value == null && v == null) {\n                return null;\n            }\n            return notEqualControl.value !== v ? null : { notEqualTo: { control: notEqualControl, value: notEqualControl.value } };\n        };\n    };\n\n    var number = function (control) {\n        if (isPresent(forms.Validators.required(control))) {\n            return null;\n        }\n        var v = control.value;\n        return /^(?:-?\\d+|-?\\d{1,3}(?:,\\d{3})+)?(?:\\.\\d+)?$/.test(v) ? null : { 'number': true };\n    };\n\n    var property = function (value) {\n        return function (control) {\n            var e_1, _a;\n            if (isPresent(forms.Validators.required(control))) {\n                return null;\n            }\n            var properties = value.split(',');\n            var obj = control.value;\n            var isValid = true;\n            try {\n                for (var properties_1 = __values(properties), properties_1_1 = properties_1.next(); !properties_1_1.done; properties_1_1 = properties_1.next()) {\n                    var prop = properties_1_1.value;\n                    if (obj[prop] == null) {\n                        isValid = false;\n                        break;\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (properties_1_1 && !properties_1_1.done && (_a = properties_1.return)) _a.call(properties_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            return isValid ? null : { hasProperty: { value: value } };\n        };\n    };\n\n    var range = function (value) {\n        return function (control) {\n            if (!isPresent(value)) {\n                return null;\n            }\n            if (isPresent(forms.Validators.required(control))) {\n                return null;\n            }\n            var v = +control.value;\n            return v >= value[0] && v <= value[1] ? null : { range: { value: value } };\n        };\n    };\n\n    var rangeLength = function (value) {\n        return function (control) {\n            if (!isPresent(value)) {\n                return null;\n            }\n            if (isPresent(forms.Validators.required(control))) {\n                return null;\n            }\n            var v = control.value;\n            return v.length >= value[0] && v.length <= value[1] ? null : { rangeLength: { value: value } };\n        };\n    };\n\n    var uuids = {\n        '3': /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\n        '4': /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\n        '5': /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\n        'all': /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i\n    };\n    var uuid = function (version) {\n        return function (control) {\n            if (isPresent(forms.Validators.required(control))) {\n                return null;\n            }\n            var v = control.value;\n            var pattern = uuids[version] || uuids.all;\n            return (new RegExp(pattern)).test(v) ? null : { uuid: true };\n        };\n    };\n\n    var url = function (control) {\n        if (isPresent(forms.Validators.required(control))) {\n            return null;\n        }\n        var v = control.value;\n        /* tslint:disable */\n        return /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})).?)(?::\\d{2,5})?(?:[/?#]\\S*)?$/i.test(v) ? null : { 'url': true };\n        /* tslint:enable */\n    };\n\n    var ARRAY_LENGTH_VALIDATOR = {\n        provide: forms.NG_VALIDATORS,\n        useExisting: core.forwardRef(function () { return ArrayLengthValidator; }),\n        multi: true\n    };\n    var ArrayLengthValidator = /** @class */ (function () {\n        function ArrayLengthValidator() {\n        }\n        ArrayLengthValidator.prototype.ngOnInit = function () {\n            this.validator = arrayLength(this.arrayLength);\n        };\n        ArrayLengthValidator.prototype.ngOnChanges = function (changes) {\n            for (var key in changes) {\n                if (key === 'arrayLength') {\n                    this.validator = arrayLength(changes[key].currentValue);\n                    if (this.onChange) {\n                        this.onChange();\n                    }\n                }\n            }\n        };\n        ArrayLengthValidator.prototype.validate = function (c) {\n            return this.validator(c);\n        };\n        ArrayLengthValidator.prototype.registerOnValidatorChange = function (fn) {\n            this.onChange = fn;\n        };\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], ArrayLengthValidator.prototype, \"arrayLength\", void 0);\n        ArrayLengthValidator = __decorate([\n            core.Directive({\n                selector: '[arrayLength][formControlName],[arrayLength][formControl],[arrayLength][ngModel]',\n                providers: [ARRAY_LENGTH_VALIDATOR]\n            })\n        ], ArrayLengthValidator);\n        return ArrayLengthValidator;\n    }());\n\n    var BASE64_VALIDATOR = {\n        provide: forms.NG_VALIDATORS,\n        useExisting: core.forwardRef(function () { return Base64Validator; }),\n        multi: true\n    };\n    var Base64Validator = /** @class */ (function () {\n        function Base64Validator() {\n        }\n        Base64Validator.prototype.validate = function (c) {\n            return base64(c);\n        };\n        Base64Validator = __decorate([\n            core.Directive({\n                selector: '[base64][formControlName],[base64][formControl],[base64][ngModel]',\n                providers: [BASE64_VALIDATOR]\n            })\n        ], Base64Validator);\n        return Base64Validator;\n    }());\n\n    var CREDIT_CARD_VALIDATOR = {\n        provide: forms.NG_VALIDATORS,\n        useExisting: core.forwardRef(function () { return CreditCardValidator; }),\n        multi: true\n    };\n    var CreditCardValidator = /** @class */ (function () {\n        function CreditCardValidator() {\n        }\n        CreditCardValidator.prototype.validate = function (c) {\n            return creditCard(c);\n        };\n        CreditCardValidator = __decorate([\n            core.Directive({\n                selector: '[creditCard][formControlName],[creditCard][formControl],[creditCard][ngModel]',\n                providers: [CREDIT_CARD_VALIDATOR]\n            })\n        ], CreditCardValidator);\n        return CreditCardValidator;\n    }());\n\n    var DATE_VALIDATOR = {\n        provide: forms.NG_VALIDATORS,\n        useExisting: core.forwardRef(function () { return DateValidator; }),\n        multi: true\n    };\n    var DateValidator = /** @class */ (function () {\n        function DateValidator() {\n        }\n        DateValidator.prototype.validate = function (c) {\n            return date(c);\n        };\n        DateValidator = __decorate([\n            core.Directive({\n                selector: '[date][formControlName],[date][formControl],[date][ngModel]',\n                providers: [DATE_VALIDATOR]\n            })\n        ], DateValidator);\n        return DateValidator;\n    }());\n\n    var DATE_ISO_VALIDATOR = {\n        provide: forms.NG_VALIDATORS,\n        useExisting: core.forwardRef(function () { return DateISOValidator; }),\n        multi: true\n    };\n    var DateISOValidator = /** @class */ (function () {\n        function DateISOValidator() {\n        }\n        DateISOValidator.prototype.validate = function (c) {\n            return dateISO(c);\n        };\n        DateISOValidator = __decorate([\n            core.Directive({\n                selector: '[dateISO][formControlName],[dateISO][formControl],[dateISO][ngModel]',\n                providers: [DATE_ISO_VALIDATOR]\n            })\n        ], DateISOValidator);\n        return DateISOValidator;\n    }());\n\n    var DIGITS_VALIDATOR = {\n        provide: forms.NG_VALIDATORS,\n        useExisting: core.forwardRef(function () { return DigitsValidator; }),\n        multi: true\n    };\n    var DigitsValidator = /** @class */ (function () {\n        function DigitsValidator() {\n        }\n        DigitsValidator.prototype.validate = function (c) {\n            return digits(c);\n        };\n        DigitsValidator = __decorate([\n            core.Directive({\n                selector: '[digits][formControlName],[digits][formControl],[digits][ngModel]',\n                providers: [DIGITS_VALIDATOR]\n            })\n        ], DigitsValidator);\n        return DigitsValidator;\n    }());\n\n    var EMAIL_VALIDATOR = {\n        provide: forms.NG_VALIDATORS,\n        useExisting: core.forwardRef(function () { return EmailValidator; }),\n        multi: true\n    };\n    var EmailValidator = /** @class */ (function () {\n        function EmailValidator() {\n        }\n        EmailValidator.prototype.validate = function (c) {\n            return email(c);\n        };\n        EmailValidator = __decorate([\n            core.Directive({\n                selector: '[ngvemail][formControlName],[ngvemail][formControl],[ngvemail][ngModel]',\n                providers: [EMAIL_VALIDATOR]\n            })\n        ], EmailValidator);\n        return EmailValidator;\n    }());\n\n    var EQUAL_VALIDATOR = {\n        provide: forms.NG_VALIDATORS,\n        useExisting: core.forwardRef(function () { return EqualValidator; }),\n        multi: true\n    };\n    var EqualValidator = /** @class */ (function () {\n        function EqualValidator() {\n        }\n        EqualValidator.prototype.ngOnInit = function () {\n            this.validator = equal(this.equal);\n        };\n        EqualValidator.prototype.ngOnChanges = function (changes) {\n            for (var key in changes) {\n                if (key === 'equal') {\n                    this.validator = equal(changes[key].currentValue);\n                    if (this.onChange) {\n                        this.onChange();\n                    }\n                }\n            }\n        };\n        EqualValidator.prototype.validate = function (c) {\n            return this.validator(c);\n        };\n        EqualValidator.prototype.registerOnValidatorChange = function (fn) {\n            this.onChange = fn;\n        };\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], EqualValidator.prototype, \"equal\", void 0);\n        EqualValidator = __decorate([\n            core.Directive({\n                selector: '[equal][formControlName],[equal][formControl],[equal][ngModel]',\n                providers: [EQUAL_VALIDATOR]\n            })\n        ], EqualValidator);\n        return EqualValidator;\n    }());\n\n    var EQUAL_TO_VALIDATOR = {\n        provide: forms.NG_VALIDATORS,\n        useExisting: core.forwardRef(function () { return EqualToValidator; }),\n        multi: true\n    };\n    var EqualToValidator = /** @class */ (function () {\n        function EqualToValidator() {\n        }\n        EqualToValidator.prototype.ngOnInit = function () {\n            this.validator = equalTo(this.equalTo);\n        };\n        EqualToValidator.prototype.validate = function (c) {\n            return this.validator(c);\n        };\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", forms.FormControl)\n        ], EqualToValidator.prototype, \"equalTo\", void 0);\n        EqualToValidator = __decorate([\n            core.Directive({\n                selector: '[equalTo][formControlName],[equalTo][formControl],[equalTo][ngModel]',\n                providers: [EQUAL_TO_VALIDATOR]\n            })\n        ], EqualToValidator);\n        return EqualToValidator;\n    }());\n\n    var GREATER_THAN_VALIDATOR = {\n        provide: forms.NG_VALIDATORS,\n        useExisting: core.forwardRef(function () { return GreaterThanValidator; }),\n        multi: true\n    };\n    var GreaterThanValidator = /** @class */ (function () {\n        function GreaterThanValidator() {\n        }\n        GreaterThanValidator.prototype.ngOnInit = function () {\n            this.validator = gt(this.gt);\n        };\n        GreaterThanValidator.prototype.ngOnChanges = function (changes) {\n            for (var key in changes) {\n                if (key === 'gt') {\n                    this.validator = gt(changes[key].currentValue);\n                    if (this.onChange) {\n                        this.onChange();\n                    }\n                }\n            }\n        };\n        GreaterThanValidator.prototype.validate = function (c) {\n            return this.validator(c);\n        };\n        GreaterThanValidator.prototype.registerOnValidatorChange = function (fn) {\n            this.onChange = fn;\n        };\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], GreaterThanValidator.prototype, \"gt\", void 0);\n        GreaterThanValidator = __decorate([\n            core.Directive({\n                selector: '[gt][formControlName],[gt][formControl],[gt][ngModel]',\n                providers: [GREATER_THAN_VALIDATOR]\n            })\n        ], GreaterThanValidator);\n        return GreaterThanValidator;\n    }());\n\n    var GREATER_THAN_EQUAL_VALIDATOR = {\n        provide: forms.NG_VALIDATORS,\n        useExisting: core.forwardRef(function () { return GreaterThanEqualValidator; }),\n        multi: true\n    };\n    var GreaterThanEqualValidator = /** @class */ (function () {\n        function GreaterThanEqualValidator() {\n        }\n        GreaterThanEqualValidator.prototype.ngOnInit = function () {\n            this.validator = gte(this.gte);\n        };\n        GreaterThanEqualValidator.prototype.ngOnChanges = function (changes) {\n            for (var key in changes) {\n                if (key === 'gte') {\n                    this.validator = gte(changes[key].currentValue);\n                    if (this.onChange) {\n                        this.onChange();\n                    }\n                }\n            }\n        };\n        GreaterThanEqualValidator.prototype.validate = function (c) {\n            return this.validator(c);\n        };\n        GreaterThanEqualValidator.prototype.registerOnValidatorChange = function (fn) {\n            this.onChange = fn;\n        };\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], GreaterThanEqualValidator.prototype, \"gte\", void 0);\n        GreaterThanEqualValidator = __decorate([\n            core.Directive({\n                selector: '[gte][formControlName],[gte][formControl],[gte][ngModel]',\n                providers: [GREATER_THAN_EQUAL_VALIDATOR]\n            })\n        ], GreaterThanEqualValidator);\n        return GreaterThanEqualValidator;\n    }());\n\n    var JSON_VALIDATOR = {\n        provide: forms.NG_VALIDATORS,\n        useExisting: core.forwardRef(function () { return JSONValidator; }),\n        multi: true\n    };\n    var JSONValidator = /** @class */ (function () {\n        function JSONValidator() {\n        }\n        JSONValidator.prototype.validate = function (c) {\n            return json(c);\n        };\n        JSONValidator = __decorate([\n            core.Directive({\n                selector: '[json][formControlName],[json][formControl],[json][ngModel]',\n                providers: [JSON_VALIDATOR]\n            })\n        ], JSONValidator);\n        return JSONValidator;\n    }());\n\n    var LESS_THAN_VALIDATOR = {\n        provide: forms.NG_VALIDATORS,\n        useExisting: core.forwardRef(function () { return LessThanValidator; }),\n        multi: true\n    };\n    var LessThanValidator = /** @class */ (function () {\n        function LessThanValidator() {\n        }\n        LessThanValidator.prototype.ngOnInit = function () {\n            this.validator = lt(this.lt);\n        };\n        LessThanValidator.prototype.ngOnChanges = function (changes) {\n            for (var key in changes) {\n                if (key === 'lt') {\n                    this.validator = lt(changes[key].currentValue);\n                    if (this.onChange) {\n                        this.onChange();\n                    }\n                }\n            }\n        };\n        LessThanValidator.prototype.validate = function (c) {\n            return this.validator(c);\n        };\n        LessThanValidator.prototype.registerOnValidatorChange = function (fn) {\n            this.onChange = fn;\n        };\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], LessThanValidator.prototype, \"lt\", void 0);\n        LessThanValidator = __decorate([\n            core.Directive({\n                selector: '[lt][formControlName],[lt][formControl],[lt][ngModel]',\n                providers: [LESS_THAN_VALIDATOR]\n            })\n        ], LessThanValidator);\n        return LessThanValidator;\n    }());\n\n    var LESS_THAN_EQUAL_VALIDATOR = {\n        provide: forms.NG_VALIDATORS,\n        useExisting: core.forwardRef(function () { return LessThanEqualValidator; }),\n        multi: true\n    };\n    var LessThanEqualValidator = /** @class */ (function () {\n        function LessThanEqualValidator() {\n        }\n        LessThanEqualValidator.prototype.ngOnInit = function () {\n            this.validator = lte(this.lte);\n        };\n        LessThanEqualValidator.prototype.ngOnChanges = function (changes) {\n            for (var key in changes) {\n                if (key === 'lte') {\n                    this.validator = lte(changes[key].currentValue);\n                    if (this.onChange) {\n                        this.onChange();\n                    }\n                }\n            }\n        };\n        LessThanEqualValidator.prototype.validate = function (c) {\n            return this.validator(c);\n        };\n        LessThanEqualValidator.prototype.registerOnValidatorChange = function (fn) {\n            this.onChange = fn;\n        };\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], LessThanEqualValidator.prototype, \"lte\", void 0);\n        LessThanEqualValidator = __decorate([\n            core.Directive({\n                selector: '[lte][formControlName],[lte][formControl],[lte][ngModel]',\n                providers: [LESS_THAN_EQUAL_VALIDATOR]\n            })\n        ], LessThanEqualValidator);\n        return LessThanEqualValidator;\n    }());\n\n    var MAX_VALIDATOR = {\n        provide: forms.NG_VALIDATORS,\n        useExisting: core.forwardRef(function () { return MaxValidator; }),\n        multi: true\n    };\n    var MaxValidator = /** @class */ (function () {\n        function MaxValidator() {\n        }\n        MaxValidator.prototype.ngOnInit = function () {\n            this.validator = max(this.max);\n        };\n        MaxValidator.prototype.ngOnChanges = function (changes) {\n            for (var key in changes) {\n                if (key === 'max') {\n                    this.validator = max(changes[key].currentValue);\n                    if (this.onChange) {\n                        this.onChange();\n                    }\n                }\n            }\n        };\n        MaxValidator.prototype.validate = function (c) {\n            return this.validator(c);\n        };\n        MaxValidator.prototype.registerOnValidatorChange = function (fn) {\n            this.onChange = fn;\n        };\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], MaxValidator.prototype, \"max\", void 0);\n        MaxValidator = __decorate([\n            core.Directive({\n                selector: '[max][formControlName],[max][formControl],[max][ngModel]',\n                providers: [MAX_VALIDATOR]\n            })\n        ], MaxValidator);\n        return MaxValidator;\n    }());\n\n    var MAX_DATE_VALIDATOR = {\n        provide: forms.NG_VALIDATORS,\n        useExisting: core.forwardRef(function () { return MaxDateValidator; }),\n        multi: true\n    };\n    var MaxDateValidator = /** @class */ (function () {\n        function MaxDateValidator() {\n        }\n        MaxDateValidator.prototype.ngOnInit = function () {\n            this.validator = maxDate(this.maxDate);\n        };\n        MaxDateValidator.prototype.ngOnChanges = function (changes) {\n            for (var key in changes) {\n                if (key === 'maxDate') {\n                    this.validator = maxDate(changes[key].currentValue);\n                    if (this.onChange) {\n                        this.onChange();\n                    }\n                }\n            }\n        };\n        MaxDateValidator.prototype.validate = function (c) {\n            return this.validator(c);\n        };\n        MaxDateValidator.prototype.registerOnValidatorChange = function (fn) {\n            this.onChange = fn;\n        };\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], MaxDateValidator.prototype, \"maxDate\", void 0);\n        MaxDateValidator = __decorate([\n            core.Directive({\n                selector: '[maxDate][formControlName],[maxDate][formControl],[maxDate][ngModel]',\n                providers: [MAX_DATE_VALIDATOR]\n            })\n        ], MaxDateValidator);\n        return MaxDateValidator;\n    }());\n\n    var MIN_VALIDATOR = {\n        provide: forms.NG_VALIDATORS,\n        useExisting: core.forwardRef(function () { return MinValidator; }),\n        multi: true\n    };\n    var MinValidator = /** @class */ (function () {\n        function MinValidator() {\n        }\n        MinValidator.prototype.ngOnInit = function () {\n            this.validator = min(this.min);\n        };\n        MinValidator.prototype.ngOnChanges = function (changes) {\n            for (var key in changes) {\n                if (key === 'min') {\n                    this.validator = min(changes[key].currentValue);\n                    if (this.onChange) {\n                        this.onChange();\n                    }\n                }\n            }\n        };\n        MinValidator.prototype.validate = function (c) {\n            return this.validator(c);\n        };\n        MinValidator.prototype.registerOnValidatorChange = function (fn) {\n            this.onChange = fn;\n        };\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number)\n        ], MinValidator.prototype, \"min\", void 0);\n        MinValidator = __decorate([\n            core.Directive({\n                selector: '[min][formControlName],[min][formControl],[min][ngModel]',\n                providers: [MIN_VALIDATOR]\n            })\n        ], MinValidator);\n        return MinValidator;\n    }());\n\n    var MIN_DATE_VALIDATOR = {\n        provide: forms.NG_VALIDATORS,\n        useExisting: core.forwardRef(function () { return MinDateValidator; }),\n        multi: true\n    };\n    var MinDateValidator = /** @class */ (function () {\n        function MinDateValidator() {\n        }\n        MinDateValidator.prototype.ngOnInit = function () {\n            this.validator = minDate(this.minDate);\n        };\n        MinDateValidator.prototype.ngOnChanges = function (changes) {\n            for (var key in changes) {\n                if (key === 'minDate') {\n                    this.validator = minDate(changes[key].currentValue);\n                    if (this.onChange) {\n                        this.onChange();\n                    }\n                }\n            }\n        };\n        MinDateValidator.prototype.validate = function (c) {\n            return this.validator(c);\n        };\n        MinDateValidator.prototype.registerOnValidatorChange = function (fn) {\n            this.onChange = fn;\n        };\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], MinDateValidator.prototype, \"minDate\", void 0);\n        MinDateValidator = __decorate([\n            core.Directive({\n                selector: '[minDate][formControlName],[minDate][formControl],[minDate][ngModel]',\n                providers: [MIN_DATE_VALIDATOR]\n            })\n        ], MinDateValidator);\n        return MinDateValidator;\n    }());\n\n    var NOT_EQUAL_VALIDATOR = {\n        provide: forms.NG_VALIDATORS,\n        useExisting: core.forwardRef(function () { return NotEqualValidator; }),\n        multi: true\n    };\n    var NotEqualValidator = /** @class */ (function () {\n        function NotEqualValidator() {\n        }\n        NotEqualValidator.prototype.ngOnInit = function () {\n            this.validator = notEqual(this.notEqual);\n        };\n        NotEqualValidator.prototype.ngOnChanges = function (changes) {\n            for (var key in changes) {\n                if (key === 'notEqual') {\n                    this.validator = notEqual(changes[key].currentValue);\n                    if (this.onChange) {\n                        this.onChange();\n                    }\n                }\n            }\n        };\n        NotEqualValidator.prototype.validate = function (c) {\n            return this.validator(c);\n        };\n        NotEqualValidator.prototype.registerOnValidatorChange = function (fn) {\n            this.onChange = fn;\n        };\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], NotEqualValidator.prototype, \"notEqual\", void 0);\n        NotEqualValidator = __decorate([\n            core.Directive({\n                selector: '[notEqual][formControlName],[notEqual][formControl],[notEqual][ngModel]',\n                providers: [NOT_EQUAL_VALIDATOR]\n            })\n        ], NotEqualValidator);\n        return NotEqualValidator;\n    }());\n\n    var NOT_EQUAL_TO_VALIDATOR = {\n        provide: forms.NG_VALIDATORS,\n        useExisting: core.forwardRef(function () { return NotEqualToValidator; }),\n        multi: true\n    };\n    var NotEqualToValidator = /** @class */ (function () {\n        function NotEqualToValidator() {\n        }\n        NotEqualToValidator.prototype.ngOnInit = function () {\n            this.validator = notEqualTo(this.notEqualTo);\n        };\n        NotEqualToValidator.prototype.validate = function (c) {\n            return this.validator(c);\n        };\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", forms.FormControl)\n        ], NotEqualToValidator.prototype, \"notEqualTo\", void 0);\n        NotEqualToValidator = __decorate([\n            core.Directive({\n                selector: '[notEqualTo][formControlName],[notEqualTo][formControl],[notEqualTo][ngModel]',\n                providers: [NOT_EQUAL_TO_VALIDATOR]\n            })\n        ], NotEqualToValidator);\n        return NotEqualToValidator;\n    }());\n\n    var NUMBER_VALIDATOR = {\n        provide: forms.NG_VALIDATORS,\n        useExisting: core.forwardRef(function () { return NumberValidator; }),\n        multi: true\n    };\n    var NumberValidator = /** @class */ (function () {\n        function NumberValidator() {\n        }\n        NumberValidator.prototype.validate = function (c) {\n            return number(c);\n        };\n        NumberValidator = __decorate([\n            core.Directive({\n                selector: '[number][formControlName],[number][formControl],[number][ngModel]',\n                providers: [NUMBER_VALIDATOR]\n            })\n        ], NumberValidator);\n        return NumberValidator;\n    }());\n\n    var PROPERTY_VALIDATOR = {\n        provide: forms.NG_VALIDATORS,\n        useExisting: core.forwardRef(function () { return PropertyValidator; }),\n        multi: true\n    };\n    var PropertyValidator = /** @class */ (function () {\n        function PropertyValidator() {\n        }\n        PropertyValidator.prototype.ngOnInit = function () {\n            this.validator = property(this.property);\n        };\n        PropertyValidator.prototype.ngOnChanges = function (changes) {\n            for (var key in changes) {\n                if (key === 'property') {\n                    this.validator = property(changes[key].currentValue);\n                    if (this.onChange) {\n                        this.onChange();\n                    }\n                }\n            }\n        };\n        PropertyValidator.prototype.validate = function (c) {\n            return this.validator(c);\n        };\n        PropertyValidator.prototype.registerOnValidatorChange = function (fn) {\n            this.onChange = fn;\n        };\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", String)\n        ], PropertyValidator.prototype, \"property\", void 0);\n        PropertyValidator = __decorate([\n            core.Directive({\n                selector: '[property][formControlName],[property][formControl],[property][ngModel]',\n                providers: [PROPERTY_VALIDATOR]\n            })\n        ], PropertyValidator);\n        return PropertyValidator;\n    }());\n\n    var RANGE_VALIDATOR = {\n        provide: forms.NG_VALIDATORS,\n        useExisting: core.forwardRef(function () { return RangeValidator; }),\n        multi: true\n    };\n    var RangeValidator = /** @class */ (function () {\n        function RangeValidator() {\n        }\n        RangeValidator.prototype.ngOnInit = function () {\n            this.validator = range(this.range);\n        };\n        RangeValidator.prototype.ngOnChanges = function (changes) {\n            for (var key in changes) {\n                if (key === 'range') {\n                    this.validator = range(changes[key].currentValue);\n                    if (this.onChange) {\n                        this.onChange();\n                    }\n                }\n            }\n        };\n        RangeValidator.prototype.validate = function (c) {\n            return this.validator(c);\n        };\n        RangeValidator.prototype.registerOnValidatorChange = function (fn) {\n            this.onChange = fn;\n        };\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Array)\n        ], RangeValidator.prototype, \"range\", void 0);\n        RangeValidator = __decorate([\n            core.Directive({\n                selector: '[range][formControlName],[range][formControl],[range][ngModel]',\n                providers: [RANGE_VALIDATOR]\n            })\n        ], RangeValidator);\n        return RangeValidator;\n    }());\n\n    var RANGE_LENGTH_VALIDATOR = {\n        provide: forms.NG_VALIDATORS,\n        useExisting: core.forwardRef(function () { return RangeLengthValidator; }),\n        multi: true\n    };\n    var RangeLengthValidator = /** @class */ (function () {\n        function RangeLengthValidator() {\n        }\n        RangeLengthValidator.prototype.ngOnInit = function () {\n            this.validator = rangeLength(this.rangeLength);\n        };\n        RangeLengthValidator.prototype.ngOnChanges = function (changes) {\n            for (var key in changes) {\n                if (key === 'rangeLength') {\n                    this.validator = rangeLength(changes[key].currentValue);\n                    if (this.onChange) {\n                        this.onChange();\n                    }\n                }\n            }\n        };\n        RangeLengthValidator.prototype.validate = function (c) {\n            return this.validator(c);\n        };\n        RangeLengthValidator.prototype.registerOnValidatorChange = function (fn) {\n            this.onChange = fn;\n        };\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Array)\n        ], RangeLengthValidator.prototype, \"rangeLength\", void 0);\n        RangeLengthValidator = __decorate([\n            core.Directive({\n                selector: '[rangeLength][formControlName],[rangeLength][formControl],[rangeLength][ngModel]',\n                providers: [RANGE_LENGTH_VALIDATOR]\n            })\n        ], RangeLengthValidator);\n        return RangeLengthValidator;\n    }());\n\n    var URL_VALIDATOR = {\n        provide: forms.NG_VALIDATORS,\n        useExisting: core.forwardRef(function () { return UrlValidator; }),\n        multi: true\n    };\n    var UrlValidator = /** @class */ (function () {\n        function UrlValidator() {\n        }\n        UrlValidator.prototype.validate = function (c) {\n            return url(c);\n        };\n        UrlValidator = __decorate([\n            core.Directive({\n                selector: '[url][formControlName],[url][formControl],[url][ngModel]',\n                providers: [URL_VALIDATOR]\n            })\n        ], UrlValidator);\n        return UrlValidator;\n    }());\n\n    var UUID_VALIDATOR = {\n        provide: forms.NG_VALIDATORS,\n        useExisting: core.forwardRef(function () { return UUIDValidator; }),\n        multi: true\n    };\n    var UUIDValidator = /** @class */ (function () {\n        function UUIDValidator() {\n        }\n        UUIDValidator.prototype.ngOnInit = function () {\n            this.validator = uuid(this.uuid);\n        };\n        UUIDValidator.prototype.ngOnChanges = function (changes) {\n            for (var key in changes) {\n                if (key === 'uuid') {\n                    this.validator = uuid(changes[key].currentValue);\n                    if (this.onChange) {\n                        this.onChange();\n                    }\n                }\n            }\n        };\n        UUIDValidator.prototype.validate = function (c) {\n            return this.validator(c);\n        };\n        UUIDValidator.prototype.registerOnValidatorChange = function (fn) {\n            this.onChange = fn;\n        };\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], UUIDValidator.prototype, \"uuid\", void 0);\n        UUIDValidator = __decorate([\n            core.Directive({\n                selector: '[uuid][formControlName],[uuid][formControl],[uuid][ngModel]',\n                providers: [UUID_VALIDATOR]\n            })\n        ], UUIDValidator);\n        return UUIDValidator;\n    }());\n\n    var CustomValidators = {\n        arrayLength: arrayLength,\n        base64: base64,\n        creditCard: creditCard,\n        date: date,\n        dateISO: dateISO,\n        digits: digits,\n        email: email,\n        equal: equal,\n        equalTo: equalTo,\n        gt: gt,\n        gte: gte,\n        json: json,\n        lt: lt,\n        lte: lte,\n        max: max,\n        maxDate: maxDate,\n        min: min,\n        minDate: minDate,\n        notEqual: notEqual,\n        notEqualTo: notEqualTo,\n        number: number,\n        property: property,\n        range: range,\n        rangeLength: rangeLength,\n        url: url,\n        uuid: uuid\n    };\n    var CustomDirectives = [\n        ArrayLengthValidator,\n        Base64Validator,\n        CreditCardValidator,\n        DateValidator,\n        DateISOValidator,\n        DigitsValidator,\n        EmailValidator,\n        EqualValidator,\n        EqualToValidator,\n        GreaterThanValidator,\n        GreaterThanEqualValidator,\n        JSONValidator,\n        LessThanValidator,\n        LessThanEqualValidator,\n        MaxValidator,\n        MaxDateValidator,\n        MinValidator,\n        MinDateValidator,\n        NotEqualValidator,\n        NotEqualToValidator,\n        NumberValidator,\n        PropertyValidator,\n        RangeValidator,\n        RangeLengthValidator,\n        UrlValidator,\n        UUIDValidator\n    ];\n    var CustomFormsModule = /** @class */ (function () {\n        function CustomFormsModule() {\n        }\n        CustomFormsModule = __decorate([\n            core.NgModule({\n                declarations: [CustomDirectives],\n                exports: [CustomDirectives]\n            })\n        ], CustomFormsModule);\n        return CustomFormsModule;\n    }());\n\n    exports.CustomFormsModule = CustomFormsModule;\n    exports.CustomValidators = CustomValidators;\n    exports.ɵa = arrayLength;\n    exports.ɵb = base64;\n    exports.ɵba = ArrayLengthValidator;\n    exports.ɵbb = Base64Validator;\n    exports.ɵbc = CreditCardValidator;\n    exports.ɵbd = DateValidator;\n    exports.ɵbe = DateISOValidator;\n    exports.ɵbf = DigitsValidator;\n    exports.ɵbg = EmailValidator;\n    exports.ɵbh = EqualValidator;\n    exports.ɵbi = EqualToValidator;\n    exports.ɵbj = GreaterThanValidator;\n    exports.ɵbk = GreaterThanEqualValidator;\n    exports.ɵbl = JSONValidator;\n    exports.ɵbm = LessThanValidator;\n    exports.ɵbn = LessThanEqualValidator;\n    exports.ɵbo = MaxValidator;\n    exports.ɵbp = MaxDateValidator;\n    exports.ɵbq = MinValidator;\n    exports.ɵbr = MinDateValidator;\n    exports.ɵbs = NotEqualValidator;\n    exports.ɵbt = NotEqualToValidator;\n    exports.ɵbu = NumberValidator;\n    exports.ɵbv = PropertyValidator;\n    exports.ɵbw = RangeValidator;\n    exports.ɵbx = RangeLengthValidator;\n    exports.ɵby = UrlValidator;\n    exports.ɵbz = UUIDValidator;\n    exports.ɵc = creditCard;\n    exports.ɵd = date;\n    exports.ɵe = dateISO;\n    exports.ɵf = digits;\n    exports.ɵg = email;\n    exports.ɵh = equal;\n    exports.ɵi = equalTo;\n    exports.ɵj = gt;\n    exports.ɵk = gte;\n    exports.ɵl = json;\n    exports.ɵm = lt;\n    exports.ɵn = lte;\n    exports.ɵo = max;\n    exports.ɵp = maxDate;\n    exports.ɵq = min;\n    exports.ɵr = minDate;\n    exports.ɵs = notEqual;\n    exports.ɵt = notEqualTo;\n    exports.ɵu = number;\n    exports.ɵv = property;\n    exports.ɵw = range;\n    exports.ɵx = rangeLength;\n    exports.ɵy = url;\n    exports.ɵz = uuid;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}