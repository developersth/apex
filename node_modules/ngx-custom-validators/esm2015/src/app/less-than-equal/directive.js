import * as tslib_1 from "tslib";
import { Directive, Input, forwardRef } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
import { lte } from './validator';
import * as ɵngcc0 from '@angular/core';
const LESS_THAN_EQUAL_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(() => LessThanEqualValidator),
    multi: true
};
let LessThanEqualValidator = class LessThanEqualValidator {
    ngOnInit() {
        this.validator = lte(this.lte);
    }
    ngOnChanges(changes) {
        for (const key in changes) {
            if (key === 'lte') {
                this.validator = lte(changes[key].currentValue);
                if (this.onChange) {
                    this.onChange();
                }
            }
        }
    }
    validate(c) {
        return this.validator(c);
    }
    registerOnValidatorChange(fn) {
        this.onChange = fn;
    }
};
LessThanEqualValidator.ɵfac = function LessThanEqualValidator_Factory(t) { return new (t || LessThanEqualValidator)(); };
LessThanEqualValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: LessThanEqualValidator, selectors: [["", "lte", "", "formControlName", ""], ["", "lte", "", "formControl", ""], ["", "lte", "", "ngModel", ""]], inputs: { lte: "lte" }, features: [ɵngcc0.ɵɵProvidersFeature([LESS_THAN_EQUAL_VALIDATOR]), ɵngcc0.ɵɵNgOnChangesFeature()] });
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], LessThanEqualValidator.prototype, "lte", void 0);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LessThanEqualValidator, [{
        type: Directive,
        args: [{
                selector: '[lte][formControlName],[lte][formControl],[lte][ngModel]',
                providers: [LESS_THAN_EQUAL_VALIDATOR]
            }]
    }], null, { lte: [{
            type: Input
        }] }); })();
export { LessThanEqualValidator };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNwcm8va3JpdHNhZGVlL1NWTi9DeWJlcnNvZnQvYXBleC9ub2RlX21vZHVsZXMvbmd4LWN1c3RvbS12YWxpZGF0b3JzL2VzbTIwMTUvc3JjL2FwcC9sZXNzLXRoYW4tZXF1YWwvZGlyZWN0aXZlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7OztBQUlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NlVBeUJFOzs7O29EQUlrRDs7Ozs7Ozs7O29CQU16QiIsImZpbGUiOiJkaXJlY3RpdmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgZm9yd2FyZFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTkdfVkFMSURBVE9SUyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IGx0ZSB9IGZyb20gJy4vdmFsaWRhdG9yJztcbmNvbnN0IExFU1NfVEhBTl9FUVVBTF9WQUxJREFUT1IgPSB7XG4gICAgcHJvdmlkZTogTkdfVkFMSURBVE9SUyxcbiAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBMZXNzVGhhbkVxdWFsVmFsaWRhdG9yKSxcbiAgICBtdWx0aTogdHJ1ZVxufTtcbmxldCBMZXNzVGhhbkVxdWFsVmFsaWRhdG9yID0gY2xhc3MgTGVzc1RoYW5FcXVhbFZhbGlkYXRvciB7XG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdG9yID0gbHRlKHRoaXMubHRlKTtcbiAgICB9XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlcykge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBjaGFuZ2VzKSB7XG4gICAgICAgICAgICBpZiAoa2V5ID09PSAnbHRlJykge1xuICAgICAgICAgICAgICAgIHRoaXMudmFsaWRhdG9yID0gbHRlKGNoYW5nZXNba2V5XS5jdXJyZW50VmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9uQ2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFsaWRhdGUoYykge1xuICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0b3IoYyk7XG4gICAgfVxuICAgIHJlZ2lzdGVyT25WYWxpZGF0b3JDaGFuZ2UoZm4pIHtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSA9IGZuO1xuICAgIH1cbn07XG50c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgIElucHV0KCksXG4gICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgTnVtYmVyKVxuXSwgTGVzc1RoYW5FcXVhbFZhbGlkYXRvci5wcm90b3R5cGUsIFwibHRlXCIsIHZvaWQgMCk7XG5MZXNzVGhhbkVxdWFsVmFsaWRhdG9yID0gdHNsaWJfMS5fX2RlY29yYXRlKFtcbiAgICBEaXJlY3RpdmUoe1xuICAgICAgICBzZWxlY3RvcjogJ1tsdGVdW2Zvcm1Db250cm9sTmFtZV0sW2x0ZV1bZm9ybUNvbnRyb2xdLFtsdGVdW25nTW9kZWxdJyxcbiAgICAgICAgcHJvdmlkZXJzOiBbTEVTU19USEFOX0VRVUFMX1ZBTElEQVRPUl1cbiAgICB9KVxuXSwgTGVzc1RoYW5FcXVhbFZhbGlkYXRvcik7XG5leHBvcnQgeyBMZXNzVGhhbkVxdWFsVmFsaWRhdG9yIH07XG4iXX0=