/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewEncapsulation } from '@angular/core';
import { NgbNav } from './nav';
/**
 * The outlet where currently active nav content will be displayed.
 *
 * \@since 5.2.0
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

const _c0 = ["ngbNavOutlet", ""];
function NgbNavOutlet_ng_template_0_div_0_ng_template_1_Template(rf, ctx) { }
const _c1 = function (a0) { return { $implicit: a0 }; };
function NgbNavOutlet_ng_template_0_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵtemplate(1, NgbNavOutlet_ng_template_0_div_0_ng_template_1_Template, 0, 0, "ng-template", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r82 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r83 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("active", item_r82.active);
    ɵngcc0.ɵɵproperty("id", item_r82.panelDomId);
    ɵngcc0.ɵɵattribute("role", ctx_r83.paneRole ? ctx_r83.paneRole : ctx_r83.nav.roles ? "tabpanel" : undefined)("aria-labelledby", item_r82.domId);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", item_r82.contentTpl == null ? null : item_r82.contentTpl.templateRef)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(7, _c1, item_r82.active));
} }
function NgbNavOutlet_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, NgbNavOutlet_ng_template_0_div_0_Template, 2, 9, "div", 1);
} if (rf & 2) {
    const item_r82 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngIf", item_r82.isPanelInDom());
} }
export class NgbNavOutlet {
}
NgbNavOutlet.ɵfac = function NgbNavOutlet_Factory(t) { return new (t || NgbNavOutlet)(); };
NgbNavOutlet.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgbNavOutlet, selectors: [["", "ngbNavOutlet", ""]], hostVars: 2, hostBindings: function NgbNavOutlet_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("tab-content", true);
    } }, inputs: { paneRole: "paneRole", nav: ["ngbNavOutlet", "nav"] }, attrs: _c0, decls: 1, vars: 1, consts: [["ngFor", "", 3, "ngForOf"], ["class", "tab-pane", 3, "id", "active", 4, "ngIf"], [1, "tab-pane", 3, "id"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"]], template: function NgbNavOutlet_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, NgbNavOutlet_ng_template_0_Template, 1, 1, "ng-template", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngForOf", ctx.nav.items);
    } }, directives: [ɵngcc1.NgForOf, ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet], encapsulation: 2 });
NgbNavOutlet.propDecorators = {
    paneRole: [{ type: Input }],
    nav: [{ type: Input, args: ['ngbNavOutlet',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgbNavOutlet, [{
        type: Component,
        args: [{
                selector: '[ngbNavOutlet]',
                host: { '[class.tab-content]': 'true' },
                encapsulation: ViewEncapsulation.None,
                template: `
      <ng-template ngFor let-item [ngForOf]="nav.items">
          <div class="tab-pane"
               *ngIf="item.isPanelInDom()"
               [id]="item.panelDomId"
               [class.active]="item.active"
               [attr.role]="paneRole ? paneRole : nav.roles ? 'tabpanel' : undefined"
               [attr.aria-labelledby]="item.domId">
              <ng-template [ngTemplateOutlet]="item.contentTpl?.templateRef" [ngTemplateOutletContext]="{$implicit: item.active}"></ng-template>
          </div>
      </ng-template>
  `
            }]
    }], null, { paneRole: [{
            type: Input
        }], nav: [{
            type: Input,
            args: ['ngbNavOutlet']
        }] }); })();
if (false) {
    /**
     * A role to set on the nav pane
     * @type {?}
     */
    NgbNavOutlet.prototype.paneRole;
    /**
     * Reference to the `NgbNav`
     * @type {?}
     */
    NgbNavOutlet.prototype.nav;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNwcm8va3JpdHNhZGVlL1NWTi9DeWJlcnNvZnQvYXBleC9ub2RlX21vZHVsZXMvQG5nLWJvb3RzdHJhcC9uZy1ib290c3RyYXAvZXNtMjAxNS9uYXYvbmF2LW91dGxldC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBV0E7Ozs7Ozs7OztDQUNDLGdHQW1CQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBSUEiLCJmaWxlIjoibmF2LW91dGxldC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXMsY29uc3RhbnRQcm9wZXJ0eSxleHRyYVJlcXVpcmUsbWlzc2luZ092ZXJyaWRlLG1pc3NpbmdSZXR1cm4sdW51c2VkUHJpdmF0ZU1lbWJlcnMsdXNlbGVzc0NvZGV9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbmltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ2JOYXYgfSBmcm9tICcuL25hdic7XG4vKipcbiAqIFRoZSBvdXRsZXQgd2hlcmUgY3VycmVudGx5IGFjdGl2ZSBuYXYgY29udGVudCB3aWxsIGJlIGRpc3BsYXllZC5cbiAqXG4gKiBcXEBzaW5jZSA1LjIuMFxuICovXG5leHBvcnQgY2xhc3MgTmdiTmF2T3V0bGV0IHtcbn1cbk5nYk5hdk91dGxldC5kZWNvcmF0b3JzID0gW1xuICAgIHsgdHlwZTogQ29tcG9uZW50LCBhcmdzOiBbe1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnW25nYk5hdk91dGxldF0nLFxuICAgICAgICAgICAgICAgIGhvc3Q6IHsgJ1tjbGFzcy50YWItY29udGVudF0nOiAndHJ1ZScgfSxcbiAgICAgICAgICAgICAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBgXG4gICAgICA8bmctdGVtcGxhdGUgbmdGb3IgbGV0LWl0ZW0gW25nRm9yT2ZdPVwibmF2Lml0ZW1zXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInRhYi1wYW5lXCJcbiAgICAgICAgICAgICAgICpuZ0lmPVwiaXRlbS5pc1BhbmVsSW5Eb20oKVwiXG4gICAgICAgICAgICAgICBbaWRdPVwiaXRlbS5wYW5lbERvbUlkXCJcbiAgICAgICAgICAgICAgIFtjbGFzcy5hY3RpdmVdPVwiaXRlbS5hY3RpdmVcIlxuICAgICAgICAgICAgICAgW2F0dHIucm9sZV09XCJwYW5lUm9sZSA/IHBhbmVSb2xlIDogbmF2LnJvbGVzID8gJ3RhYnBhbmVsJyA6IHVuZGVmaW5lZFwiXG4gICAgICAgICAgICAgICBbYXR0ci5hcmlhLWxhYmVsbGVkYnldPVwiaXRlbS5kb21JZFwiPlxuICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgW25nVGVtcGxhdGVPdXRsZXRdPVwiaXRlbS5jb250ZW50VHBsPy50ZW1wbGF0ZVJlZlwiIFtuZ1RlbXBsYXRlT3V0bGV0Q29udGV4dF09XCJ7JGltcGxpY2l0OiBpdGVtLmFjdGl2ZX1cIj48L25nLXRlbXBsYXRlPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgYFxuICAgICAgICAgICAgfV0gfVxuXTtcbk5nYk5hdk91dGxldC5wcm9wRGVjb3JhdG9ycyA9IHtcbiAgICBwYW5lUm9sZTogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgbmF2OiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWyduZ2JOYXZPdXRsZXQnLF0gfV1cbn07XG5pZiAoZmFsc2UpIHtcbiAgICAvKipcbiAgICAgKiBBIHJvbGUgdG8gc2V0IG9uIHRoZSBuYXYgcGFuZVxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIE5nYk5hdk91dGxldC5wcm90b3R5cGUucGFuZVJvbGU7XG4gICAgLyoqXG4gICAgICogUmVmZXJlbmNlIHRvIHRoZSBgTmdiTmF2YFxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIE5nYk5hdk91dGxldC5wcm90b3R5cGUubmF2O1xufVxuIl19