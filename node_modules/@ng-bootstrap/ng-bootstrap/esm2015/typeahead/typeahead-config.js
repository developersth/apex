/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * A configuration service for the [`NgbTypeahead`](#/components/typeahead/api#NgbTypeahead) component.
 *
 * You can inject this service, typically in your root component, and customize the values of its properties in
 * order to provide default values for all the typeaheads used in the application.
 */
import * as ɵngcc0 from '@angular/core';
export class NgbTypeaheadConfig {
    constructor() {
        this.editable = true;
        this.focusFirst = true;
        this.showHint = false;
        this.placement = ['bottom-left', 'bottom-right', 'top-left', 'top-right'];
    }
}
NgbTypeaheadConfig.ɵfac = function NgbTypeaheadConfig_Factory(t) { return new (t || NgbTypeaheadConfig)(); };
NgbTypeaheadConfig.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgbTypeaheadConfig, factory: NgbTypeaheadConfig.ɵfac, providedIn: 'root' });
/** @nocollapse */ NgbTypeaheadConfig.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgbTypeaheadConfig_Factory() { return new NgbTypeaheadConfig(); }, token: NgbTypeaheadConfig, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgbTypeaheadConfig, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, null); })();
if (false) {
    /** @type {?} */
    NgbTypeaheadConfig.prototype.container;
    /** @type {?} */
    NgbTypeaheadConfig.prototype.editable;
    /** @type {?} */
    NgbTypeaheadConfig.prototype.focusFirst;
    /** @type {?} */
    NgbTypeaheadConfig.prototype.showHint;
    /** @type {?} */
    NgbTypeaheadConfig.prototype.placement;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNwcm8va3JpdHNhZGVlL1NWTi9DeWJlcnNvZnQvYXBleC9ub2RlX21vZHVsZXMvQG5nLWJvb3RzdHJhcC9uZy1ib290c3RyYXAvZXNtMjAxNS90eXBlYWhlYWQvdHlwZWFoZWFkLWNvbmZpZy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7OztBQVlBOzs7Ozs7Ozs7Q0FPQyx5SUFHQzs7Ozs7Z0RBQ29OIiwiZmlsZSI6InR5cGVhaGVhZC1jb25maWcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzLGNvbnN0YW50UHJvcGVydHksZXh0cmFSZXF1aXJlLG1pc3NpbmdPdmVycmlkZSxtaXNzaW5nUmV0dXJuLHVudXNlZFByaXZhdGVNZW1iZXJzLHVzZWxlc3NDb2RlfSBjaGVja2VkIGJ5IHRzY1xuICovXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgKiBhcyBpMCBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuLyoqXG4gKiBBIGNvbmZpZ3VyYXRpb24gc2VydmljZSBmb3IgdGhlIFtgTmdiVHlwZWFoZWFkYF0oIy9jb21wb25lbnRzL3R5cGVhaGVhZC9hcGkjTmdiVHlwZWFoZWFkKSBjb21wb25lbnQuXG4gKlxuICogWW91IGNhbiBpbmplY3QgdGhpcyBzZXJ2aWNlLCB0eXBpY2FsbHkgaW4geW91ciByb290IGNvbXBvbmVudCwgYW5kIGN1c3RvbWl6ZSB0aGUgdmFsdWVzIG9mIGl0cyBwcm9wZXJ0aWVzIGluXG4gKiBvcmRlciB0byBwcm92aWRlIGRlZmF1bHQgdmFsdWVzIGZvciBhbGwgdGhlIHR5cGVhaGVhZHMgdXNlZCBpbiB0aGUgYXBwbGljYXRpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBOZ2JUeXBlYWhlYWRDb25maWcge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmVkaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5mb2N1c0ZpcnN0ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zaG93SGludCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnBsYWNlbWVudCA9IFsnYm90dG9tLWxlZnQnLCAnYm90dG9tLXJpZ2h0JywgJ3RvcC1sZWZ0JywgJ3RvcC1yaWdodCddO1xuICAgIH1cbn1cbk5nYlR5cGVhaGVhZENvbmZpZy5kZWNvcmF0b3JzID0gW1xuICAgIHsgdHlwZTogSW5qZWN0YWJsZSwgYXJnczogW3sgcHJvdmlkZWRJbjogJ3Jvb3QnIH0sXSB9XG5dO1xuLyoqIEBub2NvbGxhcHNlICovIE5nYlR5cGVhaGVhZENvbmZpZy5uZ0luamVjdGFibGVEZWYgPSBpMC7Jtcm1ZGVmaW5lSW5qZWN0YWJsZSh7IGZhY3Rvcnk6IGZ1bmN0aW9uIE5nYlR5cGVhaGVhZENvbmZpZ19GYWN0b3J5KCkgeyByZXR1cm4gbmV3IE5nYlR5cGVhaGVhZENvbmZpZygpOyB9LCB0b2tlbjogTmdiVHlwZWFoZWFkQ29uZmlnLCBwcm92aWRlZEluOiBcInJvb3RcIiB9KTtcbmlmIChmYWxzZSkge1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBOZ2JUeXBlYWhlYWRDb25maWcucHJvdG90eXBlLmNvbnRhaW5lcjtcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgTmdiVHlwZWFoZWFkQ29uZmlnLnByb3RvdHlwZS5lZGl0YWJsZTtcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgTmdiVHlwZWFoZWFkQ29uZmlnLnByb3RvdHlwZS5mb2N1c0ZpcnN0O1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBOZ2JUeXBlYWhlYWRDb25maWcucHJvdG90eXBlLnNob3dIaW50O1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBOZ2JUeXBlYWhlYWRDb25maWcucHJvdG90eXBlLnBsYWNlbWVudDtcbn1cbiJdfQ==