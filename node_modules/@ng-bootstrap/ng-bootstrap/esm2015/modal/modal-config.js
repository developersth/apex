/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Options available when opening new modal windows with `NgbModal.open()` method.
 * @record
 */
import * as ɵngcc0 from '@angular/core';
export function NgbModalOptions() { }
if (false) {
    /**
     * `aria-labelledby` attribute value to set on the modal window.
     *
     * \@since 2.2.0
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.ariaLabelledBy;
    /**
     * If `true`, the backdrop element will be created for a given modal.
     *
     * Alternatively, specify `'static'` for a backdrop which doesn't close the modal on click.
     *
     * Default value is `true`.
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.backdrop;
    /**
     * Callback right before the modal will be dismissed.
     *
     * If this function returns:
     * * `false`
     * * a promise resolved with `false`
     * * a promise that is rejected
     *
     * then the modal won't be dismissed.
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.beforeDismiss;
    /**
     * If `true`, the modal will be centered vertically.
     *
     * Default value is `false`.
     *
     * \@since 1.1.0
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.centered;
    /**
     * A selector specifying the element all new modal windows should be appended to.
     *
     * If not specified, will be `body`.
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.container;
    /**
     * The `Injector` to use for modal content.
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.injector;
    /**
     * If `true`, the modal will be closed when `Escape` key is pressed
     *
     * Default value is `true`.
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.keyboard;
    /**
     * Scrollable modal content (false by default).
     *
     * \@since 5.0.0
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.scrollable;
    /**
     * Size of a new modal window.
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.size;
    /**
     * A custom class to append to the modal window.
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.windowClass;
    /**
     * A custom class to append to the modal backdrop.
     *
     * \@since 1.1.0
     * @type {?|undefined}
     */
    NgbModalOptions.prototype.backdropClass;
}
/**
 * A configuration service for the [`NgbModal`](#/components/modal/api#NgbModal) service.
 *
 * You can inject this service, typically in your root component, and customize the values of its properties in
 * order to provide default values for all modals used in the application.
 *
 * \@since 3.1.0
 */
export class NgbModalConfig {
    constructor() {
        this.backdrop = true;
        this.keyboard = true;
    }
}
NgbModalConfig.ɵfac = function NgbModalConfig_Factory(t) { return new (t || NgbModalConfig)(); };
NgbModalConfig.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgbModalConfig, factory: NgbModalConfig.ɵfac, providedIn: 'root' });
/** @nocollapse */ NgbModalConfig.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgbModalConfig_Factory() { return new NgbModalConfig(); }, token: NgbModalConfig, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgbModalConfig, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, null); })();
if (false) {
    /** @type {?} */
    NgbModalConfig.prototype.ariaLabelledBy;
    /** @type {?} */
    NgbModalConfig.prototype.backdrop;
    /** @type {?} */
    NgbModalConfig.prototype.beforeDismiss;
    /** @type {?} */
    NgbModalConfig.prototype.centered;
    /** @type {?} */
    NgbModalConfig.prototype.container;
    /** @type {?} */
    NgbModalConfig.prototype.injector;
    /** @type {?} */
    NgbModalConfig.prototype.keyboard;
    /** @type {?} */
    NgbModalConfig.prototype.scrollable;
    /** @type {?} */
    NgbModalConfig.prototype.size;
    /** @type {?} */
    NgbModalConfig.prototype.windowClass;
    /** @type {?} */
    NgbModalConfig.prototype.backdropClass;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNwcm8va3JpdHNhZGVlL1NWTi9DeWJlcnNvZnQvYXBleC9ub2RlX21vZHVsZXMvQG5nLWJvb3RzdHJhcC9uZy1ib290c3RyYXAvZXNtMjAxNS9tb2RhbC9tb2RhbC1jb25maWcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0FBVUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBZ0dDLDZIQUdDOzs7OztnREFDb00iLCJmaWxlIjoibW9kYWwtY29uZmlnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlcyxjb25zdGFudFByb3BlcnR5LGV4dHJhUmVxdWlyZSxtaXNzaW5nT3ZlcnJpZGUsbWlzc2luZ1JldHVybix1bnVzZWRQcml2YXRlTWVtYmVycyx1c2VsZXNzQ29kZX0gY2hlY2tlZCBieSB0c2NcbiAqL1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMgaTAgZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbi8qKlxuICogT3B0aW9ucyBhdmFpbGFibGUgd2hlbiBvcGVuaW5nIG5ldyBtb2RhbCB3aW5kb3dzIHdpdGggYE5nYk1vZGFsLm9wZW4oKWAgbWV0aG9kLlxuICogQHJlY29yZFxuICovXG5leHBvcnQgZnVuY3Rpb24gTmdiTW9kYWxPcHRpb25zKCkgeyB9XG5pZiAoZmFsc2UpIHtcbiAgICAvKipcbiAgICAgKiBgYXJpYS1sYWJlbGxlZGJ5YCBhdHRyaWJ1dGUgdmFsdWUgdG8gc2V0IG9uIHRoZSBtb2RhbCB3aW5kb3cuXG4gICAgICpcbiAgICAgKiBcXEBzaW5jZSAyLjIuMFxuICAgICAqIEB0eXBlIHs/fHVuZGVmaW5lZH1cbiAgICAgKi9cbiAgICBOZ2JNb2RhbE9wdGlvbnMucHJvdG90eXBlLmFyaWFMYWJlbGxlZEJ5O1xuICAgIC8qKlxuICAgICAqIElmIGB0cnVlYCwgdGhlIGJhY2tkcm9wIGVsZW1lbnQgd2lsbCBiZSBjcmVhdGVkIGZvciBhIGdpdmVuIG1vZGFsLlxuICAgICAqXG4gICAgICogQWx0ZXJuYXRpdmVseSwgc3BlY2lmeSBgJ3N0YXRpYydgIGZvciBhIGJhY2tkcm9wIHdoaWNoIGRvZXNuJ3QgY2xvc2UgdGhlIG1vZGFsIG9uIGNsaWNrLlxuICAgICAqXG4gICAgICogRGVmYXVsdCB2YWx1ZSBpcyBgdHJ1ZWAuXG4gICAgICogQHR5cGUgez98dW5kZWZpbmVkfVxuICAgICAqL1xuICAgIE5nYk1vZGFsT3B0aW9ucy5wcm90b3R5cGUuYmFja2Ryb3A7XG4gICAgLyoqXG4gICAgICogQ2FsbGJhY2sgcmlnaHQgYmVmb3JlIHRoZSBtb2RhbCB3aWxsIGJlIGRpc21pc3NlZC5cbiAgICAgKlxuICAgICAqIElmIHRoaXMgZnVuY3Rpb24gcmV0dXJuczpcbiAgICAgKiAqIGBmYWxzZWBcbiAgICAgKiAqIGEgcHJvbWlzZSByZXNvbHZlZCB3aXRoIGBmYWxzZWBcbiAgICAgKiAqIGEgcHJvbWlzZSB0aGF0IGlzIHJlamVjdGVkXG4gICAgICpcbiAgICAgKiB0aGVuIHRoZSBtb2RhbCB3b24ndCBiZSBkaXNtaXNzZWQuXG4gICAgICogQHR5cGUgez98dW5kZWZpbmVkfVxuICAgICAqL1xuICAgIE5nYk1vZGFsT3B0aW9ucy5wcm90b3R5cGUuYmVmb3JlRGlzbWlzcztcbiAgICAvKipcbiAgICAgKiBJZiBgdHJ1ZWAsIHRoZSBtb2RhbCB3aWxsIGJlIGNlbnRlcmVkIHZlcnRpY2FsbHkuXG4gICAgICpcbiAgICAgKiBEZWZhdWx0IHZhbHVlIGlzIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBcXEBzaW5jZSAxLjEuMFxuICAgICAqIEB0eXBlIHs/fHVuZGVmaW5lZH1cbiAgICAgKi9cbiAgICBOZ2JNb2RhbE9wdGlvbnMucHJvdG90eXBlLmNlbnRlcmVkO1xuICAgIC8qKlxuICAgICAqIEEgc2VsZWN0b3Igc3BlY2lmeWluZyB0aGUgZWxlbWVudCBhbGwgbmV3IG1vZGFsIHdpbmRvd3Mgc2hvdWxkIGJlIGFwcGVuZGVkIHRvLlxuICAgICAqXG4gICAgICogSWYgbm90IHNwZWNpZmllZCwgd2lsbCBiZSBgYm9keWAuXG4gICAgICogQHR5cGUgez98dW5kZWZpbmVkfVxuICAgICAqL1xuICAgIE5nYk1vZGFsT3B0aW9ucy5wcm90b3R5cGUuY29udGFpbmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSBgSW5qZWN0b3JgIHRvIHVzZSBmb3IgbW9kYWwgY29udGVudC5cbiAgICAgKiBAdHlwZSB7P3x1bmRlZmluZWR9XG4gICAgICovXG4gICAgTmdiTW9kYWxPcHRpb25zLnByb3RvdHlwZS5pbmplY3RvcjtcbiAgICAvKipcbiAgICAgKiBJZiBgdHJ1ZWAsIHRoZSBtb2RhbCB3aWxsIGJlIGNsb3NlZCB3aGVuIGBFc2NhcGVgIGtleSBpcyBwcmVzc2VkXG4gICAgICpcbiAgICAgKiBEZWZhdWx0IHZhbHVlIGlzIGB0cnVlYC5cbiAgICAgKiBAdHlwZSB7P3x1bmRlZmluZWR9XG4gICAgICovXG4gICAgTmdiTW9kYWxPcHRpb25zLnByb3RvdHlwZS5rZXlib2FyZDtcbiAgICAvKipcbiAgICAgKiBTY3JvbGxhYmxlIG1vZGFsIGNvbnRlbnQgKGZhbHNlIGJ5IGRlZmF1bHQpLlxuICAgICAqXG4gICAgICogXFxAc2luY2UgNS4wLjBcbiAgICAgKiBAdHlwZSB7P3x1bmRlZmluZWR9XG4gICAgICovXG4gICAgTmdiTW9kYWxPcHRpb25zLnByb3RvdHlwZS5zY3JvbGxhYmxlO1xuICAgIC8qKlxuICAgICAqIFNpemUgb2YgYSBuZXcgbW9kYWwgd2luZG93LlxuICAgICAqIEB0eXBlIHs/fHVuZGVmaW5lZH1cbiAgICAgKi9cbiAgICBOZ2JNb2RhbE9wdGlvbnMucHJvdG90eXBlLnNpemU7XG4gICAgLyoqXG4gICAgICogQSBjdXN0b20gY2xhc3MgdG8gYXBwZW5kIHRvIHRoZSBtb2RhbCB3aW5kb3cuXG4gICAgICogQHR5cGUgez98dW5kZWZpbmVkfVxuICAgICAqL1xuICAgIE5nYk1vZGFsT3B0aW9ucy5wcm90b3R5cGUud2luZG93Q2xhc3M7XG4gICAgLyoqXG4gICAgICogQSBjdXN0b20gY2xhc3MgdG8gYXBwZW5kIHRvIHRoZSBtb2RhbCBiYWNrZHJvcC5cbiAgICAgKlxuICAgICAqIFxcQHNpbmNlIDEuMS4wXG4gICAgICogQHR5cGUgez98dW5kZWZpbmVkfVxuICAgICAqL1xuICAgIE5nYk1vZGFsT3B0aW9ucy5wcm90b3R5cGUuYmFja2Ryb3BDbGFzcztcbn1cbi8qKlxuICogQSBjb25maWd1cmF0aW9uIHNlcnZpY2UgZm9yIHRoZSBbYE5nYk1vZGFsYF0oIy9jb21wb25lbnRzL21vZGFsL2FwaSNOZ2JNb2RhbCkgc2VydmljZS5cbiAqXG4gKiBZb3UgY2FuIGluamVjdCB0aGlzIHNlcnZpY2UsIHR5cGljYWxseSBpbiB5b3VyIHJvb3QgY29tcG9uZW50LCBhbmQgY3VzdG9taXplIHRoZSB2YWx1ZXMgb2YgaXRzIHByb3BlcnRpZXMgaW5cbiAqIG9yZGVyIHRvIHByb3ZpZGUgZGVmYXVsdCB2YWx1ZXMgZm9yIGFsbCBtb2RhbHMgdXNlZCBpbiB0aGUgYXBwbGljYXRpb24uXG4gKlxuICogXFxAc2luY2UgMy4xLjBcbiAqL1xuZXhwb3J0IGNsYXNzIE5nYk1vZGFsQ29uZmlnIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5iYWNrZHJvcCA9IHRydWU7XG4gICAgICAgIHRoaXMua2V5Ym9hcmQgPSB0cnVlO1xuICAgIH1cbn1cbk5nYk1vZGFsQ29uZmlnLmRlY29yYXRvcnMgPSBbXG4gICAgeyB0eXBlOiBJbmplY3RhYmxlLCBhcmdzOiBbeyBwcm92aWRlZEluOiAncm9vdCcgfSxdIH1cbl07XG4vKiogQG5vY29sbGFwc2UgKi8gTmdiTW9kYWxDb25maWcubmdJbmplY3RhYmxlRGVmID0gaTAuybXJtWRlZmluZUluamVjdGFibGUoeyBmYWN0b3J5OiBmdW5jdGlvbiBOZ2JNb2RhbENvbmZpZ19GYWN0b3J5KCkgeyByZXR1cm4gbmV3IE5nYk1vZGFsQ29uZmlnKCk7IH0sIHRva2VuOiBOZ2JNb2RhbENvbmZpZywgcHJvdmlkZWRJbjogXCJyb290XCIgfSk7XG5pZiAoZmFsc2UpIHtcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgTmdiTW9kYWxDb25maWcucHJvdG90eXBlLmFyaWFMYWJlbGxlZEJ5O1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBOZ2JNb2RhbENvbmZpZy5wcm90b3R5cGUuYmFja2Ryb3A7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIE5nYk1vZGFsQ29uZmlnLnByb3RvdHlwZS5iZWZvcmVEaXNtaXNzO1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBOZ2JNb2RhbENvbmZpZy5wcm90b3R5cGUuY2VudGVyZWQ7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIE5nYk1vZGFsQ29uZmlnLnByb3RvdHlwZS5jb250YWluZXI7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIE5nYk1vZGFsQ29uZmlnLnByb3RvdHlwZS5pbmplY3RvcjtcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgTmdiTW9kYWxDb25maWcucHJvdG90eXBlLmtleWJvYXJkO1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBOZ2JNb2RhbENvbmZpZy5wcm90b3R5cGUuc2Nyb2xsYWJsZTtcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgTmdiTW9kYWxDb25maWcucHJvdG90eXBlLnNpemU7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIE5nYk1vZGFsQ29uZmlnLnByb3RvdHlwZS53aW5kb3dDbGFzcztcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgTmdiTW9kYWxDb25maWcucHJvdG90eXBlLmJhY2tkcm9wQ2xhc3M7XG59XG4iXX0=