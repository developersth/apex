/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * A configuration service for the [`NgbTabset`](#/components/tabset/api#NgbTabset) component.
 *
 * You can inject this service, typically in your root component, and customize the values of its properties in
 * order to provide default values for all the tabsets used in the application.
 */
import * as ɵngcc0 from '@angular/core';
var NgbTabsetConfig = /** @class */ (function () {
    function NgbTabsetConfig() {
        this.justify = 'start';
        this.orientation = 'horizontal';
        this.type = 'tabs';
    }
    /** @nocollapse */ NgbTabsetConfig.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgbTabsetConfig_Factory() { return new NgbTabsetConfig(); }, token: NgbTabsetConfig, providedIn: "root" });
NgbTabsetConfig.ɵfac = function NgbTabsetConfig_Factory(t) { return new (t || NgbTabsetConfig)(); };
NgbTabsetConfig.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgbTabsetConfig, factory: function (t) { return NgbTabsetConfig.ɵfac(t); }, providedIn: 'root' });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgbTabsetConfig, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, null); })();
    return NgbTabsetConfig;
}());
export { NgbTabsetConfig };
if (false) {
    /** @type {?} */
    NgbTabsetConfig.prototype.justify;
    /** @type {?} */
    NgbTabsetConfig.prototype.orientation;
    /** @type {?} */
    NgbTabsetConfig.prototype.type;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNwcm8va3JpdHNhZGVlL1NWTi9DeWJlcnNvZnQvYXBleC9ub2RlX21vZHVsZXMvQG5nLWJvb3RzdHJhcC9uZy1ib290c3RyYXAvZXNtNS90YWJzZXQvdGFic2V0LWNvbmZpZy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7OztBQVlBOzs7OztLQUtLLEFBR0M7Ozs7Ozs7Z0RBQ3dNIiwiZmlsZSI6InRhYnNldC1jb25maWcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzLGNvbnN0YW50UHJvcGVydHksZXh0cmFSZXF1aXJlLG1pc3NpbmdPdmVycmlkZSxtaXNzaW5nUmV0dXJuLHVudXNlZFByaXZhdGVNZW1iZXJzLHVzZWxlc3NDb2RlfSBjaGVja2VkIGJ5IHRzY1xuICovXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgKiBhcyBpMCBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuLyoqXG4gKiBBIGNvbmZpZ3VyYXRpb24gc2VydmljZSBmb3IgdGhlIFtgTmdiVGFic2V0YF0oIy9jb21wb25lbnRzL3RhYnNldC9hcGkjTmdiVGFic2V0KSBjb21wb25lbnQuXG4gKlxuICogWW91IGNhbiBpbmplY3QgdGhpcyBzZXJ2aWNlLCB0eXBpY2FsbHkgaW4geW91ciByb290IGNvbXBvbmVudCwgYW5kIGN1c3RvbWl6ZSB0aGUgdmFsdWVzIG9mIGl0cyBwcm9wZXJ0aWVzIGluXG4gKiBvcmRlciB0byBwcm92aWRlIGRlZmF1bHQgdmFsdWVzIGZvciBhbGwgdGhlIHRhYnNldHMgdXNlZCBpbiB0aGUgYXBwbGljYXRpb24uXG4gKi9cbnZhciBOZ2JUYWJzZXRDb25maWcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTmdiVGFic2V0Q29uZmlnKCkge1xuICAgICAgICB0aGlzLmp1c3RpZnkgPSAnc3RhcnQnO1xuICAgICAgICB0aGlzLm9yaWVudGF0aW9uID0gJ2hvcml6b250YWwnO1xuICAgICAgICB0aGlzLnR5cGUgPSAndGFicyc7XG4gICAgfVxuICAgIE5nYlRhYnNldENvbmZpZy5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IEluamVjdGFibGUsIGFyZ3M6IFt7IHByb3ZpZGVkSW46ICdyb290JyB9LF0gfVxuICAgIF07XG4gICAgLyoqIEBub2NvbGxhcHNlICovIE5nYlRhYnNldENvbmZpZy5uZ0luamVjdGFibGVEZWYgPSBpMC7Jtcm1ZGVmaW5lSW5qZWN0YWJsZSh7IGZhY3Rvcnk6IGZ1bmN0aW9uIE5nYlRhYnNldENvbmZpZ19GYWN0b3J5KCkgeyByZXR1cm4gbmV3IE5nYlRhYnNldENvbmZpZygpOyB9LCB0b2tlbjogTmdiVGFic2V0Q29uZmlnLCBwcm92aWRlZEluOiBcInJvb3RcIiB9KTtcbiAgICByZXR1cm4gTmdiVGFic2V0Q29uZmlnO1xufSgpKTtcbmV4cG9ydCB7IE5nYlRhYnNldENvbmZpZyB9O1xuaWYgKGZhbHNlKSB7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIE5nYlRhYnNldENvbmZpZy5wcm90b3R5cGUuanVzdGlmeTtcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgTmdiVGFic2V0Q29uZmlnLnByb3RvdHlwZS5vcmllbnRhdGlvbjtcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgTmdiVGFic2V0Q29uZmlnLnByb3RvdHlwZS50eXBlO1xufVxuIl19