/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * A configuration service for the [`NgbPagination`](#/components/pagination/api#NgbPagination) component.
 *
 * You can inject this service, typically in your root component, and customize the values of its properties in
 * order to provide default values for all the paginations used in the application.
 */
import * as ɵngcc0 from '@angular/core';
var NgbPaginationConfig = /** @class */ (function () {
    function NgbPaginationConfig() {
        this.disabled = false;
        this.boundaryLinks = false;
        this.directionLinks = true;
        this.ellipses = true;
        this.maxSize = 0;
        this.pageSize = 10;
        this.rotate = false;
    }
    /** @nocollapse */ NgbPaginationConfig.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgbPaginationConfig_Factory() { return new NgbPaginationConfig(); }, token: NgbPaginationConfig, providedIn: "root" });
NgbPaginationConfig.ɵfac = function NgbPaginationConfig_Factory(t) { return new (t || NgbPaginationConfig)(); };
NgbPaginationConfig.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgbPaginationConfig, factory: function (t) { return NgbPaginationConfig.ɵfac(t); }, providedIn: 'root' });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgbPaginationConfig, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, null); })();
    return NgbPaginationConfig;
}());
export { NgbPaginationConfig };
if (false) {
    /** @type {?} */
    NgbPaginationConfig.prototype.disabled;
    /** @type {?} */
    NgbPaginationConfig.prototype.boundaryLinks;
    /** @type {?} */
    NgbPaginationConfig.prototype.directionLinks;
    /** @type {?} */
    NgbPaginationConfig.prototype.ellipses;
    /** @type {?} */
    NgbPaginationConfig.prototype.maxSize;
    /** @type {?} */
    NgbPaginationConfig.prototype.pageSize;
    /** @type {?} */
    NgbPaginationConfig.prototype.rotate;
    /** @type {?} */
    NgbPaginationConfig.prototype.size;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNwcm8va3JpdHNhZGVlL1NWTi9DeWJlcnNvZnQvYXBleC9ub2RlX21vZHVsZXMvQG5nLWJvb3RzdHJhcC9uZy1ib290c3RyYXAvZXNtNS9wYWdpbmF0aW9uL3BhZ2luYXRpb24tY29uZmlnLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7O0FBWUE7Ozs7Ozs7OztLQVNLLEFBR0M7Ozs7Ozs7Z0RBQ3dOIiwiZmlsZSI6InBhZ2luYXRpb24tY29uZmlnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlcyxjb25zdGFudFByb3BlcnR5LGV4dHJhUmVxdWlyZSxtaXNzaW5nT3ZlcnJpZGUsbWlzc2luZ1JldHVybix1bnVzZWRQcml2YXRlTWVtYmVycyx1c2VsZXNzQ29kZX0gY2hlY2tlZCBieSB0c2NcbiAqL1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMgaTAgZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbi8qKlxuICogQSBjb25maWd1cmF0aW9uIHNlcnZpY2UgZm9yIHRoZSBbYE5nYlBhZ2luYXRpb25gXSgjL2NvbXBvbmVudHMvcGFnaW5hdGlvbi9hcGkjTmdiUGFnaW5hdGlvbikgY29tcG9uZW50LlxuICpcbiAqIFlvdSBjYW4gaW5qZWN0IHRoaXMgc2VydmljZSwgdHlwaWNhbGx5IGluIHlvdXIgcm9vdCBjb21wb25lbnQsIGFuZCBjdXN0b21pemUgdGhlIHZhbHVlcyBvZiBpdHMgcHJvcGVydGllcyBpblxuICogb3JkZXIgdG8gcHJvdmlkZSBkZWZhdWx0IHZhbHVlcyBmb3IgYWxsIHRoZSBwYWdpbmF0aW9ucyB1c2VkIGluIHRoZSBhcHBsaWNhdGlvbi5cbiAqL1xudmFyIE5nYlBhZ2luYXRpb25Db25maWcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTmdiUGFnaW5hdGlvbkNvbmZpZygpIHtcbiAgICAgICAgdGhpcy5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmJvdW5kYXJ5TGlua3MgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kaXJlY3Rpb25MaW5rcyA9IHRydWU7XG4gICAgICAgIHRoaXMuZWxsaXBzZXMgPSB0cnVlO1xuICAgICAgICB0aGlzLm1heFNpemUgPSAwO1xuICAgICAgICB0aGlzLnBhZ2VTaXplID0gMTA7XG4gICAgICAgIHRoaXMucm90YXRlID0gZmFsc2U7XG4gICAgfVxuICAgIE5nYlBhZ2luYXRpb25Db25maWcuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgeyB0eXBlOiBJbmplY3RhYmxlLCBhcmdzOiBbeyBwcm92aWRlZEluOiAncm9vdCcgfSxdIH1cbiAgICBdO1xuICAgIC8qKiBAbm9jb2xsYXBzZSAqLyBOZ2JQYWdpbmF0aW9uQ29uZmlnLm5nSW5qZWN0YWJsZURlZiA9IGkwLsm1ybVkZWZpbmVJbmplY3RhYmxlKHsgZmFjdG9yeTogZnVuY3Rpb24gTmdiUGFnaW5hdGlvbkNvbmZpZ19GYWN0b3J5KCkgeyByZXR1cm4gbmV3IE5nYlBhZ2luYXRpb25Db25maWcoKTsgfSwgdG9rZW46IE5nYlBhZ2luYXRpb25Db25maWcsIHByb3ZpZGVkSW46IFwicm9vdFwiIH0pO1xuICAgIHJldHVybiBOZ2JQYWdpbmF0aW9uQ29uZmlnO1xufSgpKTtcbmV4cG9ydCB7IE5nYlBhZ2luYXRpb25Db25maWcgfTtcbmlmIChmYWxzZSkge1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBOZ2JQYWdpbmF0aW9uQ29uZmlnLnByb3RvdHlwZS5kaXNhYmxlZDtcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgTmdiUGFnaW5hdGlvbkNvbmZpZy5wcm90b3R5cGUuYm91bmRhcnlMaW5rcztcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgTmdiUGFnaW5hdGlvbkNvbmZpZy5wcm90b3R5cGUuZGlyZWN0aW9uTGlua3M7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIE5nYlBhZ2luYXRpb25Db25maWcucHJvdG90eXBlLmVsbGlwc2VzO1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBOZ2JQYWdpbmF0aW9uQ29uZmlnLnByb3RvdHlwZS5tYXhTaXplO1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBOZ2JQYWdpbmF0aW9uQ29uZmlnLnByb3RvdHlwZS5wYWdlU2l6ZTtcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgTmdiUGFnaW5hdGlvbkNvbmZpZy5wcm90b3R5cGUucm90YXRlO1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBOZ2JQYWdpbmF0aW9uQ29uZmlnLnByb3RvdHlwZS5zaXplO1xufVxuIl19