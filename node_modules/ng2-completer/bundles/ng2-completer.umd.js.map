{"version":3,"sources":["/Users/macpro/kritsadee/SVN/Cybersoft/apex/node_modules/ng2-completer/bundles/ng2-completer.umd.js"],"names":[],"mappings":"AAAA;yLAC2E;mIAClB;mq7FrD;;;;;gDAGmB;;;;;;;;;;;wCAWW,AAE7B;;;;;;2EACmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uCA6BS,AAE5B;;;;;;;;;;wBAGkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+DA+IkC;;;;;;;;;;;;;;;;oBAKtC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCA+JS,AAIvB;;;;;;;;;;;;;;;;;oBAEa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+BA6SO,AAIpB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAEU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BAuOS,AAInB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAMS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BAqFS,AAIlB;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAEQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2DAqDwC;;;;;;;;;;;;;;;;;;;;;;;;;oBAM1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCA8WE,AAOxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACc;;;;;;;;;;;;;;;;;;;;;;;;;iCAyBQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDA2BF","file":"ng2-completer.umd.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/operators'), require('@angular/common/http'), require('@angular/forms'), require('@angular/common')) :\n    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/operators', '@angular/common/http', '@angular/forms', '@angular/common'], factory) :\n    (factory((global.ng2 = global.ng2 || {}, global.ng2.completer = {}),global.ng.core,global.Rx.Observable.prototype,global.ng.common.http,global.ng.forms,global.ng.common));\n}(this, (function (exports,core,operators,http,forms,common) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\n\n    /** PURE_IMPORTS_START  PURE_IMPORTS_END */\n    function isFunction(x) {\n        return typeof x === 'function';\n    }\n\n    /** PURE_IMPORTS_START  PURE_IMPORTS_END */\n    var _enable_super_gross_mode_that_will_cause_bad_things = false;\n    var config = {\n        Promise: undefined,\n        set useDeprecatedSynchronousErrorHandling(value) {\n            if (value) {\n                var error = /*@__PURE__*/ new Error();\n                /*@__PURE__*/ console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n            }\n            else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n                /*@__PURE__*/ console.log('RxJS: Back to a better error behavior. Thank you. <3');\n            }\n            _enable_super_gross_mode_that_will_cause_bad_things = value;\n        },\n        get useDeprecatedSynchronousErrorHandling() {\n            return _enable_super_gross_mode_that_will_cause_bad_things;\n        },\n    };\n\n    /** PURE_IMPORTS_START  PURE_IMPORTS_END */\n    function hostReportError(err) {\n        setTimeout(function () { throw err; });\n    }\n\n    /** PURE_IMPORTS_START _config,_util_hostReportError PURE_IMPORTS_END */\n    var empty = {\n        closed: true,\n        next: function (value) { },\n        error: function (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                throw err;\n            }\n            else {\n                hostReportError(err);\n            }\n        },\n        complete: function () { }\n    };\n\n    /** PURE_IMPORTS_START  PURE_IMPORTS_END */\n    var isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n\n    /** PURE_IMPORTS_START  PURE_IMPORTS_END */\n    function isObject(x) {\n        return x != null && typeof x === 'object';\n    }\n\n    /** PURE_IMPORTS_START  PURE_IMPORTS_END */\n    var errorObject = { e: {} };\n\n    /** PURE_IMPORTS_START _errorObject PURE_IMPORTS_END */\n    var tryCatchTarget;\n    function tryCatcher() {\n        try {\n            return tryCatchTarget.apply(this, arguments);\n        }\n        catch (e) {\n            errorObject.e = e;\n            return errorObject;\n        }\n    }\n    function tryCatch(fn) {\n        tryCatchTarget = fn;\n        return tryCatcher;\n    }\n\n    /** PURE_IMPORTS_START tslib PURE_IMPORTS_END */\n    var UnsubscriptionError = /*@__PURE__*/ (function (_super) {\n        __extends(UnsubscriptionError, _super);\n        function UnsubscriptionError(errors) {\n            var _this = _super.call(this, errors ?\n                errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return i + 1 + \") \" + err.toString(); }).join('\\n  ') : '') || this;\n            _this.errors = errors;\n            _this.name = 'UnsubscriptionError';\n            Object.setPrototypeOf(_this, UnsubscriptionError.prototype);\n            return _this;\n        }\n        return UnsubscriptionError;\n    }(Error));\n\n    /** PURE_IMPORTS_START _util_isArray,_util_isObject,_util_isFunction,_util_tryCatch,_util_errorObject,_util_UnsubscriptionError PURE_IMPORTS_END */\n    var Subscription = /*@__PURE__*/ (function () {\n        function Subscription(unsubscribe) {\n            this.closed = false;\n            this._parent = null;\n            this._parents = null;\n            this._subscriptions = null;\n            if (unsubscribe) {\n                this._unsubscribe = unsubscribe;\n            }\n        }\n        Subscription.prototype.unsubscribe = function () {\n            var hasErrors = false;\n            var errors;\n            if (this.closed) {\n                return;\n            }\n            var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n            this.closed = true;\n            this._parent = null;\n            this._parents = null;\n            this._subscriptions = null;\n            var index = -1;\n            var len = _parents ? _parents.length : 0;\n            while (_parent) {\n                _parent.remove(this);\n                _parent = ++index < len && _parents[index] || null;\n            }\n            if (isFunction(_unsubscribe)) {\n                var trial = tryCatch(_unsubscribe).call(this);\n                if (trial === errorObject) {\n                    hasErrors = true;\n                    errors = errors || (errorObject.e instanceof UnsubscriptionError ?\n                        flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]);\n                }\n            }\n            if (isArray(_subscriptions)) {\n                index = -1;\n                len = _subscriptions.length;\n                while (++index < len) {\n                    var sub = _subscriptions[index];\n                    if (isObject(sub)) {\n                        var trial = tryCatch(sub.unsubscribe).call(sub);\n                        if (trial === errorObject) {\n                            hasErrors = true;\n                            errors = errors || [];\n                            var err = errorObject.e;\n                            if (err instanceof UnsubscriptionError) {\n                                errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                            }\n                            else {\n                                errors.push(err);\n                            }\n                        }\n                    }\n                }\n            }\n            if (hasErrors) {\n                throw new UnsubscriptionError(errors);\n            }\n        };\n        Subscription.prototype.add = function (teardown) {\n            if (!teardown || (teardown === Subscription.EMPTY)) {\n                return Subscription.EMPTY;\n            }\n            if (teardown === this) {\n                return this;\n            }\n            var subscription = teardown;\n            switch (typeof teardown) {\n                case 'function':\n                    subscription = new Subscription(teardown);\n                case 'object':\n                    if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                        return subscription;\n                    }\n                    else if (this.closed) {\n                        subscription.unsubscribe();\n                        return subscription;\n                    }\n                    else if (typeof subscription._addParent !== 'function') {\n                        var tmp = subscription;\n                        subscription = new Subscription();\n                        subscription._subscriptions = [tmp];\n                    }\n                    break;\n                default:\n                    throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n            }\n            var subscriptions = this._subscriptions || (this._subscriptions = []);\n            subscriptions.push(subscription);\n            subscription._addParent(this);\n            return subscription;\n        };\n        Subscription.prototype.remove = function (subscription) {\n            var subscriptions = this._subscriptions;\n            if (subscriptions) {\n                var subscriptionIndex = subscriptions.indexOf(subscription);\n                if (subscriptionIndex !== -1) {\n                    subscriptions.splice(subscriptionIndex, 1);\n                }\n            }\n        };\n        Subscription.prototype._addParent = function (parent) {\n            var _a = this, _parent = _a._parent, _parents = _a._parents;\n            if (!_parent || _parent === parent) {\n                this._parent = parent;\n            }\n            else if (!_parents) {\n                this._parents = [parent];\n            }\n            else if (_parents.indexOf(parent) === -1) {\n                _parents.push(parent);\n            }\n        };\n        Subscription.EMPTY = (function (empty) {\n            empty.closed = true;\n            return empty;\n        }(new Subscription()));\n        return Subscription;\n    }());\n    function flattenUnsubscriptionErrors(errors) {\n        return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError) ? err.errors : err); }, []);\n    }\n\n    /** PURE_IMPORTS_START  PURE_IMPORTS_END */\n    var rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function')\n        ? /*@__PURE__*/ Symbol.for('rxSubscriber')\n        : '@@rxSubscriber';\n\n    /** PURE_IMPORTS_START tslib,_util_isFunction,_Observer,_Subscription,_internal_symbol_rxSubscriber,_config,_util_hostReportError PURE_IMPORTS_END */\n    var Subscriber = /*@__PURE__*/ (function (_super) {\n        __extends(Subscriber, _super);\n        function Subscriber(destinationOrNext, error, complete) {\n            var _this = _super.call(this) || this;\n            _this.syncErrorValue = null;\n            _this.syncErrorThrown = false;\n            _this.syncErrorThrowable = false;\n            _this.isStopped = false;\n            switch (arguments.length) {\n                case 0:\n                    _this.destination = empty;\n                    break;\n                case 1:\n                    if (!destinationOrNext) {\n                        _this.destination = empty;\n                        break;\n                    }\n                    if (typeof destinationOrNext === 'object') {\n                        if (isTrustedSubscriber(destinationOrNext)) {\n                            var trustedSubscriber = destinationOrNext[rxSubscriber]();\n                            _this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n                            _this.destination = trustedSubscriber;\n                            trustedSubscriber.add(_this);\n                        }\n                        else {\n                            _this.syncErrorThrowable = true;\n                            _this.destination = new SafeSubscriber(_this, destinationOrNext);\n                        }\n                        break;\n                    }\n                default:\n                    _this.syncErrorThrowable = true;\n                    _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);\n                    break;\n            }\n            return _this;\n        }\n        Subscriber.prototype[rxSubscriber] = function () { return this; };\n        Subscriber.create = function (next, error, complete) {\n            var subscriber = new Subscriber(next, error, complete);\n            subscriber.syncErrorThrowable = false;\n            return subscriber;\n        };\n        Subscriber.prototype.next = function (value) {\n            if (!this.isStopped) {\n                this._next(value);\n            }\n        };\n        Subscriber.prototype.error = function (err) {\n            if (!this.isStopped) {\n                this.isStopped = true;\n                this._error(err);\n            }\n        };\n        Subscriber.prototype.complete = function () {\n            if (!this.isStopped) {\n                this.isStopped = true;\n                this._complete();\n            }\n        };\n        Subscriber.prototype.unsubscribe = function () {\n            if (this.closed) {\n                return;\n            }\n            this.isStopped = true;\n            _super.prototype.unsubscribe.call(this);\n        };\n        Subscriber.prototype._next = function (value) {\n            this.destination.next(value);\n        };\n        Subscriber.prototype._error = function (err) {\n            this.destination.error(err);\n            this.unsubscribe();\n        };\n        Subscriber.prototype._complete = function () {\n            this.destination.complete();\n            this.unsubscribe();\n        };\n        Subscriber.prototype._unsubscribeAndRecycle = function () {\n            var _a = this, _parent = _a._parent, _parents = _a._parents;\n            this._parent = null;\n            this._parents = null;\n            this.unsubscribe();\n            this.closed = false;\n            this.isStopped = false;\n            this._parent = _parent;\n            this._parents = _parents;\n            return this;\n        };\n        return Subscriber;\n    }(Subscription));\n    var SafeSubscriber = /*@__PURE__*/ (function (_super) {\n        __extends(SafeSubscriber, _super);\n        function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n            var _this = _super.call(this) || this;\n            _this._parentSubscriber = _parentSubscriber;\n            var next;\n            var context = _this;\n            if (isFunction(observerOrNext)) {\n                next = observerOrNext;\n            }\n            else if (observerOrNext) {\n                next = observerOrNext.next;\n                error = observerOrNext.error;\n                complete = observerOrNext.complete;\n                if (observerOrNext !== empty) {\n                    context = Object.create(observerOrNext);\n                    if (isFunction(context.unsubscribe)) {\n                        _this.add(context.unsubscribe.bind(context));\n                    }\n                    context.unsubscribe = _this.unsubscribe.bind(_this);\n                }\n            }\n            _this._context = context;\n            _this._next = next;\n            _this._error = error;\n            _this._complete = complete;\n            return _this;\n        }\n        SafeSubscriber.prototype.next = function (value) {\n            if (!this.isStopped && this._next) {\n                var _parentSubscriber = this._parentSubscriber;\n                if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._next, value);\n                }\n                else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                    this.unsubscribe();\n                }\n            }\n        };\n        SafeSubscriber.prototype.error = function (err) {\n            if (!this.isStopped) {\n                var _parentSubscriber = this._parentSubscriber;\n                var useDeprecatedSynchronousErrorHandling = config.useDeprecatedSynchronousErrorHandling;\n                if (this._error) {\n                    if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                        this.__tryOrUnsub(this._error, err);\n                        this.unsubscribe();\n                    }\n                    else {\n                        this.__tryOrSetError(_parentSubscriber, this._error, err);\n                        this.unsubscribe();\n                    }\n                }\n                else if (!_parentSubscriber.syncErrorThrowable) {\n                    this.unsubscribe();\n                    if (useDeprecatedSynchronousErrorHandling) {\n                        throw err;\n                    }\n                    hostReportError(err);\n                }\n                else {\n                    if (useDeprecatedSynchronousErrorHandling) {\n                        _parentSubscriber.syncErrorValue = err;\n                        _parentSubscriber.syncErrorThrown = true;\n                    }\n                    else {\n                        hostReportError(err);\n                    }\n                    this.unsubscribe();\n                }\n            }\n        };\n        SafeSubscriber.prototype.complete = function () {\n            var _this = this;\n            if (!this.isStopped) {\n                var _parentSubscriber = this._parentSubscriber;\n                if (this._complete) {\n                    var wrappedComplete = function () { return _this._complete.call(_this._context); };\n                    if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                        this.__tryOrUnsub(wrappedComplete);\n                        this.unsubscribe();\n                    }\n                    else {\n                        this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                        this.unsubscribe();\n                    }\n                }\n                else {\n                    this.unsubscribe();\n                }\n            }\n        };\n        SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n            try {\n                fn.call(this._context, value);\n            }\n            catch (err) {\n                this.unsubscribe();\n                if (config.useDeprecatedSynchronousErrorHandling) {\n                    throw err;\n                }\n                else {\n                    hostReportError(err);\n                }\n            }\n        };\n        SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n            if (!config.useDeprecatedSynchronousErrorHandling) {\n                throw new Error('bad call');\n            }\n            try {\n                fn.call(this._context, value);\n            }\n            catch (err) {\n                if (config.useDeprecatedSynchronousErrorHandling) {\n                    parent.syncErrorValue = err;\n                    parent.syncErrorThrown = true;\n                    return true;\n                }\n                else {\n                    hostReportError(err);\n                    return true;\n                }\n            }\n            return false;\n        };\n        SafeSubscriber.prototype._unsubscribe = function () {\n            var _parentSubscriber = this._parentSubscriber;\n            this._context = null;\n            this._parentSubscriber = null;\n            _parentSubscriber.unsubscribe();\n        };\n        return SafeSubscriber;\n    }(Subscriber));\n    function isTrustedSubscriber(obj) {\n        return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriber]);\n    }\n\n    /** PURE_IMPORTS_START _Subscriber,_symbol_rxSubscriber,_Observer PURE_IMPORTS_END */\n    function toSubscriber(nextOrObserver, error, complete) {\n        if (nextOrObserver) {\n            if (nextOrObserver instanceof Subscriber) {\n                return nextOrObserver;\n            }\n            if (nextOrObserver[rxSubscriber]) {\n                return nextOrObserver[rxSubscriber]();\n            }\n        }\n        if (!nextOrObserver && !error && !complete) {\n            return new Subscriber(empty);\n        }\n        return new Subscriber(nextOrObserver, error, complete);\n    }\n\n    /** PURE_IMPORTS_START  PURE_IMPORTS_END */\n    var observable = typeof Symbol === 'function' && Symbol.observable || '@@observable';\n\n    /** PURE_IMPORTS_START  PURE_IMPORTS_END */\n    function noop() { }\n\n    /** PURE_IMPORTS_START _noop PURE_IMPORTS_END */\n    function pipeFromArray(fns) {\n        if (!fns) {\n            return noop;\n        }\n        if (fns.length === 1) {\n            return fns[0];\n        }\n        return function piped(input) {\n            return fns.reduce(function (prev, fn) { return fn(prev); }, input);\n        };\n    }\n\n    /** PURE_IMPORTS_START _util_toSubscriber,_internal_symbol_observable,_util_pipe,_config PURE_IMPORTS_END */\n    var Observable = /*@__PURE__*/ (function () {\n        function Observable(subscribe) {\n            this._isScalar = false;\n            if (subscribe) {\n                this._subscribe = subscribe;\n            }\n        }\n        Observable.prototype.lift = function (operator) {\n            var observable$$1 = new Observable();\n            observable$$1.source = this;\n            observable$$1.operator = operator;\n            return observable$$1;\n        };\n        Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n            var operator = this.operator;\n            var sink = toSubscriber(observerOrNext, error, complete);\n            if (operator) {\n                operator.call(sink, this.source);\n            }\n            else {\n                sink.add(this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?\n                    this._subscribe(sink) :\n                    this._trySubscribe(sink));\n            }\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                if (sink.syncErrorThrowable) {\n                    sink.syncErrorThrowable = false;\n                    if (sink.syncErrorThrown) {\n                        throw sink.syncErrorValue;\n                    }\n                }\n            }\n            return sink;\n        };\n        Observable.prototype._trySubscribe = function (sink) {\n            try {\n                return this._subscribe(sink);\n            }\n            catch (err) {\n                if (config.useDeprecatedSynchronousErrorHandling) {\n                    sink.syncErrorThrown = true;\n                    sink.syncErrorValue = err;\n                }\n                sink.error(err);\n            }\n        };\n        Observable.prototype.forEach = function (next, promiseCtor) {\n            var _this = this;\n            promiseCtor = getPromiseCtor(promiseCtor);\n            return new promiseCtor(function (resolve, reject) {\n                var subscription;\n                subscription = _this.subscribe(function (value) {\n                    try {\n                        next(value);\n                    }\n                    catch (err) {\n                        reject(err);\n                        if (subscription) {\n                            subscription.unsubscribe();\n                        }\n                    }\n                }, reject, resolve);\n            });\n        };\n        Observable.prototype._subscribe = function (subscriber) {\n            var source = this.source;\n            return source && source.subscribe(subscriber);\n        };\n        Observable.prototype[observable] = function () {\n            return this;\n        };\n        Observable.prototype.pipe = function () {\n            var operations = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                operations[_i] = arguments[_i];\n            }\n            if (operations.length === 0) {\n                return this;\n            }\n            return pipeFromArray(operations)(this);\n        };\n        Observable.prototype.toPromise = function (promiseCtor) {\n            var _this = this;\n            promiseCtor = getPromiseCtor(promiseCtor);\n            return new promiseCtor(function (resolve, reject) {\n                var value;\n                _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n            });\n        };\n        Observable.create = function (subscribe) {\n            return new Observable(subscribe);\n        };\n        return Observable;\n    }());\n    function getPromiseCtor(promiseCtor) {\n        if (!promiseCtor) {\n            promiseCtor = config.Promise || Promise;\n        }\n        if (!promiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return promiseCtor;\n    }\n\n    /** PURE_IMPORTS_START tslib PURE_IMPORTS_END */\n    var ObjectUnsubscribedError = /*@__PURE__*/ (function (_super) {\n        __extends(ObjectUnsubscribedError, _super);\n        function ObjectUnsubscribedError() {\n            var _this = _super.call(this, 'object unsubscribed') || this;\n            _this.name = 'ObjectUnsubscribedError';\n            Object.setPrototypeOf(_this, ObjectUnsubscribedError.prototype);\n            return _this;\n        }\n        return ObjectUnsubscribedError;\n    }(Error));\n\n    /** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */\n    var SubjectSubscription = /*@__PURE__*/ (function (_super) {\n        __extends(SubjectSubscription, _super);\n        function SubjectSubscription(subject, subscriber) {\n            var _this = _super.call(this) || this;\n            _this.subject = subject;\n            _this.subscriber = subscriber;\n            _this.closed = false;\n            return _this;\n        }\n        SubjectSubscription.prototype.unsubscribe = function () {\n            if (this.closed) {\n                return;\n            }\n            this.closed = true;\n            var subject = this.subject;\n            var observers = subject.observers;\n            this.subject = null;\n            if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n                return;\n            }\n            var subscriberIndex = observers.indexOf(this.subscriber);\n            if (subscriberIndex !== -1) {\n                observers.splice(subscriberIndex, 1);\n            }\n        };\n        return SubjectSubscription;\n    }(Subscription));\n\n    /** PURE_IMPORTS_START tslib,_Observable,_Subscriber,_Subscription,_util_ObjectUnsubscribedError,_SubjectSubscription,_internal_symbol_rxSubscriber PURE_IMPORTS_END */\n    var SubjectSubscriber = /*@__PURE__*/ (function (_super) {\n        __extends(SubjectSubscriber, _super);\n        function SubjectSubscriber(destination) {\n            var _this = _super.call(this, destination) || this;\n            _this.destination = destination;\n            return _this;\n        }\n        return SubjectSubscriber;\n    }(Subscriber));\n    var Subject = /*@__PURE__*/ (function (_super) {\n        __extends(Subject, _super);\n        function Subject() {\n            var _this = _super.call(this) || this;\n            _this.observers = [];\n            _this.closed = false;\n            _this.isStopped = false;\n            _this.hasError = false;\n            _this.thrownError = null;\n            return _this;\n        }\n        Subject.prototype[rxSubscriber] = function () {\n            return new SubjectSubscriber(this);\n        };\n        Subject.prototype.lift = function (operator) {\n            var subject = new AnonymousSubject(this, this);\n            subject.operator = operator;\n            return subject;\n        };\n        Subject.prototype.next = function (value) {\n            if (this.closed) {\n                throw new ObjectUnsubscribedError();\n            }\n            if (!this.isStopped) {\n                var observers = this.observers;\n                var len = observers.length;\n                var copy = observers.slice();\n                for (var i = 0; i < len; i++) {\n                    copy[i].next(value);\n                }\n            }\n        };\n        Subject.prototype.error = function (err) {\n            if (this.closed) {\n                throw new ObjectUnsubscribedError();\n            }\n            this.hasError = true;\n            this.thrownError = err;\n            this.isStopped = true;\n            var observers = this.observers;\n            var len = observers.length;\n            var copy = observers.slice();\n            for (var i = 0; i < len; i++) {\n                copy[i].error(err);\n            }\n            this.observers.length = 0;\n        };\n        Subject.prototype.complete = function () {\n            if (this.closed) {\n                throw new ObjectUnsubscribedError();\n            }\n            this.isStopped = true;\n            var observers = this.observers;\n            var len = observers.length;\n            var copy = observers.slice();\n            for (var i = 0; i < len; i++) {\n                copy[i].complete();\n            }\n            this.observers.length = 0;\n        };\n        Subject.prototype.unsubscribe = function () {\n            this.isStopped = true;\n            this.closed = true;\n            this.observers = null;\n        };\n        Subject.prototype._trySubscribe = function (subscriber) {\n            if (this.closed) {\n                throw new ObjectUnsubscribedError();\n            }\n            else {\n                return _super.prototype._trySubscribe.call(this, subscriber);\n            }\n        };\n        Subject.prototype._subscribe = function (subscriber) {\n            if (this.closed) {\n                throw new ObjectUnsubscribedError();\n            }\n            else if (this.hasError) {\n                subscriber.error(this.thrownError);\n                return Subscription.EMPTY;\n            }\n            else if (this.isStopped) {\n                subscriber.complete();\n                return Subscription.EMPTY;\n            }\n            else {\n                this.observers.push(subscriber);\n                return new SubjectSubscription(this, subscriber);\n            }\n        };\n        Subject.prototype.asObservable = function () {\n            var observable = new Observable();\n            observable.source = this;\n            return observable;\n        };\n        Subject.create = function (destination, source) {\n            return new AnonymousSubject(destination, source);\n        };\n        return Subject;\n    }(Observable));\n    var AnonymousSubject = /*@__PURE__*/ (function (_super) {\n        __extends(AnonymousSubject, _super);\n        function AnonymousSubject(destination, source) {\n            var _this = _super.call(this) || this;\n            _this.destination = destination;\n            _this.source = source;\n            return _this;\n        }\n        AnonymousSubject.prototype.next = function (value) {\n            var destination = this.destination;\n            if (destination && destination.next) {\n                destination.next(value);\n            }\n        };\n        AnonymousSubject.prototype.error = function (err) {\n            var destination = this.destination;\n            if (destination && destination.error) {\n                this.destination.error(err);\n            }\n        };\n        AnonymousSubject.prototype.complete = function () {\n            var destination = this.destination;\n            if (destination && destination.complete) {\n                this.destination.complete();\n            }\n        };\n        AnonymousSubject.prototype._subscribe = function (subscriber) {\n            var source = this.source;\n            if (source) {\n                return this.source.subscribe(subscriber);\n            }\n            else {\n                return Subscription.EMPTY;\n            }\n        };\n        return AnonymousSubject;\n    }(Subject));\n\n    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\n    function refCount() {\n        return function refCountOperatorFunction(source) {\n            return source.lift(new RefCountOperator(source));\n        };\n    }\n    var RefCountOperator = /*@__PURE__*/ (function () {\n        function RefCountOperator(connectable) {\n            this.connectable = connectable;\n        }\n        RefCountOperator.prototype.call = function (subscriber, source) {\n            var connectable = this.connectable;\n            connectable._refCount++;\n            var refCounter = new RefCountSubscriber(subscriber, connectable);\n            var subscription = source.subscribe(refCounter);\n            if (!refCounter.closed) {\n                refCounter.connection = connectable.connect();\n            }\n            return subscription;\n        };\n        return RefCountOperator;\n    }());\n    var RefCountSubscriber = /*@__PURE__*/ (function (_super) {\n        __extends(RefCountSubscriber, _super);\n        function RefCountSubscriber(destination, connectable) {\n            var _this = _super.call(this, destination) || this;\n            _this.connectable = connectable;\n            return _this;\n        }\n        RefCountSubscriber.prototype._unsubscribe = function () {\n            var connectable = this.connectable;\n            if (!connectable) {\n                this.connection = null;\n                return;\n            }\n            this.connectable = null;\n            var refCount = connectable._refCount;\n            if (refCount <= 0) {\n                this.connection = null;\n                return;\n            }\n            connectable._refCount = refCount - 1;\n            if (refCount > 1) {\n                this.connection = null;\n                return;\n            }\n            var connection = this.connection;\n            var sharedConnection = connectable._connection;\n            this.connection = null;\n            if (sharedConnection && (!connection || sharedConnection === connection)) {\n                sharedConnection.unsubscribe();\n            }\n        };\n        return RefCountSubscriber;\n    }(Subscriber));\n\n    /** PURE_IMPORTS_START tslib,_Subject,_Observable,_Subscriber,_Subscription,_operators_refCount PURE_IMPORTS_END */\n    var ConnectableObservable = /*@__PURE__*/ (function (_super) {\n        __extends(ConnectableObservable, _super);\n        function ConnectableObservable(source, subjectFactory) {\n            var _this = _super.call(this) || this;\n            _this.source = source;\n            _this.subjectFactory = subjectFactory;\n            _this._refCount = 0;\n            _this._isComplete = false;\n            return _this;\n        }\n        ConnectableObservable.prototype._subscribe = function (subscriber) {\n            return this.getSubject().subscribe(subscriber);\n        };\n        ConnectableObservable.prototype.getSubject = function () {\n            var subject = this._subject;\n            if (!subject || subject.isStopped) {\n                this._subject = this.subjectFactory();\n            }\n            return this._subject;\n        };\n        ConnectableObservable.prototype.connect = function () {\n            var connection = this._connection;\n            if (!connection) {\n                this._isComplete = false;\n                connection = this._connection = new Subscription();\n                connection.add(this.source\n                    .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n                if (connection.closed) {\n                    this._connection = null;\n                    connection = Subscription.EMPTY;\n                }\n                else {\n                    this._connection = connection;\n                }\n            }\n            return connection;\n        };\n        ConnectableObservable.prototype.refCount = function () {\n            return refCount()(this);\n        };\n        return ConnectableObservable;\n    }(Observable));\n    var ConnectableSubscriber = /*@__PURE__*/ (function (_super) {\n        __extends(ConnectableSubscriber, _super);\n        function ConnectableSubscriber(destination, connectable) {\n            var _this = _super.call(this, destination) || this;\n            _this.connectable = connectable;\n            return _this;\n        }\n        ConnectableSubscriber.prototype._error = function (err) {\n            this._unsubscribe();\n            _super.prototype._error.call(this, err);\n        };\n        ConnectableSubscriber.prototype._complete = function () {\n            this.connectable._isComplete = true;\n            this._unsubscribe();\n            _super.prototype._complete.call(this);\n        };\n        ConnectableSubscriber.prototype._unsubscribe = function () {\n            var connectable = this.connectable;\n            if (connectable) {\n                this.connectable = null;\n                var connection = connectable._connection;\n                connectable._refCount = 0;\n                connectable._subject = null;\n                connectable._connection = null;\n                if (connection) {\n                    connection.unsubscribe();\n                }\n            }\n        };\n        return ConnectableSubscriber;\n    }(SubjectSubscriber));\n    var RefCountSubscriber$1 = /*@__PURE__*/ (function (_super) {\n        __extends(RefCountSubscriber, _super);\n        function RefCountSubscriber(destination, connectable) {\n            var _this = _super.call(this, destination) || this;\n            _this.connectable = connectable;\n            return _this;\n        }\n        RefCountSubscriber.prototype._unsubscribe = function () {\n            var connectable = this.connectable;\n            if (!connectable) {\n                this.connection = null;\n                return;\n            }\n            this.connectable = null;\n            var refCount$$1 = connectable._refCount;\n            if (refCount$$1 <= 0) {\n                this.connection = null;\n                return;\n            }\n            connectable._refCount = refCount$$1 - 1;\n            if (refCount$$1 > 1) {\n                this.connection = null;\n                return;\n            }\n            var connection = this.connection;\n            var sharedConnection = connectable._connection;\n            this.connection = null;\n            if (sharedConnection && (!connection || sharedConnection === connection)) {\n                sharedConnection.unsubscribe();\n            }\n        };\n        return RefCountSubscriber;\n    }(Subscriber));\n\n    /** PURE_IMPORTS_START tslib,_Subscriber,_Subscription,_Observable,_Subject PURE_IMPORTS_END */\n    var GroupBySubscriber = /*@__PURE__*/ (function (_super) {\n        __extends(GroupBySubscriber, _super);\n        function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {\n            var _this = _super.call(this, destination) || this;\n            _this.keySelector = keySelector;\n            _this.elementSelector = elementSelector;\n            _this.durationSelector = durationSelector;\n            _this.subjectSelector = subjectSelector;\n            _this.groups = null;\n            _this.attemptedToUnsubscribe = false;\n            _this.count = 0;\n            return _this;\n        }\n        GroupBySubscriber.prototype._next = function (value) {\n            var key;\n            try {\n                key = this.keySelector(value);\n            }\n            catch (err) {\n                this.error(err);\n                return;\n            }\n            this._group(value, key);\n        };\n        GroupBySubscriber.prototype._group = function (value, key) {\n            var groups = this.groups;\n            if (!groups) {\n                groups = this.groups = new Map();\n            }\n            var group = groups.get(key);\n            var element;\n            if (this.elementSelector) {\n                try {\n                    element = this.elementSelector(value);\n                }\n                catch (err) {\n                    this.error(err);\n                }\n            }\n            else {\n                element = value;\n            }\n            if (!group) {\n                group = (this.subjectSelector ? this.subjectSelector() : new Subject());\n                groups.set(key, group);\n                var groupedObservable = new GroupedObservable(key, group, this);\n                this.destination.next(groupedObservable);\n                if (this.durationSelector) {\n                    var duration = void 0;\n                    try {\n                        duration = this.durationSelector(new GroupedObservable(key, group));\n                    }\n                    catch (err) {\n                        this.error(err);\n                        return;\n                    }\n                    this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n                }\n            }\n            if (!group.closed) {\n                group.next(element);\n            }\n        };\n        GroupBySubscriber.prototype._error = function (err) {\n            var groups = this.groups;\n            if (groups) {\n                groups.forEach(function (group, key) {\n                    group.error(err);\n                });\n                groups.clear();\n            }\n            this.destination.error(err);\n        };\n        GroupBySubscriber.prototype._complete = function () {\n            var groups = this.groups;\n            if (groups) {\n                groups.forEach(function (group, key) {\n                    group.complete();\n                });\n                groups.clear();\n            }\n            this.destination.complete();\n        };\n        GroupBySubscriber.prototype.removeGroup = function (key) {\n            this.groups.delete(key);\n        };\n        GroupBySubscriber.prototype.unsubscribe = function () {\n            if (!this.closed) {\n                this.attemptedToUnsubscribe = true;\n                if (this.count === 0) {\n                    _super.prototype.unsubscribe.call(this);\n                }\n            }\n        };\n        return GroupBySubscriber;\n    }(Subscriber));\n    var GroupDurationSubscriber = /*@__PURE__*/ (function (_super) {\n        __extends(GroupDurationSubscriber, _super);\n        function GroupDurationSubscriber(key, group, parent) {\n            var _this = _super.call(this, group) || this;\n            _this.key = key;\n            _this.group = group;\n            _this.parent = parent;\n            return _this;\n        }\n        GroupDurationSubscriber.prototype._next = function (value) {\n            this.complete();\n        };\n        GroupDurationSubscriber.prototype._unsubscribe = function () {\n            var _a = this, parent = _a.parent, key = _a.key;\n            this.key = this.parent = null;\n            if (parent) {\n                parent.removeGroup(key);\n            }\n        };\n        return GroupDurationSubscriber;\n    }(Subscriber));\n    var GroupedObservable = /*@__PURE__*/ (function (_super) {\n        __extends(GroupedObservable, _super);\n        function GroupedObservable(key, groupSubject, refCountSubscription) {\n            var _this = _super.call(this) || this;\n            _this.key = key;\n            _this.groupSubject = groupSubject;\n            _this.refCountSubscription = refCountSubscription;\n            return _this;\n        }\n        GroupedObservable.prototype._subscribe = function (subscriber) {\n            var subscription = new Subscription();\n            var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;\n            if (refCountSubscription && !refCountSubscription.closed) {\n                subscription.add(new InnerRefCountSubscription(refCountSubscription));\n            }\n            subscription.add(groupSubject.subscribe(subscriber));\n            return subscription;\n        };\n        return GroupedObservable;\n    }(Observable));\n    var InnerRefCountSubscription = /*@__PURE__*/ (function (_super) {\n        __extends(InnerRefCountSubscription, _super);\n        function InnerRefCountSubscription(parent) {\n            var _this = _super.call(this) || this;\n            _this.parent = parent;\n            parent.count++;\n            return _this;\n        }\n        InnerRefCountSubscription.prototype.unsubscribe = function () {\n            var parent = this.parent;\n            if (!parent.closed && !this.closed) {\n                _super.prototype.unsubscribe.call(this);\n                parent.count -= 1;\n                if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n                    parent.unsubscribe();\n                }\n            }\n        };\n        return InnerRefCountSubscription;\n    }(Subscription));\n\n    /** PURE_IMPORTS_START tslib,_Subject,_util_ObjectUnsubscribedError PURE_IMPORTS_END */\n    var BehaviorSubject = /*@__PURE__*/ (function (_super) {\n        __extends(BehaviorSubject, _super);\n        function BehaviorSubject(_value) {\n            var _this = _super.call(this) || this;\n            _this._value = _value;\n            return _this;\n        }\n        Object.defineProperty(BehaviorSubject.prototype, \"value\", {\n            get: function () {\n                return this.getValue();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        BehaviorSubject.prototype._subscribe = function (subscriber) {\n            var subscription = _super.prototype._subscribe.call(this, subscriber);\n            if (subscription && !subscription.closed) {\n                subscriber.next(this._value);\n            }\n            return subscription;\n        };\n        BehaviorSubject.prototype.getValue = function () {\n            if (this.hasError) {\n                throw this.thrownError;\n            }\n            else if (this.closed) {\n                throw new ObjectUnsubscribedError();\n            }\n            else {\n                return this._value;\n            }\n        };\n        BehaviorSubject.prototype.next = function (value) {\n            _super.prototype.next.call(this, this._value = value);\n        };\n        return BehaviorSubject;\n    }(Subject));\n\n    /** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */\n    var Action = /*@__PURE__*/ (function (_super) {\n        __extends(Action, _super);\n        function Action(scheduler, work) {\n            return _super.call(this) || this;\n        }\n        Action.prototype.schedule = function (state, delay) {\n            if (delay === void 0) {\n                delay = 0;\n            }\n            return this;\n        };\n        return Action;\n    }(Subscription));\n\n    /** PURE_IMPORTS_START tslib,_Action PURE_IMPORTS_END */\n    var AsyncAction = /*@__PURE__*/ (function (_super) {\n        __extends(AsyncAction, _super);\n        function AsyncAction(scheduler, work) {\n            var _this = _super.call(this, scheduler, work) || this;\n            _this.scheduler = scheduler;\n            _this.work = work;\n            _this.pending = false;\n            return _this;\n        }\n        AsyncAction.prototype.schedule = function (state, delay) {\n            if (delay === void 0) {\n                delay = 0;\n            }\n            if (this.closed) {\n                return this;\n            }\n            this.state = state;\n            var id = this.id;\n            var scheduler = this.scheduler;\n            if (id != null) {\n                this.id = this.recycleAsyncId(scheduler, id, delay);\n            }\n            this.pending = true;\n            this.delay = delay;\n            this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n            return this;\n        };\n        AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n            if (delay === void 0) {\n                delay = 0;\n            }\n            return setInterval(scheduler.flush.bind(scheduler, this), delay);\n        };\n        AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n            if (delay === void 0) {\n                delay = 0;\n            }\n            if (delay !== null && this.delay === delay && this.pending === false) {\n                return id;\n            }\n            return clearInterval(id) && undefined || undefined;\n        };\n        AsyncAction.prototype.execute = function (state, delay) {\n            if (this.closed) {\n                return new Error('executing a cancelled action');\n            }\n            this.pending = false;\n            var error = this._execute(state, delay);\n            if (error) {\n                return error;\n            }\n            else if (this.pending === false && this.id != null) {\n                this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n            }\n        };\n        AsyncAction.prototype._execute = function (state, delay) {\n            var errored = false;\n            var errorValue = undefined;\n            try {\n                this.work(state);\n            }\n            catch (e) {\n                errored = true;\n                errorValue = !!e && e || new Error(e);\n            }\n            if (errored) {\n                this.unsubscribe();\n                return errorValue;\n            }\n        };\n        AsyncAction.prototype._unsubscribe = function () {\n            var id = this.id;\n            var scheduler = this.scheduler;\n            var actions = scheduler.actions;\n            var index = actions.indexOf(this);\n            this.work = null;\n            this.state = null;\n            this.pending = false;\n            this.scheduler = null;\n            if (index !== -1) {\n                actions.splice(index, 1);\n            }\n            if (id != null) {\n                this.id = this.recycleAsyncId(scheduler, id, null);\n            }\n            this.delay = null;\n        };\n        return AsyncAction;\n    }(Action));\n\n    /** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */\n    var QueueAction = /*@__PURE__*/ (function (_super) {\n        __extends(QueueAction, _super);\n        function QueueAction(scheduler, work) {\n            var _this = _super.call(this, scheduler, work) || this;\n            _this.scheduler = scheduler;\n            _this.work = work;\n            return _this;\n        }\n        QueueAction.prototype.schedule = function (state, delay) {\n            if (delay === void 0) {\n                delay = 0;\n            }\n            if (delay > 0) {\n                return _super.prototype.schedule.call(this, state, delay);\n            }\n            this.delay = delay;\n            this.state = state;\n            this.scheduler.flush(this);\n            return this;\n        };\n        QueueAction.prototype.execute = function (state, delay) {\n            return (delay > 0 || this.closed) ?\n                _super.prototype.execute.call(this, state, delay) :\n                this._execute(state, delay);\n        };\n        QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n            if (delay === void 0) {\n                delay = 0;\n            }\n            if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n                return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n            }\n            return scheduler.flush(this);\n        };\n        return QueueAction;\n    }(AsyncAction));\n\n    var Scheduler = /*@__PURE__*/ (function () {\n        function Scheduler(SchedulerAction, now) {\n            if (now === void 0) {\n                now = Scheduler.now;\n            }\n            this.SchedulerAction = SchedulerAction;\n            this.now = now;\n        }\n        Scheduler.prototype.schedule = function (work, delay, state) {\n            if (delay === void 0) {\n                delay = 0;\n            }\n            return new this.SchedulerAction(this, work).schedule(state, delay);\n        };\n        Scheduler.now = function () { return Date.now(); };\n        return Scheduler;\n    }());\n\n    /** PURE_IMPORTS_START tslib,_Scheduler PURE_IMPORTS_END */\n    var AsyncScheduler = /*@__PURE__*/ (function (_super) {\n        __extends(AsyncScheduler, _super);\n        function AsyncScheduler(SchedulerAction, now) {\n            if (now === void 0) {\n                now = Scheduler.now;\n            }\n            var _this = _super.call(this, SchedulerAction, function () {\n                if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) {\n                    return AsyncScheduler.delegate.now();\n                }\n                else {\n                    return now();\n                }\n            }) || this;\n            _this.actions = [];\n            _this.active = false;\n            _this.scheduled = undefined;\n            return _this;\n        }\n        AsyncScheduler.prototype.schedule = function (work, delay, state) {\n            if (delay === void 0) {\n                delay = 0;\n            }\n            if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\n                return AsyncScheduler.delegate.schedule(work, delay, state);\n            }\n            else {\n                return _super.prototype.schedule.call(this, work, delay, state);\n            }\n        };\n        AsyncScheduler.prototype.flush = function (action) {\n            var actions = this.actions;\n            if (this.active) {\n                actions.push(action);\n                return;\n            }\n            var error;\n            this.active = true;\n            do {\n                if (error = action.execute(action.state, action.delay)) {\n                    break;\n                }\n            } while (action = actions.shift());\n            this.active = false;\n            if (error) {\n                while (action = actions.shift()) {\n                    action.unsubscribe();\n                }\n                throw error;\n            }\n        };\n        return AsyncScheduler;\n    }(Scheduler));\n\n    /** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */\n    var QueueScheduler = /*@__PURE__*/ (function (_super) {\n        __extends(QueueScheduler, _super);\n        function QueueScheduler() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        return QueueScheduler;\n    }(AsyncScheduler));\n\n    /** PURE_IMPORTS_START _QueueAction,_QueueScheduler PURE_IMPORTS_END */\n    var queue = /*@__PURE__*/ new QueueScheduler(QueueAction);\n\n    /** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */\n    var EMPTY = /*@__PURE__*/ new Observable(function (subscriber) { return subscriber.complete(); });\n    function empty$1(scheduler) {\n        return scheduler ? emptyScheduled(scheduler) : EMPTY;\n    }\n    function emptyScheduled(scheduler) {\n        return new Observable(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });\n    }\n\n    /** PURE_IMPORTS_START  PURE_IMPORTS_END */\n    function isScheduler(value) {\n        return value && typeof value.schedule === 'function';\n    }\n\n    /** PURE_IMPORTS_START  PURE_IMPORTS_END */\n    var subscribeToArray = function (array) {\n        return function (subscriber) {\n            for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {\n                subscriber.next(array[i]);\n            }\n            if (!subscriber.closed) {\n                subscriber.complete();\n            }\n        };\n    };\n\n    /** PURE_IMPORTS_START _Observable,_Subscription,_util_subscribeToArray PURE_IMPORTS_END */\n    function fromArray(input, scheduler) {\n        if (!scheduler) {\n            return new Observable(subscribeToArray(input));\n        }\n        else {\n            return new Observable(function (subscriber) {\n                var sub = new Subscription();\n                var i = 0;\n                sub.add(scheduler.schedule(function () {\n                    if (i === input.length) {\n                        subscriber.complete();\n                        return;\n                    }\n                    subscriber.next(input[i++]);\n                    if (!subscriber.closed) {\n                        sub.add(this.schedule());\n                    }\n                }));\n                return sub;\n            });\n        }\n    }\n\n    /** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */\n    function scalar(value) {\n        var result = new Observable(function (subscriber) {\n            subscriber.next(value);\n            subscriber.complete();\n        });\n        result._isScalar = true;\n        result.value = value;\n        return result;\n    }\n\n    /** PURE_IMPORTS_START _util_isScheduler,_fromArray,_empty,_scalar PURE_IMPORTS_END */\n    function of() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var scheduler = args[args.length - 1];\n        if (isScheduler(scheduler)) {\n            args.pop();\n        }\n        else {\n            scheduler = undefined;\n        }\n        switch (args.length) {\n            case 0:\n                return empty$1(scheduler);\n            case 1:\n                return scheduler ? fromArray(args, scheduler) : scalar(args[0]);\n            default:\n                return fromArray(args, scheduler);\n        }\n    }\n\n    /** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */\n    function throwError(error, scheduler) {\n        if (!scheduler) {\n            return new Observable(function (subscriber) { return subscriber.error(error); });\n        }\n        else {\n            return new Observable(function (subscriber) { return scheduler.schedule(dispatch, 0, { error: error, subscriber: subscriber }); });\n        }\n    }\n    function dispatch(_a) {\n        var error = _a.error, subscriber = _a.subscriber;\n        subscriber.error(error);\n    }\n\n    /** PURE_IMPORTS_START _observable_empty,_observable_of,_observable_throwError PURE_IMPORTS_END */\n    var Notification = /*@__PURE__*/ (function () {\n        function Notification(kind, value, error) {\n            this.kind = kind;\n            this.value = value;\n            this.error = error;\n            this.hasValue = kind === 'N';\n        }\n        Notification.prototype.observe = function (observer) {\n            switch (this.kind) {\n                case 'N':\n                    return observer.next && observer.next(this.value);\n                case 'E':\n                    return observer.error && observer.error(this.error);\n                case 'C':\n                    return observer.complete && observer.complete();\n            }\n        };\n        Notification.prototype.do = function (next, error, complete) {\n            var kind = this.kind;\n            switch (kind) {\n                case 'N':\n                    return next && next(this.value);\n                case 'E':\n                    return error && error(this.error);\n                case 'C':\n                    return complete && complete();\n            }\n        };\n        Notification.prototype.accept = function (nextOrObserver, error, complete) {\n            if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n                return this.observe(nextOrObserver);\n            }\n            else {\n                return this.do(nextOrObserver, error, complete);\n            }\n        };\n        Notification.prototype.toObservable = function () {\n            var kind = this.kind;\n            switch (kind) {\n                case 'N':\n                    return of(this.value);\n                case 'E':\n                    return throwError(this.error);\n                case 'C':\n                    return empty$1();\n            }\n            throw new Error('unexpected notification kind value');\n        };\n        Notification.createNext = function (value) {\n            if (typeof value !== 'undefined') {\n                return new Notification('N', value);\n            }\n            return Notification.undefinedValueNotification;\n        };\n        Notification.createError = function (err) {\n            return new Notification('E', undefined, err);\n        };\n        Notification.createComplete = function () {\n            return Notification.completeNotification;\n        };\n        Notification.completeNotification = new Notification('C');\n        Notification.undefinedValueNotification = new Notification('N', undefined);\n        return Notification;\n    }());\n\n    /** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */\n    var ObserveOnSubscriber = /*@__PURE__*/ (function (_super) {\n        __extends(ObserveOnSubscriber, _super);\n        function ObserveOnSubscriber(destination, scheduler, delay) {\n            if (delay === void 0) {\n                delay = 0;\n            }\n            var _this = _super.call(this, destination) || this;\n            _this.scheduler = scheduler;\n            _this.delay = delay;\n            return _this;\n        }\n        ObserveOnSubscriber.dispatch = function (arg) {\n            var notification = arg.notification, destination = arg.destination;\n            notification.observe(destination);\n            this.unsubscribe();\n        };\n        ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {\n            this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n        };\n        ObserveOnSubscriber.prototype._next = function (value) {\n            this.scheduleMessage(Notification.createNext(value));\n        };\n        ObserveOnSubscriber.prototype._error = function (err) {\n            this.scheduleMessage(Notification.createError(err));\n        };\n        ObserveOnSubscriber.prototype._complete = function () {\n            this.scheduleMessage(Notification.createComplete());\n        };\n        return ObserveOnSubscriber;\n    }(Subscriber));\n    var ObserveOnMessage = /*@__PURE__*/ (function () {\n        function ObserveOnMessage(notification, destination) {\n            this.notification = notification;\n            this.destination = destination;\n        }\n        return ObserveOnMessage;\n    }());\n\n    /** PURE_IMPORTS_START tslib,_Subject,_scheduler_queue,_Subscription,_operators_observeOn,_util_ObjectUnsubscribedError,_SubjectSubscription PURE_IMPORTS_END */\n    var ReplaySubject = /*@__PURE__*/ (function (_super) {\n        __extends(ReplaySubject, _super);\n        function ReplaySubject(bufferSize, windowTime, scheduler) {\n            if (bufferSize === void 0) {\n                bufferSize = Number.POSITIVE_INFINITY;\n            }\n            if (windowTime === void 0) {\n                windowTime = Number.POSITIVE_INFINITY;\n            }\n            var _this = _super.call(this) || this;\n            _this.scheduler = scheduler;\n            _this._events = [];\n            _this._infiniteTimeWindow = false;\n            _this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n            _this._windowTime = windowTime < 1 ? 1 : windowTime;\n            if (windowTime === Number.POSITIVE_INFINITY) {\n                _this._infiniteTimeWindow = true;\n                _this.next = _this.nextInfiniteTimeWindow;\n            }\n            else {\n                _this.next = _this.nextTimeWindow;\n            }\n            return _this;\n        }\n        ReplaySubject.prototype.nextInfiniteTimeWindow = function (value) {\n            var _events = this._events;\n            _events.push(value);\n            if (_events.length > this._bufferSize) {\n                _events.shift();\n            }\n            _super.prototype.next.call(this, value);\n        };\n        ReplaySubject.prototype.nextTimeWindow = function (value) {\n            this._events.push(new ReplayEvent(this._getNow(), value));\n            this._trimBufferThenGetEvents();\n            _super.prototype.next.call(this, value);\n        };\n        ReplaySubject.prototype._subscribe = function (subscriber) {\n            var _infiniteTimeWindow = this._infiniteTimeWindow;\n            var _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();\n            var scheduler = this.scheduler;\n            var len = _events.length;\n            var subscription;\n            if (this.closed) {\n                throw new ObjectUnsubscribedError();\n            }\n            else if (this.isStopped || this.hasError) {\n                subscription = Subscription.EMPTY;\n            }\n            else {\n                this.observers.push(subscriber);\n                subscription = new SubjectSubscription(this, subscriber);\n            }\n            if (scheduler) {\n                subscriber.add(subscriber = new ObserveOnSubscriber(subscriber, scheduler));\n            }\n            if (_infiniteTimeWindow) {\n                for (var i = 0; i < len && !subscriber.closed; i++) {\n                    subscriber.next(_events[i]);\n                }\n            }\n            else {\n                for (var i = 0; i < len && !subscriber.closed; i++) {\n                    subscriber.next(_events[i].value);\n                }\n            }\n            if (this.hasError) {\n                subscriber.error(this.thrownError);\n            }\n            else if (this.isStopped) {\n                subscriber.complete();\n            }\n            return subscription;\n        };\n        ReplaySubject.prototype._getNow = function () {\n            return (this.scheduler || queue).now();\n        };\n        ReplaySubject.prototype._trimBufferThenGetEvents = function () {\n            var now = this._getNow();\n            var _bufferSize = this._bufferSize;\n            var _windowTime = this._windowTime;\n            var _events = this._events;\n            var eventsCount = _events.length;\n            var spliceCount = 0;\n            while (spliceCount < eventsCount) {\n                if ((now - _events[spliceCount].time) < _windowTime) {\n                    break;\n                }\n                spliceCount++;\n            }\n            if (eventsCount > _bufferSize) {\n                spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n            }\n            if (spliceCount > 0) {\n                _events.splice(0, spliceCount);\n            }\n            return _events;\n        };\n        return ReplaySubject;\n    }(Subject));\n    var ReplayEvent = /*@__PURE__*/ (function () {\n        function ReplayEvent(time, value) {\n            this.time = time;\n            this.value = value;\n        }\n        return ReplayEvent;\n    }());\n\n    /** PURE_IMPORTS_START tslib,_Subject,_Subscription PURE_IMPORTS_END */\n    var AsyncSubject = /*@__PURE__*/ (function (_super) {\n        __extends(AsyncSubject, _super);\n        function AsyncSubject() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.value = null;\n            _this.hasNext = false;\n            _this.hasCompleted = false;\n            return _this;\n        }\n        AsyncSubject.prototype._subscribe = function (subscriber) {\n            if (this.hasError) {\n                subscriber.error(this.thrownError);\n                return Subscription.EMPTY;\n            }\n            else if (this.hasCompleted && this.hasNext) {\n                subscriber.next(this.value);\n                subscriber.complete();\n                return Subscription.EMPTY;\n            }\n            return _super.prototype._subscribe.call(this, subscriber);\n        };\n        AsyncSubject.prototype.next = function (value) {\n            if (!this.hasCompleted) {\n                this.value = value;\n                this.hasNext = true;\n            }\n        };\n        AsyncSubject.prototype.error = function (error) {\n            if (!this.hasCompleted) {\n                _super.prototype.error.call(this, error);\n            }\n        };\n        AsyncSubject.prototype.complete = function () {\n            this.hasCompleted = true;\n            if (this.hasNext) {\n                _super.prototype.next.call(this, this.value);\n            }\n            _super.prototype.complete.call(this);\n        };\n        return AsyncSubject;\n    }(Subject));\n\n    /** PURE_IMPORTS_START  PURE_IMPORTS_END */\n    var nextHandle = 1;\n    var tasksByHandle = {};\n    function runIfPresent(handle) {\n        var cb = tasksByHandle[handle];\n        if (cb) {\n            cb();\n        }\n    }\n    var Immediate = {\n        setImmediate: function (cb) {\n            var handle = nextHandle++;\n            tasksByHandle[handle] = cb;\n            Promise.resolve().then(function () { return runIfPresent(handle); });\n            return handle;\n        },\n        clearImmediate: function (handle) {\n            delete tasksByHandle[handle];\n        },\n    };\n\n    /** PURE_IMPORTS_START tslib,_util_Immediate,_AsyncAction PURE_IMPORTS_END */\n    var AsapAction = /*@__PURE__*/ (function (_super) {\n        __extends(AsapAction, _super);\n        function AsapAction(scheduler, work) {\n            var _this = _super.call(this, scheduler, work) || this;\n            _this.scheduler = scheduler;\n            _this.work = work;\n            return _this;\n        }\n        AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n            if (delay === void 0) {\n                delay = 0;\n            }\n            if (delay !== null && delay > 0) {\n                return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n            }\n            scheduler.actions.push(this);\n            return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));\n        };\n        AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n            if (delay === void 0) {\n                delay = 0;\n            }\n            if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n                return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n            }\n            if (scheduler.actions.length === 0) {\n                Immediate.clearImmediate(id);\n                scheduler.scheduled = undefined;\n            }\n            return undefined;\n        };\n        return AsapAction;\n    }(AsyncAction));\n\n    /** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */\n    var AsapScheduler = /*@__PURE__*/ (function (_super) {\n        __extends(AsapScheduler, _super);\n        function AsapScheduler() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        AsapScheduler.prototype.flush = function (action) {\n            this.active = true;\n            this.scheduled = undefined;\n            var actions = this.actions;\n            var error;\n            var index = -1;\n            var count = actions.length;\n            action = action || actions.shift();\n            do {\n                if (error = action.execute(action.state, action.delay)) {\n                    break;\n                }\n            } while (++index < count && (action = actions.shift()));\n            this.active = false;\n            if (error) {\n                while (++index < count && (action = actions.shift())) {\n                    action.unsubscribe();\n                }\n                throw error;\n            }\n        };\n        return AsapScheduler;\n    }(AsyncScheduler));\n\n    /** PURE_IMPORTS_START _AsapAction,_AsapScheduler PURE_IMPORTS_END */\n    var asap = /*@__PURE__*/ new AsapScheduler(AsapAction);\n\n    /** PURE_IMPORTS_START _AsyncAction,_AsyncScheduler PURE_IMPORTS_END */\n    var async = /*@__PURE__*/ new AsyncScheduler(AsyncAction);\n\n    /** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */\n    var AnimationFrameAction = /*@__PURE__*/ (function (_super) {\n        __extends(AnimationFrameAction, _super);\n        function AnimationFrameAction(scheduler, work) {\n            var _this = _super.call(this, scheduler, work) || this;\n            _this.scheduler = scheduler;\n            _this.work = work;\n            return _this;\n        }\n        AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n            if (delay === void 0) {\n                delay = 0;\n            }\n            if (delay !== null && delay > 0) {\n                return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n            }\n            scheduler.actions.push(this);\n            return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(function () { return scheduler.flush(null); }));\n        };\n        AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n            if (delay === void 0) {\n                delay = 0;\n            }\n            if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n                return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n            }\n            if (scheduler.actions.length === 0) {\n                cancelAnimationFrame(id);\n                scheduler.scheduled = undefined;\n            }\n            return undefined;\n        };\n        return AnimationFrameAction;\n    }(AsyncAction));\n\n    /** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */\n    var AnimationFrameScheduler = /*@__PURE__*/ (function (_super) {\n        __extends(AnimationFrameScheduler, _super);\n        function AnimationFrameScheduler() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        AnimationFrameScheduler.prototype.flush = function (action) {\n            this.active = true;\n            this.scheduled = undefined;\n            var actions = this.actions;\n            var error;\n            var index = -1;\n            var count = actions.length;\n            action = action || actions.shift();\n            do {\n                if (error = action.execute(action.state, action.delay)) {\n                    break;\n                }\n            } while (++index < count && (action = actions.shift()));\n            this.active = false;\n            if (error) {\n                while (++index < count && (action = actions.shift())) {\n                    action.unsubscribe();\n                }\n                throw error;\n            }\n        };\n        return AnimationFrameScheduler;\n    }(AsyncScheduler));\n\n    /** PURE_IMPORTS_START _AnimationFrameAction,_AnimationFrameScheduler PURE_IMPORTS_END */\n    var animationFrame = /*@__PURE__*/ new AnimationFrameScheduler(AnimationFrameAction);\n\n    /** PURE_IMPORTS_START tslib,_AsyncAction,_AsyncScheduler PURE_IMPORTS_END */\n    var VirtualTimeScheduler = /*@__PURE__*/ (function (_super) {\n        __extends(VirtualTimeScheduler, _super);\n        function VirtualTimeScheduler(SchedulerAction, maxFrames) {\n            if (SchedulerAction === void 0) {\n                SchedulerAction = VirtualAction;\n            }\n            if (maxFrames === void 0) {\n                maxFrames = Number.POSITIVE_INFINITY;\n            }\n            var _this = _super.call(this, SchedulerAction, function () { return _this.frame; }) || this;\n            _this.maxFrames = maxFrames;\n            _this.frame = 0;\n            _this.index = -1;\n            return _this;\n        }\n        VirtualTimeScheduler.prototype.flush = function () {\n            var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;\n            var error, action;\n            while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n                if (error = action.execute(action.state, action.delay)) {\n                    break;\n                }\n            }\n            if (error) {\n                while (action = actions.shift()) {\n                    action.unsubscribe();\n                }\n                throw error;\n            }\n        };\n        VirtualTimeScheduler.frameTimeFactor = 10;\n        return VirtualTimeScheduler;\n    }(AsyncScheduler));\n    var VirtualAction = /*@__PURE__*/ (function (_super) {\n        __extends(VirtualAction, _super);\n        function VirtualAction(scheduler, work, index) {\n            if (index === void 0) {\n                index = scheduler.index += 1;\n            }\n            var _this = _super.call(this, scheduler, work) || this;\n            _this.scheduler = scheduler;\n            _this.work = work;\n            _this.index = index;\n            _this.active = true;\n            _this.index = scheduler.index = index;\n            return _this;\n        }\n        VirtualAction.prototype.schedule = function (state, delay) {\n            if (delay === void 0) {\n                delay = 0;\n            }\n            if (!this.id) {\n                return _super.prototype.schedule.call(this, state, delay);\n            }\n            this.active = false;\n            var action = new VirtualAction(this.scheduler, this.work);\n            this.add(action);\n            return action.schedule(state, delay);\n        };\n        VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n            if (delay === void 0) {\n                delay = 0;\n            }\n            this.delay = scheduler.frame + delay;\n            var actions = scheduler.actions;\n            actions.push(this);\n            actions.sort(VirtualAction.sortActions);\n            return true;\n        };\n        VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n            if (delay === void 0) {\n                delay = 0;\n            }\n            return undefined;\n        };\n        VirtualAction.prototype._execute = function (state, delay) {\n            if (this.active === true) {\n                return _super.prototype._execute.call(this, state, delay);\n            }\n        };\n        VirtualAction.sortActions = function (a, b) {\n            if (a.delay === b.delay) {\n                if (a.index === b.index) {\n                    return 0;\n                }\n                else if (a.index > b.index) {\n                    return 1;\n                }\n                else {\n                    return -1;\n                }\n            }\n            else if (a.delay > b.delay) {\n                return 1;\n            }\n            else {\n                return -1;\n            }\n        };\n        return VirtualAction;\n    }(AsyncAction));\n\n    /** PURE_IMPORTS_START  PURE_IMPORTS_END */\n\n    /** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */\n\n    /** PURE_IMPORTS_START tslib PURE_IMPORTS_END */\n    var ArgumentOutOfRangeError = /*@__PURE__*/ (function (_super) {\n        __extends(ArgumentOutOfRangeError, _super);\n        function ArgumentOutOfRangeError() {\n            var _this = _super.call(this, 'argument out of range') || this;\n            _this.name = 'ArgumentOutOfRangeError';\n            Object.setPrototypeOf(_this, ArgumentOutOfRangeError.prototype);\n            return _this;\n        }\n        return ArgumentOutOfRangeError;\n    }(Error));\n\n    /** PURE_IMPORTS_START tslib PURE_IMPORTS_END */\n    var EmptyError = /*@__PURE__*/ (function (_super) {\n        __extends(EmptyError, _super);\n        function EmptyError() {\n            var _this = _super.call(this, 'no elements in sequence') || this;\n            _this.name = 'EmptyError';\n            Object.setPrototypeOf(_this, EmptyError.prototype);\n            return _this;\n        }\n        return EmptyError;\n    }(Error));\n\n    /** PURE_IMPORTS_START tslib PURE_IMPORTS_END */\n    var TimeoutError = /*@__PURE__*/ (function (_super) {\n        __extends(TimeoutError, _super);\n        function TimeoutError() {\n            var _this = _super.call(this, 'Timeout has occurred') || this;\n            _this.name = 'TimeoutError';\n            Object.setPrototypeOf(_this, TimeoutError.prototype);\n            return _this;\n        }\n        return TimeoutError;\n    }(Error));\n\n    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\n    var MapSubscriber = /*@__PURE__*/ (function (_super) {\n        __extends(MapSubscriber, _super);\n        function MapSubscriber(destination, project, thisArg) {\n            var _this = _super.call(this, destination) || this;\n            _this.project = project;\n            _this.count = 0;\n            _this.thisArg = thisArg || _this;\n            return _this;\n        }\n        MapSubscriber.prototype._next = function (value) {\n            var result;\n            try {\n                result = this.project.call(this.thisArg, value, this.count++);\n            }\n            catch (err) {\n                this.destination.error(err);\n                return;\n            }\n            this.destination.next(result);\n        };\n        return MapSubscriber;\n    }(Subscriber));\n\n    /** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_isArray,_util_isScheduler PURE_IMPORTS_END */\n\n    /** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_isScheduler,_util_isArray PURE_IMPORTS_END */\n\n    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\n    var OuterSubscriber = /*@__PURE__*/ (function (_super) {\n        __extends(OuterSubscriber, _super);\n        function OuterSubscriber() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n            this.destination.next(innerValue);\n        };\n        OuterSubscriber.prototype.notifyError = function (error, innerSub) {\n            this.destination.error(error);\n        };\n        OuterSubscriber.prototype.notifyComplete = function (innerSub) {\n            this.destination.complete();\n        };\n        return OuterSubscriber;\n    }(Subscriber));\n\n    /** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\n    var InnerSubscriber = /*@__PURE__*/ (function (_super) {\n        __extends(InnerSubscriber, _super);\n        function InnerSubscriber(parent, outerValue, outerIndex) {\n            var _this = _super.call(this) || this;\n            _this.parent = parent;\n            _this.outerValue = outerValue;\n            _this.outerIndex = outerIndex;\n            _this.index = 0;\n            return _this;\n        }\n        InnerSubscriber.prototype._next = function (value) {\n            this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n        };\n        InnerSubscriber.prototype._error = function (error) {\n            this.parent.notifyError(error, this);\n            this.unsubscribe();\n        };\n        InnerSubscriber.prototype._complete = function () {\n            this.parent.notifyComplete(this);\n            this.unsubscribe();\n        };\n        return InnerSubscriber;\n    }(Subscriber));\n\n    /** PURE_IMPORTS_START _hostReportError PURE_IMPORTS_END */\n    var subscribeToPromise = function (promise) {\n        return function (subscriber) {\n            promise.then(function (value) {\n                if (!subscriber.closed) {\n                    subscriber.next(value);\n                    subscriber.complete();\n                }\n            }, function (err) { return subscriber.error(err); })\n                .then(null, hostReportError);\n            return subscriber;\n        };\n    };\n\n    /** PURE_IMPORTS_START  PURE_IMPORTS_END */\n    function getSymbolIterator() {\n        if (typeof Symbol !== 'function' || !Symbol.iterator) {\n            return '@@iterator';\n        }\n        return Symbol.iterator;\n    }\n    var iterator = /*@__PURE__*/ getSymbolIterator();\n\n    /** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */\n    var subscribeToIterable = function (iterable) {\n        return function (subscriber) {\n            var iterator$$1 = iterable[iterator]();\n            do {\n                var item = iterator$$1.next();\n                if (item.done) {\n                    subscriber.complete();\n                    break;\n                }\n                subscriber.next(item.value);\n                if (subscriber.closed) {\n                    break;\n                }\n            } while (true);\n            if (typeof iterator$$1.return === 'function') {\n                subscriber.add(function () {\n                    if (iterator$$1.return) {\n                        iterator$$1.return();\n                    }\n                });\n            }\n            return subscriber;\n        };\n    };\n\n    /** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */\n    var subscribeToObservable = function (obj) {\n        return function (subscriber) {\n            var obs = obj[observable]();\n            if (typeof obs.subscribe !== 'function') {\n                throw new TypeError('Provided object does not correctly implement Symbol.observable');\n            }\n            else {\n                return obs.subscribe(subscriber);\n            }\n        };\n    };\n\n    /** PURE_IMPORTS_START  PURE_IMPORTS_END */\n    var isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });\n\n    /** PURE_IMPORTS_START  PURE_IMPORTS_END */\n    function isPromise(value) {\n        return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n    }\n\n    /** PURE_IMPORTS_START _Observable,_subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */\n    var subscribeTo = function (result) {\n        if (result instanceof Observable) {\n            return function (subscriber) {\n                if (result._isScalar) {\n                    subscriber.next(result.value);\n                    subscriber.complete();\n                    return undefined;\n                }\n                else {\n                    return result.subscribe(subscriber);\n                }\n            };\n        }\n        else if (result && typeof result[observable] === 'function') {\n            return subscribeToObservable(result);\n        }\n        else if (isArrayLike(result)) {\n            return subscribeToArray(result);\n        }\n        else if (isPromise(result)) {\n            return subscribeToPromise(result);\n        }\n        else if (result && typeof result[iterator] === 'function') {\n            return subscribeToIterable(result);\n        }\n        else {\n            var value = isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\n            var msg = \"You provided \" + value + \" where a stream was expected.\"\n                + ' You can provide an Observable, Promise, Array, or Iterable.';\n            throw new TypeError(msg);\n        }\n    };\n\n    /** PURE_IMPORTS_START _InnerSubscriber,_subscribeTo PURE_IMPORTS_END */\n    function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {\n        var destination = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n        return subscribeTo(result)(destination);\n    }\n\n    /** PURE_IMPORTS_START tslib,_util_isScheduler,_util_isArray,_OuterSubscriber,_util_subscribeToResult,_fromArray PURE_IMPORTS_END */\n    var NONE = {};\n    var CombineLatestSubscriber = /*@__PURE__*/ (function (_super) {\n        __extends(CombineLatestSubscriber, _super);\n        function CombineLatestSubscriber(destination, resultSelector) {\n            var _this = _super.call(this, destination) || this;\n            _this.resultSelector = resultSelector;\n            _this.active = 0;\n            _this.values = [];\n            _this.observables = [];\n            return _this;\n        }\n        CombineLatestSubscriber.prototype._next = function (observable) {\n            this.values.push(NONE);\n            this.observables.push(observable);\n        };\n        CombineLatestSubscriber.prototype._complete = function () {\n            var observables = this.observables;\n            var len = observables.length;\n            if (len === 0) {\n                this.destination.complete();\n            }\n            else {\n                this.active = len;\n                this.toRespond = len;\n                for (var i = 0; i < len; i++) {\n                    var observable = observables[i];\n                    this.add(subscribeToResult(this, observable, observable, i));\n                }\n            }\n        };\n        CombineLatestSubscriber.prototype.notifyComplete = function (unused) {\n            if ((this.active -= 1) === 0) {\n                this.destination.complete();\n            }\n        };\n        CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n            var values = this.values;\n            var oldVal = values[outerIndex];\n            var toRespond = !this.toRespond\n                ? 0\n                : oldVal === NONE ? --this.toRespond : this.toRespond;\n            values[outerIndex] = innerValue;\n            if (toRespond === 0) {\n                if (this.resultSelector) {\n                    this._tryResultSelector(values);\n                }\n                else {\n                    this.destination.next(values.slice());\n                }\n            }\n        };\n        CombineLatestSubscriber.prototype._tryResultSelector = function (values) {\n            var result;\n            try {\n                result = this.resultSelector.apply(this, values);\n            }\n            catch (err) {\n                this.destination.error(err);\n                return;\n            }\n            this.destination.next(result);\n        };\n        return CombineLatestSubscriber;\n    }(OuterSubscriber));\n\n    /** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */\n\n    /** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */\n\n    /** PURE_IMPORTS_START _Observable,_Subscription,_util_subscribeToPromise PURE_IMPORTS_END */\n\n    /** PURE_IMPORTS_START _Observable,_Subscription,_symbol_iterator,_util_subscribeToIterable PURE_IMPORTS_END */\n\n    /** PURE_IMPORTS_START _Observable,_Subscription,_symbol_observable,_util_subscribeToObservable PURE_IMPORTS_END */\n\n    /** PURE_IMPORTS_START _Observable,_util_isPromise,_util_isArrayLike,_util_isInteropObservable,_util_isIterable,_fromArray,_fromPromise,_fromIterable,_fromObservable,_util_subscribeTo PURE_IMPORTS_END */\n\n    /** PURE_IMPORTS_START tslib,_util_subscribeToResult,_OuterSubscriber,_map,_observable_from PURE_IMPORTS_END */\n    var MergeMapSubscriber = /*@__PURE__*/ (function (_super) {\n        __extends(MergeMapSubscriber, _super);\n        function MergeMapSubscriber(destination, project, concurrent) {\n            if (concurrent === void 0) {\n                concurrent = Number.POSITIVE_INFINITY;\n            }\n            var _this = _super.call(this, destination) || this;\n            _this.project = project;\n            _this.concurrent = concurrent;\n            _this.hasCompleted = false;\n            _this.buffer = [];\n            _this.active = 0;\n            _this.index = 0;\n            return _this;\n        }\n        MergeMapSubscriber.prototype._next = function (value) {\n            if (this.active < this.concurrent) {\n                this._tryNext(value);\n            }\n            else {\n                this.buffer.push(value);\n            }\n        };\n        MergeMapSubscriber.prototype._tryNext = function (value) {\n            var result;\n            var index = this.index++;\n            try {\n                result = this.project(value, index);\n            }\n            catch (err) {\n                this.destination.error(err);\n                return;\n            }\n            this.active++;\n            this._innerSub(result, value, index);\n        };\n        MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n            this.add(subscribeToResult(this, ish, value, index));\n        };\n        MergeMapSubscriber.prototype._complete = function () {\n            this.hasCompleted = true;\n            if (this.active === 0 && this.buffer.length === 0) {\n                this.destination.complete();\n            }\n        };\n        MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n            this.destination.next(innerValue);\n        };\n        MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n            var buffer = this.buffer;\n            this.remove(innerSub);\n            this.active--;\n            if (buffer.length > 0) {\n                this._next(buffer.shift());\n            }\n            else if (this.active === 0 && this.hasCompleted) {\n                this.destination.complete();\n            }\n        };\n        return MergeMapSubscriber;\n    }(OuterSubscriber));\n\n    /** PURE_IMPORTS_START _mergeMap,_util_identity PURE_IMPORTS_END */\n\n    /** PURE_IMPORTS_START _mergeAll PURE_IMPORTS_END */\n\n    /** PURE_IMPORTS_START _util_isScheduler,_of,_from,_operators_concatAll PURE_IMPORTS_END */\n\n    /** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */\n\n    /** PURE_IMPORTS_START tslib,_Observable,_util_isArray,_empty,_util_subscribeToResult,_OuterSubscriber,_operators_map PURE_IMPORTS_END */\n    var ForkJoinSubscriber = /*@__PURE__*/ (function (_super) {\n        __extends(ForkJoinSubscriber, _super);\n        function ForkJoinSubscriber(destination, sources) {\n            var _this = _super.call(this, destination) || this;\n            _this.sources = sources;\n            _this.completed = 0;\n            _this.haveValues = 0;\n            var len = sources.length;\n            _this.values = new Array(len);\n            for (var i = 0; i < len; i++) {\n                var source = sources[i];\n                var innerSubscription = subscribeToResult(_this, source, null, i);\n                if (innerSubscription) {\n                    _this.add(innerSubscription);\n                }\n            }\n            return _this;\n        }\n        ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n            this.values[outerIndex] = innerValue;\n            if (!innerSub._hasValue) {\n                innerSub._hasValue = true;\n                this.haveValues++;\n            }\n        };\n        ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {\n            var _a = this, destination = _a.destination, haveValues = _a.haveValues, values = _a.values;\n            var len = values.length;\n            if (!innerSub._hasValue) {\n                destination.complete();\n                return;\n            }\n            this.completed++;\n            if (this.completed !== len) {\n                return;\n            }\n            if (haveValues === len) {\n                destination.next(values);\n            }\n            destination.complete();\n        };\n        return ForkJoinSubscriber;\n    }(OuterSubscriber));\n\n    /** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */\n\n    /** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */\n\n    /** PURE_IMPORTS_START _Observable,_util_identity,_util_isScheduler PURE_IMPORTS_END */\n\n    /** PURE_IMPORTS_START _defer,_empty PURE_IMPORTS_END */\n\n    /** PURE_IMPORTS_START _isArray PURE_IMPORTS_END */\n    function isNumeric(val) {\n        return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n    }\n\n    /** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric PURE_IMPORTS_END */\n\n    /** PURE_IMPORTS_START _Observable,_util_isScheduler,_operators_mergeAll,_fromArray PURE_IMPORTS_END */\n\n    /** PURE_IMPORTS_START _Observable,_util_noop PURE_IMPORTS_END */\n    var NEVER = /*@__PURE__*/ new Observable(noop);\n\n    /** PURE_IMPORTS_START _Observable,_from,_util_isArray,_empty PURE_IMPORTS_END */\n\n    /** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */\n\n    /** PURE_IMPORTS_START tslib,_util_isArray,_fromArray,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\n    var RaceSubscriber = /*@__PURE__*/ (function (_super) {\n        __extends(RaceSubscriber, _super);\n        function RaceSubscriber(destination) {\n            var _this = _super.call(this, destination) || this;\n            _this.hasFirst = false;\n            _this.observables = [];\n            _this.subscriptions = [];\n            return _this;\n        }\n        RaceSubscriber.prototype._next = function (observable) {\n            this.observables.push(observable);\n        };\n        RaceSubscriber.prototype._complete = function () {\n            var observables = this.observables;\n            var len = observables.length;\n            if (len === 0) {\n                this.destination.complete();\n            }\n            else {\n                for (var i = 0; i < len && !this.hasFirst; i++) {\n                    var observable = observables[i];\n                    var subscription = subscribeToResult(this, observable, observable, i);\n                    if (this.subscriptions) {\n                        this.subscriptions.push(subscription);\n                    }\n                    this.add(subscription);\n                }\n                this.observables = null;\n            }\n        };\n        RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n            if (!this.hasFirst) {\n                this.hasFirst = true;\n                for (var i = 0; i < this.subscriptions.length; i++) {\n                    if (i !== outerIndex) {\n                        var subscription = this.subscriptions[i];\n                        subscription.unsubscribe();\n                        this.remove(subscription);\n                    }\n                }\n                this.subscriptions = null;\n            }\n            this.destination.next(innerValue);\n        };\n        return RaceSubscriber;\n    }(OuterSubscriber));\n\n    /** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */\n\n    /** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */\n    function timer(dueTime, periodOrScheduler, scheduler) {\n        if (dueTime === void 0) {\n            dueTime = 0;\n        }\n        var period = -1;\n        if (isNumeric(periodOrScheduler)) {\n            period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);\n        }\n        else if (isScheduler(periodOrScheduler)) {\n            scheduler = periodOrScheduler;\n        }\n        if (!isScheduler(scheduler)) {\n            scheduler = async;\n        }\n        return new Observable(function (subscriber) {\n            var due = isNumeric(dueTime)\n                ? dueTime\n                : (+dueTime - scheduler.now());\n            return scheduler.schedule(dispatch$7, due, {\n                index: 0, period: period, subscriber: subscriber\n            });\n        });\n    }\n    function dispatch$7(state) {\n        var index = state.index, period = state.period, subscriber = state.subscriber;\n        subscriber.next(index);\n        if (subscriber.closed) {\n            return;\n        }\n        else if (period === -1) {\n            return subscriber.complete();\n        }\n        state.index = index + 1;\n        this.schedule(state, period);\n    }\n\n    /** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */\n\n    /** PURE_IMPORTS_START tslib,_fromArray,_util_isArray,_Subscriber,_OuterSubscriber,_util_subscribeToResult,_.._internal_symbol_iterator PURE_IMPORTS_END */\n    var ZipSubscriber = /*@__PURE__*/ (function (_super) {\n        __extends(ZipSubscriber, _super);\n        function ZipSubscriber(destination, resultSelector, values) {\n            if (values === void 0) {\n                values = Object.create(null);\n            }\n            var _this = _super.call(this, destination) || this;\n            _this.iterators = [];\n            _this.active = 0;\n            _this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : null;\n            _this.values = values;\n            return _this;\n        }\n        ZipSubscriber.prototype._next = function (value) {\n            var iterators = this.iterators;\n            if (isArray(value)) {\n                iterators.push(new StaticArrayIterator(value));\n            }\n            else if (typeof value[iterator] === 'function') {\n                iterators.push(new StaticIterator(value[iterator]()));\n            }\n            else {\n                iterators.push(new ZipBufferIterator(this.destination, this, value));\n            }\n        };\n        ZipSubscriber.prototype._complete = function () {\n            var iterators = this.iterators;\n            var len = iterators.length;\n            if (len === 0) {\n                this.destination.complete();\n                return;\n            }\n            this.active = len;\n            for (var i = 0; i < len; i++) {\n                var iterator$$1 = iterators[i];\n                if (iterator$$1.stillUnsubscribed) {\n                    this.add(iterator$$1.subscribe(iterator$$1, i));\n                }\n                else {\n                    this.active--;\n                }\n            }\n        };\n        ZipSubscriber.prototype.notifyInactive = function () {\n            this.active--;\n            if (this.active === 0) {\n                this.destination.complete();\n            }\n        };\n        ZipSubscriber.prototype.checkIterators = function () {\n            var iterators = this.iterators;\n            var len = iterators.length;\n            var destination = this.destination;\n            for (var i = 0; i < len; i++) {\n                var iterator$$1 = iterators[i];\n                if (typeof iterator$$1.hasValue === 'function' && !iterator$$1.hasValue()) {\n                    return;\n                }\n            }\n            var shouldComplete = false;\n            var args = [];\n            for (var i = 0; i < len; i++) {\n                var iterator$$1 = iterators[i];\n                var result = iterator$$1.next();\n                if (iterator$$1.hasCompleted()) {\n                    shouldComplete = true;\n                }\n                if (result.done) {\n                    destination.complete();\n                    return;\n                }\n                args.push(result.value);\n            }\n            if (this.resultSelector) {\n                this._tryresultSelector(args);\n            }\n            else {\n                destination.next(args);\n            }\n            if (shouldComplete) {\n                destination.complete();\n            }\n        };\n        ZipSubscriber.prototype._tryresultSelector = function (args) {\n            var result;\n            try {\n                result = this.resultSelector.apply(this, args);\n            }\n            catch (err) {\n                this.destination.error(err);\n                return;\n            }\n            this.destination.next(result);\n        };\n        return ZipSubscriber;\n    }(Subscriber));\n    var StaticIterator = /*@__PURE__*/ (function () {\n        function StaticIterator(iterator$$1) {\n            this.iterator = iterator$$1;\n            this.nextResult = iterator$$1.next();\n        }\n        StaticIterator.prototype.hasValue = function () {\n            return true;\n        };\n        StaticIterator.prototype.next = function () {\n            var result = this.nextResult;\n            this.nextResult = this.iterator.next();\n            return result;\n        };\n        StaticIterator.prototype.hasCompleted = function () {\n            var nextResult = this.nextResult;\n            return nextResult && nextResult.done;\n        };\n        return StaticIterator;\n    }());\n    var StaticArrayIterator = /*@__PURE__*/ (function () {\n        function StaticArrayIterator(array) {\n            this.array = array;\n            this.index = 0;\n            this.length = 0;\n            this.length = array.length;\n        }\n        StaticArrayIterator.prototype[iterator] = function () {\n            return this;\n        };\n        StaticArrayIterator.prototype.next = function (value) {\n            var i = this.index++;\n            var array = this.array;\n            return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n        };\n        StaticArrayIterator.prototype.hasValue = function () {\n            return this.array.length > this.index;\n        };\n        StaticArrayIterator.prototype.hasCompleted = function () {\n            return this.array.length === this.index;\n        };\n        return StaticArrayIterator;\n    }());\n    var ZipBufferIterator = /*@__PURE__*/ (function (_super) {\n        __extends(ZipBufferIterator, _super);\n        function ZipBufferIterator(destination, parent, observable) {\n            var _this = _super.call(this, destination) || this;\n            _this.parent = parent;\n            _this.observable = observable;\n            _this.stillUnsubscribed = true;\n            _this.buffer = [];\n            _this.isComplete = false;\n            return _this;\n        }\n        ZipBufferIterator.prototype[iterator] = function () {\n            return this;\n        };\n        ZipBufferIterator.prototype.next = function () {\n            var buffer = this.buffer;\n            if (buffer.length === 0 && this.isComplete) {\n                return { value: null, done: true };\n            }\n            else {\n                return { value: buffer.shift(), done: false };\n            }\n        };\n        ZipBufferIterator.prototype.hasValue = function () {\n            return this.buffer.length > 0;\n        };\n        ZipBufferIterator.prototype.hasCompleted = function () {\n            return this.buffer.length === 0 && this.isComplete;\n        };\n        ZipBufferIterator.prototype.notifyComplete = function () {\n            if (this.buffer.length > 0) {\n                this.isComplete = true;\n                this.parent.notifyInactive();\n            }\n            else {\n                this.destination.complete();\n            }\n        };\n        ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n            this.buffer.push(innerValue);\n            this.parent.checkIterators();\n        };\n        ZipBufferIterator.prototype.subscribe = function (value, index) {\n            return subscribeToResult(this, this.observable, this, index);\n        };\n        return ZipBufferIterator;\n    }(OuterSubscriber));\n\n    /** PURE_IMPORTS_START  PURE_IMPORTS_END */\n\n    /**\n     * @license ng2-completer\n     * MIT license\n     */\n\n    var MAX_CHARS = 524288; // the default max length per the html maxlength attribute\n    var MIN_SEARCH_LENGTH = 3;\n    var PAUSE = 10;\n    var TEXT_SEARCHING = \"Searching...\";\n    var TEXT_NO_RESULTS = \"No results found\";\n    var CLEAR_TIMEOUT = 50;\n    function isNil(value) {\n        return typeof value === \"undefined\" || value === null;\n    }\n\n    var CompleterBaseData = /** @class */ (function (_super) {\n        __extends(CompleterBaseData, _super);\n        function CompleterBaseData() {\n            var _this = _super.call(this) || this;\n            _this._searchFields = null;\n            _this._titleField = null;\n            _this._descriptionField = undefined;\n            _this._imageField = undefined;\n            return _this;\n        }\n        CompleterBaseData.prototype.cancel = function () {\n            return;\n        };\n        CompleterBaseData.prototype.searchFields = function (searchFields) {\n            this._searchFields = searchFields;\n            return this;\n        };\n        CompleterBaseData.prototype.titleField = function (titleField) {\n            this._titleField = titleField;\n            return this;\n        };\n        CompleterBaseData.prototype.descriptionField = function (descriptionField) {\n            this._descriptionField = descriptionField;\n            return this;\n        };\n        CompleterBaseData.prototype.imageField = function (imageField) {\n            this._imageField = imageField;\n            return this;\n        };\n        CompleterBaseData.prototype.convertToItem = function (data) {\n            var image = null;\n            var formattedText;\n            var formattedDesc = null;\n            if (this._titleField) {\n                formattedText = this.extractTitle(data);\n            }\n            else {\n                formattedText = data;\n            }\n            if (typeof formattedText !== \"string\") {\n                formattedText = JSON.stringify(formattedText);\n            }\n            if (this._descriptionField) {\n                formattedDesc = this.extractValue(data, this._descriptionField);\n            }\n            if (this._imageField) {\n                image = this.extractValue(data, this._imageField);\n            }\n            if (isNil(formattedText)) {\n                return null;\n            }\n            return {\n                description: formattedDesc,\n                image: image,\n                originalObject: data,\n                title: formattedText\n            };\n        };\n        CompleterBaseData.prototype.extractMatches = function (data, term) {\n            var _this = this;\n            var matches = [];\n            var searchFields = this._searchFields ? this._searchFields.split(\",\") : null;\n            if (this._searchFields !== null && this._searchFields !== undefined && term !== \"\") {\n                matches = data.filter(function (item) {\n                    var values = searchFields ? _this.extractBySearchFields(searchFields, item) : [item];\n                    return values.some(function (value) { return value\n                        .toString()\n                        .toLowerCase()\n                        .indexOf(term.toString().toLowerCase()) >= 0; });\n                });\n            }\n            else {\n                matches = data;\n            }\n            return matches;\n        };\n        CompleterBaseData.prototype.extractTitle = function (item) {\n            var _this = this;\n            // split title fields and run extractValue for each and join with ' '\n            if (!this._titleField) {\n                return \"\";\n            }\n            return this._titleField.split(\",\")\n                .map(function (field) {\n                return _this.extractValue(item, field);\n            })\n                .reduce(function (acc, titlePart) { return acc ? acc + \" \" + titlePart : titlePart; });\n        };\n        CompleterBaseData.prototype.extractValue = function (obj, key) {\n            var keys;\n            var result;\n            if (key) {\n                keys = key.split(\".\");\n                result = obj;\n                for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n                    key = keys_1[_i];\n                    if (result) {\n                        result = result[key];\n                    }\n                }\n            }\n            else {\n                result = obj;\n            }\n            return result;\n        };\n        CompleterBaseData.prototype.processResults = function (matches) {\n            var i;\n            var results = [];\n            if (matches && matches.length > 0) {\n                for (i = 0; i < matches.length; i++) {\n                    var item = this.convertToItem(matches[i]);\n                    if (item) {\n                        results.push(item);\n                    }\n                }\n            }\n            return results;\n        };\n        CompleterBaseData.prototype.extractBySearchFields = function (searchFields, item) {\n            var _this = this;\n            return searchFields\n                .map(function (searchField) { return _this.extractValue(item, searchField); }).filter(function (value) { return !!value; });\n        };\n        return CompleterBaseData;\n    }(Subject));\n\n    var LocalData = /** @class */ (function (_super) {\n        __extends(LocalData, _super);\n        function LocalData() {\n            var _this = _super.call(this) || this;\n            _this.dataSourceChange = new core.EventEmitter();\n            _this._data = [];\n            _this.savedTerm = null;\n            return _this;\n        }\n        LocalData.prototype.data = function (data) {\n            var _this = this;\n            if (data instanceof Observable) {\n                var data$ = data;\n                data$\n                    .pipe(operators.catchError(function () { return []; }))\n                    .subscribe(function (res) {\n                    _this._data = res;\n                    if (_this.savedTerm) {\n                        _this.search(_this.savedTerm);\n                    }\n                    _this.dataSourceChange.emit();\n                });\n            }\n            else {\n                this._data = data;\n            }\n            this.dataSourceChange.emit();\n            return this;\n        };\n        LocalData.prototype.search = function (term) {\n            if (!this._data) {\n                this.savedTerm = term;\n            }\n            else {\n                this.savedTerm = null;\n                var matches = this.extractMatches(this._data, term);\n                this.next(this.processResults(matches));\n            }\n        };\n        LocalData.prototype.convertToItem = function (data) {\n            return _super.prototype.convertToItem.call(this, data);\n        };\n        return LocalData;\n    }(CompleterBaseData));\n\n    var RemoteData = /** @class */ (function (_super) {\n        __extends(RemoteData, _super);\n        function RemoteData(http$$1) {\n            var _this = _super.call(this) || this;\n            _this.http = http$$1;\n            _this.dataSourceChange = new core.EventEmitter();\n            _this._remoteUrl = null;\n            _this.remoteSearch = null;\n            _this._urlFormater = null;\n            _this._dataField = null;\n            return _this;\n        }\n        RemoteData.prototype.remoteUrl = function (remoteUrl) {\n            this._remoteUrl = remoteUrl;\n            this.dataSourceChange.emit();\n            return this;\n        };\n        RemoteData.prototype.urlFormater = function (urlFormater) {\n            this._urlFormater = urlFormater;\n        };\n        RemoteData.prototype.dataField = function (dataField) {\n            this._dataField = dataField;\n        };\n        RemoteData.prototype.requestOptions = function (requestOptions) {\n            this._requestOptions = requestOptions;\n        };\n        RemoteData.prototype.search = function (term) {\n            var _this = this;\n            this.cancel();\n            // let params = {};\n            var url = \"\";\n            if (this._urlFormater) {\n                url = this._urlFormater(term);\n            }\n            else {\n                url = this._remoteUrl + encodeURIComponent(term);\n            }\n            this.remoteSearch = this.http\n                .get(url, Object.assign({}, this._requestOptions))\n                .pipe(operators.map(function (data) {\n                var matches = _this.extractValue(data, _this._dataField);\n                return _this.extractMatches(matches, term);\n            }), operators.catchError(function () { return []; }))\n                .subscribe(function (matches) {\n                var results = _this.processResults(matches);\n                _this.next(results);\n            });\n        };\n        RemoteData.prototype.cancel = function () {\n            if (this.remoteSearch) {\n                this.remoteSearch.unsubscribe();\n            }\n        };\n        RemoteData.prototype.convertToItem = function (data) {\n            return _super.prototype.convertToItem.call(this, data);\n        };\n        return RemoteData;\n    }(CompleterBaseData));\n\n    var LocalDataFactory = /** @class */ (function () {\n        function LocalDataFactory() {\n        }\n        LocalDataFactory.prototype.create = function () {\n            return new LocalData();\n        };\n        LocalDataFactory = __decorate([\n            core.Injectable()\n        ], LocalDataFactory);\n        return LocalDataFactory;\n    }());\n\n    var RemoteDataFactory = /** @class */ (function () {\n        function RemoteDataFactory(http$$1) {\n            this.http = http$$1;\n        }\n        RemoteDataFactory.prototype.create = function () {\n            return new RemoteData(this.http);\n        };\n        RemoteDataFactory = __decorate([\n            core.Injectable(),\n            __metadata(\"design:paramtypes\", [http.HttpClient])\n        ], RemoteDataFactory);\n        return RemoteDataFactory;\n    }());\n\n    var CompleterService = /** @class */ (function () {\n        function CompleterService(localDataFactory, // Using any instead of () => LocalData because of AoT errors\n        remoteDataFactory // Using any instead of () => LocalData because of AoT errors\n        ) {\n            this.localDataFactory = localDataFactory;\n            this.remoteDataFactory = remoteDataFactory;\n        }\n        CompleterService.prototype.local = function (data, searchFields, titleField) {\n            if (searchFields === void 0) { searchFields = \"\"; }\n            if (titleField === void 0) { titleField = \"\"; }\n            var localData = this.localDataFactory.create();\n            return localData\n                .data(data)\n                .searchFields(searchFields)\n                .titleField(titleField);\n        };\n        CompleterService.prototype.remote = function (url, searchFields, titleField) {\n            if (searchFields === void 0) { searchFields = \"\"; }\n            if (titleField === void 0) { titleField = \"\"; }\n            var remoteData = this.remoteDataFactory.create();\n            return remoteData\n                .remoteUrl(url)\n                .searchFields(searchFields)\n                .titleField(titleField);\n        };\n        CompleterService = __decorate([\n            core.Injectable(),\n            __metadata(\"design:paramtypes\", [LocalDataFactory,\n                RemoteDataFactory // Using any instead of () => LocalData because of AoT errors\n            ])\n        ], CompleterService);\n        return CompleterService;\n    }());\n\n    var CtrCompleter = /** @class */ (function () {\n        function CtrCompleter() {\n            this.selected = new core.EventEmitter();\n            this.highlighted = new core.EventEmitter();\n            this.opened = new core.EventEmitter();\n            this.dataSourceChange = new core.EventEmitter();\n            this.list = null;\n            this.dropdown = null;\n            this._hasHighlighted = false;\n            this._hasSelected = false;\n            this._cancelBlur = false;\n            this._isOpen = false;\n            this._autoHighlightIndex = null;\n        }\n        CtrCompleter.prototype.registerList = function (list) {\n            this.list = list;\n        };\n        CtrCompleter.prototype.registerDropdown = function (dropdown) {\n            this.dropdown = dropdown;\n        };\n        CtrCompleter.prototype.onHighlighted = function (item) {\n            this.highlighted.emit(item);\n            this._hasHighlighted = !!item;\n        };\n        CtrCompleter.prototype.onSelected = function (item, clearList) {\n            if (clearList === void 0) { clearList = true; }\n            this.selected.emit(item);\n            if (item) {\n                this._hasSelected = true;\n            }\n            if (clearList) {\n                this.clear();\n            }\n        };\n        CtrCompleter.prototype.onDataSourceChange = function () {\n            if (this.hasSelected) {\n                this.selected.emit(null);\n                this._hasSelected = false;\n            }\n            this.dataSourceChange.emit();\n        };\n        CtrCompleter.prototype.search = function (term) {\n            if (this._hasSelected) {\n                this.selected.emit(null);\n                this._hasSelected = false;\n            }\n            if (this.list) {\n                this.list.search(term);\n            }\n        };\n        CtrCompleter.prototype.clear = function () {\n            this._hasHighlighted = false;\n            this.isOpen = false;\n            if (this.dropdown) {\n                this.dropdown.clear();\n            }\n            if (this.list) {\n                this.list.clear();\n            }\n        };\n        CtrCompleter.prototype.selectCurrent = function () {\n            if (this.dropdown) {\n                this.dropdown.selectCurrent();\n            }\n        };\n        CtrCompleter.prototype.nextRow = function () {\n            if (this.dropdown) {\n                this.dropdown.nextRow();\n            }\n        };\n        CtrCompleter.prototype.prevRow = function () {\n            if (this.dropdown) {\n                this.dropdown.prevRow();\n            }\n        };\n        CtrCompleter.prototype.hasHighlighted = function () {\n            return this._hasHighlighted;\n        };\n        CtrCompleter.prototype.cancelBlur = function (cancel) {\n            this._cancelBlur = cancel;\n        };\n        CtrCompleter.prototype.isCancelBlur = function () {\n            return this._cancelBlur;\n        };\n        CtrCompleter.prototype.open = function () {\n            if (!this._isOpen && !!this.list) {\n                this.isOpen = true;\n                this.list.open();\n            }\n        };\n        Object.defineProperty(CtrCompleter.prototype, \"isOpen\", {\n            get: function () {\n                return this._isOpen;\n            },\n            set: function (open) {\n                this._isOpen = open;\n                this.opened.emit(this._isOpen);\n                if (this.list) {\n                    this.list.isOpen(open);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CtrCompleter.prototype, \"autoHighlightIndex\", {\n            get: function () {\n                return this._autoHighlightIndex;\n            },\n            set: function (index) {\n                this._autoHighlightIndex = index;\n                if (this.dropdown) {\n                    this.dropdown.highlightRow(this._autoHighlightIndex);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CtrCompleter.prototype, \"hasSelected\", {\n            get: function () {\n                return this._hasSelected;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        __decorate([\n            core.Output(),\n            __metadata(\"design:type\", Object)\n        ], CtrCompleter.prototype, \"selected\", void 0);\n        __decorate([\n            core.Output(),\n            __metadata(\"design:type\", Object)\n        ], CtrCompleter.prototype, \"highlighted\", void 0);\n        __decorate([\n            core.Output(),\n            __metadata(\"design:type\", Object)\n        ], CtrCompleter.prototype, \"opened\", void 0);\n        __decorate([\n            core.Output(),\n            __metadata(\"design:type\", Object)\n        ], CtrCompleter.prototype, \"dataSourceChange\", void 0);\n        CtrCompleter = __decorate([\n            core.Directive({\n                selector: \"[ctrCompleter]\",\n            })\n        ], CtrCompleter);\n        return CtrCompleter;\n    }());\n\n    var CtrRowItem = /** @class */ (function () {\n        function CtrRowItem(row, index) {\n            this.row = row;\n            this.index = index;\n        }\n        return CtrRowItem;\n    }());\n    var CtrDropdown = /** @class */ (function () {\n        function CtrDropdown(completer, el, zone) {\n            this.completer = completer;\n            this.el = el;\n            this.zone = zone;\n            this.rows = [];\n            this.isScrollOn = false;\n            this._rowMouseDown = false;\n            this.completer.registerDropdown(this);\n        }\n        CtrDropdown.prototype.ngOnDestroy = function () {\n            this.completer.registerDropdown(null);\n        };\n        CtrDropdown.prototype.ngAfterViewInit = function () {\n            var _this = this;\n            var css = getComputedStyle(this.el.nativeElement);\n            var autoHighlightIndex = this.completer.autoHighlightIndex;\n            this.isScrollOn = !!css.maxHeight && css.overflowY === \"auto\";\n            if (autoHighlightIndex) {\n                this.zone.run(function () {\n                    _this.highlightRow(autoHighlightIndex);\n                });\n            }\n        };\n        CtrDropdown.prototype.onMouseDown = function (event) {\n            var _this = this;\n            // Support for canceling blur on IE (issue #158)\n            if (!this._rowMouseDown) {\n                this.completer.cancelBlur(true);\n                this.zone.run(function () {\n                    _this.completer.cancelBlur(false);\n                });\n            }\n            else {\n                this._rowMouseDown = false;\n            }\n        };\n        CtrDropdown.prototype.registerRow = function (row) {\n            var arrIndex = this.rows.findIndex(function (_row) { return _row.index === row.index; });\n            if (arrIndex >= 0) {\n                this.rows[arrIndex] = row;\n            }\n            else {\n                this.rows.push(row);\n            }\n        };\n        CtrDropdown.prototype.unregisterRow = function (rowIndex) {\n            var arrIndex = this.rows.findIndex(function (_row) { return _row.index === rowIndex; });\n            this.rows.splice(arrIndex, 1);\n            if (this.currHighlighted && rowIndex === this.currHighlighted.index) {\n                this.highlightRow(null);\n            }\n        };\n        CtrDropdown.prototype.highlightRow = function (index) {\n            var highlighted = this.rows.find(function (row) { return row.index === index; });\n            if (isNil(index) || index < 0) {\n                if (this.currHighlighted) {\n                    this.currHighlighted.row.setHighlighted(false);\n                }\n                this.currHighlighted = undefined;\n                this.completer.onHighlighted(null);\n                return;\n            }\n            if (!highlighted) {\n                return;\n            }\n            if (this.currHighlighted) {\n                this.currHighlighted.row.setHighlighted(false);\n            }\n            this.currHighlighted = highlighted;\n            this.currHighlighted.row.setHighlighted(true);\n            this.completer.onHighlighted(this.currHighlighted.row.getDataItem());\n            if (this.isScrollOn && this.currHighlighted) {\n                var rowTop = this.dropdownRowTop();\n                if (!rowTop) {\n                    return;\n                }\n                if (rowTop < 0) {\n                    this.dropdownScrollTopTo(rowTop - 1);\n                }\n                else {\n                    var row = this.currHighlighted.row.getNativeElement();\n                    if (this.dropdownHeight() < row.getBoundingClientRect().bottom) {\n                        this.dropdownScrollTopTo(this.dropdownRowOffsetHeight(row));\n                        if (this.el.nativeElement.getBoundingClientRect().bottom - this.dropdownRowOffsetHeight(row) < row.getBoundingClientRect().top) {\n                            this.dropdownScrollTopTo(row.getBoundingClientRect().top - (this.el.nativeElement.getBoundingClientRect().top + parseInt(getComputedStyle(this.el.nativeElement).paddingTop, 10)));\n                        }\n                    }\n                }\n            }\n        };\n        CtrDropdown.prototype.clear = function () {\n            this.rows = [];\n        };\n        CtrDropdown.prototype.onSelected = function (item) {\n            this.completer.onSelected(item);\n        };\n        CtrDropdown.prototype.rowMouseDown = function () {\n            this._rowMouseDown = true;\n        };\n        CtrDropdown.prototype.selectCurrent = function () {\n            if (!!this.currHighlighted && !!this.currHighlighted.row) {\n                this.onSelected(this.currHighlighted.row.getDataItem());\n            }\n            else if (this.rows.length > 0) {\n                this.onSelected(this.rows[0].row.getDataItem());\n            }\n        };\n        CtrDropdown.prototype.nextRow = function () {\n            var nextRowIndex = 0;\n            if (this.currHighlighted) {\n                nextRowIndex = this.currHighlighted.index + 1;\n            }\n            this.highlightRow(nextRowIndex);\n        };\n        CtrDropdown.prototype.prevRow = function () {\n            var nextRowIndex = -1;\n            if (this.currHighlighted) {\n                nextRowIndex = this.currHighlighted.index - 1;\n            }\n            this.highlightRow(nextRowIndex);\n        };\n        CtrDropdown.prototype.dropdownScrollTopTo = function (offset) {\n            this.el.nativeElement.scrollTop = this.el.nativeElement.scrollTop + offset;\n        };\n        CtrDropdown.prototype.dropdownRowTop = function () {\n            if (!this.currHighlighted) {\n                return;\n            }\n            return this.currHighlighted.row.getNativeElement().getBoundingClientRect().top -\n                (this.el.nativeElement.getBoundingClientRect().top +\n                    parseInt(getComputedStyle(this.el.nativeElement).paddingTop, 10));\n        };\n        CtrDropdown.prototype.dropdownHeight = function () {\n            return this.el.nativeElement.getBoundingClientRect().top +\n                parseInt(getComputedStyle(this.el.nativeElement).maxHeight, 10);\n        };\n        CtrDropdown.prototype.dropdownRowOffsetHeight = function (row) {\n            var css = getComputedStyle(row.parentElement);\n            return row.parentElement.offsetHeight +\n                parseInt(css.marginTop, 10) + parseInt(css.marginBottom, 10);\n        };\n        __decorate([\n            core.HostListener(\"mousedown\", [\"$event\"]),\n            __metadata(\"design:type\", Function),\n            __metadata(\"design:paramtypes\", [Object]),\n            __metadata(\"design:returntype\", void 0)\n        ], CtrDropdown.prototype, \"onMouseDown\", null);\n        CtrDropdown = __decorate([\n            core.Directive({\n                selector: \"[ctrDropdown]\",\n            }),\n            __param(0, core.Host()),\n            __metadata(\"design:paramtypes\", [CtrCompleter, core.ElementRef, core.NgZone])\n        ], CtrDropdown);\n        return CtrDropdown;\n    }());\n\n    // keyboard events\n    var KEY_DW = 40;\n    var KEY_RT = 39;\n    var KEY_UP = 38;\n    var KEY_LF = 37;\n    var KEY_ES = 27;\n    var KEY_EN = 13;\n    var KEY_TAB = 9;\n    var KEY_BK = 8;\n    var KEY_SH = 16;\n    var KEY_CL = 20;\n    var KEY_F1 = 112;\n    var KEY_F12 = 123;\n    var CtrInput = /** @class */ (function () {\n        function CtrInput(completer, ngModel, el) {\n            var _this = this;\n            this.completer = completer;\n            this.ngModel = ngModel;\n            this.el = el;\n            this.clearSelected = false;\n            this.clearUnselected = false;\n            this.overrideSuggested = false;\n            this.fillHighlighted = true;\n            this.openOnFocus = false;\n            this.openOnClick = false;\n            this.selectOnClick = false;\n            this.selectOnFocus = false;\n            this.ngModelChange = new core.EventEmitter();\n            this._searchStr = \"\";\n            this._displayStr = \"\";\n            this.blurTimer = null;\n            this.completer.selected.subscribe(function (item) {\n                if (!item) {\n                    return;\n                }\n                if (_this.clearSelected) {\n                    _this.searchStr = \"\";\n                }\n                else {\n                    _this.searchStr = item.title;\n                }\n                _this.ngModelChange.emit(_this.searchStr);\n            });\n            this.completer.highlighted.subscribe(function (item) {\n                if (_this.fillHighlighted) {\n                    if (item) {\n                        _this._displayStr = item.title;\n                        _this.ngModelChange.emit(item.title);\n                    }\n                    else {\n                        _this._displayStr = _this.searchStr;\n                        _this.ngModelChange.emit(_this.searchStr);\n                    }\n                }\n            });\n            this.completer.dataSourceChange.subscribe(function () {\n                _this.completer.search(_this.searchStr);\n            });\n            if (this.ngModel.valueChanges) {\n                this.ngModel.valueChanges.subscribe(function (value) {\n                    if (!isNil(value) && _this._displayStr !== value) {\n                        if (_this.searchStr !== value) {\n                            _this.completer.search(value);\n                        }\n                        _this.searchStr = value;\n                    }\n                });\n            }\n        }\n        CtrInput.prototype.keyupHandler = function (event) {\n            if (event.keyCode === KEY_LF || event.keyCode === KEY_RT || event.keyCode === KEY_TAB) {\n                // do nothing\n                return;\n            }\n            if (event.keyCode === KEY_UP || event.keyCode === KEY_EN) {\n                event.preventDefault();\n            }\n            else if (event.keyCode === KEY_DW) {\n                event.preventDefault();\n                this.completer.search(this.searchStr);\n            }\n            else if (event.keyCode === KEY_ES) {\n                if (this.completer.isOpen) {\n                    this.restoreSearchValue();\n                    this.completer.clear();\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n            }\n        };\n        CtrInput.prototype.pasteHandler = function (event) {\n            this.completer.open();\n        };\n        CtrInput.prototype.keydownHandler = function (event) {\n            var keyCode = event.keyCode || event.which;\n            if (keyCode === KEY_EN) {\n                if (this.completer.hasHighlighted()) {\n                    event.preventDefault();\n                }\n                this.handleSelection();\n            }\n            else if (keyCode === KEY_DW) {\n                event.preventDefault();\n                this.completer.open();\n                this.completer.nextRow();\n            }\n            else if (keyCode === KEY_UP) {\n                event.preventDefault();\n                this.completer.prevRow();\n            }\n            else if (keyCode === KEY_TAB) {\n                this.handleSelection();\n            }\n            else if (keyCode === KEY_BK) {\n                this.completer.open();\n            }\n            else if (keyCode === KEY_ES) {\n                // This is very specific to IE10/11 #272\n                // without this, IE clears the input text\n                event.preventDefault();\n                if (this.completer.isOpen) {\n                    event.stopPropagation();\n                }\n            }\n            else {\n                if (keyCode !== 0 && keyCode !== KEY_SH && keyCode !== KEY_CL &&\n                    (keyCode <= KEY_F1 || keyCode >= KEY_F12) &&\n                    !event.ctrlKey && !event.metaKey && !event.altKey) {\n                    this.completer.open();\n                }\n            }\n        };\n        CtrInput.prototype.onBlur = function (event) {\n            var _this = this;\n            // Check if we need to cancel Blur for IE\n            if (this.completer.isCancelBlur()) {\n                setTimeout(function () {\n                    // get the focus back\n                    _this.el.nativeElement.focus();\n                }, 0);\n                return;\n            }\n            if (this.completer.isOpen) {\n                this.blurTimer = timer(200).pipe(operators.take(1)).subscribe(function () { return _this.doBlur(); });\n            }\n        };\n        CtrInput.prototype.onfocus = function () {\n            if (this.blurTimer) {\n                this.blurTimer.unsubscribe();\n                this.blurTimer = null;\n            }\n            if (this.selectOnFocus) {\n                this.el.nativeElement.select();\n            }\n            if (this.openOnFocus) {\n                this.completer.open();\n            }\n        };\n        CtrInput.prototype.onClick = function (event) {\n            if (this.selectOnClick) {\n                this.el.nativeElement.select();\n            }\n            if (this.openOnClick) {\n                if (this.completer.isOpen) {\n                    this.completer.clear();\n                }\n                else {\n                    this.completer.open();\n                }\n            }\n        };\n        Object.defineProperty(CtrInput.prototype, \"searchStr\", {\n            get: function () {\n                return this._searchStr;\n            },\n            set: function (term) {\n                this._searchStr = term;\n                this._displayStr = term;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CtrInput.prototype.handleSelection = function () {\n            if (this.completer.hasHighlighted()) {\n                this._searchStr = \"\";\n                this.completer.selectCurrent();\n            }\n            else if (this.overrideSuggested) {\n                this.completer.onSelected({ title: this.searchStr, originalObject: null });\n            }\n            else {\n                if (this.clearUnselected && !this.completer.hasSelected) {\n                    this.searchStr = \"\";\n                    this.ngModelChange.emit(this.searchStr);\n                }\n                this.completer.clear();\n            }\n        };\n        CtrInput.prototype.restoreSearchValue = function () {\n            if (this.fillHighlighted) {\n                if (this._displayStr != this.searchStr) {\n                    this._displayStr = this.searchStr;\n                    this.ngModelChange.emit(this.searchStr);\n                }\n            }\n        };\n        CtrInput.prototype.doBlur = function () {\n            if (this.blurTimer) {\n                this.blurTimer.unsubscribe();\n                this.blurTimer = null;\n            }\n            if (this.overrideSuggested) {\n                this.completer.onSelected({ title: this.searchStr, originalObject: null });\n            }\n            else {\n                if (this.clearUnselected && !this.completer.hasSelected) {\n                    this.searchStr = \"\";\n                    this.ngModelChange.emit(this.searchStr);\n                }\n                else {\n                    this.restoreSearchValue();\n                }\n            }\n            this.completer.clear();\n        };\n        __decorate([\n            core.Input(\"clearSelected\"),\n            __metadata(\"design:type\", Object)\n        ], CtrInput.prototype, \"clearSelected\", void 0);\n        __decorate([\n            core.Input(\"clearUnselected\"),\n            __metadata(\"design:type\", Object)\n        ], CtrInput.prototype, \"clearUnselected\", void 0);\n        __decorate([\n            core.Input(\"overrideSuggested\"),\n            __metadata(\"design:type\", Object)\n        ], CtrInput.prototype, \"overrideSuggested\", void 0);\n        __decorate([\n            core.Input(\"fillHighlighted\"),\n            __metadata(\"design:type\", Object)\n        ], CtrInput.prototype, \"fillHighlighted\", void 0);\n        __decorate([\n            core.Input(\"openOnFocus\"),\n            __metadata(\"design:type\", Object)\n        ], CtrInput.prototype, \"openOnFocus\", void 0);\n        __decorate([\n            core.Input(\"openOnClick\"),\n            __metadata(\"design:type\", Object)\n        ], CtrInput.prototype, \"openOnClick\", void 0);\n        __decorate([\n            core.Input(\"selectOnClick\"),\n            __metadata(\"design:type\", Object)\n        ], CtrInput.prototype, \"selectOnClick\", void 0);\n        __decorate([\n            core.Input(\"selectOnFocus\"),\n            __metadata(\"design:type\", Object)\n        ], CtrInput.prototype, \"selectOnFocus\", void 0);\n        __decorate([\n            core.Output(),\n            __metadata(\"design:type\", core.EventEmitter)\n        ], CtrInput.prototype, \"ngModelChange\", void 0);\n        __decorate([\n            core.HostListener(\"keyup\", [\"$event\"]),\n            __metadata(\"design:type\", Function),\n            __metadata(\"design:paramtypes\", [Object]),\n            __metadata(\"design:returntype\", void 0)\n        ], CtrInput.prototype, \"keyupHandler\", null);\n        __decorate([\n            core.HostListener(\"paste\", [\"$event\"]),\n            __metadata(\"design:type\", Function),\n            __metadata(\"design:paramtypes\", [Object]),\n            __metadata(\"design:returntype\", void 0)\n        ], CtrInput.prototype, \"pasteHandler\", null);\n        __decorate([\n            core.HostListener(\"keydown\", [\"$event\"]),\n            __metadata(\"design:type\", Function),\n            __metadata(\"design:paramtypes\", [Object]),\n            __metadata(\"design:returntype\", void 0)\n        ], CtrInput.prototype, \"keydownHandler\", null);\n        __decorate([\n            core.HostListener(\"blur\", [\"$event\"]),\n            __metadata(\"design:type\", Function),\n            __metadata(\"design:paramtypes\", [Object]),\n            __metadata(\"design:returntype\", void 0)\n        ], CtrInput.prototype, \"onBlur\", null);\n        __decorate([\n            core.HostListener(\"focus\", []),\n            __metadata(\"design:type\", Function),\n            __metadata(\"design:paramtypes\", []),\n            __metadata(\"design:returntype\", void 0)\n        ], CtrInput.prototype, \"onfocus\", null);\n        __decorate([\n            core.HostListener(\"click\", [\"$event\"]),\n            __metadata(\"design:type\", Function),\n            __metadata(\"design:paramtypes\", [Object]),\n            __metadata(\"design:returntype\", void 0)\n        ], CtrInput.prototype, \"onClick\", null);\n        CtrInput = __decorate([\n            core.Directive({\n                selector: \"[ctrInput]\",\n            }),\n            __param(0, core.Host()),\n            __metadata(\"design:paramtypes\", [CtrCompleter, forms.NgModel, core.ElementRef])\n        ], CtrInput);\n        return CtrInput;\n    }());\n\n    var CtrListContext = /** @class */ (function () {\n        function CtrListContext(results, searching, searchInitialized, isOpen) {\n            this.results = results;\n            this.searching = searching;\n            this.searchInitialized = searchInitialized;\n            this.isOpen = isOpen;\n        }\n        return CtrListContext;\n    }());\n    var CtrList = /** @class */ (function () {\n        function CtrList(completer, templateRef, viewContainer, cd, zone) {\n            this.completer = completer;\n            this.templateRef = templateRef;\n            this.viewContainer = viewContainer;\n            this.cd = cd;\n            this.zone = zone;\n            this.ctrListMinSearchLength = MIN_SEARCH_LENGTH;\n            this.ctrListPause = PAUSE;\n            this.ctrListAutoMatch = false;\n            this.ctrListAutoHighlight = false;\n            this.ctrListDisplaySearching = true;\n            this._dataService = null;\n            // private results: CompleterItem[] = [];\n            this.term = null;\n            // private searching = false;\n            this.searchTimer = null;\n            this.clearTimer = null;\n            this.ctx = new CtrListContext([], false, false, false);\n            this._initialValue = null;\n            this.viewRef = null;\n        }\n        CtrList.prototype.ngOnInit = function () {\n            this.completer.registerList(this);\n            this.viewRef = this.viewContainer.createEmbeddedView(this.templateRef, new CtrListContext([], false, false, false));\n        };\n        Object.defineProperty(CtrList.prototype, \"dataService\", {\n            set: function (newService) {\n                this._dataService = newService;\n                this.dataServiceSubscribe();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CtrList.prototype, \"initialValue\", {\n            set: function (value) {\n                var _this = this;\n                if (this._dataService && typeof this._dataService.convertToItem === \"function\") {\n                    this.zone.run(function () {\n                        var initialItem = _this._dataService && _this._dataService.convertToItem(value);\n                        if (initialItem) {\n                            _this.completer.onSelected(initialItem, false);\n                        }\n                    });\n                }\n                else if (!this._dataService) {\n                    this._initialValue = value;\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CtrList.prototype.search = function (term) {\n            var _this = this;\n            if (!isNil(term) && term.length >= this.ctrListMinSearchLength && this.term !== term) {\n                if (this.searchTimer) {\n                    this.searchTimer.unsubscribe();\n                    this.searchTimer = null;\n                }\n                if (!this.ctx.searching) {\n                    if (this.ctrListDisplaySearching) {\n                        this.ctx.results = [];\n                    }\n                    this.ctx.searching = true;\n                    this.ctx.searchInitialized = true;\n                    this.refreshTemplate();\n                }\n                if (this.clearTimer) {\n                    this.clearTimer.unsubscribe();\n                }\n                this.searchTimer = timer(this.ctrListPause).pipe(operators.take(1)).subscribe(function () {\n                    _this.searchTimerComplete(term);\n                });\n            }\n            else if (!isNil(term) && term.length < this.ctrListMinSearchLength) {\n                this.clear();\n                this.term = \"\";\n            }\n        };\n        CtrList.prototype.clear = function () {\n            var _this = this;\n            if (this.searchTimer) {\n                this.searchTimer.unsubscribe();\n            }\n            this.clearTimer = timer(CLEAR_TIMEOUT).pipe(operators.take(1)).subscribe(function () {\n                _this._clear();\n            });\n        };\n        CtrList.prototype.open = function () {\n            if (!this.ctx.searchInitialized) {\n                this.search(\"\");\n            }\n            this.refreshTemplate();\n        };\n        CtrList.prototype.isOpen = function (open) {\n            this.ctx.isOpen = open;\n        };\n        CtrList.prototype._clear = function () {\n            if (this.searchTimer) {\n                this.searchTimer.unsubscribe();\n                this.searchTimer = null;\n            }\n            if (this.dataService) {\n                this.dataService.cancel();\n            }\n            this.viewContainer.clear();\n            this.viewRef = null;\n        };\n        CtrList.prototype.searchTimerComplete = function (term) {\n            // Begin the search\n            if (isNil(term) || term.length < this.ctrListMinSearchLength) {\n                this.ctx.searching = false;\n                return;\n            }\n            this.term = term;\n            if (this._dataService) {\n                this._dataService.search(term);\n            }\n        };\n        CtrList.prototype.refreshTemplate = function () {\n            // create the template if it doesn't exist\n            if (!this.viewRef) {\n                this.viewRef = this.viewContainer.createEmbeddedView(this.templateRef, this.ctx);\n            }\n            else if (!this.viewRef.destroyed) {\n                // refresh the template\n                this.viewRef.context.isOpen = this.ctx.isOpen;\n                this.viewRef.context.results = this.ctx.results;\n                this.viewRef.context.searching = this.ctx.searching;\n                this.viewRef.context.searchInitialized = this.ctx.searchInitialized;\n                this.viewRef.detectChanges();\n            }\n            this.cd.markForCheck();\n        };\n        CtrList.prototype.getBestMatchIndex = function () {\n            var _this = this;\n            if (!this.ctx.results || !this.term) {\n                return null;\n            }\n            // First try to find the exact term\n            var bestMatch = this.ctx.results.findIndex(function (item) { return item.title.toLowerCase() === _this.term.toLocaleLowerCase(); });\n            // If not try to find the first item that starts with the term\n            if (bestMatch < 0) {\n                bestMatch = this.ctx.results.findIndex(function (item) { return item.title.toLowerCase().startsWith(_this.term.toLocaleLowerCase()); });\n            }\n            // If not try to find the first item that includes the term\n            if (bestMatch < 0) {\n                bestMatch = this.ctx.results.findIndex(function (item) { return item.title.toLowerCase().includes(_this.term.toLocaleLowerCase()); });\n            }\n            return bestMatch < 0 ? null : bestMatch;\n        };\n        CtrList.prototype.dataServiceSubscribe = function () {\n            var _this = this;\n            if (this._dataService) {\n                this._dataService\n                    .subscribe(function (results) {\n                    _this.ctx.searchInitialized = true;\n                    _this.ctx.searching = false;\n                    _this.ctx.results = results;\n                    if (_this.ctrListAutoMatch && results &&\n                        results.length === 1 && results[0].title &&\n                        !isNil(_this.term) &&\n                        results[0].title.toLocaleLowerCase() === _this.term.toLocaleLowerCase()) {\n                        // Do automatch\n                        _this.completer.onSelected(results[0]);\n                        return;\n                    }\n                    _this.refreshTemplate();\n                    if (_this.ctrListAutoHighlight) {\n                        _this.completer.autoHighlightIndex = _this.getBestMatchIndex();\n                    }\n                }, function (error) {\n                    console.error(error);\n                    console.error(\"Unexpected error in dataService: errors should be handled by the dataService Observable\");\n                    return [];\n                });\n                if (this._dataService.dataSourceChange) {\n                    this._dataService.dataSourceChange.subscribe(function () {\n                        _this.term = null;\n                        _this.ctx.searchInitialized = false;\n                        _this.ctx.searching = false;\n                        _this.ctx.results = [];\n                        _this.refreshTemplate();\n                        _this.completer.onDataSourceChange();\n                    });\n                }\n            }\n        };\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CtrList.prototype, \"ctrListMinSearchLength\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CtrList.prototype, \"ctrListPause\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CtrList.prototype, \"ctrListAutoMatch\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CtrList.prototype, \"ctrListAutoHighlight\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CtrList.prototype, \"ctrListDisplaySearching\", void 0);\n        __decorate([\n            core.Input(\"ctrList\"),\n            __metadata(\"design:type\", Object),\n            __metadata(\"design:paramtypes\", [Object])\n        ], CtrList.prototype, \"dataService\", null);\n        __decorate([\n            core.Input(\"ctrListInitialValue\"),\n            __metadata(\"design:type\", Object),\n            __metadata(\"design:paramtypes\", [Object])\n        ], CtrList.prototype, \"initialValue\", null);\n        CtrList = __decorate([\n            core.Directive({\n                selector: \"[ctrList]\",\n            }),\n            __param(0, core.Host()),\n            __metadata(\"design:paramtypes\", [CtrCompleter,\n                core.TemplateRef,\n                core.ViewContainerRef,\n                core.ChangeDetectorRef,\n                core.NgZone])\n        ], CtrList);\n        return CtrList;\n    }());\n\n    var CtrRow = /** @class */ (function () {\n        function CtrRow(el, renderer, dropdown) {\n            this.el = el;\n            this.renderer = renderer;\n            this.dropdown = dropdown;\n            this.selected = false;\n            this._rowIndex = 0;\n            this._item = null;\n        }\n        CtrRow.prototype.ngOnDestroy = function () {\n            if (this._rowIndex) {\n                this.dropdown.unregisterRow(this._rowIndex);\n            }\n        };\n        Object.defineProperty(CtrRow.prototype, \"ctrRow\", {\n            set: function (index) {\n                this._rowIndex = index;\n                this.dropdown.registerRow(new CtrRowItem(this, this._rowIndex));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CtrRow.prototype, \"dataItem\", {\n            set: function (item) {\n                this._item = item;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CtrRow.prototype.onClick = function (event) {\n            this.dropdown.onSelected(this._item);\n        };\n        CtrRow.prototype.onMouseEnter = function (event) {\n            this.dropdown.highlightRow(this._rowIndex);\n        };\n        CtrRow.prototype.onMouseDown = function (event) {\n            this.dropdown.rowMouseDown();\n        };\n        CtrRow.prototype.setHighlighted = function (selected) {\n            this.selected = selected;\n            if (this.selected) {\n                this.renderer.addClass(this.el.nativeElement, \"completer-selected-row\");\n            }\n            else {\n                this.renderer.removeClass(this.el.nativeElement, \"completer-selected-row\");\n            }\n        };\n        CtrRow.prototype.getNativeElement = function () {\n            return this.el.nativeElement;\n        };\n        CtrRow.prototype.getDataItem = function () {\n            return this._item;\n        };\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Number),\n            __metadata(\"design:paramtypes\", [Number])\n        ], CtrRow.prototype, \"ctrRow\", null);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object),\n            __metadata(\"design:paramtypes\", [Object])\n        ], CtrRow.prototype, \"dataItem\", null);\n        __decorate([\n            core.HostListener(\"click\", [\"$event\"]),\n            __metadata(\"design:type\", Function),\n            __metadata(\"design:paramtypes\", [Object]),\n            __metadata(\"design:returntype\", void 0)\n        ], CtrRow.prototype, \"onClick\", null);\n        __decorate([\n            core.HostListener(\"mouseenter\", [\"$event\"]),\n            __metadata(\"design:type\", Function),\n            __metadata(\"design:paramtypes\", [Object]),\n            __metadata(\"design:returntype\", void 0)\n        ], CtrRow.prototype, \"onMouseEnter\", null);\n        __decorate([\n            core.HostListener(\"mousedown\", [\"$event\"]),\n            __metadata(\"design:type\", Function),\n            __metadata(\"design:paramtypes\", [Object]),\n            __metadata(\"design:returntype\", void 0)\n        ], CtrRow.prototype, \"onMouseDown\", null);\n        CtrRow = __decorate([\n            core.Directive({\n                selector: \"[ctrRow]\",\n            }),\n            __param(2, core.Host()),\n            __metadata(\"design:paramtypes\", [core.ElementRef, core.Renderer2, CtrDropdown])\n        ], CtrRow);\n        return CtrRow;\n    }());\n\n    var CompleterListItemCmp = /** @class */ (function () {\n        function CompleterListItemCmp() {\n            this.text = \"\";\n            this.searchStr = \"\";\n            this.matchClass = \"\";\n            this.type = \"\";\n            this.parts = [];\n        }\n        CompleterListItemCmp.prototype.ngOnInit = function () {\n            if (!this.searchStr) {\n                this.parts.push({ isMatch: false, text: this.text });\n                return;\n            }\n            var matchStr = this.text.toLowerCase();\n            var matchPos = matchStr.indexOf(this.searchStr.toLowerCase());\n            var startIndex = 0;\n            while (matchPos >= 0) {\n                var matchText = this.text.slice(matchPos, matchPos + this.searchStr.length);\n                if (matchPos === 0) {\n                    this.parts.push({ isMatch: true, text: matchText });\n                    startIndex += this.searchStr.length;\n                }\n                else if (matchPos > 0) {\n                    var matchPart = this.text.slice(startIndex, matchPos);\n                    this.parts.push({ isMatch: false, text: matchPart });\n                    this.parts.push({ isMatch: true, text: matchText });\n                    startIndex += this.searchStr.length + matchPart.length;\n                }\n                matchPos = matchStr.indexOf(this.searchStr.toLowerCase(), startIndex);\n            }\n            if (startIndex < this.text.length) {\n                this.parts.push({ isMatch: false, text: this.text.slice(startIndex, this.text.length) });\n            }\n        };\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", String)\n        ], CompleterListItemCmp.prototype, \"text\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", String)\n        ], CompleterListItemCmp.prototype, \"searchStr\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", String)\n        ], CompleterListItemCmp.prototype, \"matchClass\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", String)\n        ], CompleterListItemCmp.prototype, \"type\", void 0);\n        CompleterListItemCmp = __decorate([\n            core.Component({\n                selector: \"completer-list-item\",\n                template: \"<span class=\\\"completer-list-item-holder\\\" [ngClass]= \\\"{'completer-title': type === 'title', 'completer-description': type === 'description'}\\\" >\\n        <span class=\\\"completer-list-item\\\" *ngFor=\\\"let part of parts\\\" [ngClass]= \\\"part.isMatch ? matchClass : null\\\">{{part.text}}</span>\\n    </span>\"\n            })\n        ], CompleterListItemCmp);\n        return CompleterListItemCmp;\n    }());\n\n    var noop$1 = function () {\n        return;\n    };\n    var COMPLETER_CONTROL_VALUE_ACCESSOR = {\n        multi: true,\n        provide: forms.NG_VALUE_ACCESSOR,\n        useExisting: core.forwardRef(function () { return CompleterCmp; }),\n    };\n    var CompleterCmp = /** @class */ (function () {\n        function CompleterCmp(completerService, cdr) {\n            this.completerService = completerService;\n            this.cdr = cdr;\n            this.inputName = \"\";\n            this.inputId = \"\";\n            this.pause = PAUSE;\n            this.minSearchLength = MIN_SEARCH_LENGTH;\n            this.maxChars = MAX_CHARS;\n            this.overrideSuggested = false;\n            this.clearSelected = false;\n            this.clearUnselected = false;\n            this.fillHighlighted = true;\n            this.placeholder = \"\";\n            this.autoMatch = false;\n            this.disableInput = false;\n            this.autofocus = false;\n            this.openOnFocus = false;\n            this.openOnClick = false;\n            this.selectOnClick = false;\n            this.selectOnFocus = false;\n            this.autoHighlight = false;\n            this.selected = new core.EventEmitter();\n            this.highlighted = new core.EventEmitter();\n            this.blurEvent = new core.EventEmitter();\n            this.click = new core.EventEmitter();\n            this.focusEvent = new core.EventEmitter();\n            this.opened = new core.EventEmitter();\n            this.keyup = new core.EventEmitter();\n            this.keydown = new core.EventEmitter();\n            this.control = new forms.FormControl(\"\");\n            this.displaySearching = true;\n            this.displayNoResults = true;\n            this._textNoResults = TEXT_NO_RESULTS;\n            this._textSearching = TEXT_SEARCHING;\n            this._onTouchedCallback = noop$1;\n            this._onChangeCallback = noop$1;\n            this._focus = false;\n            this._open = false;\n            this._searchStr = \"\";\n        }\n        Object.defineProperty(CompleterCmp.prototype, \"value\", {\n            get: function () { return this.searchStr; },\n            set: function (v) {\n                if (v !== this.searchStr) {\n                    this.searchStr = v;\n                }\n                // Propagate the change in any case\n                this._onChangeCallback(v);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CompleterCmp.prototype, \"searchStr\", {\n            get: function () {\n                return this._searchStr;\n            },\n            set: function (value) {\n                if (typeof value === \"string\" || isNil(value)) {\n                    this._searchStr = value;\n                }\n                else {\n                    this._searchStr = JSON.stringify(value);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CompleterCmp.prototype.ngAfterViewInit = function () {\n            if (this.autofocus) {\n                this._focus = true;\n            }\n        };\n        CompleterCmp.prototype.ngAfterViewChecked = function () {\n            var _this = this;\n            if (this._focus) {\n                setTimeout(function () {\n                    if (!!_this.ctrInput) {\n                        _this.ctrInput.nativeElement.focus();\n                        _this._focus = false;\n                    }\n                }, 0);\n            }\n        };\n        CompleterCmp.prototype.onTouched = function () {\n            this._onTouchedCallback();\n        };\n        CompleterCmp.prototype.writeValue = function (value) {\n            this.searchStr = value;\n        };\n        CompleterCmp.prototype.registerOnChange = function (fn) {\n            this._onChangeCallback = fn;\n        };\n        CompleterCmp.prototype.registerOnTouched = function (fn) {\n            this._onTouchedCallback = fn;\n        };\n        CompleterCmp.prototype.setDisabledState = function (isDisabled) {\n            this.disableInput = isDisabled;\n        };\n        Object.defineProperty(CompleterCmp.prototype, \"datasource\", {\n            set: function (source) {\n                if (source) {\n                    if (source instanceof Array) {\n                        this.dataService = this.completerService.local(source);\n                    }\n                    else if (typeof (source) === \"string\") {\n                        this.dataService = this.completerService.remote(source);\n                    }\n                    else {\n                        this.dataService = source;\n                    }\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CompleterCmp.prototype, \"textNoResults\", {\n            set: function (text) {\n                if (this._textNoResults !== text) {\n                    this._textNoResults = text;\n                    this.displayNoResults = !!this._textNoResults && this._textNoResults !== \"false\";\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(CompleterCmp.prototype, \"textSearching\", {\n            set: function (text) {\n                if (this._textSearching !== text) {\n                    this._textSearching = text;\n                    this.displaySearching = !!this._textSearching && this._textSearching !== \"false\";\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        CompleterCmp.prototype.ngOnInit = function () {\n            var _this = this;\n            if (!this.completer) {\n                return;\n            }\n            this.completer.selected.subscribe(function (item) {\n                _this.selected.emit(item);\n            });\n            this.completer.highlighted.subscribe(function (item) {\n                _this.highlighted.emit(item);\n            });\n            this.completer.opened.subscribe(function (isOpen) {\n                _this._open = isOpen;\n                _this.opened.emit(isOpen);\n            });\n        };\n        CompleterCmp.prototype.onBlur = function () {\n            this.blurEvent.emit();\n            this.onTouched();\n            this.cdr.detectChanges();\n        };\n        CompleterCmp.prototype.onFocus = function () {\n            this.focusEvent.emit();\n            this.onTouched();\n        };\n        CompleterCmp.prototype.onClick = function (event) {\n            this.click.emit(event);\n            this.onTouched();\n        };\n        CompleterCmp.prototype.onKeyup = function (event) {\n            this.keyup.emit(event);\n            event.stopPropagation();\n        };\n        CompleterCmp.prototype.onKeydown = function (event) {\n            this.keydown.emit(event);\n            event.stopPropagation();\n        };\n        CompleterCmp.prototype.onChange = function (value) {\n            this.value = value;\n        };\n        CompleterCmp.prototype.open = function () {\n            if (!this.completer) {\n                return;\n            }\n            this.completer.open();\n        };\n        CompleterCmp.prototype.close = function () {\n            if (!this.completer) {\n                return;\n            }\n            this.completer.clear();\n        };\n        CompleterCmp.prototype.focus = function () {\n            if (this.ctrInput) {\n                this.ctrInput.nativeElement.focus();\n            }\n            else {\n                this._focus = true;\n            }\n        };\n        CompleterCmp.prototype.blur = function () {\n            if (this.ctrInput) {\n                this.ctrInput.nativeElement.blur();\n            }\n            else {\n                this._focus = false;\n            }\n        };\n        CompleterCmp.prototype.isOpen = function () {\n            return this._open;\n        };\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CompleterCmp.prototype, \"dataService\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CompleterCmp.prototype, \"inputName\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", String)\n        ], CompleterCmp.prototype, \"inputId\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CompleterCmp.prototype, \"pause\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CompleterCmp.prototype, \"minSearchLength\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CompleterCmp.prototype, \"maxChars\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CompleterCmp.prototype, \"overrideSuggested\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CompleterCmp.prototype, \"clearSelected\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CompleterCmp.prototype, \"clearUnselected\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CompleterCmp.prototype, \"fillHighlighted\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CompleterCmp.prototype, \"placeholder\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CompleterCmp.prototype, \"matchClass\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CompleterCmp.prototype, \"fieldTabindex\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CompleterCmp.prototype, \"autoMatch\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CompleterCmp.prototype, \"disableInput\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CompleterCmp.prototype, \"inputClass\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CompleterCmp.prototype, \"autofocus\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CompleterCmp.prototype, \"openOnFocus\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CompleterCmp.prototype, \"openOnClick\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CompleterCmp.prototype, \"selectOnClick\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CompleterCmp.prototype, \"selectOnFocus\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CompleterCmp.prototype, \"initialValue\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object)\n        ], CompleterCmp.prototype, \"autoHighlight\", void 0);\n        __decorate([\n            core.Output(),\n            __metadata(\"design:type\", Object)\n        ], CompleterCmp.prototype, \"selected\", void 0);\n        __decorate([\n            core.Output(),\n            __metadata(\"design:type\", Object)\n        ], CompleterCmp.prototype, \"highlighted\", void 0);\n        __decorate([\n            core.Output(\"blur\"),\n            __metadata(\"design:type\", Object)\n        ], CompleterCmp.prototype, \"blurEvent\", void 0);\n        __decorate([\n            core.Output(),\n            __metadata(\"design:type\", Object)\n        ], CompleterCmp.prototype, \"click\", void 0);\n        __decorate([\n            core.Output(\"focus\"),\n            __metadata(\"design:type\", Object)\n        ], CompleterCmp.prototype, \"focusEvent\", void 0);\n        __decorate([\n            core.Output(),\n            __metadata(\"design:type\", Object)\n        ], CompleterCmp.prototype, \"opened\", void 0);\n        __decorate([\n            core.Output(),\n            __metadata(\"design:type\", core.EventEmitter)\n        ], CompleterCmp.prototype, \"keyup\", void 0);\n        __decorate([\n            core.Output(),\n            __metadata(\"design:type\", core.EventEmitter)\n        ], CompleterCmp.prototype, \"keydown\", void 0);\n        __decorate([\n            core.ViewChild(CtrCompleter, { static: false }),\n            __metadata(\"design:type\", Object)\n        ], CompleterCmp.prototype, \"completer\", void 0);\n        __decorate([\n            core.ViewChild(\"ctrInput\", { static: false }),\n            __metadata(\"design:type\", Object)\n        ], CompleterCmp.prototype, \"ctrInput\", void 0);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", Object),\n            __metadata(\"design:paramtypes\", [Object])\n        ], CompleterCmp.prototype, \"datasource\", null);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", String),\n            __metadata(\"design:paramtypes\", [String])\n        ], CompleterCmp.prototype, \"textNoResults\", null);\n        __decorate([\n            core.Input(),\n            __metadata(\"design:type\", String),\n            __metadata(\"design:paramtypes\", [String])\n        ], CompleterCmp.prototype, \"textSearching\", null);\n        CompleterCmp = __decorate([\n            core.Component({\n                selector: \"ng2-completer\",\n                template: \"\\n        <div class=\\\"completer-holder\\\" ctrCompleter>\\n            <input #ctrInput [attr.id]=\\\"inputId.length > 0 ? inputId : null\\\" type=\\\"search\\\"\\n                class=\\\"completer-input\\\" ctrInput [ngClass]=\\\"inputClass\\\"\\n                [(ngModel)]=\\\"searchStr\\\" (ngModelChange)=\\\"onChange($event)\\\"\\n                [attr.name]=\\\"inputName\\\" [placeholder]=\\\"placeholder\\\"\\n                [attr.maxlength]=\\\"maxChars\\\" [tabindex]=\\\"fieldTabindex\\\" [disabled]=\\\"disableInput\\\"\\n                [clearSelected]=\\\"clearSelected\\\" [clearUnselected]=\\\"clearUnselected\\\"\\n                [overrideSuggested]=\\\"overrideSuggested\\\" [openOnFocus]=\\\"openOnFocus\\\" [fillHighlighted]=\\\"fillHighlighted\\\"\\n                [openOnClick]=\\\"openOnClick\\\" [selectOnClick]=\\\"selectOnClick\\\" [selectOnFocus]=\\\"selectOnFocus\\\"\\n                (blur)=\\\"onBlur()\\\" (focus)=\\\"onFocus()\\\" (keyup)=\\\"onKeyup($event)\\\"\\n                (keydown)=\\\"onKeydown($event)\\\" (click)=\\\"onClick($event)\\\"\\n                autocomplete=\\\"off\\\" autocorrect=\\\"off\\\" autocapitalize=\\\"off\\\" />\\n\\n            <div class=\\\"completer-dropdown-holder\\\"\\n                *ctrList=\\\"dataService;\\n                    minSearchLength: minSearchLength;\\n                    pause: pause;\\n                    autoMatch: autoMatch;\\n                    initialValue: initialValue;\\n                    autoHighlight: autoHighlight;\\n                    displaySearching: displaySearching;\\n                    let items = results;\\n                    let searchActive = searching;\\n                    let isInitialized = searchInitialized;\\n                    let isOpen = isOpen;\\\">\\n                <div class=\\\"completer-dropdown\\\" ctrDropdown\\n                    *ngIf=\\\"isInitialized && isOpen && (( items?.length > 0|| (displayNoResults && !searchActive)) || (searchActive && displaySearching))\\\">\\n                    <div *ngIf=\\\"searchActive && displaySearching\\\" class=\\\"completer-searching\\\">{{ _textSearching }}</div>\\n                    <div *ngIf=\\\"!searchActive && (!items || items?.length === 0)\\\"\\n                    class=\\\"completer-no-results\\\">{{ _textNoResults }}</div>\\n                    <div class=\\\"completer-row-wrapper\\\" *ngFor=\\\"let item of items; let rowIndex=index\\\">\\n                        <div class=\\\"completer-row\\\" [ctrRow]=\\\"rowIndex\\\" [dataItem]=\\\"item\\\">\\n                            <div *ngIf=\\\"item.image || item.image === ''\\\" class=\\\"completer-image-holder\\\">\\n                                <img *ngIf=\\\"item.image != ''\\\" src=\\\"{{item.image}}\\\" class=\\\"completer-image\\\" />\\n                                <div *ngIf=\\\"item.image === ''\\\" class=\\\"completer-image-default\\\"></div>\\n                            </div>\\n                            <div class=\\\"completer-item-text\\\"\\n                            [ngClass]=\\\"{'completer-item-text-image': item.image || item.image === '' }\\\">\\n                                <completer-list-item\\n                                class=\\\"completer-title\\\" [text]=\\\"item.title\\\" [matchClass]=\\\"matchClass\\\"\\n                                [searchStr]=\\\"searchStr\\\" [type]=\\\"'title'\\\"></completer-list-item>\\n                                <completer-list-item *ngIf=\\\"item.description && item.description != ''\\\"\\n                                class=\\\"completer-description\\\" [text]=\\\"item.description\\\"\\n                                    [matchClass]=\\\"matchClass\\\" [searchStr]=\\\"searchStr\\\" [type]=\\\"'description'\\\">\\n                                </completer-list-item>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    \",\n                styles: [\"\\n    .completer-dropdown {\\n        border-color: #ececec;\\n        border-width: 1px;\\n        border-style: solid;\\n        border-radius: 2px;\\n        width: 250px;\\n        padding: 6px;\\n        cursor: pointer;\\n        z-index: 9999;\\n        position: absolute;\\n        margin-top: -6px;\\n        background-color: #ffffff;\\n    }\\n\\n    .completer-row {\\n        padding: 5px;\\n        color: #000000;\\n        margin-bottom: 4px;\\n        clear: both;\\n        display: inline-block;\\n        width: 103%;\\n    }\\n\\n    .completer-selected-row {\\n        background-color: lightblue;\\n        color: #ffffff;\\n    }\\n\\n    .completer-description {\\n        font-size: 14px;\\n    }\\n\\n    .completer-image-default {\\n        width: 16px;\\n        height: 16px;\\n        background-image: url(\\\"demo/res/img/default.png\\\");\\n    }\\n\\n    .completer-image-holder {\\n        float: left;\\n        width: 10%;\\n    }\\n    .completer-item-text-image {\\n        float: right;\\n        width: 90%;\\n    }\\n    \"],\n                providers: [COMPLETER_CONTROL_VALUE_ACCESSOR]\n            }),\n            __metadata(\"design:paramtypes\", [CompleterService, core.ChangeDetectorRef])\n        ], CompleterCmp);\n        return CompleterCmp;\n    }());\n\n    var providers = [\n        CompleterService,\n        LocalDataFactory,\n        RemoteDataFactory\n    ];\n    var Ng2CompleterModule = /** @class */ (function () {\n        function Ng2CompleterModule() {\n        }\n        Ng2CompleterModule_1 = Ng2CompleterModule;\n        Ng2CompleterModule.forRoot = function () {\n            return {\n                ngModule: Ng2CompleterModule_1,\n                providers: providers\n            };\n        };\n        Ng2CompleterModule.forChild = function () {\n            return {\n                ngModule: Ng2CompleterModule_1,\n                providers: providers\n            };\n        };\n        var Ng2CompleterModule_1;\n        Ng2CompleterModule = Ng2CompleterModule_1 = __decorate([\n            core.NgModule({\n                declarations: [\n                    CompleterListItemCmp,\n                    CtrCompleter,\n                    CtrDropdown,\n                    CtrInput,\n                    CtrList,\n                    CtrRow,\n                    CompleterCmp\n                ],\n                exports: [\n                    CompleterListItemCmp,\n                    CtrCompleter,\n                    CtrDropdown,\n                    CtrInput,\n                    CtrList,\n                    CtrRow,\n                    CompleterCmp\n                ],\n                imports: [\n                    common.CommonModule,\n                    forms.FormsModule\n                ],\n                providers: providers\n            })\n        ], Ng2CompleterModule);\n        return Ng2CompleterModule;\n    }());\n\n    exports.ɵa = CtrListContext;\n    exports.ɵb = CompleterBaseData;\n    exports.LocalData = LocalData;\n    exports.RemoteData = RemoteData;\n    exports.LocalDataFactory = LocalDataFactory;\n    exports.RemoteDataFactory = RemoteDataFactory;\n    exports.CompleterService = CompleterService;\n    exports.CtrCompleter = CtrCompleter;\n    exports.CtrDropdown = CtrDropdown;\n    exports.CtrInput = CtrInput;\n    exports.CtrList = CtrList;\n    exports.CtrRow = CtrRow;\n    exports.CompleterListItemCmp = CompleterListItemCmp;\n    exports.CompleterCmp = CompleterCmp;\n    exports.Ng2CompleterModule = Ng2CompleterModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"]}