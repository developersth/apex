{"version":3,"sources":["/Users/macpro/kritsadee/SVN/Cybersoft/apex/node_modules/ng2-completer/esm5/ng2-completer.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAsPM;;;;;gDAGmB;;;;;;;;;;;oCAWW,AAE7B;;;;;;2EACmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCA6BS,AAE5B;;;;;;;;;;wBAGkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2DA+IkC;;;;;;;;;;;;;;;;oBAKtC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BA+JS,AAIvB;;;;;;;;;;;;;;;;;oBAEa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2BA6SO,AAIpB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAEU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAuOS,AAInB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAMS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yBAqFS,AAIlB;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAEQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uDAqDwC;;;;;;;;;;;;;;;;;;;;;;;;;oBAM1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+BA8WE,AAOxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACc;;;;;;;;;;;;;;;;;;;;;;;;;6BAyBQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDA2BF","file":"ng2-completer.js","sourcesContent":["/**\n * @license ng2-completer\n * MIT license\n */\nimport { __decorate, __metadata, __param, __extends } from 'tslib';\nimport { Subject, Observable, timer } from 'rxjs';\nimport { EventEmitter, Injectable, Directive, Output, ElementRef, Host, HostListener, NgZone, Input, ChangeDetectorRef, TemplateRef, ViewContainerRef, Renderer2, Component, ViewChild, forwardRef, NgModule } from '@angular/core';\nimport { catchError, map, take } from 'rxjs/operators';\nimport { HttpClient } from '@angular/common/http';\nimport { NgModel, FormControl, NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nvar MAX_CHARS = 524288; // the default max length per the html maxlength attribute\nvar MIN_SEARCH_LENGTH = 3;\nvar PAUSE = 10;\nvar TEXT_SEARCHING = \"Searching...\";\nvar TEXT_NO_RESULTS = \"No results found\";\nvar CLEAR_TIMEOUT = 50;\nfunction isNil(value) {\n    return typeof value === \"undefined\" || value === null;\n}\n\nvar CompleterBaseData = /** @class */ (function (_super) {\n    __extends(CompleterBaseData, _super);\n    function CompleterBaseData() {\n        var _this = _super.call(this) || this;\n        _this._searchFields = null;\n        _this._titleField = null;\n        _this._descriptionField = undefined;\n        _this._imageField = undefined;\n        return _this;\n    }\n    CompleterBaseData.prototype.cancel = function () {\n        return;\n    };\n    CompleterBaseData.prototype.searchFields = function (searchFields) {\n        this._searchFields = searchFields;\n        return this;\n    };\n    CompleterBaseData.prototype.titleField = function (titleField) {\n        this._titleField = titleField;\n        return this;\n    };\n    CompleterBaseData.prototype.descriptionField = function (descriptionField) {\n        this._descriptionField = descriptionField;\n        return this;\n    };\n    CompleterBaseData.prototype.imageField = function (imageField) {\n        this._imageField = imageField;\n        return this;\n    };\n    CompleterBaseData.prototype.convertToItem = function (data) {\n        var image = null;\n        var formattedText;\n        var formattedDesc = null;\n        if (this._titleField) {\n            formattedText = this.extractTitle(data);\n        }\n        else {\n            formattedText = data;\n        }\n        if (typeof formattedText !== \"string\") {\n            formattedText = JSON.stringify(formattedText);\n        }\n        if (this._descriptionField) {\n            formattedDesc = this.extractValue(data, this._descriptionField);\n        }\n        if (this._imageField) {\n            image = this.extractValue(data, this._imageField);\n        }\n        if (isNil(formattedText)) {\n            return null;\n        }\n        return {\n            description: formattedDesc,\n            image: image,\n            originalObject: data,\n            title: formattedText\n        };\n    };\n    CompleterBaseData.prototype.extractMatches = function (data, term) {\n        var _this = this;\n        var matches = [];\n        var searchFields = this._searchFields ? this._searchFields.split(\",\") : null;\n        if (this._searchFields !== null && this._searchFields !== undefined && term !== \"\") {\n            matches = data.filter(function (item) {\n                var values = searchFields ? _this.extractBySearchFields(searchFields, item) : [item];\n                return values.some(function (value) { return value\n                    .toString()\n                    .toLowerCase()\n                    .indexOf(term.toString().toLowerCase()) >= 0; });\n            });\n        }\n        else {\n            matches = data;\n        }\n        return matches;\n    };\n    CompleterBaseData.prototype.extractTitle = function (item) {\n        var _this = this;\n        // split title fields and run extractValue for each and join with ' '\n        if (!this._titleField) {\n            return \"\";\n        }\n        return this._titleField.split(\",\")\n            .map(function (field) {\n            return _this.extractValue(item, field);\n        })\n            .reduce(function (acc, titlePart) { return acc ? acc + \" \" + titlePart : titlePart; });\n    };\n    CompleterBaseData.prototype.extractValue = function (obj, key) {\n        var keys;\n        var result;\n        if (key) {\n            keys = key.split(\".\");\n            result = obj;\n            for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n                key = keys_1[_i];\n                if (result) {\n                    result = result[key];\n                }\n            }\n        }\n        else {\n            result = obj;\n        }\n        return result;\n    };\n    CompleterBaseData.prototype.processResults = function (matches) {\n        var i;\n        var results = [];\n        if (matches && matches.length > 0) {\n            for (i = 0; i < matches.length; i++) {\n                var item = this.convertToItem(matches[i]);\n                if (item) {\n                    results.push(item);\n                }\n            }\n        }\n        return results;\n    };\n    CompleterBaseData.prototype.extractBySearchFields = function (searchFields, item) {\n        var _this = this;\n        return searchFields\n            .map(function (searchField) { return _this.extractValue(item, searchField); }).filter(function (value) { return !!value; });\n    };\n    return CompleterBaseData;\n}(Subject));\n\nvar LocalData = /** @class */ (function (_super) {\n    __extends(LocalData, _super);\n    function LocalData() {\n        var _this = _super.call(this) || this;\n        _this.dataSourceChange = new EventEmitter();\n        _this._data = [];\n        _this.savedTerm = null;\n        return _this;\n    }\n    LocalData.prototype.data = function (data) {\n        var _this = this;\n        if (data instanceof Observable) {\n            var data$ = data;\n            data$\n                .pipe(catchError(function () { return []; }))\n                .subscribe(function (res) {\n                _this._data = res;\n                if (_this.savedTerm) {\n                    _this.search(_this.savedTerm);\n                }\n                _this.dataSourceChange.emit();\n            });\n        }\n        else {\n            this._data = data;\n        }\n        this.dataSourceChange.emit();\n        return this;\n    };\n    LocalData.prototype.search = function (term) {\n        if (!this._data) {\n            this.savedTerm = term;\n        }\n        else {\n            this.savedTerm = null;\n            var matches = this.extractMatches(this._data, term);\n            this.next(this.processResults(matches));\n        }\n    };\n    LocalData.prototype.convertToItem = function (data) {\n        return _super.prototype.convertToItem.call(this, data);\n    };\n    return LocalData;\n}(CompleterBaseData));\n\nvar RemoteData = /** @class */ (function (_super) {\n    __extends(RemoteData, _super);\n    function RemoteData(http) {\n        var _this = _super.call(this) || this;\n        _this.http = http;\n        _this.dataSourceChange = new EventEmitter();\n        _this._remoteUrl = null;\n        _this.remoteSearch = null;\n        _this._urlFormater = null;\n        _this._dataField = null;\n        return _this;\n    }\n    RemoteData.prototype.remoteUrl = function (remoteUrl) {\n        this._remoteUrl = remoteUrl;\n        this.dataSourceChange.emit();\n        return this;\n    };\n    RemoteData.prototype.urlFormater = function (urlFormater) {\n        this._urlFormater = urlFormater;\n    };\n    RemoteData.prototype.dataField = function (dataField) {\n        this._dataField = dataField;\n    };\n    RemoteData.prototype.requestOptions = function (requestOptions) {\n        this._requestOptions = requestOptions;\n    };\n    RemoteData.prototype.search = function (term) {\n        var _this = this;\n        this.cancel();\n        // let params = {};\n        var url = \"\";\n        if (this._urlFormater) {\n            url = this._urlFormater(term);\n        }\n        else {\n            url = this._remoteUrl + encodeURIComponent(term);\n        }\n        this.remoteSearch = this.http\n            .get(url, Object.assign({}, this._requestOptions))\n            .pipe(map(function (data) {\n            var matches = _this.extractValue(data, _this._dataField);\n            return _this.extractMatches(matches, term);\n        }), catchError(function () { return []; }))\n            .subscribe(function (matches) {\n            var results = _this.processResults(matches);\n            _this.next(results);\n        });\n    };\n    RemoteData.prototype.cancel = function () {\n        if (this.remoteSearch) {\n            this.remoteSearch.unsubscribe();\n        }\n    };\n    RemoteData.prototype.convertToItem = function (data) {\n        return _super.prototype.convertToItem.call(this, data);\n    };\n    return RemoteData;\n}(CompleterBaseData));\n\nvar LocalDataFactory = /** @class */ (function () {\n    function LocalDataFactory() {\n    }\n    LocalDataFactory.prototype.create = function () {\n        return new LocalData();\n    };\n    LocalDataFactory = __decorate([\n        Injectable()\n    ], LocalDataFactory);\n    return LocalDataFactory;\n}());\n\nvar RemoteDataFactory = /** @class */ (function () {\n    function RemoteDataFactory(http) {\n        this.http = http;\n    }\n    RemoteDataFactory.prototype.create = function () {\n        return new RemoteData(this.http);\n    };\n    RemoteDataFactory = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [HttpClient])\n    ], RemoteDataFactory);\n    return RemoteDataFactory;\n}());\n\nvar CompleterService = /** @class */ (function () {\n    function CompleterService(localDataFactory, // Using any instead of () => LocalData because of AoT errors\n    remoteDataFactory // Using any instead of () => LocalData because of AoT errors\n    ) {\n        this.localDataFactory = localDataFactory;\n        this.remoteDataFactory = remoteDataFactory;\n    }\n    CompleterService.prototype.local = function (data, searchFields, titleField) {\n        if (searchFields === void 0) { searchFields = \"\"; }\n        if (titleField === void 0) { titleField = \"\"; }\n        var localData = this.localDataFactory.create();\n        return localData\n            .data(data)\n            .searchFields(searchFields)\n            .titleField(titleField);\n    };\n    CompleterService.prototype.remote = function (url, searchFields, titleField) {\n        if (searchFields === void 0) { searchFields = \"\"; }\n        if (titleField === void 0) { titleField = \"\"; }\n        var remoteData = this.remoteDataFactory.create();\n        return remoteData\n            .remoteUrl(url)\n            .searchFields(searchFields)\n            .titleField(titleField);\n    };\n    CompleterService = __decorate([\n        Injectable(),\n        __metadata(\"design:paramtypes\", [LocalDataFactory,\n            RemoteDataFactory // Using any instead of () => LocalData because of AoT errors\n        ])\n    ], CompleterService);\n    return CompleterService;\n}());\n\nvar CtrCompleter = /** @class */ (function () {\n    function CtrCompleter() {\n        this.selected = new EventEmitter();\n        this.highlighted = new EventEmitter();\n        this.opened = new EventEmitter();\n        this.dataSourceChange = new EventEmitter();\n        this.list = null;\n        this.dropdown = null;\n        this._hasHighlighted = false;\n        this._hasSelected = false;\n        this._cancelBlur = false;\n        this._isOpen = false;\n        this._autoHighlightIndex = null;\n    }\n    CtrCompleter.prototype.registerList = function (list) {\n        this.list = list;\n    };\n    CtrCompleter.prototype.registerDropdown = function (dropdown) {\n        this.dropdown = dropdown;\n    };\n    CtrCompleter.prototype.onHighlighted = function (item) {\n        this.highlighted.emit(item);\n        this._hasHighlighted = !!item;\n    };\n    CtrCompleter.prototype.onSelected = function (item, clearList) {\n        if (clearList === void 0) { clearList = true; }\n        this.selected.emit(item);\n        if (item) {\n            this._hasSelected = true;\n        }\n        if (clearList) {\n            this.clear();\n        }\n    };\n    CtrCompleter.prototype.onDataSourceChange = function () {\n        if (this.hasSelected) {\n            this.selected.emit(null);\n            this._hasSelected = false;\n        }\n        this.dataSourceChange.emit();\n    };\n    CtrCompleter.prototype.search = function (term) {\n        if (this._hasSelected) {\n            this.selected.emit(null);\n            this._hasSelected = false;\n        }\n        if (this.list) {\n            this.list.search(term);\n        }\n    };\n    CtrCompleter.prototype.clear = function () {\n        this._hasHighlighted = false;\n        this.isOpen = false;\n        if (this.dropdown) {\n            this.dropdown.clear();\n        }\n        if (this.list) {\n            this.list.clear();\n        }\n    };\n    CtrCompleter.prototype.selectCurrent = function () {\n        if (this.dropdown) {\n            this.dropdown.selectCurrent();\n        }\n    };\n    CtrCompleter.prototype.nextRow = function () {\n        if (this.dropdown) {\n            this.dropdown.nextRow();\n        }\n    };\n    CtrCompleter.prototype.prevRow = function () {\n        if (this.dropdown) {\n            this.dropdown.prevRow();\n        }\n    };\n    CtrCompleter.prototype.hasHighlighted = function () {\n        return this._hasHighlighted;\n    };\n    CtrCompleter.prototype.cancelBlur = function (cancel) {\n        this._cancelBlur = cancel;\n    };\n    CtrCompleter.prototype.isCancelBlur = function () {\n        return this._cancelBlur;\n    };\n    CtrCompleter.prototype.open = function () {\n        if (!this._isOpen && !!this.list) {\n            this.isOpen = true;\n            this.list.open();\n        }\n    };\n    Object.defineProperty(CtrCompleter.prototype, \"isOpen\", {\n        get: function () {\n            return this._isOpen;\n        },\n        set: function (open) {\n            this._isOpen = open;\n            this.opened.emit(this._isOpen);\n            if (this.list) {\n                this.list.isOpen(open);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CtrCompleter.prototype, \"autoHighlightIndex\", {\n        get: function () {\n            return this._autoHighlightIndex;\n        },\n        set: function (index) {\n            this._autoHighlightIndex = index;\n            if (this.dropdown) {\n                this.dropdown.highlightRow(this._autoHighlightIndex);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CtrCompleter.prototype, \"hasSelected\", {\n        get: function () {\n            return this._hasSelected;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], CtrCompleter.prototype, \"selected\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], CtrCompleter.prototype, \"highlighted\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], CtrCompleter.prototype, \"opened\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], CtrCompleter.prototype, \"dataSourceChange\", void 0);\n    CtrCompleter = __decorate([\n        Directive({\n            selector: \"[ctrCompleter]\",\n        })\n    ], CtrCompleter);\n    return CtrCompleter;\n}());\n\nvar CtrRowItem = /** @class */ (function () {\n    function CtrRowItem(row, index) {\n        this.row = row;\n        this.index = index;\n    }\n    return CtrRowItem;\n}());\nvar CtrDropdown = /** @class */ (function () {\n    function CtrDropdown(completer, el, zone) {\n        this.completer = completer;\n        this.el = el;\n        this.zone = zone;\n        this.rows = [];\n        this.isScrollOn = false;\n        this._rowMouseDown = false;\n        this.completer.registerDropdown(this);\n    }\n    CtrDropdown.prototype.ngOnDestroy = function () {\n        this.completer.registerDropdown(null);\n    };\n    CtrDropdown.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        var css = getComputedStyle(this.el.nativeElement);\n        var autoHighlightIndex = this.completer.autoHighlightIndex;\n        this.isScrollOn = !!css.maxHeight && css.overflowY === \"auto\";\n        if (autoHighlightIndex) {\n            this.zone.run(function () {\n                _this.highlightRow(autoHighlightIndex);\n            });\n        }\n    };\n    CtrDropdown.prototype.onMouseDown = function (event) {\n        var _this = this;\n        // Support for canceling blur on IE (issue #158)\n        if (!this._rowMouseDown) {\n            this.completer.cancelBlur(true);\n            this.zone.run(function () {\n                _this.completer.cancelBlur(false);\n            });\n        }\n        else {\n            this._rowMouseDown = false;\n        }\n    };\n    CtrDropdown.prototype.registerRow = function (row) {\n        var arrIndex = this.rows.findIndex(function (_row) { return _row.index === row.index; });\n        if (arrIndex >= 0) {\n            this.rows[arrIndex] = row;\n        }\n        else {\n            this.rows.push(row);\n        }\n    };\n    CtrDropdown.prototype.unregisterRow = function (rowIndex) {\n        var arrIndex = this.rows.findIndex(function (_row) { return _row.index === rowIndex; });\n        this.rows.splice(arrIndex, 1);\n        if (this.currHighlighted && rowIndex === this.currHighlighted.index) {\n            this.highlightRow(null);\n        }\n    };\n    CtrDropdown.prototype.highlightRow = function (index) {\n        var highlighted = this.rows.find(function (row) { return row.index === index; });\n        if (isNil(index) || index < 0) {\n            if (this.currHighlighted) {\n                this.currHighlighted.row.setHighlighted(false);\n            }\n            this.currHighlighted = undefined;\n            this.completer.onHighlighted(null);\n            return;\n        }\n        if (!highlighted) {\n            return;\n        }\n        if (this.currHighlighted) {\n            this.currHighlighted.row.setHighlighted(false);\n        }\n        this.currHighlighted = highlighted;\n        this.currHighlighted.row.setHighlighted(true);\n        this.completer.onHighlighted(this.currHighlighted.row.getDataItem());\n        if (this.isScrollOn && this.currHighlighted) {\n            var rowTop = this.dropdownRowTop();\n            if (!rowTop) {\n                return;\n            }\n            if (rowTop < 0) {\n                this.dropdownScrollTopTo(rowTop - 1);\n            }\n            else {\n                var row = this.currHighlighted.row.getNativeElement();\n                if (this.dropdownHeight() < row.getBoundingClientRect().bottom) {\n                    this.dropdownScrollTopTo(this.dropdownRowOffsetHeight(row));\n                    if (this.el.nativeElement.getBoundingClientRect().bottom - this.dropdownRowOffsetHeight(row) < row.getBoundingClientRect().top) {\n                        this.dropdownScrollTopTo(row.getBoundingClientRect().top - (this.el.nativeElement.getBoundingClientRect().top + parseInt(getComputedStyle(this.el.nativeElement).paddingTop, 10)));\n                    }\n                }\n            }\n        }\n    };\n    CtrDropdown.prototype.clear = function () {\n        this.rows = [];\n    };\n    CtrDropdown.prototype.onSelected = function (item) {\n        this.completer.onSelected(item);\n    };\n    CtrDropdown.prototype.rowMouseDown = function () {\n        this._rowMouseDown = true;\n    };\n    CtrDropdown.prototype.selectCurrent = function () {\n        if (!!this.currHighlighted && !!this.currHighlighted.row) {\n            this.onSelected(this.currHighlighted.row.getDataItem());\n        }\n        else if (this.rows.length > 0) {\n            this.onSelected(this.rows[0].row.getDataItem());\n        }\n    };\n    CtrDropdown.prototype.nextRow = function () {\n        var nextRowIndex = 0;\n        if (this.currHighlighted) {\n            nextRowIndex = this.currHighlighted.index + 1;\n        }\n        this.highlightRow(nextRowIndex);\n    };\n    CtrDropdown.prototype.prevRow = function () {\n        var nextRowIndex = -1;\n        if (this.currHighlighted) {\n            nextRowIndex = this.currHighlighted.index - 1;\n        }\n        this.highlightRow(nextRowIndex);\n    };\n    CtrDropdown.prototype.dropdownScrollTopTo = function (offset) {\n        this.el.nativeElement.scrollTop = this.el.nativeElement.scrollTop + offset;\n    };\n    CtrDropdown.prototype.dropdownRowTop = function () {\n        if (!this.currHighlighted) {\n            return;\n        }\n        return this.currHighlighted.row.getNativeElement().getBoundingClientRect().top -\n            (this.el.nativeElement.getBoundingClientRect().top +\n                parseInt(getComputedStyle(this.el.nativeElement).paddingTop, 10));\n    };\n    CtrDropdown.prototype.dropdownHeight = function () {\n        return this.el.nativeElement.getBoundingClientRect().top +\n            parseInt(getComputedStyle(this.el.nativeElement).maxHeight, 10);\n    };\n    CtrDropdown.prototype.dropdownRowOffsetHeight = function (row) {\n        var css = getComputedStyle(row.parentElement);\n        return row.parentElement.offsetHeight +\n            parseInt(css.marginTop, 10) + parseInt(css.marginBottom, 10);\n    };\n    __decorate([\n        HostListener(\"mousedown\", [\"$event\"]),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], CtrDropdown.prototype, \"onMouseDown\", null);\n    CtrDropdown = __decorate([\n        Directive({\n            selector: \"[ctrDropdown]\",\n        }),\n        __param(0, Host()),\n        __metadata(\"design:paramtypes\", [CtrCompleter, ElementRef, NgZone])\n    ], CtrDropdown);\n    return CtrDropdown;\n}());\n\n// keyboard events\nvar KEY_DW = 40;\nvar KEY_RT = 39;\nvar KEY_UP = 38;\nvar KEY_LF = 37;\nvar KEY_ES = 27;\nvar KEY_EN = 13;\nvar KEY_TAB = 9;\nvar KEY_BK = 8;\nvar KEY_SH = 16;\nvar KEY_CL = 20;\nvar KEY_F1 = 112;\nvar KEY_F12 = 123;\nvar CtrInput = /** @class */ (function () {\n    function CtrInput(completer, ngModel, el) {\n        var _this = this;\n        this.completer = completer;\n        this.ngModel = ngModel;\n        this.el = el;\n        this.clearSelected = false;\n        this.clearUnselected = false;\n        this.overrideSuggested = false;\n        this.fillHighlighted = true;\n        this.openOnFocus = false;\n        this.openOnClick = false;\n        this.selectOnClick = false;\n        this.selectOnFocus = false;\n        this.ngModelChange = new EventEmitter();\n        this._searchStr = \"\";\n        this._displayStr = \"\";\n        this.blurTimer = null;\n        this.completer.selected.subscribe(function (item) {\n            if (!item) {\n                return;\n            }\n            if (_this.clearSelected) {\n                _this.searchStr = \"\";\n            }\n            else {\n                _this.searchStr = item.title;\n            }\n            _this.ngModelChange.emit(_this.searchStr);\n        });\n        this.completer.highlighted.subscribe(function (item) {\n            if (_this.fillHighlighted) {\n                if (item) {\n                    _this._displayStr = item.title;\n                    _this.ngModelChange.emit(item.title);\n                }\n                else {\n                    _this._displayStr = _this.searchStr;\n                    _this.ngModelChange.emit(_this.searchStr);\n                }\n            }\n        });\n        this.completer.dataSourceChange.subscribe(function () {\n            _this.completer.search(_this.searchStr);\n        });\n        if (this.ngModel.valueChanges) {\n            this.ngModel.valueChanges.subscribe(function (value) {\n                if (!isNil(value) && _this._displayStr !== value) {\n                    if (_this.searchStr !== value) {\n                        _this.completer.search(value);\n                    }\n                    _this.searchStr = value;\n                }\n            });\n        }\n    }\n    CtrInput.prototype.keyupHandler = function (event) {\n        if (event.keyCode === KEY_LF || event.keyCode === KEY_RT || event.keyCode === KEY_TAB) {\n            // do nothing\n            return;\n        }\n        if (event.keyCode === KEY_UP || event.keyCode === KEY_EN) {\n            event.preventDefault();\n        }\n        else if (event.keyCode === KEY_DW) {\n            event.preventDefault();\n            this.completer.search(this.searchStr);\n        }\n        else if (event.keyCode === KEY_ES) {\n            if (this.completer.isOpen) {\n                this.restoreSearchValue();\n                this.completer.clear();\n                event.stopPropagation();\n                event.preventDefault();\n            }\n        }\n    };\n    CtrInput.prototype.pasteHandler = function (event) {\n        this.completer.open();\n    };\n    CtrInput.prototype.keydownHandler = function (event) {\n        var keyCode = event.keyCode || event.which;\n        if (keyCode === KEY_EN) {\n            if (this.completer.hasHighlighted()) {\n                event.preventDefault();\n            }\n            this.handleSelection();\n        }\n        else if (keyCode === KEY_DW) {\n            event.preventDefault();\n            this.completer.open();\n            this.completer.nextRow();\n        }\n        else if (keyCode === KEY_UP) {\n            event.preventDefault();\n            this.completer.prevRow();\n        }\n        else if (keyCode === KEY_TAB) {\n            this.handleSelection();\n        }\n        else if (keyCode === KEY_BK) {\n            this.completer.open();\n        }\n        else if (keyCode === KEY_ES) {\n            // This is very specific to IE10/11 #272\n            // without this, IE clears the input text\n            event.preventDefault();\n            if (this.completer.isOpen) {\n                event.stopPropagation();\n            }\n        }\n        else {\n            if (keyCode !== 0 && keyCode !== KEY_SH && keyCode !== KEY_CL &&\n                (keyCode <= KEY_F1 || keyCode >= KEY_F12) &&\n                !event.ctrlKey && !event.metaKey && !event.altKey) {\n                this.completer.open();\n            }\n        }\n    };\n    CtrInput.prototype.onBlur = function (event) {\n        var _this = this;\n        // Check if we need to cancel Blur for IE\n        if (this.completer.isCancelBlur()) {\n            setTimeout(function () {\n                // get the focus back\n                _this.el.nativeElement.focus();\n            }, 0);\n            return;\n        }\n        if (this.completer.isOpen) {\n            this.blurTimer = timer(200).pipe(take(1)).subscribe(function () { return _this.doBlur(); });\n        }\n    };\n    CtrInput.prototype.onfocus = function () {\n        if (this.blurTimer) {\n            this.blurTimer.unsubscribe();\n            this.blurTimer = null;\n        }\n        if (this.selectOnFocus) {\n            this.el.nativeElement.select();\n        }\n        if (this.openOnFocus) {\n            this.completer.open();\n        }\n    };\n    CtrInput.prototype.onClick = function (event) {\n        if (this.selectOnClick) {\n            this.el.nativeElement.select();\n        }\n        if (this.openOnClick) {\n            if (this.completer.isOpen) {\n                this.completer.clear();\n            }\n            else {\n                this.completer.open();\n            }\n        }\n    };\n    Object.defineProperty(CtrInput.prototype, \"searchStr\", {\n        get: function () {\n            return this._searchStr;\n        },\n        set: function (term) {\n            this._searchStr = term;\n            this._displayStr = term;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CtrInput.prototype.handleSelection = function () {\n        if (this.completer.hasHighlighted()) {\n            this._searchStr = \"\";\n            this.completer.selectCurrent();\n        }\n        else if (this.overrideSuggested) {\n            this.completer.onSelected({ title: this.searchStr, originalObject: null });\n        }\n        else {\n            if (this.clearUnselected && !this.completer.hasSelected) {\n                this.searchStr = \"\";\n                this.ngModelChange.emit(this.searchStr);\n            }\n            this.completer.clear();\n        }\n    };\n    CtrInput.prototype.restoreSearchValue = function () {\n        if (this.fillHighlighted) {\n            if (this._displayStr != this.searchStr) {\n                this._displayStr = this.searchStr;\n                this.ngModelChange.emit(this.searchStr);\n            }\n        }\n    };\n    CtrInput.prototype.doBlur = function () {\n        if (this.blurTimer) {\n            this.blurTimer.unsubscribe();\n            this.blurTimer = null;\n        }\n        if (this.overrideSuggested) {\n            this.completer.onSelected({ title: this.searchStr, originalObject: null });\n        }\n        else {\n            if (this.clearUnselected && !this.completer.hasSelected) {\n                this.searchStr = \"\";\n                this.ngModelChange.emit(this.searchStr);\n            }\n            else {\n                this.restoreSearchValue();\n            }\n        }\n        this.completer.clear();\n    };\n    __decorate([\n        Input(\"clearSelected\"),\n        __metadata(\"design:type\", Object)\n    ], CtrInput.prototype, \"clearSelected\", void 0);\n    __decorate([\n        Input(\"clearUnselected\"),\n        __metadata(\"design:type\", Object)\n    ], CtrInput.prototype, \"clearUnselected\", void 0);\n    __decorate([\n        Input(\"overrideSuggested\"),\n        __metadata(\"design:type\", Object)\n    ], CtrInput.prototype, \"overrideSuggested\", void 0);\n    __decorate([\n        Input(\"fillHighlighted\"),\n        __metadata(\"design:type\", Object)\n    ], CtrInput.prototype, \"fillHighlighted\", void 0);\n    __decorate([\n        Input(\"openOnFocus\"),\n        __metadata(\"design:type\", Object)\n    ], CtrInput.prototype, \"openOnFocus\", void 0);\n    __decorate([\n        Input(\"openOnClick\"),\n        __metadata(\"design:type\", Object)\n    ], CtrInput.prototype, \"openOnClick\", void 0);\n    __decorate([\n        Input(\"selectOnClick\"),\n        __metadata(\"design:type\", Object)\n    ], CtrInput.prototype, \"selectOnClick\", void 0);\n    __decorate([\n        Input(\"selectOnFocus\"),\n        __metadata(\"design:type\", Object)\n    ], CtrInput.prototype, \"selectOnFocus\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], CtrInput.prototype, \"ngModelChange\", void 0);\n    __decorate([\n        HostListener(\"keyup\", [\"$event\"]),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], CtrInput.prototype, \"keyupHandler\", null);\n    __decorate([\n        HostListener(\"paste\", [\"$event\"]),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], CtrInput.prototype, \"pasteHandler\", null);\n    __decorate([\n        HostListener(\"keydown\", [\"$event\"]),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], CtrInput.prototype, \"keydownHandler\", null);\n    __decorate([\n        HostListener(\"blur\", [\"$event\"]),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], CtrInput.prototype, \"onBlur\", null);\n    __decorate([\n        HostListener(\"focus\", []),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], CtrInput.prototype, \"onfocus\", null);\n    __decorate([\n        HostListener(\"click\", [\"$event\"]),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], CtrInput.prototype, \"onClick\", null);\n    CtrInput = __decorate([\n        Directive({\n            selector: \"[ctrInput]\",\n        }),\n        __param(0, Host()),\n        __metadata(\"design:paramtypes\", [CtrCompleter, NgModel, ElementRef])\n    ], CtrInput);\n    return CtrInput;\n}());\n\nvar CtrListContext = /** @class */ (function () {\n    function CtrListContext(results, searching, searchInitialized, isOpen) {\n        this.results = results;\n        this.searching = searching;\n        this.searchInitialized = searchInitialized;\n        this.isOpen = isOpen;\n    }\n    return CtrListContext;\n}());\nvar CtrList = /** @class */ (function () {\n    function CtrList(completer, templateRef, viewContainer, cd, zone) {\n        this.completer = completer;\n        this.templateRef = templateRef;\n        this.viewContainer = viewContainer;\n        this.cd = cd;\n        this.zone = zone;\n        this.ctrListMinSearchLength = MIN_SEARCH_LENGTH;\n        this.ctrListPause = PAUSE;\n        this.ctrListAutoMatch = false;\n        this.ctrListAutoHighlight = false;\n        this.ctrListDisplaySearching = true;\n        this._dataService = null;\n        // private results: CompleterItem[] = [];\n        this.term = null;\n        // private searching = false;\n        this.searchTimer = null;\n        this.clearTimer = null;\n        this.ctx = new CtrListContext([], false, false, false);\n        this._initialValue = null;\n        this.viewRef = null;\n    }\n    CtrList.prototype.ngOnInit = function () {\n        this.completer.registerList(this);\n        this.viewRef = this.viewContainer.createEmbeddedView(this.templateRef, new CtrListContext([], false, false, false));\n    };\n    Object.defineProperty(CtrList.prototype, \"dataService\", {\n        set: function (newService) {\n            this._dataService = newService;\n            this.dataServiceSubscribe();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CtrList.prototype, \"initialValue\", {\n        set: function (value) {\n            var _this = this;\n            if (this._dataService && typeof this._dataService.convertToItem === \"function\") {\n                this.zone.run(function () {\n                    var initialItem = _this._dataService && _this._dataService.convertToItem(value);\n                    if (initialItem) {\n                        _this.completer.onSelected(initialItem, false);\n                    }\n                });\n            }\n            else if (!this._dataService) {\n                this._initialValue = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CtrList.prototype.search = function (term) {\n        var _this = this;\n        if (!isNil(term) && term.length >= this.ctrListMinSearchLength && this.term !== term) {\n            if (this.searchTimer) {\n                this.searchTimer.unsubscribe();\n                this.searchTimer = null;\n            }\n            if (!this.ctx.searching) {\n                if (this.ctrListDisplaySearching) {\n                    this.ctx.results = [];\n                }\n                this.ctx.searching = true;\n                this.ctx.searchInitialized = true;\n                this.refreshTemplate();\n            }\n            if (this.clearTimer) {\n                this.clearTimer.unsubscribe();\n            }\n            this.searchTimer = timer(this.ctrListPause).pipe(take(1)).subscribe(function () {\n                _this.searchTimerComplete(term);\n            });\n        }\n        else if (!isNil(term) && term.length < this.ctrListMinSearchLength) {\n            this.clear();\n            this.term = \"\";\n        }\n    };\n    CtrList.prototype.clear = function () {\n        var _this = this;\n        if (this.searchTimer) {\n            this.searchTimer.unsubscribe();\n        }\n        this.clearTimer = timer(CLEAR_TIMEOUT).pipe(take(1)).subscribe(function () {\n            _this._clear();\n        });\n    };\n    CtrList.prototype.open = function () {\n        if (!this.ctx.searchInitialized) {\n            this.search(\"\");\n        }\n        this.refreshTemplate();\n    };\n    CtrList.prototype.isOpen = function (open) {\n        this.ctx.isOpen = open;\n    };\n    CtrList.prototype._clear = function () {\n        if (this.searchTimer) {\n            this.searchTimer.unsubscribe();\n            this.searchTimer = null;\n        }\n        if (this.dataService) {\n            this.dataService.cancel();\n        }\n        this.viewContainer.clear();\n        this.viewRef = null;\n    };\n    CtrList.prototype.searchTimerComplete = function (term) {\n        // Begin the search\n        if (isNil(term) || term.length < this.ctrListMinSearchLength) {\n            this.ctx.searching = false;\n            return;\n        }\n        this.term = term;\n        if (this._dataService) {\n            this._dataService.search(term);\n        }\n    };\n    CtrList.prototype.refreshTemplate = function () {\n        // create the template if it doesn't exist\n        if (!this.viewRef) {\n            this.viewRef = this.viewContainer.createEmbeddedView(this.templateRef, this.ctx);\n        }\n        else if (!this.viewRef.destroyed) {\n            // refresh the template\n            this.viewRef.context.isOpen = this.ctx.isOpen;\n            this.viewRef.context.results = this.ctx.results;\n            this.viewRef.context.searching = this.ctx.searching;\n            this.viewRef.context.searchInitialized = this.ctx.searchInitialized;\n            this.viewRef.detectChanges();\n        }\n        this.cd.markForCheck();\n    };\n    CtrList.prototype.getBestMatchIndex = function () {\n        var _this = this;\n        if (!this.ctx.results || !this.term) {\n            return null;\n        }\n        // First try to find the exact term\n        var bestMatch = this.ctx.results.findIndex(function (item) { return item.title.toLowerCase() === _this.term.toLocaleLowerCase(); });\n        // If not try to find the first item that starts with the term\n        if (bestMatch < 0) {\n            bestMatch = this.ctx.results.findIndex(function (item) { return item.title.toLowerCase().startsWith(_this.term.toLocaleLowerCase()); });\n        }\n        // If not try to find the first item that includes the term\n        if (bestMatch < 0) {\n            bestMatch = this.ctx.results.findIndex(function (item) { return item.title.toLowerCase().includes(_this.term.toLocaleLowerCase()); });\n        }\n        return bestMatch < 0 ? null : bestMatch;\n    };\n    CtrList.prototype.dataServiceSubscribe = function () {\n        var _this = this;\n        if (this._dataService) {\n            this._dataService\n                .subscribe(function (results) {\n                _this.ctx.searchInitialized = true;\n                _this.ctx.searching = false;\n                _this.ctx.results = results;\n                if (_this.ctrListAutoMatch && results &&\n                    results.length === 1 && results[0].title &&\n                    !isNil(_this.term) &&\n                    results[0].title.toLocaleLowerCase() === _this.term.toLocaleLowerCase()) {\n                    // Do automatch\n                    _this.completer.onSelected(results[0]);\n                    return;\n                }\n                _this.refreshTemplate();\n                if (_this.ctrListAutoHighlight) {\n                    _this.completer.autoHighlightIndex = _this.getBestMatchIndex();\n                }\n            }, function (error) {\n                console.error(error);\n                console.error(\"Unexpected error in dataService: errors should be handled by the dataService Observable\");\n                return [];\n            });\n            if (this._dataService.dataSourceChange) {\n                this._dataService.dataSourceChange.subscribe(function () {\n                    _this.term = null;\n                    _this.ctx.searchInitialized = false;\n                    _this.ctx.searching = false;\n                    _this.ctx.results = [];\n                    _this.refreshTemplate();\n                    _this.completer.onDataSourceChange();\n                });\n            }\n        }\n    };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CtrList.prototype, \"ctrListMinSearchLength\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CtrList.prototype, \"ctrListPause\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CtrList.prototype, \"ctrListAutoMatch\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CtrList.prototype, \"ctrListAutoHighlight\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CtrList.prototype, \"ctrListDisplaySearching\", void 0);\n    __decorate([\n        Input(\"ctrList\"),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], CtrList.prototype, \"dataService\", null);\n    __decorate([\n        Input(\"ctrListInitialValue\"),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], CtrList.prototype, \"initialValue\", null);\n    CtrList = __decorate([\n        Directive({\n            selector: \"[ctrList]\",\n        }),\n        __param(0, Host()),\n        __metadata(\"design:paramtypes\", [CtrCompleter,\n            TemplateRef,\n            ViewContainerRef,\n            ChangeDetectorRef,\n            NgZone])\n    ], CtrList);\n    return CtrList;\n}());\n\nvar CtrRow = /** @class */ (function () {\n    function CtrRow(el, renderer, dropdown) {\n        this.el = el;\n        this.renderer = renderer;\n        this.dropdown = dropdown;\n        this.selected = false;\n        this._rowIndex = 0;\n        this._item = null;\n    }\n    CtrRow.prototype.ngOnDestroy = function () {\n        if (this._rowIndex) {\n            this.dropdown.unregisterRow(this._rowIndex);\n        }\n    };\n    Object.defineProperty(CtrRow.prototype, \"ctrRow\", {\n        set: function (index) {\n            this._rowIndex = index;\n            this.dropdown.registerRow(new CtrRowItem(this, this._rowIndex));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CtrRow.prototype, \"dataItem\", {\n        set: function (item) {\n            this._item = item;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CtrRow.prototype.onClick = function (event) {\n        this.dropdown.onSelected(this._item);\n    };\n    CtrRow.prototype.onMouseEnter = function (event) {\n        this.dropdown.highlightRow(this._rowIndex);\n    };\n    CtrRow.prototype.onMouseDown = function (event) {\n        this.dropdown.rowMouseDown();\n    };\n    CtrRow.prototype.setHighlighted = function (selected) {\n        this.selected = selected;\n        if (this.selected) {\n            this.renderer.addClass(this.el.nativeElement, \"completer-selected-row\");\n        }\n        else {\n            this.renderer.removeClass(this.el.nativeElement, \"completer-selected-row\");\n        }\n    };\n    CtrRow.prototype.getNativeElement = function () {\n        return this.el.nativeElement;\n    };\n    CtrRow.prototype.getDataItem = function () {\n        return this._item;\n    };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Number),\n        __metadata(\"design:paramtypes\", [Number])\n    ], CtrRow.prototype, \"ctrRow\", null);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], CtrRow.prototype, \"dataItem\", null);\n    __decorate([\n        HostListener(\"click\", [\"$event\"]),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], CtrRow.prototype, \"onClick\", null);\n    __decorate([\n        HostListener(\"mouseenter\", [\"$event\"]),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], CtrRow.prototype, \"onMouseEnter\", null);\n    __decorate([\n        HostListener(\"mousedown\", [\"$event\"]),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], CtrRow.prototype, \"onMouseDown\", null);\n    CtrRow = __decorate([\n        Directive({\n            selector: \"[ctrRow]\",\n        }),\n        __param(2, Host()),\n        __metadata(\"design:paramtypes\", [ElementRef, Renderer2, CtrDropdown])\n    ], CtrRow);\n    return CtrRow;\n}());\n\nvar CompleterListItemCmp = /** @class */ (function () {\n    function CompleterListItemCmp() {\n        this.text = \"\";\n        this.searchStr = \"\";\n        this.matchClass = \"\";\n        this.type = \"\";\n        this.parts = [];\n    }\n    CompleterListItemCmp.prototype.ngOnInit = function () {\n        if (!this.searchStr) {\n            this.parts.push({ isMatch: false, text: this.text });\n            return;\n        }\n        var matchStr = this.text.toLowerCase();\n        var matchPos = matchStr.indexOf(this.searchStr.toLowerCase());\n        var startIndex = 0;\n        while (matchPos >= 0) {\n            var matchText = this.text.slice(matchPos, matchPos + this.searchStr.length);\n            if (matchPos === 0) {\n                this.parts.push({ isMatch: true, text: matchText });\n                startIndex += this.searchStr.length;\n            }\n            else if (matchPos > 0) {\n                var matchPart = this.text.slice(startIndex, matchPos);\n                this.parts.push({ isMatch: false, text: matchPart });\n                this.parts.push({ isMatch: true, text: matchText });\n                startIndex += this.searchStr.length + matchPart.length;\n            }\n            matchPos = matchStr.indexOf(this.searchStr.toLowerCase(), startIndex);\n        }\n        if (startIndex < this.text.length) {\n            this.parts.push({ isMatch: false, text: this.text.slice(startIndex, this.text.length) });\n        }\n    };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], CompleterListItemCmp.prototype, \"text\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], CompleterListItemCmp.prototype, \"searchStr\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], CompleterListItemCmp.prototype, \"matchClass\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], CompleterListItemCmp.prototype, \"type\", void 0);\n    CompleterListItemCmp = __decorate([\n        Component({\n            selector: \"completer-list-item\",\n            template: \"<span class=\\\"completer-list-item-holder\\\" [ngClass]= \\\"{'completer-title': type === 'title', 'completer-description': type === 'description'}\\\" >\\n        <span class=\\\"completer-list-item\\\" *ngFor=\\\"let part of parts\\\" [ngClass]= \\\"part.isMatch ? matchClass : null\\\">{{part.text}}</span>\\n    </span>\"\n        })\n    ], CompleterListItemCmp);\n    return CompleterListItemCmp;\n}());\n\nvar noop = function () {\n    return;\n};\nvar COMPLETER_CONTROL_VALUE_ACCESSOR = {\n    multi: true,\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return CompleterCmp; }),\n};\nvar CompleterCmp = /** @class */ (function () {\n    function CompleterCmp(completerService, cdr) {\n        this.completerService = completerService;\n        this.cdr = cdr;\n        this.inputName = \"\";\n        this.inputId = \"\";\n        this.pause = PAUSE;\n        this.minSearchLength = MIN_SEARCH_LENGTH;\n        this.maxChars = MAX_CHARS;\n        this.overrideSuggested = false;\n        this.clearSelected = false;\n        this.clearUnselected = false;\n        this.fillHighlighted = true;\n        this.placeholder = \"\";\n        this.autoMatch = false;\n        this.disableInput = false;\n        this.autofocus = false;\n        this.openOnFocus = false;\n        this.openOnClick = false;\n        this.selectOnClick = false;\n        this.selectOnFocus = false;\n        this.autoHighlight = false;\n        this.selected = new EventEmitter();\n        this.highlighted = new EventEmitter();\n        this.blurEvent = new EventEmitter();\n        this.click = new EventEmitter();\n        this.focusEvent = new EventEmitter();\n        this.opened = new EventEmitter();\n        this.keyup = new EventEmitter();\n        this.keydown = new EventEmitter();\n        this.control = new FormControl(\"\");\n        this.displaySearching = true;\n        this.displayNoResults = true;\n        this._textNoResults = TEXT_NO_RESULTS;\n        this._textSearching = TEXT_SEARCHING;\n        this._onTouchedCallback = noop;\n        this._onChangeCallback = noop;\n        this._focus = false;\n        this._open = false;\n        this._searchStr = \"\";\n    }\n    Object.defineProperty(CompleterCmp.prototype, \"value\", {\n        get: function () { return this.searchStr; },\n        set: function (v) {\n            if (v !== this.searchStr) {\n                this.searchStr = v;\n            }\n            // Propagate the change in any case\n            this._onChangeCallback(v);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CompleterCmp.prototype, \"searchStr\", {\n        get: function () {\n            return this._searchStr;\n        },\n        set: function (value) {\n            if (typeof value === \"string\" || isNil(value)) {\n                this._searchStr = value;\n            }\n            else {\n                this._searchStr = JSON.stringify(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CompleterCmp.prototype.ngAfterViewInit = function () {\n        if (this.autofocus) {\n            this._focus = true;\n        }\n    };\n    CompleterCmp.prototype.ngAfterViewChecked = function () {\n        var _this = this;\n        if (this._focus) {\n            setTimeout(function () {\n                if (!!_this.ctrInput) {\n                    _this.ctrInput.nativeElement.focus();\n                    _this._focus = false;\n                }\n            }, 0);\n        }\n    };\n    CompleterCmp.prototype.onTouched = function () {\n        this._onTouchedCallback();\n    };\n    CompleterCmp.prototype.writeValue = function (value) {\n        this.searchStr = value;\n    };\n    CompleterCmp.prototype.registerOnChange = function (fn) {\n        this._onChangeCallback = fn;\n    };\n    CompleterCmp.prototype.registerOnTouched = function (fn) {\n        this._onTouchedCallback = fn;\n    };\n    CompleterCmp.prototype.setDisabledState = function (isDisabled) {\n        this.disableInput = isDisabled;\n    };\n    Object.defineProperty(CompleterCmp.prototype, \"datasource\", {\n        set: function (source) {\n            if (source) {\n                if (source instanceof Array) {\n                    this.dataService = this.completerService.local(source);\n                }\n                else if (typeof (source) === \"string\") {\n                    this.dataService = this.completerService.remote(source);\n                }\n                else {\n                    this.dataService = source;\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CompleterCmp.prototype, \"textNoResults\", {\n        set: function (text) {\n            if (this._textNoResults !== text) {\n                this._textNoResults = text;\n                this.displayNoResults = !!this._textNoResults && this._textNoResults !== \"false\";\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CompleterCmp.prototype, \"textSearching\", {\n        set: function (text) {\n            if (this._textSearching !== text) {\n                this._textSearching = text;\n                this.displaySearching = !!this._textSearching && this._textSearching !== \"false\";\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CompleterCmp.prototype.ngOnInit = function () {\n        var _this = this;\n        if (!this.completer) {\n            return;\n        }\n        this.completer.selected.subscribe(function (item) {\n            _this.selected.emit(item);\n        });\n        this.completer.highlighted.subscribe(function (item) {\n            _this.highlighted.emit(item);\n        });\n        this.completer.opened.subscribe(function (isOpen) {\n            _this._open = isOpen;\n            _this.opened.emit(isOpen);\n        });\n    };\n    CompleterCmp.prototype.onBlur = function () {\n        this.blurEvent.emit();\n        this.onTouched();\n        this.cdr.detectChanges();\n    };\n    CompleterCmp.prototype.onFocus = function () {\n        this.focusEvent.emit();\n        this.onTouched();\n    };\n    CompleterCmp.prototype.onClick = function (event) {\n        this.click.emit(event);\n        this.onTouched();\n    };\n    CompleterCmp.prototype.onKeyup = function (event) {\n        this.keyup.emit(event);\n        event.stopPropagation();\n    };\n    CompleterCmp.prototype.onKeydown = function (event) {\n        this.keydown.emit(event);\n        event.stopPropagation();\n    };\n    CompleterCmp.prototype.onChange = function (value) {\n        this.value = value;\n    };\n    CompleterCmp.prototype.open = function () {\n        if (!this.completer) {\n            return;\n        }\n        this.completer.open();\n    };\n    CompleterCmp.prototype.close = function () {\n        if (!this.completer) {\n            return;\n        }\n        this.completer.clear();\n    };\n    CompleterCmp.prototype.focus = function () {\n        if (this.ctrInput) {\n            this.ctrInput.nativeElement.focus();\n        }\n        else {\n            this._focus = true;\n        }\n    };\n    CompleterCmp.prototype.blur = function () {\n        if (this.ctrInput) {\n            this.ctrInput.nativeElement.blur();\n        }\n        else {\n            this._focus = false;\n        }\n    };\n    CompleterCmp.prototype.isOpen = function () {\n        return this._open;\n    };\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CompleterCmp.prototype, \"dataService\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CompleterCmp.prototype, \"inputName\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String)\n    ], CompleterCmp.prototype, \"inputId\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CompleterCmp.prototype, \"pause\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CompleterCmp.prototype, \"minSearchLength\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CompleterCmp.prototype, \"maxChars\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CompleterCmp.prototype, \"overrideSuggested\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CompleterCmp.prototype, \"clearSelected\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CompleterCmp.prototype, \"clearUnselected\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CompleterCmp.prototype, \"fillHighlighted\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CompleterCmp.prototype, \"placeholder\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CompleterCmp.prototype, \"matchClass\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CompleterCmp.prototype, \"fieldTabindex\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CompleterCmp.prototype, \"autoMatch\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CompleterCmp.prototype, \"disableInput\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CompleterCmp.prototype, \"inputClass\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CompleterCmp.prototype, \"autofocus\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CompleterCmp.prototype, \"openOnFocus\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CompleterCmp.prototype, \"openOnClick\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CompleterCmp.prototype, \"selectOnClick\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CompleterCmp.prototype, \"selectOnFocus\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CompleterCmp.prototype, \"initialValue\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object)\n    ], CompleterCmp.prototype, \"autoHighlight\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], CompleterCmp.prototype, \"selected\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], CompleterCmp.prototype, \"highlighted\", void 0);\n    __decorate([\n        Output(\"blur\"),\n        __metadata(\"design:type\", Object)\n    ], CompleterCmp.prototype, \"blurEvent\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], CompleterCmp.prototype, \"click\", void 0);\n    __decorate([\n        Output(\"focus\"),\n        __metadata(\"design:type\", Object)\n    ], CompleterCmp.prototype, \"focusEvent\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", Object)\n    ], CompleterCmp.prototype, \"opened\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], CompleterCmp.prototype, \"keyup\", void 0);\n    __decorate([\n        Output(),\n        __metadata(\"design:type\", EventEmitter)\n    ], CompleterCmp.prototype, \"keydown\", void 0);\n    __decorate([\n        ViewChild(CtrCompleter, { static: false }),\n        __metadata(\"design:type\", Object)\n    ], CompleterCmp.prototype, \"completer\", void 0);\n    __decorate([\n        ViewChild(\"ctrInput\", { static: false }),\n        __metadata(\"design:type\", Object)\n    ], CompleterCmp.prototype, \"ctrInput\", void 0);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], CompleterCmp.prototype, \"datasource\", null);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String),\n        __metadata(\"design:paramtypes\", [String])\n    ], CompleterCmp.prototype, \"textNoResults\", null);\n    __decorate([\n        Input(),\n        __metadata(\"design:type\", String),\n        __metadata(\"design:paramtypes\", [String])\n    ], CompleterCmp.prototype, \"textSearching\", null);\n    CompleterCmp = __decorate([\n        Component({\n            selector: \"ng2-completer\",\n            template: \"\\n        <div class=\\\"completer-holder\\\" ctrCompleter>\\n            <input #ctrInput [attr.id]=\\\"inputId.length > 0 ? inputId : null\\\" type=\\\"search\\\"\\n                class=\\\"completer-input\\\" ctrInput [ngClass]=\\\"inputClass\\\"\\n                [(ngModel)]=\\\"searchStr\\\" (ngModelChange)=\\\"onChange($event)\\\"\\n                [attr.name]=\\\"inputName\\\" [placeholder]=\\\"placeholder\\\"\\n                [attr.maxlength]=\\\"maxChars\\\" [tabindex]=\\\"fieldTabindex\\\" [disabled]=\\\"disableInput\\\"\\n                [clearSelected]=\\\"clearSelected\\\" [clearUnselected]=\\\"clearUnselected\\\"\\n                [overrideSuggested]=\\\"overrideSuggested\\\" [openOnFocus]=\\\"openOnFocus\\\" [fillHighlighted]=\\\"fillHighlighted\\\"\\n                [openOnClick]=\\\"openOnClick\\\" [selectOnClick]=\\\"selectOnClick\\\" [selectOnFocus]=\\\"selectOnFocus\\\"\\n                (blur)=\\\"onBlur()\\\" (focus)=\\\"onFocus()\\\" (keyup)=\\\"onKeyup($event)\\\"\\n                (keydown)=\\\"onKeydown($event)\\\" (click)=\\\"onClick($event)\\\"\\n                autocomplete=\\\"off\\\" autocorrect=\\\"off\\\" autocapitalize=\\\"off\\\" />\\n\\n            <div class=\\\"completer-dropdown-holder\\\"\\n                *ctrList=\\\"dataService;\\n                    minSearchLength: minSearchLength;\\n                    pause: pause;\\n                    autoMatch: autoMatch;\\n                    initialValue: initialValue;\\n                    autoHighlight: autoHighlight;\\n                    displaySearching: displaySearching;\\n                    let items = results;\\n                    let searchActive = searching;\\n                    let isInitialized = searchInitialized;\\n                    let isOpen = isOpen;\\\">\\n                <div class=\\\"completer-dropdown\\\" ctrDropdown\\n                    *ngIf=\\\"isInitialized && isOpen && (( items?.length > 0|| (displayNoResults && !searchActive)) || (searchActive && displaySearching))\\\">\\n                    <div *ngIf=\\\"searchActive && displaySearching\\\" class=\\\"completer-searching\\\">{{ _textSearching }}</div>\\n                    <div *ngIf=\\\"!searchActive && (!items || items?.length === 0)\\\"\\n                    class=\\\"completer-no-results\\\">{{ _textNoResults }}</div>\\n                    <div class=\\\"completer-row-wrapper\\\" *ngFor=\\\"let item of items; let rowIndex=index\\\">\\n                        <div class=\\\"completer-row\\\" [ctrRow]=\\\"rowIndex\\\" [dataItem]=\\\"item\\\">\\n                            <div *ngIf=\\\"item.image || item.image === ''\\\" class=\\\"completer-image-holder\\\">\\n                                <img *ngIf=\\\"item.image != ''\\\" src=\\\"{{item.image}}\\\" class=\\\"completer-image\\\" />\\n                                <div *ngIf=\\\"item.image === ''\\\" class=\\\"completer-image-default\\\"></div>\\n                            </div>\\n                            <div class=\\\"completer-item-text\\\"\\n                            [ngClass]=\\\"{'completer-item-text-image': item.image || item.image === '' }\\\">\\n                                <completer-list-item\\n                                class=\\\"completer-title\\\" [text]=\\\"item.title\\\" [matchClass]=\\\"matchClass\\\"\\n                                [searchStr]=\\\"searchStr\\\" [type]=\\\"'title'\\\"></completer-list-item>\\n                                <completer-list-item *ngIf=\\\"item.description && item.description != ''\\\"\\n                                class=\\\"completer-description\\\" [text]=\\\"item.description\\\"\\n                                    [matchClass]=\\\"matchClass\\\" [searchStr]=\\\"searchStr\\\" [type]=\\\"'description'\\\">\\n                                </completer-list-item>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    \",\n            styles: [\"\\n    .completer-dropdown {\\n        border-color: #ececec;\\n        border-width: 1px;\\n        border-style: solid;\\n        border-radius: 2px;\\n        width: 250px;\\n        padding: 6px;\\n        cursor: pointer;\\n        z-index: 9999;\\n        position: absolute;\\n        margin-top: -6px;\\n        background-color: #ffffff;\\n    }\\n\\n    .completer-row {\\n        padding: 5px;\\n        color: #000000;\\n        margin-bottom: 4px;\\n        clear: both;\\n        display: inline-block;\\n        width: 103%;\\n    }\\n\\n    .completer-selected-row {\\n        background-color: lightblue;\\n        color: #ffffff;\\n    }\\n\\n    .completer-description {\\n        font-size: 14px;\\n    }\\n\\n    .completer-image-default {\\n        width: 16px;\\n        height: 16px;\\n        background-image: url(\\\"demo/res/img/default.png\\\");\\n    }\\n\\n    .completer-image-holder {\\n        float: left;\\n        width: 10%;\\n    }\\n    .completer-item-text-image {\\n        float: right;\\n        width: 90%;\\n    }\\n    \"],\n            providers: [COMPLETER_CONTROL_VALUE_ACCESSOR]\n        }),\n        __metadata(\"design:paramtypes\", [CompleterService, ChangeDetectorRef])\n    ], CompleterCmp);\n    return CompleterCmp;\n}());\n\nvar providers = [\n    CompleterService,\n    LocalDataFactory,\n    RemoteDataFactory\n];\nvar Ng2CompleterModule = /** @class */ (function () {\n    function Ng2CompleterModule() {\n    }\n    Ng2CompleterModule_1 = Ng2CompleterModule;\n    Ng2CompleterModule.forRoot = function () {\n        return {\n            ngModule: Ng2CompleterModule_1,\n            providers: providers\n        };\n    };\n    Ng2CompleterModule.forChild = function () {\n        return {\n            ngModule: Ng2CompleterModule_1,\n            providers: providers\n        };\n    };\n    var Ng2CompleterModule_1;\n    Ng2CompleterModule = Ng2CompleterModule_1 = __decorate([\n        NgModule({\n            declarations: [\n                CompleterListItemCmp,\n                CtrCompleter,\n                CtrDropdown,\n                CtrInput,\n                CtrList,\n                CtrRow,\n                CompleterCmp\n            ],\n            exports: [\n                CompleterListItemCmp,\n                CtrCompleter,\n                CtrDropdown,\n                CtrInput,\n                CtrList,\n                CtrRow,\n                CompleterCmp\n            ],\n            imports: [\n                CommonModule,\n                FormsModule\n            ],\n            providers: providers\n        })\n    ], Ng2CompleterModule);\n    return Ng2CompleterModule;\n}());\n\n// Public classes.\n\n/**\n * Entry point for all public APIs of the package.\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CtrListContext as ɵa, CompleterBaseData as ɵb, LocalData, RemoteData, LocalDataFactory, RemoteDataFactory, CompleterService, CtrCompleter, CtrDropdown, CtrInput, CtrList, CtrRow, CompleterListItemCmp, CompleterCmp, Ng2CompleterModule };\n"]}