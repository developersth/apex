import { __decorate } from "tslib";
import { Component, ElementRef, Input, OnChanges, OnDestroy, OnInit, DoCheck, SimpleChange, ViewEncapsulation } from '@angular/core';
import { VgAPI } from '../../../core/services/vg-api';
// tslint:disable:no-conflicting-lifecycle
// tslint:disable:component-class-suffix
// tslint:disable:no-string-literal
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function VgScrubBarCuePoints_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 2);
} if (rf & 2) {
    var cp_r236 = ctx.$implicit;
    ɵngcc0.ɵɵstyleProp("width", cp_r236.$$style == null ? null : cp_r236.$$style.width)("left", cp_r236.$$style == null ? null : cp_r236.$$style.left);
} }
var VgScrubBarCuePoints = /** @class */ (function () {
    function VgScrubBarCuePoints(ref, API) {
        this.API = API;
        this.onLoadedMetadataCalled = false;
        this.cuePoints = [];
        this.subscriptions = [];
        this.totalCues = 0;
        this.elem = ref.nativeElement;
    }
    VgScrubBarCuePoints.prototype.ngOnInit = function () {
        var _this = this;
        if (this.API.isPlayerReady) {
            this.onPlayerReady();
        }
        else {
            this.subscriptions.push(this.API.playerReadyEvent.subscribe(function () { return _this.onPlayerReady(); }));
        }
    };
    VgScrubBarCuePoints.prototype.onPlayerReady = function () {
        this.target = this.API.getMediaById(this.vgFor);
        var onTimeUpdate = this.target.subscriptions.loadedMetadata;
        this.subscriptions.push(onTimeUpdate.subscribe(this.onLoadedMetadata.bind(this)));
        if (this.onLoadedMetadataCalled) {
            this.onLoadedMetadata();
        }
    };
    VgScrubBarCuePoints.prototype.onLoadedMetadata = function () {
        if (this.vgCuePoints) {
            // We need to transform the TextTrackCueList to Array or it doesn't work on IE11/Edge.
            // See: https://github.com/videogular/videogular2/issues/369
            this.cuePoints = [];
            for (var i = 0, l = this.vgCuePoints.length; i < l; i++) {
                var end = (this.vgCuePoints[i].endTime >= 0) ? this.vgCuePoints[i].endTime : this.vgCuePoints[i].startTime + 1;
                var cuePointDuration = (end - this.vgCuePoints[i].startTime) * 1000;
                var position = '0';
                var percentWidth = '0';
                if (typeof cuePointDuration === 'number' && this.target.time.total) {
                    percentWidth = ((cuePointDuration * 100) / this.target.time.total) + '%';
                    position = (this.vgCuePoints[i].startTime * 100 / (Math.round(this.target.time.total / 1000))) + '%';
                }
                this.vgCuePoints[i].$$style = {
                    width: percentWidth,
                    left: position
                };
                this.cuePoints.push(this.vgCuePoints[i]);
            }
        }
    };
    VgScrubBarCuePoints.prototype.updateCuePoints = function () {
        if (!this.target) {
            this.onLoadedMetadataCalled = true;
            return;
        }
        this.onLoadedMetadata();
    };
    VgScrubBarCuePoints.prototype.ngOnChanges = function (changes) {
        if (changes['vgCuePoints'].currentValue) {
            this.updateCuePoints();
        }
    };
    VgScrubBarCuePoints.prototype.ngDoCheck = function () {
        if (this.vgCuePoints) {
            var changes = this.totalCues !== this.vgCuePoints.length;
            if (changes) {
                this.totalCues = this.vgCuePoints.length;
                this.updateCuePoints();
            }
        }
    };
    VgScrubBarCuePoints.prototype.ngOnDestroy = function () {
        this.subscriptions.forEach(function (s) { return s.unsubscribe(); });
    };
    VgScrubBarCuePoints.ctorParameters = function () { return [
        { type: ElementRef },
        { type: VgAPI }
    ]; };
    __decorate([
        Input()
    ], VgScrubBarCuePoints.prototype, "vgCuePoints", void 0);
    __decorate([
        Input()
    ], VgScrubBarCuePoints.prototype, "vgFor", void 0);
VgScrubBarCuePoints.ɵfac = function VgScrubBarCuePoints_Factory(t) { return new (t || VgScrubBarCuePoints)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(VgAPI)); };
VgScrubBarCuePoints.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: VgScrubBarCuePoints, selectors: [["vg-scrub-bar-cue-points"]], inputs: { vgCuePoints: "vgCuePoints", vgFor: "vgFor" }, features: [ɵngcc0.ɵɵNgOnChangesFeature()], decls: 2, vars: 1, consts: [[1, "cue-point-container"], ["class", "cue-point", 3, "width", "left", 4, "ngFor", "ngForOf"], [1, "cue-point"]], template: function VgScrubBarCuePoints_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, VgScrubBarCuePoints_span_1_Template, 1, 4, "span", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.cuePoints);
    } }, directives: [ɵngcc1.NgForOf], styles: ["\n        vg-scrub-bar-cue-points {\n            display: flex;\n            width: 100%;\n            height: 5px;\n            pointer-events: none;\n            position: absolute;\n        }\n        vg-scrub-bar-cue-points .cue-point-container .cue-point {\n            position: absolute;\n            height: 5px;\n            background-color: rgba(255, 204, 0, 0.7);\n        }\n        vg-controls vg-scrub-bar-cue-points {\n            position: absolute;\n            top: calc(50% - 3px);\n        }\n    "], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(VgScrubBarCuePoints, [{
        type: Component,
        args: [{
                selector: 'vg-scrub-bar-cue-points',
                encapsulation: ViewEncapsulation.None,
                template: "\n        <div class=\"cue-point-container\">\n            <span *ngFor=\"let cp of cuePoints\" [style.width]=\"cp.$$style?.width\" [style.left]=\"cp.$$style?.left\"\n                  class=\"cue-point\"></span>\n        </div>\n    ",
                styles: ["\n        vg-scrub-bar-cue-points {\n            display: flex;\n            width: 100%;\n            height: 5px;\n            pointer-events: none;\n            position: absolute;\n        }\n        vg-scrub-bar-cue-points .cue-point-container .cue-point {\n            position: absolute;\n            height: 5px;\n            background-color: rgba(255, 204, 0, 0.7);\n        }\n        vg-controls vg-scrub-bar-cue-points {\n            position: absolute;\n            top: calc(50% - 3px);\n        }\n    "]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: VgAPI }]; }, { vgCuePoints: [{
            type: Input
        }], vgFor: [{
            type: Input
        }] }); })();
    return VgScrubBarCuePoints;
}());
export { VgScrubBarCuePoints };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNwcm8va3JpdHNhZGVlL1NWTi9DeWJlcnNvZnQvYXBleC9ub2RlX21vZHVsZXMvbmd4LXZpZGVvZ3VsYXIvZXNtNS9saWIvY29udHJvbHMvdmctc2NydWItYmFyL3ZnLXNjcnViLWJhci1jdWUtcG9pbnRzL3ZnLXNjcnViLWJhci1jdWUtcG9pbnRzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7QUFNQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3VEQWlGdUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBUTNCIiwiZmlsZSI6InZnLXNjcnViLWJhci1jdWUtcG9pbnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19kZWNvcmF0ZSB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBJbnB1dCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCwgRG9DaGVjaywgU2ltcGxlQ2hhbmdlLCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVmdBUEkgfSBmcm9tICcuLi8uLi8uLi9jb3JlL3NlcnZpY2VzL3ZnLWFwaSc7XG4vLyB0c2xpbnQ6ZGlzYWJsZTpuby1jb25mbGljdGluZy1saWZlY3ljbGVcbi8vIHRzbGludDpkaXNhYmxlOmNvbXBvbmVudC1jbGFzcy1zdWZmaXhcbi8vIHRzbGludDpkaXNhYmxlOm5vLXN0cmluZy1saXRlcmFsXG52YXIgVmdTY3J1YkJhckN1ZVBvaW50cyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBWZ1NjcnViQmFyQ3VlUG9pbnRzKHJlZiwgQVBJKSB7XG4gICAgICAgIHRoaXMuQVBJID0gQVBJO1xuICAgICAgICB0aGlzLm9uTG9hZGVkTWV0YWRhdGFDYWxsZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jdWVQb2ludHMgPSBbXTtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zID0gW107XG4gICAgICAgIHRoaXMudG90YWxDdWVzID0gMDtcbiAgICAgICAgdGhpcy5lbGVtID0gcmVmLm5hdGl2ZUVsZW1lbnQ7XG4gICAgfVxuICAgIFZnU2NydWJCYXJDdWVQb2ludHMucHJvdG90eXBlLm5nT25Jbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5BUEkuaXNQbGF5ZXJSZWFkeSkge1xuICAgICAgICAgICAgdGhpcy5vblBsYXllclJlYWR5KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaCh0aGlzLkFQSS5wbGF5ZXJSZWFkeUV2ZW50LnN1YnNjcmliZShmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5vblBsYXllclJlYWR5KCk7IH0pKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVmdTY3J1YkJhckN1ZVBvaW50cy5wcm90b3R5cGUub25QbGF5ZXJSZWFkeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy50YXJnZXQgPSB0aGlzLkFQSS5nZXRNZWRpYUJ5SWQodGhpcy52Z0Zvcik7XG4gICAgICAgIHZhciBvblRpbWVVcGRhdGUgPSB0aGlzLnRhcmdldC5zdWJzY3JpcHRpb25zLmxvYWRlZE1ldGFkYXRhO1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaChvblRpbWVVcGRhdGUuc3Vic2NyaWJlKHRoaXMub25Mb2FkZWRNZXRhZGF0YS5iaW5kKHRoaXMpKSk7XG4gICAgICAgIGlmICh0aGlzLm9uTG9hZGVkTWV0YWRhdGFDYWxsZWQpIHtcbiAgICAgICAgICAgIHRoaXMub25Mb2FkZWRNZXRhZGF0YSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBWZ1NjcnViQmFyQ3VlUG9pbnRzLnByb3RvdHlwZS5vbkxvYWRlZE1ldGFkYXRhID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy52Z0N1ZVBvaW50cykge1xuICAgICAgICAgICAgLy8gV2UgbmVlZCB0byB0cmFuc2Zvcm0gdGhlIFRleHRUcmFja0N1ZUxpc3QgdG8gQXJyYXkgb3IgaXQgZG9lc24ndCB3b3JrIG9uIElFMTEvRWRnZS5cbiAgICAgICAgICAgIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3ZpZGVvZ3VsYXIvdmlkZW9ndWxhcjIvaXNzdWVzLzM2OVxuICAgICAgICAgICAgdGhpcy5jdWVQb2ludHMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy52Z0N1ZVBvaW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgZW5kID0gKHRoaXMudmdDdWVQb2ludHNbaV0uZW5kVGltZSA+PSAwKSA/IHRoaXMudmdDdWVQb2ludHNbaV0uZW5kVGltZSA6IHRoaXMudmdDdWVQb2ludHNbaV0uc3RhcnRUaW1lICsgMTtcbiAgICAgICAgICAgICAgICB2YXIgY3VlUG9pbnREdXJhdGlvbiA9IChlbmQgLSB0aGlzLnZnQ3VlUG9pbnRzW2ldLnN0YXJ0VGltZSkgKiAxMDAwO1xuICAgICAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9ICcwJztcbiAgICAgICAgICAgICAgICB2YXIgcGVyY2VudFdpZHRoID0gJzAnO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY3VlUG9pbnREdXJhdGlvbiA9PT0gJ251bWJlcicgJiYgdGhpcy50YXJnZXQudGltZS50b3RhbCkge1xuICAgICAgICAgICAgICAgICAgICBwZXJjZW50V2lkdGggPSAoKGN1ZVBvaW50RHVyYXRpb24gKiAxMDApIC8gdGhpcy50YXJnZXQudGltZS50b3RhbCkgKyAnJSc7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gKHRoaXMudmdDdWVQb2ludHNbaV0uc3RhcnRUaW1lICogMTAwIC8gKE1hdGgucm91bmQodGhpcy50YXJnZXQudGltZS50b3RhbCAvIDEwMDApKSkgKyAnJSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMudmdDdWVQb2ludHNbaV0uJCRzdHlsZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHBlcmNlbnRXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogcG9zaXRpb25cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHRoaXMuY3VlUG9pbnRzLnB1c2godGhpcy52Z0N1ZVBvaW50c1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFZnU2NydWJCYXJDdWVQb2ludHMucHJvdG90eXBlLnVwZGF0ZUN1ZVBvaW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnRhcmdldCkge1xuICAgICAgICAgICAgdGhpcy5vbkxvYWRlZE1ldGFkYXRhQ2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9uTG9hZGVkTWV0YWRhdGEoKTtcbiAgICB9O1xuICAgIFZnU2NydWJCYXJDdWVQb2ludHMucHJvdG90eXBlLm5nT25DaGFuZ2VzID0gZnVuY3Rpb24gKGNoYW5nZXMpIHtcbiAgICAgICAgaWYgKGNoYW5nZXNbJ3ZnQ3VlUG9pbnRzJ10uY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUN1ZVBvaW50cygpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBWZ1NjcnViQmFyQ3VlUG9pbnRzLnByb3RvdHlwZS5uZ0RvQ2hlY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnZnQ3VlUG9pbnRzKSB7XG4gICAgICAgICAgICB2YXIgY2hhbmdlcyA9IHRoaXMudG90YWxDdWVzICE9PSB0aGlzLnZnQ3VlUG9pbnRzLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50b3RhbEN1ZXMgPSB0aGlzLnZnQ3VlUG9pbnRzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUN1ZVBvaW50cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBWZ1NjcnViQmFyQ3VlUG9pbnRzLnByb3RvdHlwZS5uZ09uRGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLmZvckVhY2goZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMudW5zdWJzY3JpYmUoKTsgfSk7XG4gICAgfTtcbiAgICBWZ1NjcnViQmFyQ3VlUG9pbnRzLmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW1xuICAgICAgICB7IHR5cGU6IEVsZW1lbnRSZWYgfSxcbiAgICAgICAgeyB0eXBlOiBWZ0FQSSB9XG4gICAgXTsgfTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgSW5wdXQoKVxuICAgIF0sIFZnU2NydWJCYXJDdWVQb2ludHMucHJvdG90eXBlLCBcInZnQ3VlUG9pbnRzXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIElucHV0KClcbiAgICBdLCBWZ1NjcnViQmFyQ3VlUG9pbnRzLnByb3RvdHlwZSwgXCJ2Z0ZvclwiLCB2b2lkIDApO1xuICAgIFZnU2NydWJCYXJDdWVQb2ludHMgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgQ29tcG9uZW50KHtcbiAgICAgICAgICAgIHNlbGVjdG9yOiAndmctc2NydWItYmFyLWN1ZS1wb2ludHMnLFxuICAgICAgICAgICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgICAgICAgICAgIHRlbXBsYXRlOiBcIlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiY3VlLXBvaW50LWNvbnRhaW5lclxcXCI+XFxuICAgICAgICAgICAgPHNwYW4gKm5nRm9yPVxcXCJsZXQgY3Agb2YgY3VlUG9pbnRzXFxcIiBbc3R5bGUud2lkdGhdPVxcXCJjcC4kJHN0eWxlPy53aWR0aFxcXCIgW3N0eWxlLmxlZnRdPVxcXCJjcC4kJHN0eWxlPy5sZWZ0XFxcIlxcbiAgICAgICAgICAgICAgICAgIGNsYXNzPVxcXCJjdWUtcG9pbnRcXFwiPjwvc3Bhbj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICBcIixcbiAgICAgICAgICAgIHN0eWxlczogW1wiXFxuICAgICAgICB2Zy1zY3J1Yi1iYXItY3VlLXBvaW50cyB7XFxuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgICAgICB3aWR0aDogMTAwJTtcXG4gICAgICAgICAgICBoZWlnaHQ6IDVweDtcXG4gICAgICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgICB9XFxuICAgICAgICB2Zy1zY3J1Yi1iYXItY3VlLXBvaW50cyAuY3VlLXBvaW50LWNvbnRhaW5lciAuY3VlLXBvaW50IHtcXG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgICAgICAgaGVpZ2h0OiA1cHg7XFxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDIwNCwgMCwgMC43KTtcXG4gICAgICAgIH1cXG4gICAgICAgIHZnLWNvbnRyb2xzIHZnLXNjcnViLWJhci1jdWUtcG9pbnRzIHtcXG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgICAgICAgdG9wOiBjYWxjKDUwJSAtIDNweCk7XFxuICAgICAgICB9XFxuICAgIFwiXVxuICAgICAgICB9KVxuICAgIF0sIFZnU2NydWJCYXJDdWVQb2ludHMpO1xuICAgIHJldHVybiBWZ1NjcnViQmFyQ3VlUG9pbnRzO1xufSgpKTtcbmV4cG9ydCB7IFZnU2NydWJCYXJDdWVQb2ludHMgfTtcbiJdfQ==