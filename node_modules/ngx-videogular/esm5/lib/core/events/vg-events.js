import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var VgEvents = /** @class */ (function () {
    function VgEvents() {
    }
    VgEvents.VG_ABORT = 'abort';
    VgEvents.VG_CAN_PLAY = 'canplay';
    VgEvents.VG_CAN_PLAY_THROUGH = 'canplaythrough';
    VgEvents.VG_DURATION_CHANGE = 'durationchange';
    VgEvents.VG_EMPTIED = 'emptied';
    VgEvents.VG_ENCRYPTED = 'encrypted';
    VgEvents.VG_ENDED = 'ended';
    VgEvents.VG_ERROR = 'error';
    VgEvents.VG_LOADED_DATA = 'loadeddata';
    VgEvents.VG_LOADED_METADATA = 'loadedmetadata';
    VgEvents.VG_LOAD_START = 'loadstart';
    VgEvents.VG_PAUSE = 'pause';
    VgEvents.VG_PLAY = 'play';
    VgEvents.VG_PLAYING = 'playing';
    VgEvents.VG_PROGRESS = 'progress';
    VgEvents.VG_RATE_CHANGE = 'ratechange';
    VgEvents.VG_SEEK = 'seek';
    VgEvents.VG_SEEKED = 'seeked';
    VgEvents.VG_SEEKING = 'seeking';
    VgEvents.VG_STALLED = 'stalled';
    VgEvents.VG_SUSPEND = 'suspend';
    VgEvents.VG_TIME_UPDATE = 'timeupdate';
    VgEvents.VG_VOLUME_CHANGE = 'volumechange';
    VgEvents.VG_WAITING = 'waiting';
    VgEvents.VG_LOAD = 'load';
    VgEvents.VG_ENTER = 'enter';
    VgEvents.VG_EXIT = 'exit';
    VgEvents.VG_START_ADS = 'startads';
    VgEvents.VG_END_ADS = 'endads';
VgEvents.ɵfac = function VgEvents_Factory(t) { return new (t || VgEvents)(); };
VgEvents.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: VgEvents, factory: function (t) { return VgEvents.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(VgEvents, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return VgEvents;
}());
export { VgEvents };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNwcm8va3JpdHNhZGVlL1NWTi9DeWJlcnNvZnQvYXBleC9ub2RlX21vZHVsZXMvbmd4LXZpZGVvZ3VsYXIvZXNtNS9saWIvY29yZS9ldmVudHMvdmctZXZlbnRzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzttQ0ErQm1DOzs7OztnREFHbEIiLCJmaWxlIjoidmctZXZlbnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19kZWNvcmF0ZSB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xudmFyIFZnRXZlbnRzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFZnRXZlbnRzKCkge1xuICAgIH1cbiAgICBWZ0V2ZW50cy5WR19BQk9SVCA9ICdhYm9ydCc7XG4gICAgVmdFdmVudHMuVkdfQ0FOX1BMQVkgPSAnY2FucGxheSc7XG4gICAgVmdFdmVudHMuVkdfQ0FOX1BMQVlfVEhST1VHSCA9ICdjYW5wbGF5dGhyb3VnaCc7XG4gICAgVmdFdmVudHMuVkdfRFVSQVRJT05fQ0hBTkdFID0gJ2R1cmF0aW9uY2hhbmdlJztcbiAgICBWZ0V2ZW50cy5WR19FTVBUSUVEID0gJ2VtcHRpZWQnO1xuICAgIFZnRXZlbnRzLlZHX0VOQ1JZUFRFRCA9ICdlbmNyeXB0ZWQnO1xuICAgIFZnRXZlbnRzLlZHX0VOREVEID0gJ2VuZGVkJztcbiAgICBWZ0V2ZW50cy5WR19FUlJPUiA9ICdlcnJvcic7XG4gICAgVmdFdmVudHMuVkdfTE9BREVEX0RBVEEgPSAnbG9hZGVkZGF0YSc7XG4gICAgVmdFdmVudHMuVkdfTE9BREVEX01FVEFEQVRBID0gJ2xvYWRlZG1ldGFkYXRhJztcbiAgICBWZ0V2ZW50cy5WR19MT0FEX1NUQVJUID0gJ2xvYWRzdGFydCc7XG4gICAgVmdFdmVudHMuVkdfUEFVU0UgPSAncGF1c2UnO1xuICAgIFZnRXZlbnRzLlZHX1BMQVkgPSAncGxheSc7XG4gICAgVmdFdmVudHMuVkdfUExBWUlORyA9ICdwbGF5aW5nJztcbiAgICBWZ0V2ZW50cy5WR19QUk9HUkVTUyA9ICdwcm9ncmVzcyc7XG4gICAgVmdFdmVudHMuVkdfUkFURV9DSEFOR0UgPSAncmF0ZWNoYW5nZSc7XG4gICAgVmdFdmVudHMuVkdfU0VFSyA9ICdzZWVrJztcbiAgICBWZ0V2ZW50cy5WR19TRUVLRUQgPSAnc2Vla2VkJztcbiAgICBWZ0V2ZW50cy5WR19TRUVLSU5HID0gJ3NlZWtpbmcnO1xuICAgIFZnRXZlbnRzLlZHX1NUQUxMRUQgPSAnc3RhbGxlZCc7XG4gICAgVmdFdmVudHMuVkdfU1VTUEVORCA9ICdzdXNwZW5kJztcbiAgICBWZ0V2ZW50cy5WR19USU1FX1VQREFURSA9ICd0aW1ldXBkYXRlJztcbiAgICBWZ0V2ZW50cy5WR19WT0xVTUVfQ0hBTkdFID0gJ3ZvbHVtZWNoYW5nZSc7XG4gICAgVmdFdmVudHMuVkdfV0FJVElORyA9ICd3YWl0aW5nJztcbiAgICBWZ0V2ZW50cy5WR19MT0FEID0gJ2xvYWQnO1xuICAgIFZnRXZlbnRzLlZHX0VOVEVSID0gJ2VudGVyJztcbiAgICBWZ0V2ZW50cy5WR19FWElUID0gJ2V4aXQnO1xuICAgIFZnRXZlbnRzLlZHX1NUQVJUX0FEUyA9ICdzdGFydGFkcyc7XG4gICAgVmdFdmVudHMuVkdfRU5EX0FEUyA9ICdlbmRhZHMnO1xuICAgIFZnRXZlbnRzID0gX19kZWNvcmF0ZShbXG4gICAgICAgIEluamVjdGFibGUoKVxuICAgIF0sIFZnRXZlbnRzKTtcbiAgICByZXR1cm4gVmdFdmVudHM7XG59KCkpO1xuZXhwb3J0IHsgVmdFdmVudHMgfTtcbiJdfQ==