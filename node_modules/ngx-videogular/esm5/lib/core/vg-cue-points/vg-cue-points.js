import { __decorate } from "tslib";
import { Directive, ElementRef, EventEmitter, OnDestroy, OnInit, Output, DoCheck } from '@angular/core';
import { VgEvents } from '../events/vg-events';
import { fromEvent } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
var VgCuePoints = /** @class */ (function () {
    function VgCuePoints(ref) {
        this.ref = ref;
        // tslint:disable:no-output-on-prefix
        this.onEnterCuePoint = new EventEmitter();
        this.onUpdateCuePoint = new EventEmitter();
        this.onExitCuePoint = new EventEmitter();
        this.onCompleteCuePoint = new EventEmitter();
        this.subscriptions = [];
        this.cuesSubscriptions = [];
        this.totalCues = 0;
    }
    VgCuePoints.prototype.ngOnInit = function () {
        this.onLoad$ = fromEvent(this.ref.nativeElement, VgEvents.VG_LOAD);
        this.subscriptions.push(this.onLoad$.subscribe(this.onLoad.bind(this)));
    };
    VgCuePoints.prototype.onLoad = function (event) {
        if (event.target && event.target.track) {
            var cues = event.target.track.cues;
            this.ref.nativeElement.cues = cues;
            this.updateCuePoints(cues);
        }
        else if (event.target && event.target.textTracks && event.target.textTracks.length) {
            var cues = event.target.textTracks[0].cues;
            this.ref.nativeElement.cues = cues;
            this.updateCuePoints(cues);
        }
    };
    VgCuePoints.prototype.updateCuePoints = function (cues) {
        this.cuesSubscriptions.forEach(function (s) { return s.unsubscribe(); });
        for (var i = 0, l = cues.length; i < l; i++) {
            this.onEnter$ = fromEvent(cues[i], VgEvents.VG_ENTER);
            this.cuesSubscriptions.push(this.onEnter$.subscribe(this.onEnter.bind(this)));
            this.onExit$ = fromEvent(cues[i], VgEvents.VG_EXIT);
            this.cuesSubscriptions.push(this.onExit$.subscribe(this.onExit.bind(this)));
        }
    };
    VgCuePoints.prototype.onEnter = function (event) {
        this.onEnterCuePoint.emit(event.target);
    };
    VgCuePoints.prototype.onExit = function (event) {
        this.onExitCuePoint.emit(event.target);
    };
    VgCuePoints.prototype.ngDoCheck = function () {
        if (this.ref.nativeElement.track && this.ref.nativeElement.track.cues) {
            var changes = this.totalCues !== this.ref.nativeElement.track.cues.length;
            if (changes) {
                this.totalCues = this.ref.nativeElement.track.cues.length;
                this.ref.nativeElement.cues = this.ref.nativeElement.track.cues;
                this.updateCuePoints(this.ref.nativeElement.track.cues);
            }
        }
    };
    VgCuePoints.prototype.ngOnDestroy = function () {
        this.subscriptions.forEach(function (s) { return s.unsubscribe(); });
    };
    VgCuePoints.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Output()
    ], VgCuePoints.prototype, "onEnterCuePoint", void 0);
    __decorate([
        Output()
    ], VgCuePoints.prototype, "onUpdateCuePoint", void 0);
    __decorate([
        Output()
    ], VgCuePoints.prototype, "onExitCuePoint", void 0);
    __decorate([
        Output()
    ], VgCuePoints.prototype, "onCompleteCuePoint", void 0);
VgCuePoints.ɵfac = function VgCuePoints_Factory(t) { return new (t || VgCuePoints)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
VgCuePoints.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: VgCuePoints, selectors: [["", "vgCuePoints", ""]], outputs: { onEnterCuePoint: "onEnterCuePoint", onUpdateCuePoint: "onUpdateCuePoint", onExitCuePoint: "onExitCuePoint", onCompleteCuePoint: "onCompleteCuePoint" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(VgCuePoints, [{
        type: Directive,
        args: [{
                selector: '[vgCuePoints]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { onEnterCuePoint: [{
            type: Output
        }], onUpdateCuePoint: [{
            type: Output
        }], onExitCuePoint: [{
            type: Output
        }], onCompleteCuePoint: [{
            type: Output
        }] }); })();
    return VgCuePoints;
}());
export { VgCuePoints };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNwcm8va3JpdHNhZGVlL1NWTi9DeWJlcnNvZnQvYXBleC9ub2RlX21vZHVsZXMvbmd4LXZpZGVvZ3VsYXIvZXNtNS9saWIvY29yZS92Zy1jdWUtcG9pbnRzL3ZnLWN1ZS1wb2ludHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBSUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NERBc0U0RDs7Ozs7Ozs7Ozs7Ozs7OztvQkFNeEMiLCJmaWxlIjoidmctY3VlLXBvaW50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fZGVjb3JhdGUgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPbkRlc3Ryb3ksIE9uSW5pdCwgT3V0cHV0LCBEb0NoZWNrIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBWZ0V2ZW50cyB9IGZyb20gJy4uL2V2ZW50cy92Zy1ldmVudHMnO1xuaW1wb3J0IHsgZnJvbUV2ZW50IH0gZnJvbSAncnhqcyc7XG52YXIgVmdDdWVQb2ludHMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVmdDdWVQb2ludHMocmVmKSB7XG4gICAgICAgIHRoaXMucmVmID0gcmVmO1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZTpuby1vdXRwdXQtb24tcHJlZml4XG4gICAgICAgIHRoaXMub25FbnRlckN1ZVBvaW50ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uVXBkYXRlQ3VlUG9pbnQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25FeGl0Q3VlUG9pbnQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25Db21wbGV0ZUN1ZVBvaW50ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSBbXTtcbiAgICAgICAgdGhpcy5jdWVzU3Vic2NyaXB0aW9ucyA9IFtdO1xuICAgICAgICB0aGlzLnRvdGFsQ3VlcyA9IDA7XG4gICAgfVxuICAgIFZnQ3VlUG9pbnRzLnByb3RvdHlwZS5uZ09uSW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5vbkxvYWQkID0gZnJvbUV2ZW50KHRoaXMucmVmLm5hdGl2ZUVsZW1lbnQsIFZnRXZlbnRzLlZHX0xPQUQpO1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaCh0aGlzLm9uTG9hZCQuc3Vic2NyaWJlKHRoaXMub25Mb2FkLmJpbmQodGhpcykpKTtcbiAgICB9O1xuICAgIFZnQ3VlUG9pbnRzLnByb3RvdHlwZS5vbkxvYWQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQudHJhY2spIHtcbiAgICAgICAgICAgIHZhciBjdWVzID0gZXZlbnQudGFyZ2V0LnRyYWNrLmN1ZXM7XG4gICAgICAgICAgICB0aGlzLnJlZi5uYXRpdmVFbGVtZW50LmN1ZXMgPSBjdWVzO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVDdWVQb2ludHMoY3Vlcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZXZlbnQudGFyZ2V0ICYmIGV2ZW50LnRhcmdldC50ZXh0VHJhY2tzICYmIGV2ZW50LnRhcmdldC50ZXh0VHJhY2tzLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGN1ZXMgPSBldmVudC50YXJnZXQudGV4dFRyYWNrc1swXS5jdWVzO1xuICAgICAgICAgICAgdGhpcy5yZWYubmF0aXZlRWxlbWVudC5jdWVzID0gY3VlcztcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQ3VlUG9pbnRzKGN1ZXMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBWZ0N1ZVBvaW50cy5wcm90b3R5cGUudXBkYXRlQ3VlUG9pbnRzID0gZnVuY3Rpb24gKGN1ZXMpIHtcbiAgICAgICAgdGhpcy5jdWVzU3Vic2NyaXB0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLnVuc3Vic2NyaWJlKCk7IH0pO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGN1ZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLm9uRW50ZXIkID0gZnJvbUV2ZW50KGN1ZXNbaV0sIFZnRXZlbnRzLlZHX0VOVEVSKTtcbiAgICAgICAgICAgIHRoaXMuY3Vlc1N1YnNjcmlwdGlvbnMucHVzaCh0aGlzLm9uRW50ZXIkLnN1YnNjcmliZSh0aGlzLm9uRW50ZXIuYmluZCh0aGlzKSkpO1xuICAgICAgICAgICAgdGhpcy5vbkV4aXQkID0gZnJvbUV2ZW50KGN1ZXNbaV0sIFZnRXZlbnRzLlZHX0VYSVQpO1xuICAgICAgICAgICAgdGhpcy5jdWVzU3Vic2NyaXB0aW9ucy5wdXNoKHRoaXMub25FeGl0JC5zdWJzY3JpYmUodGhpcy5vbkV4aXQuYmluZCh0aGlzKSkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBWZ0N1ZVBvaW50cy5wcm90b3R5cGUub25FbnRlciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB0aGlzLm9uRW50ZXJDdWVQb2ludC5lbWl0KGV2ZW50LnRhcmdldCk7XG4gICAgfTtcbiAgICBWZ0N1ZVBvaW50cy5wcm90b3R5cGUub25FeGl0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHRoaXMub25FeGl0Q3VlUG9pbnQuZW1pdChldmVudC50YXJnZXQpO1xuICAgIH07XG4gICAgVmdDdWVQb2ludHMucHJvdG90eXBlLm5nRG9DaGVjayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMucmVmLm5hdGl2ZUVsZW1lbnQudHJhY2sgJiYgdGhpcy5yZWYubmF0aXZlRWxlbWVudC50cmFjay5jdWVzKSB7XG4gICAgICAgICAgICB2YXIgY2hhbmdlcyA9IHRoaXMudG90YWxDdWVzICE9PSB0aGlzLnJlZi5uYXRpdmVFbGVtZW50LnRyYWNrLmN1ZXMubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKGNoYW5nZXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRvdGFsQ3VlcyA9IHRoaXMucmVmLm5hdGl2ZUVsZW1lbnQudHJhY2suY3Vlcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWYubmF0aXZlRWxlbWVudC5jdWVzID0gdGhpcy5yZWYubmF0aXZlRWxlbWVudC50cmFjay5jdWVzO1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlQ3VlUG9pbnRzKHRoaXMucmVmLm5hdGl2ZUVsZW1lbnQudHJhY2suY3Vlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFZnQ3VlUG9pbnRzLnByb3RvdHlwZS5uZ09uRGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLmZvckVhY2goZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMudW5zdWJzY3JpYmUoKTsgfSk7XG4gICAgfTtcbiAgICBWZ0N1ZVBvaW50cy5jdG9yUGFyYW1ldGVycyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtcbiAgICAgICAgeyB0eXBlOiBFbGVtZW50UmVmIH1cbiAgICBdOyB9O1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBPdXRwdXQoKVxuICAgIF0sIFZnQ3VlUG9pbnRzLnByb3RvdHlwZSwgXCJvbkVudGVyQ3VlUG9pbnRcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgT3V0cHV0KClcbiAgICBdLCBWZ0N1ZVBvaW50cy5wcm90b3R5cGUsIFwib25VcGRhdGVDdWVQb2ludFwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBPdXRwdXQoKVxuICAgIF0sIFZnQ3VlUG9pbnRzLnByb3RvdHlwZSwgXCJvbkV4aXRDdWVQb2ludFwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBPdXRwdXQoKVxuICAgIF0sIFZnQ3VlUG9pbnRzLnByb3RvdHlwZSwgXCJvbkNvbXBsZXRlQ3VlUG9pbnRcIiwgdm9pZCAwKTtcbiAgICBWZ0N1ZVBvaW50cyA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBEaXJlY3RpdmUoe1xuICAgICAgICAgICAgc2VsZWN0b3I6ICdbdmdDdWVQb2ludHNdJ1xuICAgICAgICB9KVxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLWNsYXNzLXN1ZmZpeFxuICAgIF0sIFZnQ3VlUG9pbnRzKTtcbiAgICByZXR1cm4gVmdDdWVQb2ludHM7XG59KCkpO1xuZXhwb3J0IHsgVmdDdWVQb2ludHMgfTtcbiJdfQ==