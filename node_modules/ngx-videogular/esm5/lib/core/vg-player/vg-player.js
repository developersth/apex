import { __decorate } from "tslib";
import { Output, Component, EventEmitter, ElementRef, HostBinding, QueryList, AfterContentInit, ContentChildren, ViewEncapsulation, OnDestroy } from '@angular/core';
import { VgAPI } from '../services/vg-api';
import { VgFullscreenAPI } from '../services/vg-fullscreen-api';
import { VgUtils } from '../services/vg-utils';
import { VgMedia } from '../vg-media/vg-media';
import { VgControlsHidden } from '../services/vg-controls-hidden';
import * as ɵngcc0 from '@angular/core';

var _c0 = ["*"];
var VgPlayer = /** @class */ (function () {
    function VgPlayer(ref, api, fsAPI, controlsHidden) {
        this.api = api;
        this.fsAPI = fsAPI;
        this.controlsHidden = controlsHidden;
        this.isFullscreen = false;
        this.isNativeFullscreen = false;
        this.areControlsHidden = false;
        this.onPlayerReady = new EventEmitter();
        this.onMediaReady = new EventEmitter();
        this.subscriptions = [];
        this.elem = ref.nativeElement;
        this.api.registerElement(this.elem);
    }
    VgPlayer.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.medias.toArray().forEach(function (media) {
            _this.api.registerMedia(media);
        });
        this.fsAPI.init(this.elem, this.medias);
        this.subscriptions.push(this.fsAPI.onChangeFullscreen.subscribe(this.onChangeFullscreen.bind(this)));
        this.subscriptions.push(this.controlsHidden.isHidden.subscribe(this.onHideControls.bind(this)));
        this.api.onPlayerReady(this.fsAPI);
        this.onPlayerReady.emit(this.api);
    };
    VgPlayer.prototype.onChangeFullscreen = function (fsState) {
        if (!this.fsAPI.nativeFullscreen) {
            this.isFullscreen = fsState;
            this.zIndex = fsState ? VgUtils.getZIndex().toString() : 'auto';
        }
        else {
            this.isNativeFullscreen = fsState;
        }
    };
    VgPlayer.prototype.onHideControls = function (hidden) {
        this.areControlsHidden = hidden;
    };
    VgPlayer.prototype.ngOnDestroy = function () {
        this.subscriptions.forEach(function (s) { return s.unsubscribe(); });
    };
    VgPlayer.ctorParameters = function () { return [
        { type: ElementRef },
        { type: VgAPI },
        { type: VgFullscreenAPI },
        { type: VgControlsHidden }
    ]; };
    __decorate([
        HostBinding('class.fullscreen')
    ], VgPlayer.prototype, "isFullscreen", void 0);
    __decorate([
        HostBinding('class.native-fullscreen')
    ], VgPlayer.prototype, "isNativeFullscreen", void 0);
    __decorate([
        HostBinding('class.controls-hidden')
    ], VgPlayer.prototype, "areControlsHidden", void 0);
    __decorate([
        HostBinding('style.z-index')
    ], VgPlayer.prototype, "zIndex", void 0);
    __decorate([
        Output()
    ], VgPlayer.prototype, "onPlayerReady", void 0);
    __decorate([
        Output()
    ], VgPlayer.prototype, "onMediaReady", void 0);
    __decorate([
        ContentChildren(VgMedia)
    ], VgPlayer.prototype, "medias", void 0);
VgPlayer.ɵfac = function VgPlayer_Factory(t) { return new (t || VgPlayer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(VgAPI), ɵngcc0.ɵɵdirectiveInject(VgFullscreenAPI), ɵngcc0.ɵɵdirectiveInject(VgControlsHidden)); };
VgPlayer.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: VgPlayer, selectors: [["vg-player"]], contentQueries: function VgPlayer_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, VgMedia, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.medias = _t);
    } }, hostVars: 8, hostBindings: function VgPlayer_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("z-index", ctx.zIndex);
        ɵngcc0.ɵɵclassProp("fullscreen", ctx.isFullscreen)("native-fullscreen", ctx.isNativeFullscreen)("controls-hidden", ctx.areControlsHidden);
    } }, outputs: { onPlayerReady: "onPlayerReady", onMediaReady: "onMediaReady" }, features: [ɵngcc0.ɵɵProvidersFeature([VgAPI, VgFullscreenAPI, VgControlsHidden])], ngContentSelectors: _c0, decls: 1, vars: 0, template: function VgPlayer_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, styles: ["\n        vg-player {\n            font-family: 'videogular';\n            position: relative;\n            display: flex;\n            width: 100%;\n            height: 100%;\n            overflow: hidden;\n            background-color: black;\n        }\n        vg-player.fullscreen {\n            position: fixed;\n            left: 0;\n            top: 0;\n        }\n        vg-player.native-fullscreen.controls-hidden {\n            cursor: none;\n        }\n    "], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(VgPlayer, [{
        type: Component,
        args: [{
                selector: 'vg-player',
                encapsulation: ViewEncapsulation.None,
                template: "<ng-content></ng-content>",
                providers: [VgAPI, VgFullscreenAPI, VgControlsHidden],
                styles: ["\n        vg-player {\n            font-family: 'videogular';\n            position: relative;\n            display: flex;\n            width: 100%;\n            height: 100%;\n            overflow: hidden;\n            background-color: black;\n        }\n        vg-player.fullscreen {\n            position: fixed;\n            left: 0;\n            top: 0;\n        }\n        vg-player.native-fullscreen.controls-hidden {\n            cursor: none;\n        }\n    "]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: VgAPI }, { type: VgFullscreenAPI }, { type: VgControlsHidden }]; }, { isFullscreen: [{
            type: HostBinding,
            args: ['class.fullscreen']
        }], isNativeFullscreen: [{
            type: HostBinding,
            args: ['class.native-fullscreen']
        }], areControlsHidden: [{
            type: HostBinding,
            args: ['class.controls-hidden']
        }], onPlayerReady: [{
            type: Output
        }], onMediaReady: [{
            type: Output
        }], zIndex: [{
            type: HostBinding,
            args: ['style.z-index']
        }], medias: [{
            type: ContentChildren,
            args: [VgMedia]
        }] }); })();
    return VgPlayer;
}());
export { VgPlayer };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNwcm8va3JpdHNhZGVlL1NWTi9DeWJlcnNvZnQvYXBleC9ub2RlX21vZHVsZXMvbmd4LXZpZGVvZ3VsYXIvZXNtNS9saWIvY29yZS92Zy1wbGF5ZXIvdmctcGxheWVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7O0FBT0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs2Q0FrRTZDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBVzVCIiwiZmlsZSI6InZnLXBsYXllci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fZGVjb3JhdGUgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE91dHB1dCwgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIEVsZW1lbnRSZWYsIEhvc3RCaW5kaW5nLCBRdWVyeUxpc3QsIEFmdGVyQ29udGVudEluaXQsIENvbnRlbnRDaGlsZHJlbiwgVmlld0VuY2Fwc3VsYXRpb24sIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVmdBUEkgfSBmcm9tICcuLi9zZXJ2aWNlcy92Zy1hcGknO1xuaW1wb3J0IHsgVmdGdWxsc2NyZWVuQVBJIH0gZnJvbSAnLi4vc2VydmljZXMvdmctZnVsbHNjcmVlbi1hcGknO1xuaW1wb3J0IHsgVmdVdGlscyB9IGZyb20gJy4uL3NlcnZpY2VzL3ZnLXV0aWxzJztcbmltcG9ydCB7IFZnTWVkaWEgfSBmcm9tICcuLi92Zy1tZWRpYS92Zy1tZWRpYSc7XG5pbXBvcnQgeyBWZ0NvbnRyb2xzSGlkZGVuIH0gZnJvbSAnLi4vc2VydmljZXMvdmctY29udHJvbHMtaGlkZGVuJztcbnZhciBWZ1BsYXllciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBWZ1BsYXllcihyZWYsIGFwaSwgZnNBUEksIGNvbnRyb2xzSGlkZGVuKSB7XG4gICAgICAgIHRoaXMuYXBpID0gYXBpO1xuICAgICAgICB0aGlzLmZzQVBJID0gZnNBUEk7XG4gICAgICAgIHRoaXMuY29udHJvbHNIaWRkZW4gPSBjb250cm9sc0hpZGRlbjtcbiAgICAgICAgdGhpcy5pc0Z1bGxzY3JlZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc05hdGl2ZUZ1bGxzY3JlZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5hcmVDb250cm9sc0hpZGRlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLm9uUGxheWVyUmVhZHkgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25NZWRpYVJlYWR5ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSBbXTtcbiAgICAgICAgdGhpcy5lbGVtID0gcmVmLm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAgIHRoaXMuYXBpLnJlZ2lzdGVyRWxlbWVudCh0aGlzLmVsZW0pO1xuICAgIH1cbiAgICBWZ1BsYXllci5wcm90b3R5cGUubmdBZnRlckNvbnRlbnRJbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLm1lZGlhcy50b0FycmF5KCkuZm9yRWFjaChmdW5jdGlvbiAobWVkaWEpIHtcbiAgICAgICAgICAgIF90aGlzLmFwaS5yZWdpc3Rlck1lZGlhKG1lZGlhKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZnNBUEkuaW5pdCh0aGlzLmVsZW0sIHRoaXMubWVkaWFzKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2godGhpcy5mc0FQSS5vbkNoYW5nZUZ1bGxzY3JlZW4uc3Vic2NyaWJlKHRoaXMub25DaGFuZ2VGdWxsc2NyZWVuLmJpbmQodGhpcykpKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2godGhpcy5jb250cm9sc0hpZGRlbi5pc0hpZGRlbi5zdWJzY3JpYmUodGhpcy5vbkhpZGVDb250cm9scy5iaW5kKHRoaXMpKSk7XG4gICAgICAgIHRoaXMuYXBpLm9uUGxheWVyUmVhZHkodGhpcy5mc0FQSSk7XG4gICAgICAgIHRoaXMub25QbGF5ZXJSZWFkeS5lbWl0KHRoaXMuYXBpKTtcbiAgICB9O1xuICAgIFZnUGxheWVyLnByb3RvdHlwZS5vbkNoYW5nZUZ1bGxzY3JlZW4gPSBmdW5jdGlvbiAoZnNTdGF0ZSkge1xuICAgICAgICBpZiAoIXRoaXMuZnNBUEkubmF0aXZlRnVsbHNjcmVlbikge1xuICAgICAgICAgICAgdGhpcy5pc0Z1bGxzY3JlZW4gPSBmc1N0YXRlO1xuICAgICAgICAgICAgdGhpcy56SW5kZXggPSBmc1N0YXRlID8gVmdVdGlscy5nZXRaSW5kZXgoKS50b1N0cmluZygpIDogJ2F1dG8nO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pc05hdGl2ZUZ1bGxzY3JlZW4gPSBmc1N0YXRlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBWZ1BsYXllci5wcm90b3R5cGUub25IaWRlQ29udHJvbHMgPSBmdW5jdGlvbiAoaGlkZGVuKSB7XG4gICAgICAgIHRoaXMuYXJlQ29udHJvbHNIaWRkZW4gPSBoaWRkZW47XG4gICAgfTtcbiAgICBWZ1BsYXllci5wcm90b3R5cGUubmdPbkRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLnVuc3Vic2NyaWJlKCk7IH0pO1xuICAgIH07XG4gICAgVmdQbGF5ZXIuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXG4gICAgICAgIHsgdHlwZTogRWxlbWVudFJlZiB9LFxuICAgICAgICB7IHR5cGU6IFZnQVBJIH0sXG4gICAgICAgIHsgdHlwZTogVmdGdWxsc2NyZWVuQVBJIH0sXG4gICAgICAgIHsgdHlwZTogVmdDb250cm9sc0hpZGRlbiB9XG4gICAgXTsgfTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgSG9zdEJpbmRpbmcoJ2NsYXNzLmZ1bGxzY3JlZW4nKVxuICAgIF0sIFZnUGxheWVyLnByb3RvdHlwZSwgXCJpc0Z1bGxzY3JlZW5cIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgSG9zdEJpbmRpbmcoJ2NsYXNzLm5hdGl2ZS1mdWxsc2NyZWVuJylcbiAgICBdLCBWZ1BsYXllci5wcm90b3R5cGUsIFwiaXNOYXRpdmVGdWxsc2NyZWVuXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIEhvc3RCaW5kaW5nKCdjbGFzcy5jb250cm9scy1oaWRkZW4nKVxuICAgIF0sIFZnUGxheWVyLnByb3RvdHlwZSwgXCJhcmVDb250cm9sc0hpZGRlblwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBIb3N0QmluZGluZygnc3R5bGUuei1pbmRleCcpXG4gICAgXSwgVmdQbGF5ZXIucHJvdG90eXBlLCBcInpJbmRleFwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBPdXRwdXQoKVxuICAgIF0sIFZnUGxheWVyLnByb3RvdHlwZSwgXCJvblBsYXllclJlYWR5XCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIE91dHB1dCgpXG4gICAgXSwgVmdQbGF5ZXIucHJvdG90eXBlLCBcIm9uTWVkaWFSZWFkeVwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBDb250ZW50Q2hpbGRyZW4oVmdNZWRpYSlcbiAgICBdLCBWZ1BsYXllci5wcm90b3R5cGUsIFwibWVkaWFzXCIsIHZvaWQgMCk7XG4gICAgVmdQbGF5ZXIgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgQ29tcG9uZW50KHtcbiAgICAgICAgICAgIHNlbGVjdG9yOiAndmctcGxheWVyJyxcbiAgICAgICAgICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogXCI8bmctY29udGVudD48L25nLWNvbnRlbnQ+XCIsXG4gICAgICAgICAgICBwcm92aWRlcnM6IFtWZ0FQSSwgVmdGdWxsc2NyZWVuQVBJLCBWZ0NvbnRyb2xzSGlkZGVuXSxcbiAgICAgICAgICAgIHN0eWxlczogW1wiXFxuICAgICAgICB2Zy1wbGF5ZXIge1xcbiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiAndmlkZW9ndWxhcic7XFxuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XFxuICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xcbiAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XFxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XFxuICAgICAgICB9XFxuICAgICAgICB2Zy1wbGF5ZXIuZnVsbHNjcmVlbiB7XFxuICAgICAgICAgICAgcG9zaXRpb246IGZpeGVkO1xcbiAgICAgICAgICAgIGxlZnQ6IDA7XFxuICAgICAgICAgICAgdG9wOiAwO1xcbiAgICAgICAgfVxcbiAgICAgICAgdmctcGxheWVyLm5hdGl2ZS1mdWxsc2NyZWVuLmNvbnRyb2xzLWhpZGRlbiB7XFxuICAgICAgICAgICAgY3Vyc29yOiBub25lO1xcbiAgICAgICAgfVxcbiAgICBcIl1cbiAgICAgICAgfSlcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGU6Y29tcG9uZW50LWNsYXNzLXN1ZmZpeFxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZTpuby1vdXRwdXQtb24tcHJlZml4XG4gICAgXSwgVmdQbGF5ZXIpO1xuICAgIHJldHVybiBWZ1BsYXllcjtcbn0oKSk7XG5leHBvcnQgeyBWZ1BsYXllciB9O1xuIl19