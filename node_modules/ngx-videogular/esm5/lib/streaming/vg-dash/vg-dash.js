import { __decorate } from "tslib";
import { Directive, ElementRef, Input, SimpleChanges, OnChanges, OnDestroy, OnInit, Output, EventEmitter } from '@angular/core';
import { VgAPI } from '../../core/services/vg-api';
import * as ɵngcc0 from '@angular/core';
var VgDASH = /** @class */ (function () {
    function VgDASH(ref, API) {
        this.ref = ref;
        this.API = API;
        this.onGetBitrates = new EventEmitter();
        this.subscriptions = [];
    }
    VgDASH.prototype.ngOnInit = function () {
        var _this = this;
        if (this.API.isPlayerReady) {
            this.onPlayerReady();
        }
        else {
            this.subscriptions.push(this.API.playerReadyEvent.subscribe(function () { return _this.onPlayerReady(); }));
        }
    };
    VgDASH.prototype.onPlayerReady = function () {
        this.vgFor = this.ref.nativeElement.getAttribute('vgFor');
        this.target = this.API.getMediaById(this.vgFor);
        this.createPlayer();
    };
    VgDASH.prototype.ngOnChanges = function (changes) {
        if (changes['vgDash'] && changes['vgDash'].currentValue) {
            this.createPlayer();
        }
        else {
            this.destroyPlayer();
        }
    };
    VgDASH.prototype.createPlayer = function () {
        var _this = this;
        if (this.dash) {
            this.destroyPlayer();
        }
        // It's a DASH source
        if (this.vgDash && ((this.vgDash.indexOf('.mpd') > -1) ||
            (this.vgDash.indexOf('mpd-time-csf') > -1))) {
            var drmOptions = void 0;
            if (this.vgDRMLicenseServer) {
                drmOptions = this.vgDRMLicenseServer;
                if (this.vgDRMToken) {
                    for (var drmServer in drmOptions) {
                        if (drmServer.hasOwnProperty(drmServer)) {
                            drmOptions[drmServer].httpRequestHeaders = { Authorization: this.vgDRMToken };
                        }
                    }
                }
            }
            this.dash = dashjs.MediaPlayer().create();
            this.dash.getDebug().setLogToBrowserConsole(false);
            this.dash.initialize(this.ref.nativeElement);
            this.dash.setAutoPlay(false);
            this.dash.on(dashjs.MediaPlayer.events.STREAM_INITIALIZED, function () {
                var audioList = _this.dash.getBitrateInfoListFor('audio');
                var videoList = _this.dash.getBitrateInfoListFor('video');
                if (audioList.length > 1) {
                    audioList.forEach(function (item) { return item.qualityIndex = ++item.qualityIndex; });
                    audioList.unshift({
                        qualityIndex: 0,
                        width: 0,
                        height: 0,
                        bitrate: 0,
                        mediaType: 'video',
                        label: 'AUTO'
                    });
                    _this.onGetBitrates.emit(audioList);
                }
                if (videoList.length > 1) {
                    videoList.forEach(function (item) { return item.qualityIndex = ++item.qualityIndex; });
                    videoList.unshift({
                        qualityIndex: 0,
                        width: 0,
                        height: 0,
                        bitrate: 0,
                        mediaType: 'video',
                        label: 'AUTO'
                    });
                    _this.onGetBitrates.emit(videoList);
                }
            });
            if (drmOptions) {
                this.dash.setProtectionData(drmOptions);
            }
            this.dash.attachSource(this.vgDash);
        }
        else {
            if (this.target) {
                this.target.pause();
                this.target.seekTime(0);
                this.ref.nativeElement.src = this.vgDash;
            }
        }
    };
    VgDASH.prototype.setBitrate = function (bitrate) {
        if (this.dash) {
            if (bitrate.qualityIndex > 0) {
                if (this.dash.getAutoSwitchQualityFor(bitrate.mediaType)) {
                    this.dash.setAutoSwitchQualityFor(bitrate.mediaType, false);
                }
                var nextIndex = bitrate.qualityIndex - 1;
                this.dash.setQualityFor(bitrate.mediaType, nextIndex);
            }
            else {
                this.dash.setAutoSwitchQualityFor(bitrate.mediaType, true);
            }
        }
    };
    VgDASH.prototype.destroyPlayer = function () {
        if (this.dash) {
            this.dash.reset();
            this.dash = null;
        }
    };
    VgDASH.prototype.ngOnDestroy = function () {
        this.subscriptions.forEach(function (s) { return s.unsubscribe(); });
        this.destroyPlayer();
    };
    VgDASH.ctorParameters = function () { return [
        { type: ElementRef },
        { type: VgAPI }
    ]; };
    __decorate([
        Input()
    ], VgDASH.prototype, "vgDash", void 0);
    __decorate([
        Input()
    ], VgDASH.prototype, "vgDRMToken", void 0);
    __decorate([
        Input()
    ], VgDASH.prototype, "vgDRMLicenseServer", void 0);
    __decorate([
        Output()
    ], VgDASH.prototype, "onGetBitrates", void 0);
VgDASH.ɵfac = function VgDASH_Factory(t) { return new (t || VgDASH)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(VgAPI)); };
VgDASH.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: VgDASH, selectors: [["", "vgDash", ""]], inputs: { vgDash: "vgDash", vgDRMToken: "vgDRMToken", vgDRMLicenseServer: "vgDRMLicenseServer" }, outputs: { onGetBitrates: "onGetBitrates" }, exportAs: ["vgDash"], features: [ɵngcc0.ɵɵNgOnChangesFeature()] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(VgDASH, [{
        type: Directive,
        args: [{
                selector: '[vgDash]',
                exportAs: 'vgDash'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: VgAPI }]; }, { onGetBitrates: [{
            type: Output
        }], vgDash: [{
            type: Input
        }], vgDRMToken: [{
            type: Input
        }], vgDRMLicenseServer: [{
            type: Input
        }] }); })();
    return VgDASH;
}());
export { VgDASH };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,