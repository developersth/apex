import { __decorate } from "tslib";
import { Component, ElementRef, Input, HostListener, OnInit, ViewEncapsulation, HostBinding, OnDestroy } from '@angular/core';
import { VgAPI } from '../../core/services/vg-api';
import { VgControlsHidden } from '../../core/services/vg-controls-hidden';
import { VgStates } from '../../core/states/vg-states';
// tslint:disable:component-class-suffix
import * as ɵngcc0 from '@angular/core';

const _c0 = ["*"];
let VgScrubBar = class VgScrubBar {
    constructor(ref, API, vgControlsHiddenState) {
        this.API = API;
        this.hideScrubBar = false;
        this.vgSlider = true;
        this.isSeeking = false;
        this.wasPlaying = false;
        this.subscriptions = [];
        this.elem = ref.nativeElement;
        this.subscriptions.push(vgControlsHiddenState.isHidden.subscribe(hide => this.onHideScrubBar(hide)));
    }
    ngOnInit() {
        if (this.API.isPlayerReady) {
            this.onPlayerReady();
        }
        else {
            this.subscriptions.push(this.API.playerReadyEvent.subscribe(() => this.onPlayerReady()));
        }
    }
    onPlayerReady() {
        this.target = this.API.getMediaById(this.vgFor);
    }
    seekStart() {
        if (this.target.canPlay) {
            this.isSeeking = true;
            if (this.target.state === VgStates.VG_PLAYING) {
                this.wasPlaying = true;
            }
            this.target.pause();
        }
    }
    seekMove(offset) {
        if (this.isSeeking) {
            const percentage = Math.max(Math.min(offset * 100 / this.elem.scrollWidth, 99.9), 0);
            this.target.time.current = percentage * this.target.time.total / 100;
            this.target.seekTime(percentage, true);
        }
    }
    seekEnd(offset) {
        this.isSeeking = false;
        if (this.target.canPlay) {
            const percentage = Math.max(Math.min(offset * 100 / this.elem.scrollWidth, 99.9), 0);
            this.target.seekTime(percentage, true);
            if (this.wasPlaying) {
                this.wasPlaying = false;
                this.target.play();
            }
        }
    }
    touchEnd() {
        this.isSeeking = false;
        if (this.wasPlaying) {
            this.wasPlaying = false;
            this.target.play();
        }
    }
    getTouchOffset(event) {
        let offsetLeft = 0;
        let element = event.target;
        while (element) {
            offsetLeft += element.offsetLeft;
            element = element.offsetParent;
        }
        return event.touches[0].pageX - offsetLeft;
    }
    onMouseDownScrubBar($event) {
        if (this.target) {
            if (!this.target.isLive) {
                if (!this.vgSlider) {
                    this.seekEnd($event.offsetX);
                }
                else {
                    this.seekStart();
                }
            }
        }
    }
    onMouseMoveScrubBar($event) {
        if (this.target) {
            if (!this.target.isLive && this.vgSlider && this.isSeeking) {
                this.seekMove($event.offsetX);
            }
        }
    }
    onMouseUpScrubBar($event) {
        if (this.target) {
            if (!this.target.isLive && this.vgSlider && this.isSeeking) {
                this.seekEnd($event.offsetX);
            }
        }
    }
    onTouchStartScrubBar($event) {
        if (this.target) {
            if (!this.target.isLive) {
                if (!this.vgSlider) {
                    this.seekEnd(this.getTouchOffset($event));
                }
                else {
                    this.seekStart();
                }
            }
        }
    }
    onTouchMoveScrubBar($event) {
        if (this.target) {
            if (!this.target.isLive && this.vgSlider && this.isSeeking) {
                this.seekMove(this.getTouchOffset($event));
            }
        }
    }
    // @ts-ignore
    onTouchCancelScrubBar($event) {
        if (this.target) {
            if (!this.target.isLive && this.vgSlider && this.isSeeking) {
                this.touchEnd();
            }
        }
    }
    // @ts-ignore
    onTouchEndScrubBar($event) {
        if (this.target) {
            if (!this.target.isLive && this.vgSlider && this.isSeeking) {
                this.touchEnd();
            }
        }
    }
    arrowAdjustVolume(event) {
        if (this.target) {
            if (event.keyCode === 38 || event.keyCode === 39) {
                event.preventDefault();
                this.target.seekTime((this.target.time.current + 5000) / 1000, false);
            }
            else if (event.keyCode === 37 || event.keyCode === 40) {
                event.preventDefault();
                this.target.seekTime((this.target.time.current - 5000) / 1000, false);
            }
        }
    }
    getPercentage() {
        return this.target ? ((this.target.time.current * 100) / this.target.time.total) + '%' : '0%';
    }
    onHideScrubBar(hide) {
        this.hideScrubBar = hide;
    }
    ngOnDestroy() {
        this.subscriptions.forEach(s => s.unsubscribe());
    }
};
VgScrubBar.ɵfac = function VgScrubBar_Factory(t) { return new (t || VgScrubBar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(VgAPI), ɵngcc0.ɵɵdirectiveInject(VgControlsHidden)); };
VgScrubBar.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: VgScrubBar, selectors: [["vg-scrub-bar"]], hostVars: 2, hostBindings: function VgScrubBar_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("mousedown", function VgScrubBar_mousedown_HostBindingHandler($event) { return ctx.onMouseDownScrubBar($event); })("mousemove", function VgScrubBar_mousemove_HostBindingHandler($event) { return ctx.onMouseMoveScrubBar($event); }, false, ɵngcc0.ɵɵresolveDocument)("mouseup", function VgScrubBar_mouseup_HostBindingHandler($event) { return ctx.onMouseUpScrubBar($event); }, false, ɵngcc0.ɵɵresolveDocument)("touchstart", function VgScrubBar_touchstart_HostBindingHandler($event) { return ctx.onTouchStartScrubBar($event); })("touchmove", function VgScrubBar_touchmove_HostBindingHandler($event) { return ctx.onTouchMoveScrubBar($event); }, false, ɵngcc0.ɵɵresolveDocument)("touchcancel", function VgScrubBar_touchcancel_HostBindingHandler($event) { return ctx.onTouchCancelScrubBar($event); }, false, ɵngcc0.ɵɵresolveDocument)("touchend", function VgScrubBar_touchend_HostBindingHandler($event) { return ctx.onTouchEndScrubBar($event); }, false, ɵngcc0.ɵɵresolveDocument)("keydown", function VgScrubBar_keydown_HostBindingHandler($event) { return ctx.arrowAdjustVolume($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("hide", ctx.hideScrubBar);
    } }, inputs: { vgSlider: "vgSlider", vgFor: "vgFor" }, ngContentSelectors: _c0, decls: 2, vars: 2, consts: [["tabindex", "0", "role", "slider", "aria-label", "scrub bar", "aria-level", "polite", "aria-valuemin", "0", "aria-valuemax", "100", 1, "scrubBar"]], template: function VgScrubBar_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-valuenow", ctx.getPercentage())("aria-valuetext", ctx.getPercentage() + "%");
    } }, styles: ["\n        vg-scrub-bar {\n            -webkit-touch-callout: none;\n            -webkit-user-select: none;\n            -moz-user-select: none;\n            -ms-user-select: none;\n            user-select: none;\n            position: absolute;\n            width: 100%;\n            height: 5px;\n            bottom: 50px;\n            margin: 0;\n            cursor: pointer;\n            align-items: center;\n            background: rgba(0, 0, 0, 0.75);\n            z-index: 250;\n            -webkit-transition: bottom 1s, opacity 0.5s;\n            -khtml-transition: bottom 1s, opacity 0.5s;\n            -moz-transition: bottom 1s, opacity 0.5s;\n            -ms-transition: bottom 1s, opacity 0.5s;\n            transition: bottom 1s, opacity 0.5s;\n        }\n        vg-scrub-bar .scrubBar {\n            position: relative;\n            display: flex;\n            flex-grow: 1;\n            align-items: center;\n            height: 100%;\n        }\n        vg-controls vg-scrub-bar {\n            position: relative;\n            bottom: 0;\n            background: transparent;\n            height: 50px;\n            flex-grow: 1;\n            flex-basis: 0;\n            margin: 0 10px;\n            -webkit-transition: initial;\n            -khtml-transition: initial;\n            -moz-transition: initial;\n            -ms-transition: initial;\n            transition: initial;\n        }\n        vg-scrub-bar.hide {\n            bottom: 0;\n            opacity: 0;\n        }\n        vg-controls vg-scrub-bar.hide {\n            bottom: initial;\n            opacity: initial;\n        }\n    "], encapsulation: 2 });
VgScrubBar.ctorParameters = () => [
    { type: ElementRef },
    { type: VgAPI },
    { type: VgControlsHidden }
];
__decorate([
    HostBinding('class.hide')
], VgScrubBar.prototype, "hideScrubBar", void 0);
__decorate([
    Input()
], VgScrubBar.prototype, "vgFor", void 0);
__decorate([
    Input()
], VgScrubBar.prototype, "vgSlider", void 0);
__decorate([
    HostListener('mousedown', ['$event'])
], VgScrubBar.prototype, "onMouseDownScrubBar", null);
__decorate([
    HostListener('document:mousemove', ['$event'])
], VgScrubBar.prototype, "onMouseMoveScrubBar", null);
__decorate([
    HostListener('document:mouseup', ['$event'])
], VgScrubBar.prototype, "onMouseUpScrubBar", null);
__decorate([
    HostListener('touchstart', ['$event'])
], VgScrubBar.prototype, "onTouchStartScrubBar", null);
__decorate([
    HostListener('document:touchmove', ['$event'])
], VgScrubBar.prototype, "onTouchMoveScrubBar", null);
__decorate([
    HostListener('document:touchcancel', ['$event'])
], VgScrubBar.prototype, "onTouchCancelScrubBar", null);
__decorate([
    HostListener('document:touchend', ['$event'])
], VgScrubBar.prototype, "onTouchEndScrubBar", null);
__decorate([
    HostListener('keydown', ['$event'])
], VgScrubBar.prototype, "arrowAdjustVolume", null);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(VgScrubBar, [{
        type: Component,
        args: [{
                selector: 'vg-scrub-bar',
                encapsulation: ViewEncapsulation.None,
                template: `
        <div class="scrubBar"
             tabindex="0"
             role="slider"
             aria-label="scrub bar"
             aria-level="polite"
             [attr.aria-valuenow]="getPercentage()"
             aria-valuemin="0"
             aria-valuemax="100"
             [attr.aria-valuetext]="getPercentage() + '%'">
            <ng-content></ng-content>
        </div>
    `,
                styles: [`
        vg-scrub-bar {
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            position: absolute;
            width: 100%;
            height: 5px;
            bottom: 50px;
            margin: 0;
            cursor: pointer;
            align-items: center;
            background: rgba(0, 0, 0, 0.75);
            z-index: 250;
            -webkit-transition: bottom 1s, opacity 0.5s;
            -khtml-transition: bottom 1s, opacity 0.5s;
            -moz-transition: bottom 1s, opacity 0.5s;
            -ms-transition: bottom 1s, opacity 0.5s;
            transition: bottom 1s, opacity 0.5s;
        }
        vg-scrub-bar .scrubBar {
            position: relative;
            display: flex;
            flex-grow: 1;
            align-items: center;
            height: 100%;
        }
        vg-controls vg-scrub-bar {
            position: relative;
            bottom: 0;
            background: transparent;
            height: 50px;
            flex-grow: 1;
            flex-basis: 0;
            margin: 0 10px;
            -webkit-transition: initial;
            -khtml-transition: initial;
            -moz-transition: initial;
            -ms-transition: initial;
            transition: initial;
        }
        vg-scrub-bar.hide {
            bottom: 0;
            opacity: 0;
        }
        vg-controls vg-scrub-bar.hide {
            bottom: initial;
            opacity: initial;
        }
    `]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: VgAPI }, { type: VgControlsHidden }]; }, { hideScrubBar: [{
            type: HostBinding,
            args: ['class.hide']
        }], vgSlider: [{
            type: Input
        }], onMouseDownScrubBar: [{
            type: HostListener,
            args: ['mousedown', ['$event']]
        }], onMouseMoveScrubBar: [{
            type: HostListener,
            args: ['document:mousemove', ['$event']]
        }], onMouseUpScrubBar: [{
            type: HostListener,
            args: ['document:mouseup', ['$event']]
        }], onTouchStartScrubBar: [{
            type: HostListener,
            args: ['touchstart', ['$event']]
        }], onTouchMoveScrubBar: [{
            type: HostListener,
            args: ['document:touchmove', ['$event']]
        }], onTouchCancelScrubBar: [{
            type: HostListener,
            args: ['document:touchcancel', ['$event']]
        }], onTouchEndScrubBar: [{
            type: HostListener,
            args: ['document:touchend', ['$event']]
        }], arrowAdjustVolume: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }], vgFor: [{
            type: Input
        }] }); })();
export { VgScrubBar };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,