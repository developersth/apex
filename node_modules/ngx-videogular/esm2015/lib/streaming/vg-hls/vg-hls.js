import { __decorate } from "tslib";
import { Directive, ElementRef, Input, SimpleChanges, OnChanges, OnDestroy, OnInit, Output, EventEmitter } from '@angular/core';
import { VgAPI } from '../../core/services/vg-api';
import * as ɵngcc0 from '@angular/core';
let VgHLS = 
// tslint:disable:no-string-literal
// tslint:disable:directive-class-suffix
// tslint:disable:no-output-on-prefix
class VgHLS {
    constructor(ref, API) {
        this.ref = ref;
        this.API = API;
        this.vgHlsHeaders = {};
        this.onGetBitrates = new EventEmitter();
        this.subscriptions = [];
    }
    ngOnInit() {
        if (this.API.isPlayerReady) {
            this.onPlayerReady();
        }
        else {
            this.subscriptions.push(this.API.playerReadyEvent.subscribe(() => this.onPlayerReady()));
        }
    }
    onPlayerReady() {
        this.crossorigin = this.ref.nativeElement.getAttribute('crossorigin');
        this.preload = this.ref.nativeElement.getAttribute('preload') !== 'none';
        this.vgFor = this.ref.nativeElement.getAttribute('vgFor');
        if (this.vgFor) {
            this.target = this.API.getMediaById(this.vgFor);
        }
        else {
            this.target = this.API.getDefaultMedia();
        }
        this.config = {
            autoStartLoad: this.preload
        };
        // @ts-ignore
        this.config.xhrSetup = (xhr, url) => {
            // Send cookies
            if (this.crossorigin === 'use-credentials') {
                xhr.withCredentials = true;
            }
            for (const key of Object.keys(this.vgHlsHeaders)) {
                xhr.setRequestHeader(key, this.vgHlsHeaders[key]);
            }
        };
        this.createPlayer();
        if (!this.preload) {
            this.subscriptions.push(this.API.subscriptions.play.subscribe(() => {
                if (this.hls) {
                    this.hls.startLoad(0);
                }
            }));
        }
    }
    ngOnChanges(changes) {
        if (changes['vgHls'] && changes['vgHls'].currentValue) {
            this.createPlayer();
        }
        else if (changes['vgHlsHeaders'] && changes['vgHlsHeaders'].currentValue) {
            // Do nothing. We don't want to create a or destroy a player if the headers change.
        }
        else {
            this.destroyPlayer();
        }
    }
    createPlayer() {
        if (this.hls) {
            this.destroyPlayer();
        }
        // It's a HLS source
        if (this.vgHls && this.vgHls.indexOf('m3u8') > -1 && Hls.isSupported() && this.API.isPlayerReady) {
            const video = this.ref.nativeElement;
            this.hls = new Hls(this.config);
            // @ts-ignore
            this.hls.on(Hls.Events.MANIFEST_PARSED, (event, data) => {
                const videoList = [];
                videoList.push({
                    qualityIndex: 0,
                    width: 0,
                    height: 0,
                    bitrate: 0,
                    mediaType: 'video',
                    label: 'AUTO'
                });
                data.levels.forEach((item, index) => {
                    videoList.push({
                        qualityIndex: ++index,
                        width: item.width,
                        height: item.height,
                        bitrate: item.bitrate,
                        mediaType: 'video',
                        label: item.name
                    });
                });
                this.onGetBitrates.emit(videoList);
            });
            // @ts-ignore
            this.hls.on(Hls.Events.LEVEL_LOADED, (event, data) => {
                this.target.isLive = data.details.live;
            });
            this.hls.loadSource(this.vgHls);
            this.hls.attachMedia(video);
        }
        else {
            if (this.target && !!this.target.pause) {
                this.target.pause();
                this.target.seekTime(0);
                this.ref.nativeElement.src = this.vgHls;
            }
        }
    }
    setBitrate(bitrate) {
        if (this.hls) {
            this.hls.nextLevel = bitrate.qualityIndex - 1;
        }
    }
    destroyPlayer() {
        if (this.hls) {
            this.hls.destroy();
            this.hls = null;
        }
    }
    ngOnDestroy() {
        this.subscriptions.forEach(s => s.unsubscribe());
        this.destroyPlayer();
        delete this.hls;
    }
};
VgHLS.ɵfac = function VgHLS_Factory(t) { return new (t || VgHLS)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(VgAPI)); };
VgHLS.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: VgHLS, selectors: [["", "vgHls", ""]], inputs: { vgHlsHeaders: "vgHlsHeaders", vgHls: "vgHls" }, outputs: { onGetBitrates: "onGetBitrates" }, exportAs: ["vgHls"], features: [ɵngcc0.ɵɵNgOnChangesFeature()] });
VgHLS.ctorParameters = () => [
    { type: ElementRef },
    { type: VgAPI }
];
__decorate([
    Input()
], VgHLS.prototype, "vgHls", void 0);
__decorate([
    Input()
], VgHLS.prototype, "vgHlsHeaders", void 0);
__decorate([
    Output()
], VgHLS.prototype, "onGetBitrates", void 0);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(VgHLS, [{
        type: Directive,
        args: [{
                selector: '[vgHls]',
                exportAs: 'vgHls'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: VgAPI }]; }, { vgHlsHeaders: [{
            type: Input
        }], onGetBitrates: [{
            type: Output
        }], vgHls: [{
            type: Input
        }] }); })();
export { VgHLS };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNwcm8va3JpdHNhZGVlL1NWTi9DeWJlcnNvZnQvYXBleC9ub2RlX21vZHVsZXMvbmd4LXZpZGVvZ3VsYXIvZXNtMjAxNS9saWIvc3RyZWFtaW5nL3ZnLWhscy92Zy1obHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFHQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs4UEE2SEU7Ozs7Ozs7Ozs7Ozs7NkNBYTJDOzs7Ozs7Ozs7Ozs7O29CQVNuQyIsImZpbGUiOiJ2Zy1obHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2RlY29yYXRlIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBTaW1wbGVDaGFuZ2VzLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVmdBUEkgfSBmcm9tICcuLi8uLi9jb3JlL3NlcnZpY2VzL3ZnLWFwaSc7XG5sZXQgVmdITFMgPSBcbi8vIHRzbGludDpkaXNhYmxlOm5vLXN0cmluZy1saXRlcmFsXG4vLyB0c2xpbnQ6ZGlzYWJsZTpkaXJlY3RpdmUtY2xhc3Mtc3VmZml4XG4vLyB0c2xpbnQ6ZGlzYWJsZTpuby1vdXRwdXQtb24tcHJlZml4XG5jbGFzcyBWZ0hMUyB7XG4gICAgY29uc3RydWN0b3IocmVmLCBBUEkpIHtcbiAgICAgICAgdGhpcy5yZWYgPSByZWY7XG4gICAgICAgIHRoaXMuQVBJID0gQVBJO1xuICAgICAgICB0aGlzLnZnSGxzSGVhZGVycyA9IHt9O1xuICAgICAgICB0aGlzLm9uR2V0Qml0cmF0ZXMgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucyA9IFtdO1xuICAgIH1cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuQVBJLmlzUGxheWVyUmVhZHkpIHtcbiAgICAgICAgICAgIHRoaXMub25QbGF5ZXJSZWFkeSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2godGhpcy5BUEkucGxheWVyUmVhZHlFdmVudC5zdWJzY3JpYmUoKCkgPT4gdGhpcy5vblBsYXllclJlYWR5KCkpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvblBsYXllclJlYWR5KCkge1xuICAgICAgICB0aGlzLmNyb3Nzb3JpZ2luID0gdGhpcy5yZWYubmF0aXZlRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2Nyb3Nzb3JpZ2luJyk7XG4gICAgICAgIHRoaXMucHJlbG9hZCA9IHRoaXMucmVmLm5hdGl2ZUVsZW1lbnQuZ2V0QXR0cmlidXRlKCdwcmVsb2FkJykgIT09ICdub25lJztcbiAgICAgICAgdGhpcy52Z0ZvciA9IHRoaXMucmVmLm5hdGl2ZUVsZW1lbnQuZ2V0QXR0cmlidXRlKCd2Z0ZvcicpO1xuICAgICAgICBpZiAodGhpcy52Z0Zvcikge1xuICAgICAgICAgICAgdGhpcy50YXJnZXQgPSB0aGlzLkFQSS5nZXRNZWRpYUJ5SWQodGhpcy52Z0Zvcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRhcmdldCA9IHRoaXMuQVBJLmdldERlZmF1bHRNZWRpYSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29uZmlnID0ge1xuICAgICAgICAgICAgYXV0b1N0YXJ0TG9hZDogdGhpcy5wcmVsb2FkXG4gICAgICAgIH07XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdGhpcy5jb25maWcueGhyU2V0dXAgPSAoeGhyLCB1cmwpID0+IHtcbiAgICAgICAgICAgIC8vIFNlbmQgY29va2llc1xuICAgICAgICAgICAgaWYgKHRoaXMuY3Jvc3NvcmlnaW4gPT09ICd1c2UtY3JlZGVudGlhbHMnKSB7XG4gICAgICAgICAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyh0aGlzLnZnSGxzSGVhZGVycykpIHtcbiAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihrZXksIHRoaXMudmdIbHNIZWFkZXJzW2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNyZWF0ZVBsYXllcigpO1xuICAgICAgICBpZiAoIXRoaXMucHJlbG9hZCkge1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2godGhpcy5BUEkuc3Vic2NyaXB0aW9ucy5wbGF5LnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaGxzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGxzLnN0YXJ0TG9hZCgwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlcykge1xuICAgICAgICBpZiAoY2hhbmdlc1sndmdIbHMnXSAmJiBjaGFuZ2VzWyd2Z0hscyddLmN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVQbGF5ZXIoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjaGFuZ2VzWyd2Z0hsc0hlYWRlcnMnXSAmJiBjaGFuZ2VzWyd2Z0hsc0hlYWRlcnMnXS5jdXJyZW50VmFsdWUpIHtcbiAgICAgICAgICAgIC8vIERvIG5vdGhpbmcuIFdlIGRvbid0IHdhbnQgdG8gY3JlYXRlIGEgb3IgZGVzdHJveSBhIHBsYXllciBpZiB0aGUgaGVhZGVycyBjaGFuZ2UuXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRlc3Ryb3lQbGF5ZXIoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjcmVhdGVQbGF5ZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLmhscykge1xuICAgICAgICAgICAgdGhpcy5kZXN0cm95UGxheWVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSXQncyBhIEhMUyBzb3VyY2VcbiAgICAgICAgaWYgKHRoaXMudmdIbHMgJiYgdGhpcy52Z0hscy5pbmRleE9mKCdtM3U4JykgPiAtMSAmJiBIbHMuaXNTdXBwb3J0ZWQoKSAmJiB0aGlzLkFQSS5pc1BsYXllclJlYWR5KSB7XG4gICAgICAgICAgICBjb25zdCB2aWRlbyA9IHRoaXMucmVmLm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAgICAgICB0aGlzLmhscyA9IG5ldyBIbHModGhpcy5jb25maWcpO1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgdGhpcy5obHMub24oSGxzLkV2ZW50cy5NQU5JRkVTVF9QQVJTRUQsIChldmVudCwgZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZpZGVvTGlzdCA9IFtdO1xuICAgICAgICAgICAgICAgIHZpZGVvTGlzdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgcXVhbGl0eUluZGV4OiAwLFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMCxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAwLFxuICAgICAgICAgICAgICAgICAgICBiaXRyYXRlOiAwLFxuICAgICAgICAgICAgICAgICAgICBtZWRpYVR5cGU6ICd2aWRlbycsXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnQVVUTydcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBkYXRhLmxldmVscy5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB2aWRlb0xpc3QucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBxdWFsaXR5SW5kZXg6ICsraW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogaXRlbS53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogaXRlbS5oZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICBiaXRyYXRlOiBpdGVtLmJpdHJhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZWRpYVR5cGU6ICd2aWRlbycsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogaXRlbS5uYW1lXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMub25HZXRCaXRyYXRlcy5lbWl0KHZpZGVvTGlzdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIHRoaXMuaGxzLm9uKEhscy5FdmVudHMuTEVWRUxfTE9BREVELCAoZXZlbnQsIGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldC5pc0xpdmUgPSBkYXRhLmRldGFpbHMubGl2ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5obHMubG9hZFNvdXJjZSh0aGlzLnZnSGxzKTtcbiAgICAgICAgICAgIHRoaXMuaGxzLmF0dGFjaE1lZGlhKHZpZGVvKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnRhcmdldCAmJiAhIXRoaXMudGFyZ2V0LnBhdXNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXQucGF1c2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldC5zZWVrVGltZSgwKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlZi5uYXRpdmVFbGVtZW50LnNyYyA9IHRoaXMudmdIbHM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0Qml0cmF0ZShiaXRyYXRlKSB7XG4gICAgICAgIGlmICh0aGlzLmhscykge1xuICAgICAgICAgICAgdGhpcy5obHMubmV4dExldmVsID0gYml0cmF0ZS5xdWFsaXR5SW5kZXggLSAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRlc3Ryb3lQbGF5ZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLmhscykge1xuICAgICAgICAgICAgdGhpcy5obHMuZGVzdHJveSgpO1xuICAgICAgICAgICAgdGhpcy5obHMgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMuZm9yRWFjaChzID0+IHMudW5zdWJzY3JpYmUoKSk7XG4gICAgICAgIHRoaXMuZGVzdHJveVBsYXllcigpO1xuICAgICAgICBkZWxldGUgdGhpcy5obHM7XG4gICAgfVxufTtcblZnSExTLmN0b3JQYXJhbWV0ZXJzID0gKCkgPT4gW1xuICAgIHsgdHlwZTogRWxlbWVudFJlZiB9LFxuICAgIHsgdHlwZTogVmdBUEkgfVxuXTtcbl9fZGVjb3JhdGUoW1xuICAgIElucHV0KClcbl0sIFZnSExTLnByb3RvdHlwZSwgXCJ2Z0hsc1wiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgSW5wdXQoKVxuXSwgVmdITFMucHJvdG90eXBlLCBcInZnSGxzSGVhZGVyc1wiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgT3V0cHV0KClcbl0sIFZnSExTLnByb3RvdHlwZSwgXCJvbkdldEJpdHJhdGVzXCIsIHZvaWQgMCk7XG5WZ0hMUyA9IF9fZGVjb3JhdGUoW1xuICAgIERpcmVjdGl2ZSh7XG4gICAgICAgIHNlbGVjdG9yOiAnW3ZnSGxzXScsXG4gICAgICAgIGV4cG9ydEFzOiAndmdIbHMnXG4gICAgfSlcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZTpuby1zdHJpbmctbGl0ZXJhbFxuICAgIC8vIHRzbGludDpkaXNhYmxlOmRpcmVjdGl2ZS1jbGFzcy1zdWZmaXhcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZTpuby1vdXRwdXQtb24tcHJlZml4XG5dLCBWZ0hMUyk7XG5leHBvcnQgeyBWZ0hMUyB9O1xuIl19