import { __decorate } from "tslib";
import { Directive, ElementRef, Input, SimpleChanges, OnChanges, OnDestroy, OnInit, Output, EventEmitter } from '@angular/core';
import { VgAPI } from '../../core/services/vg-api';
import * as ɵngcc0 from '@angular/core';
let VgDASH = 
// tslint:disable:directive-class-suffix
// tslint:disable:no-output-on-prefix
// tslint:disable:no-string-literal
class VgDASH {
    constructor(ref, API) {
        this.ref = ref;
        this.API = API;
        this.onGetBitrates = new EventEmitter();
        this.subscriptions = [];
    }
    ngOnInit() {
        if (this.API.isPlayerReady) {
            this.onPlayerReady();
        }
        else {
            this.subscriptions.push(this.API.playerReadyEvent.subscribe(() => this.onPlayerReady()));
        }
    }
    onPlayerReady() {
        this.vgFor = this.ref.nativeElement.getAttribute('vgFor');
        this.target = this.API.getMediaById(this.vgFor);
        this.createPlayer();
    }
    ngOnChanges(changes) {
        if (changes['vgDash'] && changes['vgDash'].currentValue) {
            this.createPlayer();
        }
        else {
            this.destroyPlayer();
        }
    }
    createPlayer() {
        if (this.dash) {
            this.destroyPlayer();
        }
        // It's a DASH source
        if (this.vgDash && ((this.vgDash.indexOf('.mpd') > -1) ||
            (this.vgDash.indexOf('mpd-time-csf') > -1))) {
            let drmOptions;
            if (this.vgDRMLicenseServer) {
                drmOptions = this.vgDRMLicenseServer;
                if (this.vgDRMToken) {
                    for (const drmServer in drmOptions) {
                        if (drmServer.hasOwnProperty(drmServer)) {
                            drmOptions[drmServer].httpRequestHeaders = { Authorization: this.vgDRMToken };
                        }
                    }
                }
            }
            this.dash = dashjs.MediaPlayer().create();
            this.dash.getDebug().setLogToBrowserConsole(false);
            this.dash.initialize(this.ref.nativeElement);
            this.dash.setAutoPlay(false);
            this.dash.on(dashjs.MediaPlayer.events.STREAM_INITIALIZED, () => {
                const audioList = this.dash.getBitrateInfoListFor('audio');
                const videoList = this.dash.getBitrateInfoListFor('video');
                if (audioList.length > 1) {
                    audioList.forEach(item => item.qualityIndex = ++item.qualityIndex);
                    audioList.unshift({
                        qualityIndex: 0,
                        width: 0,
                        height: 0,
                        bitrate: 0,
                        mediaType: 'video',
                        label: 'AUTO'
                    });
                    this.onGetBitrates.emit(audioList);
                }
                if (videoList.length > 1) {
                    videoList.forEach(item => item.qualityIndex = ++item.qualityIndex);
                    videoList.unshift({
                        qualityIndex: 0,
                        width: 0,
                        height: 0,
                        bitrate: 0,
                        mediaType: 'video',
                        label: 'AUTO'
                    });
                    this.onGetBitrates.emit(videoList);
                }
            });
            if (drmOptions) {
                this.dash.setProtectionData(drmOptions);
            }
            this.dash.attachSource(this.vgDash);
        }
        else {
            if (this.target) {
                this.target.pause();
                this.target.seekTime(0);
                this.ref.nativeElement.src = this.vgDash;
            }
        }
    }
    setBitrate(bitrate) {
        if (this.dash) {
            if (bitrate.qualityIndex > 0) {
                if (this.dash.getAutoSwitchQualityFor(bitrate.mediaType)) {
                    this.dash.setAutoSwitchQualityFor(bitrate.mediaType, false);
                }
                const nextIndex = bitrate.qualityIndex - 1;
                this.dash.setQualityFor(bitrate.mediaType, nextIndex);
            }
            else {
                this.dash.setAutoSwitchQualityFor(bitrate.mediaType, true);
            }
        }
    }
    destroyPlayer() {
        if (this.dash) {
            this.dash.reset();
            this.dash = null;
        }
    }
    ngOnDestroy() {
        this.subscriptions.forEach(s => s.unsubscribe());
        this.destroyPlayer();
    }
};
VgDASH.ɵfac = function VgDASH_Factory(t) { return new (t || VgDASH)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(VgAPI)); };
VgDASH.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: VgDASH, selectors: [["", "vgDash", ""]], inputs: { vgDash: "vgDash", vgDRMToken: "vgDRMToken", vgDRMLicenseServer: "vgDRMLicenseServer" }, outputs: { onGetBitrates: "onGetBitrates" }, exportAs: ["vgDash"], features: [ɵngcc0.ɵɵNgOnChangesFeature()] });
VgDASH.ctorParameters = () => [
    { type: ElementRef },
    { type: VgAPI }
];
__decorate([
    Input()
], VgDASH.prototype, "vgDash", void 0);
__decorate([
    Input()
], VgDASH.prototype, "vgDRMToken", void 0);
__decorate([
    Input()
], VgDASH.prototype, "vgDRMLicenseServer", void 0);
__decorate([
    Output()
], VgDASH.prototype, "onGetBitrates", void 0);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(VgDASH, [{
        type: Directive,
        args: [{
                selector: '[vgDash]',
                exportAs: 'vgDash'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: VgAPI }]; }, { onGetBitrates: [{
            type: Output
        }], vgDash: [{
            type: Input
        }], vgDRMToken: [{
            type: Input
        }], vgDRMLicenseServer: [{
            type: Input
        }] }); })();
export { VgDASH };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNwcm8va3JpdHNhZGVlL1NWTi9DeWJlcnNvZnQvYXBleC9ub2RlX21vZHVsZXMvbmd4LXZpZGVvZ3VsYXIvZXNtMjAxNS9saWIvc3RyZWFtaW5nL3ZnLWRhc2gvdmctZGFzaC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUdBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzBTQXVIRTs7Ozs7Ozs7Ozs7Ozs7Ozs4Q0FnQjRDOzs7Ozs7Ozs7Ozs7Ozs7b0JBU25DIiwiZmlsZSI6InZnLWRhc2guanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2RlY29yYXRlIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBTaW1wbGVDaGFuZ2VzLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVmdBUEkgfSBmcm9tICcuLi8uLi9jb3JlL3NlcnZpY2VzL3ZnLWFwaSc7XG5sZXQgVmdEQVNIID0gXG4vLyB0c2xpbnQ6ZGlzYWJsZTpkaXJlY3RpdmUtY2xhc3Mtc3VmZml4XG4vLyB0c2xpbnQ6ZGlzYWJsZTpuby1vdXRwdXQtb24tcHJlZml4XG4vLyB0c2xpbnQ6ZGlzYWJsZTpuby1zdHJpbmctbGl0ZXJhbFxuY2xhc3MgVmdEQVNIIHtcbiAgICBjb25zdHJ1Y3RvcihyZWYsIEFQSSkge1xuICAgICAgICB0aGlzLnJlZiA9IHJlZjtcbiAgICAgICAgdGhpcy5BUEkgPSBBUEk7XG4gICAgICAgIHRoaXMub25HZXRCaXRyYXRlcyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zID0gW107XG4gICAgfVxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICBpZiAodGhpcy5BUEkuaXNQbGF5ZXJSZWFkeSkge1xuICAgICAgICAgICAgdGhpcy5vblBsYXllclJlYWR5KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaCh0aGlzLkFQSS5wbGF5ZXJSZWFkeUV2ZW50LnN1YnNjcmliZSgoKSA9PiB0aGlzLm9uUGxheWVyUmVhZHkoKSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIG9uUGxheWVyUmVhZHkoKSB7XG4gICAgICAgIHRoaXMudmdGb3IgPSB0aGlzLnJlZi5uYXRpdmVFbGVtZW50LmdldEF0dHJpYnV0ZSgndmdGb3InKTtcbiAgICAgICAgdGhpcy50YXJnZXQgPSB0aGlzLkFQSS5nZXRNZWRpYUJ5SWQodGhpcy52Z0Zvcik7XG4gICAgICAgIHRoaXMuY3JlYXRlUGxheWVyKCk7XG4gICAgfVxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXMpIHtcbiAgICAgICAgaWYgKGNoYW5nZXNbJ3ZnRGFzaCddICYmIGNoYW5nZXNbJ3ZnRGFzaCddLmN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVQbGF5ZXIoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdHJveVBsYXllcigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNyZWF0ZVBsYXllcigpIHtcbiAgICAgICAgaWYgKHRoaXMuZGFzaCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0cm95UGxheWVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSXQncyBhIERBU0ggc291cmNlXG4gICAgICAgIGlmICh0aGlzLnZnRGFzaCAmJiAoKHRoaXMudmdEYXNoLmluZGV4T2YoJy5tcGQnKSA+IC0xKSB8fFxuICAgICAgICAgICAgKHRoaXMudmdEYXNoLmluZGV4T2YoJ21wZC10aW1lLWNzZicpID4gLTEpKSkge1xuICAgICAgICAgICAgbGV0IGRybU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAodGhpcy52Z0RSTUxpY2Vuc2VTZXJ2ZXIpIHtcbiAgICAgICAgICAgICAgICBkcm1PcHRpb25zID0gdGhpcy52Z0RSTUxpY2Vuc2VTZXJ2ZXI7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudmdEUk1Ub2tlbikge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGRybVNlcnZlciBpbiBkcm1PcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZHJtU2VydmVyLmhhc093blByb3BlcnR5KGRybVNlcnZlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm1PcHRpb25zW2RybVNlcnZlcl0uaHR0cFJlcXVlc3RIZWFkZXJzID0geyBBdXRob3JpemF0aW9uOiB0aGlzLnZnRFJNVG9rZW4gfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGFzaCA9IGRhc2hqcy5NZWRpYVBsYXllcigpLmNyZWF0ZSgpO1xuICAgICAgICAgICAgdGhpcy5kYXNoLmdldERlYnVnKCkuc2V0TG9nVG9Ccm93c2VyQ29uc29sZShmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLmRhc2guaW5pdGlhbGl6ZSh0aGlzLnJlZi5uYXRpdmVFbGVtZW50KTtcbiAgICAgICAgICAgIHRoaXMuZGFzaC5zZXRBdXRvUGxheShmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLmRhc2gub24oZGFzaGpzLk1lZGlhUGxheWVyLmV2ZW50cy5TVFJFQU1fSU5JVElBTElaRUQsICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBhdWRpb0xpc3QgPSB0aGlzLmRhc2guZ2V0Qml0cmF0ZUluZm9MaXN0Rm9yKCdhdWRpbycpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZpZGVvTGlzdCA9IHRoaXMuZGFzaC5nZXRCaXRyYXRlSW5mb0xpc3RGb3IoJ3ZpZGVvJyk7XG4gICAgICAgICAgICAgICAgaWYgKGF1ZGlvTGlzdC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGF1ZGlvTGlzdC5mb3JFYWNoKGl0ZW0gPT4gaXRlbS5xdWFsaXR5SW5kZXggPSArK2l0ZW0ucXVhbGl0eUluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgYXVkaW9MaXN0LnVuc2hpZnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgcXVhbGl0eUluZGV4OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBiaXRyYXRlOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVkaWFUeXBlOiAndmlkZW8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdBVVRPJ1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkdldEJpdHJhdGVzLmVtaXQoYXVkaW9MaXN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHZpZGVvTGlzdC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHZpZGVvTGlzdC5mb3JFYWNoKGl0ZW0gPT4gaXRlbS5xdWFsaXR5SW5kZXggPSArK2l0ZW0ucXVhbGl0eUluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgdmlkZW9MaXN0LnVuc2hpZnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgcXVhbGl0eUluZGV4OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBiaXRyYXRlOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVkaWFUeXBlOiAndmlkZW8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdBVVRPJ1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkdldEJpdHJhdGVzLmVtaXQodmlkZW9MaXN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChkcm1PcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXNoLnNldFByb3RlY3Rpb25EYXRhKGRybU9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kYXNoLmF0dGFjaFNvdXJjZSh0aGlzLnZnRGFzaCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy50YXJnZXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldC5wYXVzZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0LnNlZWtUaW1lKDApO1xuICAgICAgICAgICAgICAgIHRoaXMucmVmLm5hdGl2ZUVsZW1lbnQuc3JjID0gdGhpcy52Z0Rhc2g7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0Qml0cmF0ZShiaXRyYXRlKSB7XG4gICAgICAgIGlmICh0aGlzLmRhc2gpIHtcbiAgICAgICAgICAgIGlmIChiaXRyYXRlLnF1YWxpdHlJbmRleCA+IDApIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kYXNoLmdldEF1dG9Td2l0Y2hRdWFsaXR5Rm9yKGJpdHJhdGUubWVkaWFUeXBlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhc2guc2V0QXV0b1N3aXRjaFF1YWxpdHlGb3IoYml0cmF0ZS5tZWRpYVR5cGUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dEluZGV4ID0gYml0cmF0ZS5xdWFsaXR5SW5kZXggLSAxO1xuICAgICAgICAgICAgICAgIHRoaXMuZGFzaC5zZXRRdWFsaXR5Rm9yKGJpdHJhdGUubWVkaWFUeXBlLCBuZXh0SW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXNoLnNldEF1dG9Td2l0Y2hRdWFsaXR5Rm9yKGJpdHJhdGUubWVkaWFUeXBlLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBkZXN0cm95UGxheWVyKCkge1xuICAgICAgICBpZiAodGhpcy5kYXNoKSB7XG4gICAgICAgICAgICB0aGlzLmRhc2gucmVzZXQoKTtcbiAgICAgICAgICAgIHRoaXMuZGFzaCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5mb3JFYWNoKHMgPT4gcy51bnN1YnNjcmliZSgpKTtcbiAgICAgICAgdGhpcy5kZXN0cm95UGxheWVyKCk7XG4gICAgfVxufTtcblZnREFTSC5jdG9yUGFyYW1ldGVycyA9ICgpID0+IFtcbiAgICB7IHR5cGU6IEVsZW1lbnRSZWYgfSxcbiAgICB7IHR5cGU6IFZnQVBJIH1cbl07XG5fX2RlY29yYXRlKFtcbiAgICBJbnB1dCgpXG5dLCBWZ0RBU0gucHJvdG90eXBlLCBcInZnRGFzaFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgSW5wdXQoKVxuXSwgVmdEQVNILnByb3RvdHlwZSwgXCJ2Z0RSTVRva2VuXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBJbnB1dCgpXG5dLCBWZ0RBU0gucHJvdG90eXBlLCBcInZnRFJNTGljZW5zZVNlcnZlclwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgT3V0cHV0KClcbl0sIFZnREFTSC5wcm90b3R5cGUsIFwib25HZXRCaXRyYXRlc1wiLCB2b2lkIDApO1xuVmdEQVNIID0gX19kZWNvcmF0ZShbXG4gICAgRGlyZWN0aXZlKHtcbiAgICAgICAgc2VsZWN0b3I6ICdbdmdEYXNoXScsXG4gICAgICAgIGV4cG9ydEFzOiAndmdEYXNoJ1xuICAgIH0pXG4gICAgLy8gdHNsaW50OmRpc2FibGU6ZGlyZWN0aXZlLWNsYXNzLXN1ZmZpeFxuICAgIC8vIHRzbGludDpkaXNhYmxlOm5vLW91dHB1dC1vbi1wcmVmaXhcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZTpuby1zdHJpbmctbGl0ZXJhbFxuXSwgVmdEQVNIKTtcbmV4cG9ydCB7IFZnREFTSCB9O1xuIl19