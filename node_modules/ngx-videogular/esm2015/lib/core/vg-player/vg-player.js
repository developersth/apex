import { __decorate } from "tslib";
import { Output, Component, EventEmitter, ElementRef, HostBinding, QueryList, AfterContentInit, ContentChildren, ViewEncapsulation, OnDestroy } from '@angular/core';
import { VgAPI } from '../services/vg-api';
import { VgFullscreenAPI } from '../services/vg-fullscreen-api';
import { VgUtils } from '../services/vg-utils';
import { VgMedia } from '../vg-media/vg-media';
import { VgControlsHidden } from '../services/vg-controls-hidden';
import * as ɵngcc0 from '@angular/core';

const _c0 = ["*"];
let VgPlayer = 
// tslint:disable:component-class-suffix
// tslint:disable:no-output-on-prefix
class VgPlayer {
    constructor(ref, api, fsAPI, controlsHidden) {
        this.api = api;
        this.fsAPI = fsAPI;
        this.controlsHidden = controlsHidden;
        this.isFullscreen = false;
        this.isNativeFullscreen = false;
        this.areControlsHidden = false;
        this.onPlayerReady = new EventEmitter();
        this.onMediaReady = new EventEmitter();
        this.subscriptions = [];
        this.elem = ref.nativeElement;
        this.api.registerElement(this.elem);
    }
    ngAfterContentInit() {
        this.medias.toArray().forEach((media) => {
            this.api.registerMedia(media);
        });
        this.fsAPI.init(this.elem, this.medias);
        this.subscriptions.push(this.fsAPI.onChangeFullscreen.subscribe(this.onChangeFullscreen.bind(this)));
        this.subscriptions.push(this.controlsHidden.isHidden.subscribe(this.onHideControls.bind(this)));
        this.api.onPlayerReady(this.fsAPI);
        this.onPlayerReady.emit(this.api);
    }
    onChangeFullscreen(fsState) {
        if (!this.fsAPI.nativeFullscreen) {
            this.isFullscreen = fsState;
            this.zIndex = fsState ? VgUtils.getZIndex().toString() : 'auto';
        }
        else {
            this.isNativeFullscreen = fsState;
        }
    }
    onHideControls(hidden) {
        this.areControlsHidden = hidden;
    }
    ngOnDestroy() {
        this.subscriptions.forEach(s => s.unsubscribe());
    }
};
VgPlayer.ɵfac = function VgPlayer_Factory(t) { return new (t || VgPlayer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(VgAPI), ɵngcc0.ɵɵdirectiveInject(VgFullscreenAPI), ɵngcc0.ɵɵdirectiveInject(VgControlsHidden)); };
VgPlayer.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: VgPlayer, selectors: [["vg-player"]], contentQueries: function VgPlayer_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, VgMedia, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.medias = _t);
    } }, hostVars: 8, hostBindings: function VgPlayer_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("z-index", ctx.zIndex);
        ɵngcc0.ɵɵclassProp("fullscreen", ctx.isFullscreen)("native-fullscreen", ctx.isNativeFullscreen)("controls-hidden", ctx.areControlsHidden);
    } }, outputs: { onPlayerReady: "onPlayerReady", onMediaReady: "onMediaReady" }, features: [ɵngcc0.ɵɵProvidersFeature([VgAPI, VgFullscreenAPI, VgControlsHidden])], ngContentSelectors: _c0, decls: 1, vars: 0, template: function VgPlayer_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, styles: ["\n        vg-player {\n            font-family: 'videogular';\n            position: relative;\n            display: flex;\n            width: 100%;\n            height: 100%;\n            overflow: hidden;\n            background-color: black;\n        }\n        vg-player.fullscreen {\n            position: fixed;\n            left: 0;\n            top: 0;\n        }\n        vg-player.native-fullscreen.controls-hidden {\n            cursor: none;\n        }\n    "], encapsulation: 2 });
VgPlayer.ctorParameters = () => [
    { type: ElementRef },
    { type: VgAPI },
    { type: VgFullscreenAPI },
    { type: VgControlsHidden }
];
__decorate([
    HostBinding('class.fullscreen')
], VgPlayer.prototype, "isFullscreen", void 0);
__decorate([
    HostBinding('class.native-fullscreen')
], VgPlayer.prototype, "isNativeFullscreen", void 0);
__decorate([
    HostBinding('class.controls-hidden')
], VgPlayer.prototype, "areControlsHidden", void 0);
__decorate([
    HostBinding('style.z-index')
], VgPlayer.prototype, "zIndex", void 0);
__decorate([
    Output()
], VgPlayer.prototype, "onPlayerReady", void 0);
__decorate([
    Output()
], VgPlayer.prototype, "onMediaReady", void 0);
__decorate([
    ContentChildren(VgMedia)
], VgPlayer.prototype, "medias", void 0);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(VgPlayer, [{
        type: Component,
        args: [{
                selector: 'vg-player',
                encapsulation: ViewEncapsulation.None,
                template: `<ng-content></ng-content>`,
                providers: [VgAPI, VgFullscreenAPI, VgControlsHidden],
                styles: [`
        vg-player {
            font-family: 'videogular';
            position: relative;
            display: flex;
            width: 100%;
            height: 100%;
            overflow: hidden;
            background-color: black;
        }
        vg-player.fullscreen {
            position: fixed;
            left: 0;
            top: 0;
        }
        vg-player.native-fullscreen.controls-hidden {
            cursor: none;
        }
    `]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: VgAPI }, { type: VgFullscreenAPI }, { type: VgControlsHidden }]; }, { isFullscreen: [{
            type: HostBinding,
            args: ['class.fullscreen']
        }], isNativeFullscreen: [{
            type: HostBinding,
            args: ['class.native-fullscreen']
        }], areControlsHidden: [{
            type: HostBinding,
            args: ['class.controls-hidden']
        }], onPlayerReady: [{
            type: Output
        }], onMediaReady: [{
            type: Output
        }], zIndex: [{
            type: HostBinding,
            args: ['style.z-index']
        }], medias: [{
            type: ContentChildren,
            args: [VgMedia]
        }] }); })();
export { VgPlayer };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNwcm8va3JpdHNhZGVlL1NWTi9DeWJlcnNvZnQvYXBleC9ub2RlX21vZHVsZXMvbmd4LXZpZGVvZ3VsYXIvZXNtMjAxNS9saWIvY29yZS92Zy1wbGF5ZXIvdmctcGxheWVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7O0FBT0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7aWdCQTBDRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3lDQTJCdUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQTZCNUIiLCJmaWxlIjoidmctcGxheWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19kZWNvcmF0ZSB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgT3V0cHV0LCBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgRWxlbWVudFJlZiwgSG9zdEJpbmRpbmcsIFF1ZXJ5TGlzdCwgQWZ0ZXJDb250ZW50SW5pdCwgQ29udGVudENoaWxkcmVuLCBWaWV3RW5jYXBzdWxhdGlvbiwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBWZ0FQSSB9IGZyb20gJy4uL3NlcnZpY2VzL3ZnLWFwaSc7XG5pbXBvcnQgeyBWZ0Z1bGxzY3JlZW5BUEkgfSBmcm9tICcuLi9zZXJ2aWNlcy92Zy1mdWxsc2NyZWVuLWFwaSc7XG5pbXBvcnQgeyBWZ1V0aWxzIH0gZnJvbSAnLi4vc2VydmljZXMvdmctdXRpbHMnO1xuaW1wb3J0IHsgVmdNZWRpYSB9IGZyb20gJy4uL3ZnLW1lZGlhL3ZnLW1lZGlhJztcbmltcG9ydCB7IFZnQ29udHJvbHNIaWRkZW4gfSBmcm9tICcuLi9zZXJ2aWNlcy92Zy1jb250cm9scy1oaWRkZW4nO1xubGV0IFZnUGxheWVyID0gXG4vLyB0c2xpbnQ6ZGlzYWJsZTpjb21wb25lbnQtY2xhc3Mtc3VmZml4XG4vLyB0c2xpbnQ6ZGlzYWJsZTpuby1vdXRwdXQtb24tcHJlZml4XG5jbGFzcyBWZ1BsYXllciB7XG4gICAgY29uc3RydWN0b3IocmVmLCBhcGksIGZzQVBJLCBjb250cm9sc0hpZGRlbikge1xuICAgICAgICB0aGlzLmFwaSA9IGFwaTtcbiAgICAgICAgdGhpcy5mc0FQSSA9IGZzQVBJO1xuICAgICAgICB0aGlzLmNvbnRyb2xzSGlkZGVuID0gY29udHJvbHNIaWRkZW47XG4gICAgICAgIHRoaXMuaXNGdWxsc2NyZWVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNOYXRpdmVGdWxsc2NyZWVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYXJlQ29udHJvbHNIaWRkZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5vblBsYXllclJlYWR5ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uTWVkaWFSZWFkeSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zID0gW107XG4gICAgICAgIHRoaXMuZWxlbSA9IHJlZi5uYXRpdmVFbGVtZW50O1xuICAgICAgICB0aGlzLmFwaS5yZWdpc3RlckVsZW1lbnQodGhpcy5lbGVtKTtcbiAgICB9XG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgICAgICB0aGlzLm1lZGlhcy50b0FycmF5KCkuZm9yRWFjaCgobWVkaWEpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYXBpLnJlZ2lzdGVyTWVkaWEobWVkaWEpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5mc0FQSS5pbml0KHRoaXMuZWxlbSwgdGhpcy5tZWRpYXMpO1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaCh0aGlzLmZzQVBJLm9uQ2hhbmdlRnVsbHNjcmVlbi5zdWJzY3JpYmUodGhpcy5vbkNoYW5nZUZ1bGxzY3JlZW4uYmluZCh0aGlzKSkpO1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaCh0aGlzLmNvbnRyb2xzSGlkZGVuLmlzSGlkZGVuLnN1YnNjcmliZSh0aGlzLm9uSGlkZUNvbnRyb2xzLmJpbmQodGhpcykpKTtcbiAgICAgICAgdGhpcy5hcGkub25QbGF5ZXJSZWFkeSh0aGlzLmZzQVBJKTtcbiAgICAgICAgdGhpcy5vblBsYXllclJlYWR5LmVtaXQodGhpcy5hcGkpO1xuICAgIH1cbiAgICBvbkNoYW5nZUZ1bGxzY3JlZW4oZnNTdGF0ZSkge1xuICAgICAgICBpZiAoIXRoaXMuZnNBUEkubmF0aXZlRnVsbHNjcmVlbikge1xuICAgICAgICAgICAgdGhpcy5pc0Z1bGxzY3JlZW4gPSBmc1N0YXRlO1xuICAgICAgICAgICAgdGhpcy56SW5kZXggPSBmc1N0YXRlID8gVmdVdGlscy5nZXRaSW5kZXgoKS50b1N0cmluZygpIDogJ2F1dG8nO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pc05hdGl2ZUZ1bGxzY3JlZW4gPSBmc1N0YXRlO1xuICAgICAgICB9XG4gICAgfVxuICAgIG9uSGlkZUNvbnRyb2xzKGhpZGRlbikge1xuICAgICAgICB0aGlzLmFyZUNvbnRyb2xzSGlkZGVuID0gaGlkZGVuO1xuICAgIH1cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLmZvckVhY2gocyA9PiBzLnVuc3Vic2NyaWJlKCkpO1xuICAgIH1cbn07XG5WZ1BsYXllci5jdG9yUGFyYW1ldGVycyA9ICgpID0+IFtcbiAgICB7IHR5cGU6IEVsZW1lbnRSZWYgfSxcbiAgICB7IHR5cGU6IFZnQVBJIH0sXG4gICAgeyB0eXBlOiBWZ0Z1bGxzY3JlZW5BUEkgfSxcbiAgICB7IHR5cGU6IFZnQ29udHJvbHNIaWRkZW4gfVxuXTtcbl9fZGVjb3JhdGUoW1xuICAgIEhvc3RCaW5kaW5nKCdjbGFzcy5mdWxsc2NyZWVuJylcbl0sIFZnUGxheWVyLnByb3RvdHlwZSwgXCJpc0Z1bGxzY3JlZW5cIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIEhvc3RCaW5kaW5nKCdjbGFzcy5uYXRpdmUtZnVsbHNjcmVlbicpXG5dLCBWZ1BsYXllci5wcm90b3R5cGUsIFwiaXNOYXRpdmVGdWxsc2NyZWVuXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBIb3N0QmluZGluZygnY2xhc3MuY29udHJvbHMtaGlkZGVuJylcbl0sIFZnUGxheWVyLnByb3RvdHlwZSwgXCJhcmVDb250cm9sc0hpZGRlblwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgSG9zdEJpbmRpbmcoJ3N0eWxlLnotaW5kZXgnKVxuXSwgVmdQbGF5ZXIucHJvdG90eXBlLCBcInpJbmRleFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgT3V0cHV0KClcbl0sIFZnUGxheWVyLnByb3RvdHlwZSwgXCJvblBsYXllclJlYWR5XCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBPdXRwdXQoKVxuXSwgVmdQbGF5ZXIucHJvdG90eXBlLCBcIm9uTWVkaWFSZWFkeVwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgQ29udGVudENoaWxkcmVuKFZnTWVkaWEpXG5dLCBWZ1BsYXllci5wcm90b3R5cGUsIFwibWVkaWFzXCIsIHZvaWQgMCk7XG5WZ1BsYXllciA9IF9fZGVjb3JhdGUoW1xuICAgIENvbXBvbmVudCh7XG4gICAgICAgIHNlbGVjdG9yOiAndmctcGxheWVyJyxcbiAgICAgICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgICAgICAgdGVtcGxhdGU6IGA8bmctY29udGVudD48L25nLWNvbnRlbnQ+YCxcbiAgICAgICAgcHJvdmlkZXJzOiBbVmdBUEksIFZnRnVsbHNjcmVlbkFQSSwgVmdDb250cm9sc0hpZGRlbl0sXG4gICAgICAgIHN0eWxlczogW2BcbiAgICAgICAgdmctcGxheWVyIHtcbiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiAndmlkZW9ndWxhcic7XG4gICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XG4gICAgICAgIH1cbiAgICAgICAgdmctcGxheWVyLmZ1bGxzY3JlZW4ge1xuICAgICAgICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgICAgICAgbGVmdDogMDtcbiAgICAgICAgICAgIHRvcDogMDtcbiAgICAgICAgfVxuICAgICAgICB2Zy1wbGF5ZXIubmF0aXZlLWZ1bGxzY3JlZW4uY29udHJvbHMtaGlkZGVuIHtcbiAgICAgICAgICAgIGN1cnNvcjogbm9uZTtcbiAgICAgICAgfVxuICAgIGBdXG4gICAgfSlcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZTpjb21wb25lbnQtY2xhc3Mtc3VmZml4XG4gICAgLy8gdHNsaW50OmRpc2FibGU6bm8tb3V0cHV0LW9uLXByZWZpeFxuXSwgVmdQbGF5ZXIpO1xuZXhwb3J0IHsgVmdQbGF5ZXIgfTtcbiJdfQ==