import { __decorate } from "tslib";
import { ChangeDetectorRef, OnInit, Directive, Input, OnDestroy } from '@angular/core';
import { Observable, Subject, fromEvent } from 'rxjs';
import { map } from 'rxjs/operators';
import { VgStates } from '../states/vg-states';
import { VgAPI } from '../services/vg-api';
import { VgEvents } from '../events/vg-events';
import { timer, combineLatest } from 'rxjs';
import * as Éµngcc0 from '@angular/core';
let VgMedia = 
// tslint:disable-next-line:directive-class-suffix
class VgMedia {
    constructor(api, ref) {
        this.api = api;
        this.ref = ref;
        this.state = VgStates.VG_PAUSED;
        this.time = { current: 0, total: 0, left: 0 };
        this.buffer = { end: 0 };
        this.canPlay = false;
        this.canPlayThrough = false;
        this.isMetadataLoaded = false;
        this.isWaiting = false;
        this.isCompleted = false;
        this.isLive = false;
        this.isBufferDetected = false;
        this.checkInterval = 200;
        this.currentPlayPos = 0;
        this.lastPlayPos = 0;
        this.playAtferSync = false;
        this.bufferDetected = new Subject();
    }
    ngOnInit() {
        if (this.vgMedia.nodeName) {
            // It's a native element
            this.elem = this.vgMedia;
        }
        else {
            // It's an Angular Class
            this.elem = this.vgMedia.elem;
        }
        // Just in case we're creating this vgMedia dynamically register again into API
        this.api.registerMedia(this);
        this.subscriptions = {
            // Native events
            abort: fromEvent(this.elem, VgEvents.VG_ABORT),
            canPlay: fromEvent(this.elem, VgEvents.VG_CAN_PLAY),
            canPlayThrough: fromEvent(this.elem, VgEvents.VG_CAN_PLAY_THROUGH),
            durationChange: fromEvent(this.elem, VgEvents.VG_DURATION_CHANGE),
            emptied: fromEvent(this.elem, VgEvents.VG_EMPTIED),
            encrypted: fromEvent(this.elem, VgEvents.VG_ENCRYPTED),
            ended: fromEvent(this.elem, VgEvents.VG_ENDED),
            error: fromEvent(this.elem, VgEvents.VG_ERROR),
            loadedData: fromEvent(this.elem, VgEvents.VG_LOADED_DATA),
            loadedMetadata: fromEvent(this.elem, VgEvents.VG_LOADED_METADATA),
            loadStart: fromEvent(this.elem, VgEvents.VG_LOAD_START),
            pause: fromEvent(this.elem, VgEvents.VG_PAUSE),
            play: fromEvent(this.elem, VgEvents.VG_PLAY),
            playing: fromEvent(this.elem, VgEvents.VG_PLAYING),
            progress: fromEvent(this.elem, VgEvents.VG_PROGRESS),
            rateChange: fromEvent(this.elem, VgEvents.VG_RATE_CHANGE),
            seeked: fromEvent(this.elem, VgEvents.VG_SEEKED),
            seeking: fromEvent(this.elem, VgEvents.VG_SEEKING),
            stalled: fromEvent(this.elem, VgEvents.VG_STALLED),
            suspend: fromEvent(this.elem, VgEvents.VG_SUSPEND),
            timeUpdate: fromEvent(this.elem, VgEvents.VG_TIME_UPDATE),
            volumeChange: fromEvent(this.elem, VgEvents.VG_VOLUME_CHANGE),
            waiting: fromEvent(this.elem, VgEvents.VG_WAITING),
            // Advertisement only events
            startAds: fromEvent(this.elem, VgEvents.VG_START_ADS),
            endAds: fromEvent(this.elem, VgEvents.VG_END_ADS),
            // See changes on <source> child elements to reload the video file
            mutation: new Observable((observer) => {
                const domObs = new MutationObserver((mutations) => {
                    observer.next(mutations);
                });
                domObs.observe(this.elem, { childList: true, attributes: true });
                return () => {
                    domObs.disconnect();
                };
            }),
            // Custom buffering detection
            bufferDetected: this.bufferDetected
        };
        this.mutationObs = this.subscriptions.mutation.subscribe(this.onMutation.bind(this));
        this.canPlayObs = this.subscriptions.canPlay.subscribe(this.onCanPlay.bind(this));
        this.canPlayThroughObs = this.subscriptions.canPlayThrough.subscribe(this.onCanPlayThrough.bind(this));
        this.loadedMetadataObs = this.subscriptions.loadedMetadata.subscribe(this.onLoadMetadata.bind(this));
        this.waitingObs = this.subscriptions.waiting.subscribe(this.onWait.bind(this));
        this.progressObs = this.subscriptions.progress.subscribe(this.onProgress.bind(this));
        this.endedObs = this.subscriptions.ended.subscribe(this.onComplete.bind(this));
        this.playingObs = this.subscriptions.playing.subscribe(this.onStartPlaying.bind(this));
        this.playObs = this.subscriptions.play.subscribe(this.onPlay.bind(this));
        this.pauseObs = this.subscriptions.pause.subscribe(this.onPause.bind(this));
        this.timeUpdateObs = this.subscriptions.timeUpdate.subscribe(this.onTimeUpdate.bind(this));
        this.volumeChangeObs = this.subscriptions.volumeChange.subscribe(this.onVolumeChange.bind(this));
        this.errorObs = this.subscriptions.error.subscribe(this.onError.bind(this));
        if (this.vgMaster) {
            this.api.playerReadyEvent.subscribe(() => {
                this.prepareSync();
            });
        }
    }
    prepareSync() {
        const canPlayAll = [];
        for (const media in this.api.medias) {
            if (this.api.medias[media]) {
                canPlayAll.push(this.api.medias[media].subscriptions.canPlay);
            }
        }
        this.canPlayAllSubscription = combineLatest(canPlayAll).pipe(map((...params) => {
            const checkReadyState = (event) => {
                return event.target.readyState === 4;
            };
            const allReady = params.some(checkReadyState);
            if (allReady && !this.syncSubscription) {
                this.startSync();
                this.syncSubscription.unsubscribe();
            }
        })).subscribe();
    }
    startSync() {
        this.syncSubscription = timer(0, 1000).subscribe(() => {
            for (const media in this.api.medias) {
                if (this.api.medias[media] !== this) {
                    const diff = this.api.medias[media].currentTime - this.currentTime;
                    if (diff < -0.3 || diff > 0.3) {
                        this.playAtferSync = (this.state === VgStates.VG_PLAYING);
                        this.pause();
                        this.api.medias[media].pause();
                        this.api.medias[media].currentTime = this.currentTime;
                    }
                    else {
                        if (this.playAtferSync) {
                            this.play();
                            this.api.medias[media].play();
                            this.playAtferSync = false;
                        }
                    }
                }
            }
        });
    }
    onMutation(mutations) {
        // Detect changes only for source elements or src attribute
        for (let i = 0, l = mutations.length; i < l; i++) {
            const mut = mutations[i];
            if (mut.type === 'attributes' && mut.attributeName === 'src') {
                // Only load src file if it's not a blob (for DASH / HLS sources)
                // tslint:disable-next-line:no-string-literal
                if (mut.target['src'] && mut.target['src'].length > 0 && mut.target['src'].indexOf('blob:') < 0) {
                    this.loadMedia();
                    break;
                }
            }
            else if (mut.type === 'childList' && mut.removedNodes.length && mut.removedNodes[0].nodeName.toLowerCase() === 'source') {
                this.loadMedia();
                break;
            }
        }
    }
    loadMedia() {
        this.vgMedia.pause();
        this.vgMedia.currentTime = 0;
        // Start buffering until we can play the media file
        this.stopBufferCheck();
        this.isBufferDetected = true;
        this.bufferDetected.next(this.isBufferDetected);
        // TODO: This is ugly, we should find something cleaner. For some reason a TimerObservable doesn't works.
        setTimeout(() => this.vgMedia.load(), 10);
    }
    play() {
        // short-circuit if already playing
        if (this.playPromise || (this.state !== VgStates.VG_PAUSED && this.state !== VgStates.VG_ENDED)) {
            return;
        }
        this.playPromise = this.vgMedia.play();
        // browser has async play promise
        if (this.playPromise && this.playPromise.then && this.playPromise.catch) {
            this.playPromise
                .then(() => {
                this.playPromise = null;
            })
                .catch(() => {
                this.playPromise = null;
                // deliberately empty for the sake of eating console noise
            });
        }
        return this.playPromise;
    }
    pause() {
        // browser has async play promise
        if (this.playPromise) {
            this.playPromise
                .then(() => {
                this.vgMedia.pause();
            });
        }
        else {
            this.vgMedia.pause();
        }
    }
    get id() {
        // We should return undefined if vgMedia still doesn't exist
        // tslint:disable-next-line:no-unnecessary-initializer
        let result = undefined;
        if (this.vgMedia) {
            result = this.vgMedia.id;
        }
        return result;
    }
    get duration() {
        return this.vgMedia.duration;
    }
    set currentTime(seconds) {
        this.vgMedia.currentTime = seconds;
        // this.elem.dispatchEvent(new CustomEvent(VgEvents.VG_SEEK));
    }
    get currentTime() {
        return this.vgMedia.currentTime;
    }
    set volume(volume) {
        this.vgMedia.volume = volume;
    }
    get volume() {
        return this.vgMedia.volume;
    }
    set playbackRate(rate) {
        this.vgMedia.playbackRate = rate;
    }
    get playbackRate() {
        return this.vgMedia.playbackRate;
    }
    get buffered() {
        return this.vgMedia.buffered;
    }
    get textTracks() {
        return this.vgMedia.textTracks;
    }
    // @ts-ignore
    onCanPlay(event) {
        this.isBufferDetected = false;
        this.bufferDetected.next(this.isBufferDetected);
        this.canPlay = true;
        this.ref.detectChanges();
    }
    // @ts-ignore
    onCanPlayThrough(event) {
        this.isBufferDetected = false;
        this.bufferDetected.next(this.isBufferDetected);
        this.canPlayThrough = true;
        this.ref.detectChanges();
    }
    // @ts-ignore
    onLoadMetadata(event) {
        this.isMetadataLoaded = true;
        this.time = {
            current: 0,
            left: 0,
            total: this.duration * 1000
        };
        this.state = VgStates.VG_PAUSED;
        // Live streaming check
        const t = Math.round(this.time.total);
        this.isLive = (t === Infinity);
        this.ref.detectChanges();
    }
    // @ts-ignore
    onWait(event) {
        this.isWaiting = true;
        this.ref.detectChanges();
    }
    // @ts-ignore
    onComplete(event) {
        this.isCompleted = true;
        this.state = VgStates.VG_ENDED;
        this.ref.detectChanges();
    }
    // @ts-ignore
    onStartPlaying(event) {
        this.state = VgStates.VG_PLAYING;
        this.ref.detectChanges();
    }
    // @ts-ignore
    onPlay(event) {
        this.state = VgStates.VG_PLAYING;
        if (this.vgMaster) {
            if (!this.syncSubscription || this.syncSubscription.closed) {
                this.startSync();
            }
        }
        this.startBufferCheck();
        this.ref.detectChanges();
    }
    // @ts-ignore
    onPause(event) {
        this.state = VgStates.VG_PAUSED;
        if (this.vgMaster) {
            if (!this.playAtferSync) {
                this.syncSubscription.unsubscribe();
            }
        }
        this.stopBufferCheck();
        this.ref.detectChanges();
    }
    // @ts-ignore
    onTimeUpdate(event) {
        const end = this.buffered.length - 1;
        this.time = {
            current: this.currentTime * 1000,
            total: this.time.total,
            left: (this.duration - this.currentTime) * 1000
        };
        if (end >= 0) {
            this.buffer = { end: this.buffered.end(end) * 1000 };
        }
        this.ref.detectChanges();
    }
    // @ts-ignore
    onProgress(event) {
        const end = this.buffered.length - 1;
        if (end >= 0) {
            this.buffer = { end: this.buffered.end(end) * 1000 };
        }
        this.ref.detectChanges();
    }
    // @ts-ignore
    onVolumeChange(event) {
        // TODO: Save to localstorage the current volume
        this.ref.detectChanges();
    }
    // @ts-ignore
    onError(event) {
        // TODO: Handle error messages
        this.ref.detectChanges();
    }
    // http://stackoverflow.com/a/23828241/779529
    bufferCheck() {
        const offset = 1 / this.checkInterval;
        this.currentPlayPos = this.currentTime;
        if (!this.isBufferDetected && this.currentPlayPos < (this.lastPlayPos + offset)) {
            this.isBufferDetected = true;
        }
        if (this.isBufferDetected && this.currentPlayPos > (this.lastPlayPos + offset)) {
            this.isBufferDetected = false;
        }
        // Prevent calls to bufferCheck after ngOnDestroy have been called
        if (!this.bufferDetected.closed) {
            this.bufferDetected.next(this.isBufferDetected);
        }
        this.lastPlayPos = this.currentPlayPos;
    }
    startBufferCheck() {
        this.checkBufferSubscription = timer(0, this.checkInterval).subscribe(() => {
            this.bufferCheck();
        });
    }
    stopBufferCheck() {
        if (this.checkBufferSubscription) {
            this.checkBufferSubscription.unsubscribe();
        }
        this.isBufferDetected = false;
        this.bufferDetected.next(this.isBufferDetected);
    }
    seekTime(value, byPercent = false) {
        let second;
        const duration = this.duration;
        if (byPercent) {
            second = value * duration / 100;
        }
        else {
            second = value;
        }
        this.currentTime = second;
    }
    addTextTrack(type, label, language, mode) {
        const newTrack = this.vgMedia.addTextTrack(type, label, language);
        if (mode) {
            newTrack.mode = mode;
        }
        return newTrack;
    }
    ngOnDestroy() {
        this.vgMedia.src = '';
        this.mutationObs.unsubscribe();
        this.canPlayObs.unsubscribe();
        this.canPlayThroughObs.unsubscribe();
        this.loadedMetadataObs.unsubscribe();
        this.waitingObs.unsubscribe();
        this.progressObs.unsubscribe();
        this.endedObs.unsubscribe();
        this.playingObs.unsubscribe();
        this.playObs.unsubscribe();
        this.pauseObs.unsubscribe();
        this.timeUpdateObs.unsubscribe();
        this.volumeChangeObs.unsubscribe();
        this.errorObs.unsubscribe();
        if (this.checkBufferSubscription) {
            this.checkBufferSubscription.unsubscribe();
        }
        if (this.syncSubscription) {
            this.syncSubscription.unsubscribe();
        }
        this.bufferDetected.complete();
        this.bufferDetected.unsubscribe();
        this.api.unregisterMedia(this);
    }
};
VgMedia.Éµfac = function VgMedia_Factory(t) { return new (t || VgMedia)(Éµngcc0.ÉµÉµdirectiveInject(VgAPI), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ChangeDetectorRef)); };
VgMedia.Éµdir = Éµngcc0.ÉµÉµdefineDirective({ type: VgMedia, selectors: [["", "vgMedia", ""]], inputs: { vgMedia: "vgMedia", vgMaster: "vgMaster" } });
VgMedia.ctorParameters = () => [
    { type: VgAPI },
    { type: ChangeDetectorRef }
];
__decorate([
    Input()
], VgMedia.prototype, "vgMedia", void 0);
__decorate([
    Input()
], VgMedia.prototype, "vgMaster", void 0);
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(VgMedia, [{
        type: Directive,
        args: [{
                selector: '[vgMedia]'
            }]
    }], function () { return [{ type: VgAPI }, { type: Éµngcc0.ChangeDetectorRef }]; }, { vgMedia: [{
            type: Input
        }], vgMaster: [{
            type: Input
        }] }); })();
export { VgMedia };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNwcm8va3JpdHNhZGVlL1NWTi9DeWJlcnNvZnQvYXBleC9ub2RlX21vZHVsZXMvbmd4LXZpZGVvZ3VsYXIvZXNtMjAxNS9saWIvY29yZS92Zy1tZWRpYS92Zy1tZWRpYS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0FBUUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzttSkE2WUU7Ozs7Ozs7Ozs7MENBVXdDOzs7Ozs7Ozs7O29CQU05QiIsImZpbGUiOiJ2Zy1tZWRpYS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fZGVjb3JhdGUgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBPbkluaXQsIERpcmVjdGl2ZSwgSW5wdXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCwgZnJvbUV2ZW50IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBWZ1N0YXRlcyB9IGZyb20gJy4uL3N0YXRlcy92Zy1zdGF0ZXMnO1xuaW1wb3J0IHsgVmdBUEkgfSBmcm9tICcuLi9zZXJ2aWNlcy92Zy1hcGknO1xuaW1wb3J0IHsgVmdFdmVudHMgfSBmcm9tICcuLi9ldmVudHMvdmctZXZlbnRzJztcbmltcG9ydCB7IHRpbWVyLCBjb21iaW5lTGF0ZXN0IH0gZnJvbSAncnhqcyc7XG5sZXQgVmdNZWRpYSA9IFxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1jbGFzcy1zdWZmaXhcbmNsYXNzIFZnTWVkaWEge1xuICAgIGNvbnN0cnVjdG9yKGFwaSwgcmVmKSB7XG4gICAgICAgIHRoaXMuYXBpID0gYXBpO1xuICAgICAgICB0aGlzLnJlZiA9IHJlZjtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFZnU3RhdGVzLlZHX1BBVVNFRDtcbiAgICAgICAgdGhpcy50aW1lID0geyBjdXJyZW50OiAwLCB0b3RhbDogMCwgbGVmdDogMCB9O1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IHsgZW5kOiAwIH07XG4gICAgICAgIHRoaXMuY2FuUGxheSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNhblBsYXlUaHJvdWdoID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNNZXRhZGF0YUxvYWRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzV2FpdGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzQ29tcGxldGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNMaXZlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNCdWZmZXJEZXRlY3RlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNoZWNrSW50ZXJ2YWwgPSAyMDA7XG4gICAgICAgIHRoaXMuY3VycmVudFBsYXlQb3MgPSAwO1xuICAgICAgICB0aGlzLmxhc3RQbGF5UG9zID0gMDtcbiAgICAgICAgdGhpcy5wbGF5QXRmZXJTeW5jID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYnVmZmVyRGV0ZWN0ZWQgPSBuZXcgU3ViamVjdCgpO1xuICAgIH1cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMudmdNZWRpYS5ub2RlTmFtZSkge1xuICAgICAgICAgICAgLy8gSXQncyBhIG5hdGl2ZSBlbGVtZW50XG4gICAgICAgICAgICB0aGlzLmVsZW0gPSB0aGlzLnZnTWVkaWE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBJdCdzIGFuIEFuZ3VsYXIgQ2xhc3NcbiAgICAgICAgICAgIHRoaXMuZWxlbSA9IHRoaXMudmdNZWRpYS5lbGVtO1xuICAgICAgICB9XG4gICAgICAgIC8vIEp1c3QgaW4gY2FzZSB3ZSdyZSBjcmVhdGluZyB0aGlzIHZnTWVkaWEgZHluYW1pY2FsbHkgcmVnaXN0ZXIgYWdhaW4gaW50byBBUElcbiAgICAgICAgdGhpcy5hcGkucmVnaXN0ZXJNZWRpYSh0aGlzKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zID0ge1xuICAgICAgICAgICAgLy8gTmF0aXZlIGV2ZW50c1xuICAgICAgICAgICAgYWJvcnQ6IGZyb21FdmVudCh0aGlzLmVsZW0sIFZnRXZlbnRzLlZHX0FCT1JUKSxcbiAgICAgICAgICAgIGNhblBsYXk6IGZyb21FdmVudCh0aGlzLmVsZW0sIFZnRXZlbnRzLlZHX0NBTl9QTEFZKSxcbiAgICAgICAgICAgIGNhblBsYXlUaHJvdWdoOiBmcm9tRXZlbnQodGhpcy5lbGVtLCBWZ0V2ZW50cy5WR19DQU5fUExBWV9USFJPVUdIKSxcbiAgICAgICAgICAgIGR1cmF0aW9uQ2hhbmdlOiBmcm9tRXZlbnQodGhpcy5lbGVtLCBWZ0V2ZW50cy5WR19EVVJBVElPTl9DSEFOR0UpLFxuICAgICAgICAgICAgZW1wdGllZDogZnJvbUV2ZW50KHRoaXMuZWxlbSwgVmdFdmVudHMuVkdfRU1QVElFRCksXG4gICAgICAgICAgICBlbmNyeXB0ZWQ6IGZyb21FdmVudCh0aGlzLmVsZW0sIFZnRXZlbnRzLlZHX0VOQ1JZUFRFRCksXG4gICAgICAgICAgICBlbmRlZDogZnJvbUV2ZW50KHRoaXMuZWxlbSwgVmdFdmVudHMuVkdfRU5ERUQpLFxuICAgICAgICAgICAgZXJyb3I6IGZyb21FdmVudCh0aGlzLmVsZW0sIFZnRXZlbnRzLlZHX0VSUk9SKSxcbiAgICAgICAgICAgIGxvYWRlZERhdGE6IGZyb21FdmVudCh0aGlzLmVsZW0sIFZnRXZlbnRzLlZHX0xPQURFRF9EQVRBKSxcbiAgICAgICAgICAgIGxvYWRlZE1ldGFkYXRhOiBmcm9tRXZlbnQodGhpcy5lbGVtLCBWZ0V2ZW50cy5WR19MT0FERURfTUVUQURBVEEpLFxuICAgICAgICAgICAgbG9hZFN0YXJ0OiBmcm9tRXZlbnQodGhpcy5lbGVtLCBWZ0V2ZW50cy5WR19MT0FEX1NUQVJUKSxcbiAgICAgICAgICAgIHBhdXNlOiBmcm9tRXZlbnQodGhpcy5lbGVtLCBWZ0V2ZW50cy5WR19QQVVTRSksXG4gICAgICAgICAgICBwbGF5OiBmcm9tRXZlbnQodGhpcy5lbGVtLCBWZ0V2ZW50cy5WR19QTEFZKSxcbiAgICAgICAgICAgIHBsYXlpbmc6IGZyb21FdmVudCh0aGlzLmVsZW0sIFZnRXZlbnRzLlZHX1BMQVlJTkcpLFxuICAgICAgICAgICAgcHJvZ3Jlc3M6IGZyb21FdmVudCh0aGlzLmVsZW0sIFZnRXZlbnRzLlZHX1BST0dSRVNTKSxcbiAgICAgICAgICAgIHJhdGVDaGFuZ2U6IGZyb21FdmVudCh0aGlzLmVsZW0sIFZnRXZlbnRzLlZHX1JBVEVfQ0hBTkdFKSxcbiAgICAgICAgICAgIHNlZWtlZDogZnJvbUV2ZW50KHRoaXMuZWxlbSwgVmdFdmVudHMuVkdfU0VFS0VEKSxcbiAgICAgICAgICAgIHNlZWtpbmc6IGZyb21FdmVudCh0aGlzLmVsZW0sIFZnRXZlbnRzLlZHX1NFRUtJTkcpLFxuICAgICAgICAgICAgc3RhbGxlZDogZnJvbUV2ZW50KHRoaXMuZWxlbSwgVmdFdmVudHMuVkdfU1RBTExFRCksXG4gICAgICAgICAgICBzdXNwZW5kOiBmcm9tRXZlbnQodGhpcy5lbGVtLCBWZ0V2ZW50cy5WR19TVVNQRU5EKSxcbiAgICAgICAgICAgIHRpbWVVcGRhdGU6IGZyb21FdmVudCh0aGlzLmVsZW0sIFZnRXZlbnRzLlZHX1RJTUVfVVBEQVRFKSxcbiAgICAgICAgICAgIHZvbHVtZUNoYW5nZTogZnJvbUV2ZW50KHRoaXMuZWxlbSwgVmdFdmVudHMuVkdfVk9MVU1FX0NIQU5HRSksXG4gICAgICAgICAgICB3YWl0aW5nOiBmcm9tRXZlbnQodGhpcy5lbGVtLCBWZ0V2ZW50cy5WR19XQUlUSU5HKSxcbiAgICAgICAgICAgIC8vIEFkdmVydGlzZW1lbnQgb25seSBldmVudHNcbiAgICAgICAgICAgIHN0YXJ0QWRzOiBmcm9tRXZlbnQodGhpcy5lbGVtLCBWZ0V2ZW50cy5WR19TVEFSVF9BRFMpLFxuICAgICAgICAgICAgZW5kQWRzOiBmcm9tRXZlbnQodGhpcy5lbGVtLCBWZ0V2ZW50cy5WR19FTkRfQURTKSxcbiAgICAgICAgICAgIC8vIFNlZSBjaGFuZ2VzIG9uIDxzb3VyY2U+IGNoaWxkIGVsZW1lbnRzIHRvIHJlbG9hZCB0aGUgdmlkZW8gZmlsZVxuICAgICAgICAgICAgbXV0YXRpb246IG5ldyBPYnNlcnZhYmxlKChvYnNlcnZlcikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRvbU9icyA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKChtdXRhdGlvbnMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChtdXRhdGlvbnMpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGRvbU9icy5vYnNlcnZlKHRoaXMuZWxlbSwgeyBjaGlsZExpc3Q6IHRydWUsIGF0dHJpYnV0ZXM6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZG9tT2JzLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAvLyBDdXN0b20gYnVmZmVyaW5nIGRldGVjdGlvblxuICAgICAgICAgICAgYnVmZmVyRGV0ZWN0ZWQ6IHRoaXMuYnVmZmVyRGV0ZWN0ZWRcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5tdXRhdGlvbk9icyA9IHRoaXMuc3Vic2NyaXB0aW9ucy5tdXRhdGlvbi5zdWJzY3JpYmUodGhpcy5vbk11dGF0aW9uLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLmNhblBsYXlPYnMgPSB0aGlzLnN1YnNjcmlwdGlvbnMuY2FuUGxheS5zdWJzY3JpYmUodGhpcy5vbkNhblBsYXkuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuY2FuUGxheVRocm91Z2hPYnMgPSB0aGlzLnN1YnNjcmlwdGlvbnMuY2FuUGxheVRocm91Z2guc3Vic2NyaWJlKHRoaXMub25DYW5QbGF5VGhyb3VnaC5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5sb2FkZWRNZXRhZGF0YU9icyA9IHRoaXMuc3Vic2NyaXB0aW9ucy5sb2FkZWRNZXRhZGF0YS5zdWJzY3JpYmUodGhpcy5vbkxvYWRNZXRhZGF0YS5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy53YWl0aW5nT2JzID0gdGhpcy5zdWJzY3JpcHRpb25zLndhaXRpbmcuc3Vic2NyaWJlKHRoaXMub25XYWl0LmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLnByb2dyZXNzT2JzID0gdGhpcy5zdWJzY3JpcHRpb25zLnByb2dyZXNzLnN1YnNjcmliZSh0aGlzLm9uUHJvZ3Jlc3MuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuZW5kZWRPYnMgPSB0aGlzLnN1YnNjcmlwdGlvbnMuZW5kZWQuc3Vic2NyaWJlKHRoaXMub25Db21wbGV0ZS5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5wbGF5aW5nT2JzID0gdGhpcy5zdWJzY3JpcHRpb25zLnBsYXlpbmcuc3Vic2NyaWJlKHRoaXMub25TdGFydFBsYXlpbmcuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMucGxheU9icyA9IHRoaXMuc3Vic2NyaXB0aW9ucy5wbGF5LnN1YnNjcmliZSh0aGlzLm9uUGxheS5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5wYXVzZU9icyA9IHRoaXMuc3Vic2NyaXB0aW9ucy5wYXVzZS5zdWJzY3JpYmUodGhpcy5vblBhdXNlLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLnRpbWVVcGRhdGVPYnMgPSB0aGlzLnN1YnNjcmlwdGlvbnMudGltZVVwZGF0ZS5zdWJzY3JpYmUodGhpcy5vblRpbWVVcGRhdGUuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMudm9sdW1lQ2hhbmdlT2JzID0gdGhpcy5zdWJzY3JpcHRpb25zLnZvbHVtZUNoYW5nZS5zdWJzY3JpYmUodGhpcy5vblZvbHVtZUNoYW5nZS5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5lcnJvck9icyA9IHRoaXMuc3Vic2NyaXB0aW9ucy5lcnJvci5zdWJzY3JpYmUodGhpcy5vbkVycm9yLmJpbmQodGhpcykpO1xuICAgICAgICBpZiAodGhpcy52Z01hc3Rlcikge1xuICAgICAgICAgICAgdGhpcy5hcGkucGxheWVyUmVhZHlFdmVudC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucHJlcGFyZVN5bmMoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHByZXBhcmVTeW5jKCkge1xuICAgICAgICBjb25zdCBjYW5QbGF5QWxsID0gW107XG4gICAgICAgIGZvciAoY29uc3QgbWVkaWEgaW4gdGhpcy5hcGkubWVkaWFzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hcGkubWVkaWFzW21lZGlhXSkge1xuICAgICAgICAgICAgICAgIGNhblBsYXlBbGwucHVzaCh0aGlzLmFwaS5tZWRpYXNbbWVkaWFdLnN1YnNjcmlwdGlvbnMuY2FuUGxheSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jYW5QbGF5QWxsU3Vic2NyaXB0aW9uID0gY29tYmluZUxhdGVzdChjYW5QbGF5QWxsKS5waXBlKG1hcCgoLi4ucGFyYW1zKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjaGVja1JlYWR5U3RhdGUgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnQudGFyZ2V0LnJlYWR5U3RhdGUgPT09IDQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgYWxsUmVhZHkgPSBwYXJhbXMuc29tZShjaGVja1JlYWR5U3RhdGUpO1xuICAgICAgICAgICAgaWYgKGFsbFJlYWR5ICYmICF0aGlzLnN5bmNTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0U3luYygpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3luY1N1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSkuc3Vic2NyaWJlKCk7XG4gICAgfVxuICAgIHN0YXJ0U3luYygpIHtcbiAgICAgICAgdGhpcy5zeW5jU3Vic2NyaXB0aW9uID0gdGltZXIoMCwgMTAwMCkuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbWVkaWEgaW4gdGhpcy5hcGkubWVkaWFzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYXBpLm1lZGlhc1ttZWRpYV0gIT09IHRoaXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGlmZiA9IHRoaXMuYXBpLm1lZGlhc1ttZWRpYV0uY3VycmVudFRpbWUgLSB0aGlzLmN1cnJlbnRUaW1lO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGlmZiA8IC0wLjMgfHwgZGlmZiA+IDAuMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGF5QXRmZXJTeW5jID0gKHRoaXMuc3RhdGUgPT09IFZnU3RhdGVzLlZHX1BMQVlJTkcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXVzZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcGkubWVkaWFzW21lZGlhXS5wYXVzZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcGkubWVkaWFzW21lZGlhXS5jdXJyZW50VGltZSA9IHRoaXMuY3VycmVudFRpbWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wbGF5QXRmZXJTeW5jKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGF5KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcGkubWVkaWFzW21lZGlhXS5wbGF5KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGF5QXRmZXJTeW5jID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBvbk11dGF0aW9uKG11dGF0aW9ucykge1xuICAgICAgICAvLyBEZXRlY3QgY2hhbmdlcyBvbmx5IGZvciBzb3VyY2UgZWxlbWVudHMgb3Igc3JjIGF0dHJpYnV0ZVxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IG11dGF0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG11dCA9IG11dGF0aW9uc1tpXTtcbiAgICAgICAgICAgIGlmIChtdXQudHlwZSA9PT0gJ2F0dHJpYnV0ZXMnICYmIG11dC5hdHRyaWJ1dGVOYW1lID09PSAnc3JjJykge1xuICAgICAgICAgICAgICAgIC8vIE9ubHkgbG9hZCBzcmMgZmlsZSBpZiBpdCdzIG5vdCBhIGJsb2IgKGZvciBEQVNIIC8gSExTIHNvdXJjZXMpXG4gICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXN0cmluZy1saXRlcmFsXG4gICAgICAgICAgICAgICAgaWYgKG11dC50YXJnZXRbJ3NyYyddICYmIG11dC50YXJnZXRbJ3NyYyddLmxlbmd0aCA+IDAgJiYgbXV0LnRhcmdldFsnc3JjJ10uaW5kZXhPZignYmxvYjonKSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2FkTWVkaWEoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobXV0LnR5cGUgPT09ICdjaGlsZExpc3QnICYmIG11dC5yZW1vdmVkTm9kZXMubGVuZ3RoICYmIG11dC5yZW1vdmVkTm9kZXNbMF0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3NvdXJjZScpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWRNZWRpYSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGxvYWRNZWRpYSgpIHtcbiAgICAgICAgdGhpcy52Z01lZGlhLnBhdXNlKCk7XG4gICAgICAgIHRoaXMudmdNZWRpYS5jdXJyZW50VGltZSA9IDA7XG4gICAgICAgIC8vIFN0YXJ0IGJ1ZmZlcmluZyB1bnRpbCB3ZSBjYW4gcGxheSB0aGUgbWVkaWEgZmlsZVxuICAgICAgICB0aGlzLnN0b3BCdWZmZXJDaGVjaygpO1xuICAgICAgICB0aGlzLmlzQnVmZmVyRGV0ZWN0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmJ1ZmZlckRldGVjdGVkLm5leHQodGhpcy5pc0J1ZmZlckRldGVjdGVkKTtcbiAgICAgICAgLy8gVE9ETzogVGhpcyBpcyB1Z2x5LCB3ZSBzaG91bGQgZmluZCBzb21ldGhpbmcgY2xlYW5lci4gRm9yIHNvbWUgcmVhc29uIGEgVGltZXJPYnNlcnZhYmxlIGRvZXNuJ3Qgd29ya3MuXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy52Z01lZGlhLmxvYWQoKSwgMTApO1xuICAgIH1cbiAgICBwbGF5KCkge1xuICAgICAgICAvLyBzaG9ydC1jaXJjdWl0IGlmIGFscmVhZHkgcGxheWluZ1xuICAgICAgICBpZiAodGhpcy5wbGF5UHJvbWlzZSB8fCAodGhpcy5zdGF0ZSAhPT0gVmdTdGF0ZXMuVkdfUEFVU0VEICYmIHRoaXMuc3RhdGUgIT09IFZnU3RhdGVzLlZHX0VOREVEKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGxheVByb21pc2UgPSB0aGlzLnZnTWVkaWEucGxheSgpO1xuICAgICAgICAvLyBicm93c2VyIGhhcyBhc3luYyBwbGF5IHByb21pc2VcbiAgICAgICAgaWYgKHRoaXMucGxheVByb21pc2UgJiYgdGhpcy5wbGF5UHJvbWlzZS50aGVuICYmIHRoaXMucGxheVByb21pc2UuY2F0Y2gpIHtcbiAgICAgICAgICAgIHRoaXMucGxheVByb21pc2VcbiAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5wbGF5UHJvbWlzZSA9IG51bGw7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5wbGF5UHJvbWlzZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgLy8gZGVsaWJlcmF0ZWx5IGVtcHR5IGZvciB0aGUgc2FrZSBvZiBlYXRpbmcgY29uc29sZSBub2lzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucGxheVByb21pc2U7XG4gICAgfVxuICAgIHBhdXNlKCkge1xuICAgICAgICAvLyBicm93c2VyIGhhcyBhc3luYyBwbGF5IHByb21pc2VcbiAgICAgICAgaWYgKHRoaXMucGxheVByb21pc2UpIHtcbiAgICAgICAgICAgIHRoaXMucGxheVByb21pc2VcbiAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy52Z01lZGlhLnBhdXNlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudmdNZWRpYS5wYXVzZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBpZCgpIHtcbiAgICAgICAgLy8gV2Ugc2hvdWxkIHJldHVybiB1bmRlZmluZWQgaWYgdmdNZWRpYSBzdGlsbCBkb2Vzbid0IGV4aXN0XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby11bm5lY2Vzc2FyeS1pbml0aWFsaXplclxuICAgICAgICBsZXQgcmVzdWx0ID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAodGhpcy52Z01lZGlhKSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLnZnTWVkaWEuaWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgZ2V0IGR1cmF0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52Z01lZGlhLmR1cmF0aW9uO1xuICAgIH1cbiAgICBzZXQgY3VycmVudFRpbWUoc2Vjb25kcykge1xuICAgICAgICB0aGlzLnZnTWVkaWEuY3VycmVudFRpbWUgPSBzZWNvbmRzO1xuICAgICAgICAvLyB0aGlzLmVsZW0uZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoVmdFdmVudHMuVkdfU0VFSykpO1xuICAgIH1cbiAgICBnZXQgY3VycmVudFRpbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZnTWVkaWEuY3VycmVudFRpbWU7XG4gICAgfVxuICAgIHNldCB2b2x1bWUodm9sdW1lKSB7XG4gICAgICAgIHRoaXMudmdNZWRpYS52b2x1bWUgPSB2b2x1bWU7XG4gICAgfVxuICAgIGdldCB2b2x1bWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZnTWVkaWEudm9sdW1lO1xuICAgIH1cbiAgICBzZXQgcGxheWJhY2tSYXRlKHJhdGUpIHtcbiAgICAgICAgdGhpcy52Z01lZGlhLnBsYXliYWNrUmF0ZSA9IHJhdGU7XG4gICAgfVxuICAgIGdldCBwbGF5YmFja1JhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZnTWVkaWEucGxheWJhY2tSYXRlO1xuICAgIH1cbiAgICBnZXQgYnVmZmVyZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZnTWVkaWEuYnVmZmVyZWQ7XG4gICAgfVxuICAgIGdldCB0ZXh0VHJhY2tzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52Z01lZGlhLnRleHRUcmFja3M7XG4gICAgfVxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBvbkNhblBsYXkoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5pc0J1ZmZlckRldGVjdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYnVmZmVyRGV0ZWN0ZWQubmV4dCh0aGlzLmlzQnVmZmVyRGV0ZWN0ZWQpO1xuICAgICAgICB0aGlzLmNhblBsYXkgPSB0cnVlO1xuICAgICAgICB0aGlzLnJlZi5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgfVxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBvbkNhblBsYXlUaHJvdWdoKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuaXNCdWZmZXJEZXRlY3RlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmJ1ZmZlckRldGVjdGVkLm5leHQodGhpcy5pc0J1ZmZlckRldGVjdGVkKTtcbiAgICAgICAgdGhpcy5jYW5QbGF5VGhyb3VnaCA9IHRydWU7XG4gICAgICAgIHRoaXMucmVmLmRldGVjdENoYW5nZXMoKTtcbiAgICB9XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIG9uTG9hZE1ldGFkYXRhKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuaXNNZXRhZGF0YUxvYWRlZCA9IHRydWU7XG4gICAgICAgIHRoaXMudGltZSA9IHtcbiAgICAgICAgICAgIGN1cnJlbnQ6IDAsXG4gICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgdG90YWw6IHRoaXMuZHVyYXRpb24gKiAxMDAwXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc3RhdGUgPSBWZ1N0YXRlcy5WR19QQVVTRUQ7XG4gICAgICAgIC8vIExpdmUgc3RyZWFtaW5nIGNoZWNrXG4gICAgICAgIGNvbnN0IHQgPSBNYXRoLnJvdW5kKHRoaXMudGltZS50b3RhbCk7XG4gICAgICAgIHRoaXMuaXNMaXZlID0gKHQgPT09IEluZmluaXR5KTtcbiAgICAgICAgdGhpcy5yZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH1cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgb25XYWl0KGV2ZW50KSB7XG4gICAgICAgIHRoaXMuaXNXYWl0aW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5yZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH1cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgb25Db21wbGV0ZShldmVudCkge1xuICAgICAgICB0aGlzLmlzQ29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFZnU3RhdGVzLlZHX0VOREVEO1xuICAgICAgICB0aGlzLnJlZi5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgfVxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBvblN0YXJ0UGxheWluZyhldmVudCkge1xuICAgICAgICB0aGlzLnN0YXRlID0gVmdTdGF0ZXMuVkdfUExBWUlORztcbiAgICAgICAgdGhpcy5yZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH1cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgb25QbGF5KGV2ZW50KSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBWZ1N0YXRlcy5WR19QTEFZSU5HO1xuICAgICAgICBpZiAodGhpcy52Z01hc3Rlcikge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnN5bmNTdWJzY3JpcHRpb24gfHwgdGhpcy5zeW5jU3Vic2NyaXB0aW9uLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRTeW5jKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGFydEJ1ZmZlckNoZWNrKCk7XG4gICAgICAgIHRoaXMucmVmLmRldGVjdENoYW5nZXMoKTtcbiAgICB9XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIG9uUGF1c2UoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFZnU3RhdGVzLlZHX1BBVVNFRDtcbiAgICAgICAgaWYgKHRoaXMudmdNYXN0ZXIpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5wbGF5QXRmZXJTeW5jKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zeW5jU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdG9wQnVmZmVyQ2hlY2soKTtcbiAgICAgICAgdGhpcy5yZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH1cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgb25UaW1lVXBkYXRlKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IGVuZCA9IHRoaXMuYnVmZmVyZWQubGVuZ3RoIC0gMTtcbiAgICAgICAgdGhpcy50aW1lID0ge1xuICAgICAgICAgICAgY3VycmVudDogdGhpcy5jdXJyZW50VGltZSAqIDEwMDAsXG4gICAgICAgICAgICB0b3RhbDogdGhpcy50aW1lLnRvdGFsLFxuICAgICAgICAgICAgbGVmdDogKHRoaXMuZHVyYXRpb24gLSB0aGlzLmN1cnJlbnRUaW1lKSAqIDEwMDBcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGVuZCA+PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlciA9IHsgZW5kOiB0aGlzLmJ1ZmZlcmVkLmVuZChlbmQpICogMTAwMCB9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVmLmRldGVjdENoYW5nZXMoKTtcbiAgICB9XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIG9uUHJvZ3Jlc3MoZXZlbnQpIHtcbiAgICAgICAgY29uc3QgZW5kID0gdGhpcy5idWZmZXJlZC5sZW5ndGggLSAxO1xuICAgICAgICBpZiAoZW5kID49IDApIHtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyID0geyBlbmQ6IHRoaXMuYnVmZmVyZWQuZW5kKGVuZCkgKiAxMDAwIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH1cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgb25Wb2x1bWVDaGFuZ2UoZXZlbnQpIHtcbiAgICAgICAgLy8gVE9ETzogU2F2ZSB0byBsb2NhbHN0b3JhZ2UgdGhlIGN1cnJlbnQgdm9sdW1lXG4gICAgICAgIHRoaXMucmVmLmRldGVjdENoYW5nZXMoKTtcbiAgICB9XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIG9uRXJyb3IoZXZlbnQpIHtcbiAgICAgICAgLy8gVE9ETzogSGFuZGxlIGVycm9yIG1lc3NhZ2VzXG4gICAgICAgIHRoaXMucmVmLmRldGVjdENoYW5nZXMoKTtcbiAgICB9XG4gICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjM4MjgyNDEvNzc5NTI5XG4gICAgYnVmZmVyQ2hlY2soKSB7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IDEgLyB0aGlzLmNoZWNrSW50ZXJ2YWw7XG4gICAgICAgIHRoaXMuY3VycmVudFBsYXlQb3MgPSB0aGlzLmN1cnJlbnRUaW1lO1xuICAgICAgICBpZiAoIXRoaXMuaXNCdWZmZXJEZXRlY3RlZCAmJiB0aGlzLmN1cnJlbnRQbGF5UG9zIDwgKHRoaXMubGFzdFBsYXlQb3MgKyBvZmZzZXQpKSB7XG4gICAgICAgICAgICB0aGlzLmlzQnVmZmVyRGV0ZWN0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzQnVmZmVyRGV0ZWN0ZWQgJiYgdGhpcy5jdXJyZW50UGxheVBvcyA+ICh0aGlzLmxhc3RQbGF5UG9zICsgb2Zmc2V0KSkge1xuICAgICAgICAgICAgdGhpcy5pc0J1ZmZlckRldGVjdGVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUHJldmVudCBjYWxscyB0byBidWZmZXJDaGVjayBhZnRlciBuZ09uRGVzdHJveSBoYXZlIGJlZW4gY2FsbGVkXG4gICAgICAgIGlmICghdGhpcy5idWZmZXJEZXRlY3RlZC5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyRGV0ZWN0ZWQubmV4dCh0aGlzLmlzQnVmZmVyRGV0ZWN0ZWQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGFzdFBsYXlQb3MgPSB0aGlzLmN1cnJlbnRQbGF5UG9zO1xuICAgIH1cbiAgICBzdGFydEJ1ZmZlckNoZWNrKCkge1xuICAgICAgICB0aGlzLmNoZWNrQnVmZmVyU3Vic2NyaXB0aW9uID0gdGltZXIoMCwgdGhpcy5jaGVja0ludGVydmFsKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5idWZmZXJDaGVjaygpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RvcEJ1ZmZlckNoZWNrKCkge1xuICAgICAgICBpZiAodGhpcy5jaGVja0J1ZmZlclN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5jaGVja0J1ZmZlclN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXNCdWZmZXJEZXRlY3RlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmJ1ZmZlckRldGVjdGVkLm5leHQodGhpcy5pc0J1ZmZlckRldGVjdGVkKTtcbiAgICB9XG4gICAgc2Vla1RpbWUodmFsdWUsIGJ5UGVyY2VudCA9IGZhbHNlKSB7XG4gICAgICAgIGxldCBzZWNvbmQ7XG4gICAgICAgIGNvbnN0IGR1cmF0aW9uID0gdGhpcy5kdXJhdGlvbjtcbiAgICAgICAgaWYgKGJ5UGVyY2VudCkge1xuICAgICAgICAgICAgc2Vjb25kID0gdmFsdWUgKiBkdXJhdGlvbiAvIDEwMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNlY29uZCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3VycmVudFRpbWUgPSBzZWNvbmQ7XG4gICAgfVxuICAgIGFkZFRleHRUcmFjayh0eXBlLCBsYWJlbCwgbGFuZ3VhZ2UsIG1vZGUpIHtcbiAgICAgICAgY29uc3QgbmV3VHJhY2sgPSB0aGlzLnZnTWVkaWEuYWRkVGV4dFRyYWNrKHR5cGUsIGxhYmVsLCBsYW5ndWFnZSk7XG4gICAgICAgIGlmIChtb2RlKSB7XG4gICAgICAgICAgICBuZXdUcmFjay5tb2RlID0gbW9kZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3VHJhY2s7XG4gICAgfVxuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLnZnTWVkaWEuc3JjID0gJyc7XG4gICAgICAgIHRoaXMubXV0YXRpb25PYnMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5jYW5QbGF5T2JzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMuY2FuUGxheVRocm91Z2hPYnMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5sb2FkZWRNZXRhZGF0YU9icy51bnN1YnNjcmliZSgpO1xuICAgICAgICB0aGlzLndhaXRpbmdPYnMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5wcm9ncmVzc09icy51bnN1YnNjcmliZSgpO1xuICAgICAgICB0aGlzLmVuZGVkT2JzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMucGxheWluZ09icy51bnN1YnNjcmliZSgpO1xuICAgICAgICB0aGlzLnBsYXlPYnMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5wYXVzZU9icy51bnN1YnNjcmliZSgpO1xuICAgICAgICB0aGlzLnRpbWVVcGRhdGVPYnMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy52b2x1bWVDaGFuZ2VPYnMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5lcnJvck9icy51bnN1YnNjcmliZSgpO1xuICAgICAgICBpZiAodGhpcy5jaGVja0J1ZmZlclN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5jaGVja0J1ZmZlclN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnN5bmNTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuc3luY1N1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYnVmZmVyRGV0ZWN0ZWQuY29tcGxldGUoKTtcbiAgICAgICAgdGhpcy5idWZmZXJEZXRlY3RlZC51bnN1YnNjcmliZSgpO1xuICAgICAgICB0aGlzLmFwaS51bnJlZ2lzdGVyTWVkaWEodGhpcyk7XG4gICAgfVxufTtcblZnTWVkaWEuY3RvclBhcmFtZXRlcnMgPSAoKSA9PiBbXG4gICAgeyB0eXBlOiBWZ0FQSSB9LFxuICAgIHsgdHlwZTogQ2hhbmdlRGV0ZWN0b3JSZWYgfVxuXTtcbl9fZGVjb3JhdGUoW1xuICAgIElucHV0KClcbl0sIFZnTWVkaWEucHJvdG90eXBlLCBcInZnTWVkaWFcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIElucHV0KClcbl0sIFZnTWVkaWEucHJvdG90eXBlLCBcInZnTWFzdGVyXCIsIHZvaWQgMCk7XG5WZ01lZGlhID0gX19kZWNvcmF0ZShbXG4gICAgRGlyZWN0aXZlKHtcbiAgICAgICAgc2VsZWN0b3I6ICdbdmdNZWRpYV0nXG4gICAgfSlcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLWNsYXNzLXN1ZmZpeFxuXSwgVmdNZWRpYSk7XG5leHBvcnQgeyBWZ01lZGlhIH07XG4iXX0=