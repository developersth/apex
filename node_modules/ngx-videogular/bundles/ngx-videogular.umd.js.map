{"version":3,"sources":["/Users/macpro/kritsadee/SVN/Cybersoft/apex/node_modules/ngx-videogular/bundles/ngx-videogular.umd.js"],"names":[],"mappings":"AAAA;+HAC2E;6GACA;sEACrC;iCACnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAA0C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wCA6MrB;;;;;gDAGnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAyRX;;;;;gDAGQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yDA4CuC;;;;;;;;;;;;;;;;;;;;;;;;oBAQjC;;;;;;SAMf;;;;;;;;;;;;;;;gDAWqB;;;;;;;;;;;UAWpB;;;;;gDAGmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2DA0G8B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAQpC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0JAkCmI;;;;;;;gDAKtI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA6IV;;;;;gDAGkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sDA8D0B;;;;;;;;;;;;;;;;;;;;;;;;oBAQ7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAoEuB;;;;;;;;;;;;;;;;;;;;;;;;;;oBAQ7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0DAyFuC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAQrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAiEgC;;;;;;;;;;;;;;;;;;;;;;;;;;oBAQ7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0DAmEkC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAQ7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4DA+L+B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAQrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+DA4CwC;;;;;;;;;;;;;;;;;oBAQ3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2DAwFuB;;;;;;;;;;;;;;;;;;;;;;oBAQ3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gEAuCgC;;;;;;;;;;;;;;;;;;;;;;oBAQ9B;;;;;;;;;;;;;;;;;;;;;;;;;;;UA2BxB;;;;;;gDAGY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wDA+CkC;;;;;;;;;;;;;;;;;;;;;;;;;;oBAQ9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uDAiE6B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAQ3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mEAqCuC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAQrC;;;;;;SAMrB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAsCoB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uCAmCU;;;;;gDAGlB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kDAgc6B;;;;;;;;;;;;oBAM9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gEA0E4C;;;;;;;;;;;;;;;;oBAMxC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iDAsEyB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAW5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAqDZ;;;;;;;;;;;;;;;gDAOgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uDA0O8B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAQlC;;;;;;;;;;;;;;;;SAgBZ;;;;;;;;;;;;;;;gDAWkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAwF0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAS3B;;;;;;SAMjB;;;;;;;;;;;;;;;gDAWuB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sDAwIsB;;;;;;;;;;;;;;;;;oBASnC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAuJkC;;;;;;;;;;;;;;;oBASnC;;;;;;SAMT;;;;;;;;;;;;;;;;;gDAWqB","file":"ngx-videogular.umd.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('rxjs'), require('rxjs/operators')) :\n    typeof define === 'function' && define.amd ? define('ngx-videogular', ['exports', '@angular/core', '@angular/common', 'rxjs', 'rxjs/operators'], factory) :\n    (global = global || self, factory(global['ngx-videogular'] = {}, global.ng.core, global.ng.common, global.rxjs, global.rxjs.operators));\n}(this, (function (exports, core, common, rxjs, operators) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __rest(s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    }\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\r\n\r\n    function __exportStar(m, exports) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    }\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\r\n\r\n    function __spreadArrays() {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    function __await(v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    }\r\n\r\n    function __asyncGenerator(thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    }\r\n\r\n    function __asyncDelegator(o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    }\r\n\r\n    function __asyncValues(o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    }\r\n\r\n    function __makeTemplateObject(cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    function __importStar(mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result.default = mod;\r\n        return result;\r\n    }\r\n\r\n    function __importDefault(mod) {\r\n        return (mod && mod.__esModule) ? mod : { default: mod };\r\n    }\n\n    var VgStates = /** @class */ (function () {\n        function VgStates() {\n        }\n        VgStates.VG_ENDED = 'ended';\n        VgStates.VG_PAUSED = 'paused';\n        VgStates.VG_PLAYING = 'playing';\n        VgStates.VG_LOADING = 'waiting';\n        VgStates = __decorate([\n            core.Injectable()\n        ], VgStates);\n        return VgStates;\n    }());\n\n    var VgAPI = /** @class */ (function () {\n        function VgAPI() {\n            // tslint:disable-next-line:ban-types\n            this.medias = {}; // TODO: refactor to Set<IPlayable>\n            this.playerReadyEvent = new core.EventEmitter(true);\n            this.isPlayerReady = false;\n        }\n        VgAPI.prototype.onPlayerReady = function (fsAPI) {\n            this.fsAPI = fsAPI;\n            this.isPlayerReady = true;\n            this.playerReadyEvent.emit(this);\n        };\n        VgAPI.prototype.getDefaultMedia = function () {\n            for (var item in this.medias) {\n                if (this.medias[item]) {\n                    return this.medias[item];\n                }\n            }\n        };\n        VgAPI.prototype.getMasterMedia = function () {\n            var master;\n            for (var id in this.medias) {\n                if (this.medias[id].vgMaster === 'true' || this.medias[id].vgMaster === true) {\n                    master = this.medias[id];\n                    break;\n                }\n            }\n            return master || this.getDefaultMedia();\n        };\n        VgAPI.prototype.isMasterDefined = function () {\n            var result = false;\n            for (var id in this.medias) {\n                if (this.medias[id].vgMaster === 'true' || this.medias[id].vgMaster === true) {\n                    result = true;\n                    break;\n                }\n            }\n            return result;\n        };\n        VgAPI.prototype.getMediaById = function (id) {\n            if (id === void 0) { id = null; }\n            var media = this.medias[id];\n            if (!id || id === '*') {\n                media = this;\n            }\n            return media;\n        };\n        VgAPI.prototype.play = function () {\n            for (var id in this.medias) {\n                if (this.medias[id]) {\n                    this.medias[id].play();\n                }\n            }\n        };\n        VgAPI.prototype.pause = function () {\n            for (var id in this.medias) {\n                if (this.medias[id]) {\n                    this.medias[id].pause();\n                }\n            }\n        };\n        Object.defineProperty(VgAPI.prototype, \"duration\", {\n            get: function () {\n                return this.$$getAllProperties('duration');\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(VgAPI.prototype, \"currentTime\", {\n            get: function () {\n                return this.$$getAllProperties('currentTime');\n            },\n            set: function (seconds) {\n                this.$$setAllProperties('currentTime', seconds);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(VgAPI.prototype, \"state\", {\n            get: function () {\n                return this.$$getAllProperties('state');\n            },\n            set: function (state) {\n                this.$$setAllProperties('state', state);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(VgAPI.prototype, \"volume\", {\n            get: function () {\n                return this.$$getAllProperties('volume');\n            },\n            set: function (volume) {\n                this.$$setAllProperties('volume', volume);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(VgAPI.prototype, \"playbackRate\", {\n            get: function () {\n                return this.$$getAllProperties('playbackRate');\n            },\n            set: function (rate) {\n                this.$$setAllProperties('playbackRate', rate);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(VgAPI.prototype, \"canPlay\", {\n            get: function () {\n                return this.$$getAllProperties('canPlay');\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(VgAPI.prototype, \"canPlayThrough\", {\n            get: function () {\n                return this.$$getAllProperties('canPlayThrough');\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(VgAPI.prototype, \"isMetadataLoaded\", {\n            get: function () {\n                return this.$$getAllProperties('isMetadataLoaded');\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(VgAPI.prototype, \"isWaiting\", {\n            get: function () {\n                return this.$$getAllProperties('isWaiting');\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(VgAPI.prototype, \"isCompleted\", {\n            get: function () {\n                return this.$$getAllProperties('isCompleted');\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(VgAPI.prototype, \"isLive\", {\n            get: function () {\n                return this.$$getAllProperties('isLive');\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(VgAPI.prototype, \"isMaster\", {\n            get: function () {\n                return this.$$getAllProperties('isMaster');\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(VgAPI.prototype, \"time\", {\n            get: function () {\n                return this.$$getAllProperties('time');\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(VgAPI.prototype, \"buffer\", {\n            get: function () {\n                return this.$$getAllProperties('buffer');\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(VgAPI.prototype, \"buffered\", {\n            get: function () {\n                return this.$$getAllProperties('buffered');\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(VgAPI.prototype, \"subscriptions\", {\n            get: function () {\n                return this.$$getAllProperties('subscriptions');\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(VgAPI.prototype, \"textTracks\", {\n            get: function () {\n                return this.$$getAllProperties('textTracks');\n            },\n            enumerable: true,\n            configurable: true\n        });\n        VgAPI.prototype.seekTime = function (value, byPercent) {\n            if (byPercent === void 0) { byPercent = false; }\n            for (var id in this.medias) {\n                if (this.medias[id]) {\n                    this.$$seek(this.medias[id], value, byPercent);\n                }\n            }\n        };\n        VgAPI.prototype.$$seek = function (media, value, byPercent) {\n            if (byPercent === void 0) { byPercent = false; }\n            var second;\n            var duration = media.duration;\n            if (byPercent) {\n                if (this.isMasterDefined()) {\n                    duration = this.getMasterMedia().duration;\n                }\n                second = value * duration / 100;\n            }\n            else {\n                second = value;\n            }\n            media.currentTime = second;\n        };\n        VgAPI.prototype.addTextTrack = function (type, label, language) {\n            for (var id in this.medias) {\n                if (this.medias[id]) {\n                    this.$$addTextTrack(this.medias[id], type, label, language);\n                }\n            }\n        };\n        VgAPI.prototype.$$addTextTrack = function (media, type, label, language) {\n            media.addTextTrack(type, label, language);\n        };\n        VgAPI.prototype.$$getAllProperties = function (property) {\n            var medias = {};\n            var result;\n            for (var id in this.medias) {\n                if (this.medias[id]) {\n                    medias[id] = this.medias[id];\n                }\n            }\n            var nMedias = Object.keys(medias).length;\n            switch (nMedias) {\n                case 0:\n                    // Return default values until vgMedia is initialized\n                    switch (property) {\n                        case 'state':\n                            result = VgStates.VG_PAUSED;\n                            break;\n                        case 'playbackRate':\n                        case 'volume':\n                            result = 1;\n                            break;\n                        case 'time':\n                            result = { current: 0, total: 0, left: 0 };\n                            break;\n                    }\n                    break;\n                case 1:\n                    // If there's only one media element then return the plain value\n                    var firstMediaId = Object.keys(medias)[0];\n                    result = medias[firstMediaId][property];\n                    break;\n                default:\n                    // TODO: return 'master' value\n                    var master = this.getMasterMedia();\n                    result = medias[master.id][property];\n            }\n            return result;\n        };\n        VgAPI.prototype.$$setAllProperties = function (property, value) {\n            for (var id in this.medias) {\n                if (this.medias[id]) {\n                    this.medias[id][property] = value;\n                }\n            }\n        };\n        VgAPI.prototype.registerElement = function (elem) {\n            this.videogularElement = elem;\n        };\n        VgAPI.prototype.registerMedia = function (media) {\n            this.medias[media.id] = media;\n        };\n        VgAPI.prototype.unregisterMedia = function (media) {\n            delete this.medias[media.id];\n        };\n        VgAPI = __decorate([\n            core.Injectable()\n        ], VgAPI);\n        return VgAPI;\n    }());\n\n    // tslint:disable:component-class-suffix\n    var VgBuffering = /** @class */ (function () {\n        function VgBuffering(ref, API) {\n            this.API = API;\n            this.checkInterval = 50;\n            this.currentPlayPos = 0;\n            this.lastPlayPos = 0;\n            this.subscriptions = [];\n            this.isBuffering = false;\n            this.elem = ref.nativeElement;\n        }\n        VgBuffering.prototype.ngOnInit = function () {\n            var _this = this;\n            if (this.API.isPlayerReady) {\n                this.onPlayerReady();\n            }\n            else {\n                this.subscriptions.push(this.API.playerReadyEvent.subscribe(function () { return _this.onPlayerReady(); }));\n            }\n        };\n        VgBuffering.prototype.onPlayerReady = function () {\n            var _this = this;\n            this.target = this.API.getMediaById(this.vgFor);\n            this.subscriptions.push(this.target.subscriptions.bufferDetected.subscribe(function (isBuffering) { return _this.onUpdateBuffer(isBuffering); }));\n        };\n        VgBuffering.prototype.onUpdateBuffer = function (isBuffering) {\n            this.isBuffering = isBuffering;\n        };\n        VgBuffering.prototype.ngOnDestroy = function () {\n            this.subscriptions.forEach(function (s) { return s.unsubscribe(); });\n        };\n        VgBuffering.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: VgAPI }\n        ]; };\n        __decorate([\n            core.Input()\n        ], VgBuffering.prototype, \"vgFor\", void 0);\n        __decorate([\n            core.HostBinding('class.is-buffering')\n        ], VgBuffering.prototype, \"isBuffering\", void 0);\n        VgBuffering = __decorate([\n            core.Component({\n                selector: 'vg-buffering',\n                encapsulation: core.ViewEncapsulation.None,\n                template: \"<div class=\\\"vg-buffering\\\">\\n            <div class=\\\"bufferingContainer\\\">\\n                <div class=\\\"loadingSpinner\\\"></div>\\n            </div>\\n        </div>\",\n                styles: [\"\\n        vg-buffering {\\n            display: none;\\n            z-index: 201;\\n        }\\n        vg-buffering.is-buffering {\\n            display: block;\\n        }\\n\\n        .vg-buffering {\\n            position: absolute;\\n            display: block;\\n            width: 100%;\\n            height: 100%;\\n        }\\n        .vg-buffering .bufferingContainer {\\n            width: 100%;\\n            position: absolute;\\n            cursor: pointer;\\n            top: 50%;\\n            margin-top: -50px;\\n            zoom: 1;\\n            filter: alpha(opacity=60);\\n            opacity: 0.6;\\n        }\\n        /* Loading Spinner\\n        * http://www.alessioatzeni.com/blog/css3-loading-animation-loop/\\n        */\\n        .vg-buffering .loadingSpinner {\\n            background-color: rgba(0, 0, 0, 0);\\n            border: 5px solid rgba(255, 255, 255, 1);\\n            opacity: .9;\\n            border-top: 5px solid rgba(0, 0, 0, 0);\\n            border-left: 5px solid rgba(0, 0, 0, 0);\\n            border-radius: 50px;\\n            box-shadow: 0 0 35px #FFFFFF;\\n            width: 50px;\\n            height: 50px;\\n            margin: 0 auto;\\n            -moz-animation: spin .5s infinite linear;\\n            -webkit-animation: spin .5s infinite linear;\\n        }\\n        .vg-buffering .loadingSpinner .stop {\\n            -webkit-animation-play-state: paused;\\n            -moz-animation-play-state: paused;\\n        }\\n        @-moz-keyframes spin {\\n            0% {\\n                -moz-transform: rotate(0deg);\\n            }\\n            100% {\\n                -moz-transform: rotate(360deg);\\n            }\\n        }\\n        @-moz-keyframes spinoff {\\n            0% {\\n                -moz-transform: rotate(0deg);\\n            }\\n            100% {\\n                -moz-transform: rotate(-360deg);\\n            }\\n        }\\n        @-webkit-keyframes spin {\\n            0% {\\n                -webkit-transform: rotate(0deg);\\n            }\\n            100% {\\n                -webkit-transform: rotate(360deg);\\n            }\\n        }\\n        @-webkit-keyframes spinoff {\\n            0% {\\n                -webkit-transform: rotate(0deg);\\n            }\\n            100% {\\n                -webkit-transform: rotate(-360deg);\\n            }\\n        }\\n    \"]\n            })\n        ], VgBuffering);\n        return VgBuffering;\n    }());\n\n    var VgBufferingModule = /** @class */ (function () {\n        function VgBufferingModule() {\n        }\n        VgBufferingModule = __decorate([\n            core.NgModule({\n                imports: [common.CommonModule],\n                declarations: [\n                    VgBuffering\n                ],\n                exports: [\n                    VgBuffering\n                ]\n            })\n        ], VgBufferingModule);\n        return VgBufferingModule;\n    }());\n\n    var VgControlsHidden = /** @class */ (function () {\n        function VgControlsHidden() {\n            this.isHiddenSubject = new rxjs.Subject();\n            this.isHidden = this.isHiddenSubject.asObservable();\n        }\n        VgControlsHidden.prototype.state = function (hidden) {\n            this.isHiddenSubject.next(hidden);\n        };\n        VgControlsHidden = __decorate([\n            core.Injectable()\n        ], VgControlsHidden);\n        return VgControlsHidden;\n    }());\n\n    // tslint:disable:component-class-suffix\n    var VgControls = /** @class */ (function () {\n        function VgControls(API, ref, hidden) {\n            this.API = API;\n            this.ref = ref;\n            this.hidden = hidden;\n            this.isAdsPlaying = 'initial';\n            this.hideControls = false;\n            this.vgAutohide = false;\n            this.vgAutohideTime = 3;\n            this.subscriptions = [];\n            this.elem = ref.nativeElement;\n        }\n        VgControls.prototype.ngOnInit = function () {\n            var _this = this;\n            this.mouseMove$ = rxjs.fromEvent(this.API.videogularElement, 'mousemove');\n            this.subscriptions.push(this.mouseMove$.subscribe(this.show.bind(this)));\n            this.touchStart$ = rxjs.fromEvent(this.API.videogularElement, 'touchstart');\n            this.subscriptions.push(this.touchStart$.subscribe(this.show.bind(this)));\n            if (this.API.isPlayerReady) {\n                this.onPlayerReady();\n            }\n            else {\n                this.subscriptions.push(this.API.playerReadyEvent.subscribe(function () { return _this.onPlayerReady(); }));\n            }\n        };\n        VgControls.prototype.onPlayerReady = function () {\n            this.target = this.API.getMediaById(this.vgFor);\n            this.subscriptions.push(this.target.subscriptions.play.subscribe(this.onPlay.bind(this)));\n            this.subscriptions.push(this.target.subscriptions.pause.subscribe(this.onPause.bind(this)));\n            this.subscriptions.push(this.target.subscriptions.startAds.subscribe(this.onStartAds.bind(this)));\n            this.subscriptions.push(this.target.subscriptions.endAds.subscribe(this.onEndAds.bind(this)));\n        };\n        VgControls.prototype.ngAfterViewInit = function () {\n            if (this.vgAutohide) {\n                this.hide();\n            }\n            else {\n                this.show();\n            }\n        };\n        VgControls.prototype.onPlay = function () {\n            if (this.vgAutohide) {\n                this.hide();\n            }\n        };\n        VgControls.prototype.onPause = function () {\n            clearTimeout(this.timer);\n            this.hideControls = false;\n            this.hidden.state(false);\n        };\n        VgControls.prototype.onStartAds = function () {\n            this.isAdsPlaying = 'none';\n        };\n        VgControls.prototype.onEndAds = function () {\n            this.isAdsPlaying = 'initial';\n        };\n        VgControls.prototype.hide = function () {\n            if (this.vgAutohide) {\n                clearTimeout(this.timer);\n                this.hideAsync();\n            }\n        };\n        VgControls.prototype.show = function () {\n            clearTimeout(this.timer);\n            this.hideControls = false;\n            this.hidden.state(false);\n            if (this.vgAutohide) {\n                this.hideAsync();\n            }\n        };\n        VgControls.prototype.hideAsync = function () {\n            var _this = this;\n            if (this.API.state === VgStates.VG_PLAYING) {\n                this.timer = setTimeout(function () {\n                    _this.hideControls = true;\n                    _this.hidden.state(true);\n                }, this.vgAutohideTime * 1000);\n            }\n        };\n        VgControls.prototype.ngOnDestroy = function () {\n            this.subscriptions.forEach(function (s) { return s.unsubscribe(); });\n        };\n        VgControls.ctorParameters = function () { return [\n            { type: VgAPI },\n            { type: core.ElementRef },\n            { type: VgControlsHidden }\n        ]; };\n        __decorate([\n            core.HostBinding('style.pointer-events')\n        ], VgControls.prototype, \"isAdsPlaying\", void 0);\n        __decorate([\n            core.HostBinding('class.hide')\n        ], VgControls.prototype, \"hideControls\", void 0);\n        __decorate([\n            core.Input()\n        ], VgControls.prototype, \"vgFor\", void 0);\n        __decorate([\n            core.Input()\n        ], VgControls.prototype, \"vgAutohide\", void 0);\n        __decorate([\n            core.Input()\n        ], VgControls.prototype, \"vgAutohideTime\", void 0);\n        VgControls = __decorate([\n            core.Component({\n                selector: 'vg-controls',\n                encapsulation: core.ViewEncapsulation.None,\n                template: \"<ng-content></ng-content>\",\n                styles: [\"\\n        vg-controls {\\n            position: absolute;\\n            display: flex;\\n            width: 100%;\\n            height: 50px;\\n            z-index: 300;\\n            bottom: 0;\\n            background-color: rgba(0, 0, 0, 0.5);\\n            -webkit-transition: bottom 1s;\\n            -khtml-transition: bottom 1s;\\n            -moz-transition: bottom 1s;\\n            -ms-transition: bottom 1s;\\n            transition: bottom 1s;\\n        }\\n        vg-controls.hide {\\n            bottom: -50px;\\n        }\\n    \"]\n            })\n        ], VgControls);\n        return VgControls;\n    }());\n\n    var VgUtils = /** @class */ (function () {\n        function VgUtils() {\n        }\n        /**\n         * Inspired by Paul Irish\n         * https://gist.github.com/paulirish/211209\n         * @returns z-Index\n         */\n        VgUtils.getZIndex = function () {\n            var zIndex = 1;\n            var elementZIndex;\n            var tags = document.getElementsByTagName('*');\n            for (var i = 0, l = tags.length; i < l; i++) {\n                elementZIndex = parseInt(window.getComputedStyle(tags[i])['z-index'], 10);\n                if (elementZIndex > zIndex) {\n                    zIndex = elementZIndex + 1;\n                }\n            }\n            return zIndex;\n        };\n        // Very simple mobile detection, not 100% reliable\n        VgUtils.isMobileDevice = function () {\n            return (typeof window.orientation !== 'undefined') || (navigator.userAgent.indexOf('IEMobile') !== -1);\n        };\n        VgUtils.isiOSDevice = function () {\n            return (navigator.userAgent.match(/ip(hone|ad|od)/i) && !navigator.userAgent.match(/(iemobile)[\\/\\s]?([\\w\\.]*)/i));\n        };\n        VgUtils.isCordova = function () {\n            return document.URL.indexOf('http://') === -1 && document.URL.indexOf('https://') === -1;\n        };\n        VgUtils.ɵprov = core[\"ɵɵdefineInjectable\"]({ factory: function VgUtils_Factory() { return new VgUtils(); }, token: VgUtils, providedIn: \"root\" });\n        VgUtils = __decorate([\n            core.Injectable({\n                providedIn: 'root'\n            })\n        ], VgUtils);\n        return VgUtils;\n    }());\n\n    var VgFullscreenAPI = /** @class */ (function () {\n        function VgFullscreenAPI() {\n            this.nativeFullscreen = true;\n            this.isFullscreen = false;\n            this.onChangeFullscreen = new core.EventEmitter();\n        }\n        VgFullscreenAPI.prototype.init = function (elem, medias) {\n            var _this = this;\n            this.videogularElement = elem;\n            this.medias = medias;\n            var APIs = {\n                w3: {\n                    enabled: 'fullscreenEnabled',\n                    element: 'fullscreenElement',\n                    request: 'requestFullscreen',\n                    exit: 'exitFullscreen',\n                    onchange: 'fullscreenchange',\n                    onerror: 'fullscreenerror'\n                },\n                newWebkit: {\n                    enabled: 'webkitFullscreenEnabled',\n                    element: 'webkitFullscreenElement',\n                    request: 'webkitRequestFullscreen',\n                    exit: 'webkitExitFullscreen',\n                    onchange: 'webkitfullscreenchange',\n                    onerror: 'webkitfullscreenerror'\n                },\n                oldWebkit: {\n                    enabled: 'webkitIsFullScreen',\n                    element: 'webkitCurrentFullScreenElement',\n                    request: 'webkitRequestFullScreen',\n                    exit: 'webkitCancelFullScreen',\n                    onchange: 'webkitfullscreenchange',\n                    onerror: 'webkitfullscreenerror'\n                },\n                moz: {\n                    enabled: 'mozFullScreen',\n                    element: 'mozFullScreenElement',\n                    request: 'mozRequestFullScreen',\n                    exit: 'mozCancelFullScreen',\n                    onchange: 'mozfullscreenchange',\n                    onerror: 'mozfullscreenerror'\n                },\n                ios: {\n                    enabled: 'webkitFullscreenEnabled',\n                    element: 'webkitFullscreenElement',\n                    request: 'webkitEnterFullscreen',\n                    exit: 'webkitExitFullscreen',\n                    onchange: 'webkitendfullscreen',\n                    onerror: 'webkitfullscreenerror'\n                },\n                ms: {\n                    enabled: 'msFullscreenEnabled',\n                    element: 'msFullscreenElement',\n                    request: 'msRequestFullscreen',\n                    exit: 'msExitFullscreen',\n                    onchange: 'MSFullscreenChange',\n                    onerror: 'MSFullscreenError'\n                }\n            };\n            for (var browser in APIs) {\n                if (APIs[browser].enabled in document) {\n                    this.polyfill = APIs[browser];\n                    break;\n                }\n            }\n            if (VgUtils.isiOSDevice()) {\n                this.polyfill = APIs.ios;\n            }\n            this.isAvailable = (this.polyfill != null);\n            if (this.polyfill == null) {\n                return;\n            }\n            var fsElemDispatcher;\n            switch (this.polyfill.onchange) {\n                // Mozilla dispatches the fullscreen change event from document, not the element\n                // See: https://bugzilla.mozilla.org/show_bug.cgi?id=724816#c3\n                case 'mozfullscreenchange':\n                    fsElemDispatcher = document;\n                    break;\n                // iOS dispatches the fullscreen change event from video element\n                case 'webkitendfullscreen':\n                    fsElemDispatcher = this.medias.toArray()[0].elem;\n                    break;\n                // HTML5 implementation dispatches the fullscreen change event from the element\n                default:\n                    fsElemDispatcher = elem;\n            }\n            this.fsChangeSubscription = rxjs.fromEvent(fsElemDispatcher, this.polyfill.onchange).subscribe(function () {\n                _this.onFullscreenChange();\n            });\n        };\n        VgFullscreenAPI.prototype.onFullscreenChange = function () {\n            this.isFullscreen = !!document[this.polyfill.element];\n            this.onChangeFullscreen.emit(this.isFullscreen);\n        };\n        VgFullscreenAPI.prototype.toggleFullscreen = function (element) {\n            if (element === void 0) { element = null; }\n            if (this.isFullscreen) {\n                this.exit();\n            }\n            else {\n                this.request(element);\n            }\n        };\n        VgFullscreenAPI.prototype.request = function (elem) {\n            if (!elem) {\n                elem = this.videogularElement;\n            }\n            this.isFullscreen = true;\n            this.onChangeFullscreen.emit(true);\n            // Perform native full screen support\n            if (this.isAvailable && this.nativeFullscreen) {\n                // Fullscreen for mobile devices\n                if (VgUtils.isMobileDevice()) {\n                    // We should make fullscreen the video object if it doesn't have native fullscreen support\n                    // Fallback! We can't set vg-player on fullscreen, only video/audio objects\n                    if ((!this.polyfill.enabled && elem === this.videogularElement) || VgUtils.isiOSDevice()) {\n                        elem = this.medias.toArray()[0].elem;\n                    }\n                    this.enterElementInFullScreen(elem);\n                }\n                else {\n                    this.enterElementInFullScreen(this.videogularElement);\n                }\n            }\n        };\n        VgFullscreenAPI.prototype.enterElementInFullScreen = function (elem) {\n            elem[this.polyfill.request]();\n        };\n        VgFullscreenAPI.prototype.exit = function () {\n            this.isFullscreen = false;\n            this.onChangeFullscreen.emit(false);\n            // Exit from native fullscreen\n            if (this.isAvailable && this.nativeFullscreen) {\n                document[this.polyfill.exit]();\n            }\n        };\n        VgFullscreenAPI = __decorate([\n            core.Injectable()\n        ], VgFullscreenAPI);\n        return VgFullscreenAPI;\n    }());\n\n    // tslint:disable:component-class-suffix\n    // tslint:disable:ban-types\n    var VgFullscreen = /** @class */ (function () {\n        function VgFullscreen(ref, API, fsAPI) {\n            this.API = API;\n            this.fsAPI = fsAPI;\n            this.isFullscreen = false;\n            this.subscriptions = [];\n            this.ariaValue = 'normal mode';\n            this.elem = ref.nativeElement;\n            this.subscriptions.push(this.fsAPI.onChangeFullscreen.subscribe(this.onChangeFullscreen.bind(this)));\n        }\n        VgFullscreen.prototype.ngOnInit = function () {\n            var _this = this;\n            if (this.API.isPlayerReady) {\n                this.onPlayerReady();\n            }\n            else {\n                this.subscriptions.push(this.API.playerReadyEvent.subscribe(function () { return _this.onPlayerReady(); }));\n            }\n        };\n        VgFullscreen.prototype.onPlayerReady = function () {\n            this.target = this.API.getMediaById(this.vgFor);\n        };\n        VgFullscreen.prototype.onChangeFullscreen = function (fsState) {\n            this.ariaValue = fsState ? 'fullscren mode' : 'normal mode';\n            this.isFullscreen = fsState;\n        };\n        VgFullscreen.prototype.onClick = function () {\n            this.changeFullscreenState();\n        };\n        VgFullscreen.prototype.onKeyDown = function (event) {\n            // On press Enter (13) or Space (32)\n            if (event.keyCode === 13 || event.keyCode === 32) {\n                event.preventDefault();\n                this.changeFullscreenState();\n            }\n        };\n        VgFullscreen.prototype.changeFullscreenState = function () {\n            var element = this.target;\n            if (this.target instanceof VgAPI) {\n                element = null;\n            }\n            this.fsAPI.toggleFullscreen(element);\n        };\n        VgFullscreen.prototype.ngOnDestroy = function () {\n            this.subscriptions.forEach(function (s) { return s.unsubscribe(); });\n        };\n        VgFullscreen.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: VgAPI },\n            { type: VgFullscreenAPI }\n        ]; };\n        __decorate([\n            core.HostListener('click')\n        ], VgFullscreen.prototype, \"onClick\", null);\n        __decorate([\n            core.HostListener('keydown', ['$event'])\n        ], VgFullscreen.prototype, \"onKeyDown\", null);\n        VgFullscreen = __decorate([\n            core.Component({\n                selector: 'vg-fullscreen',\n                encapsulation: core.ViewEncapsulation.None,\n                template: \"\\n        <div class=\\\"icon\\\"\\n             [class.vg-icon-fullscreen]=\\\"!isFullscreen\\\"\\n             [class.vg-icon-fullscreen_exit]=\\\"isFullscreen\\\"\\n             tabindex=\\\"0\\\"\\n             role=\\\"button\\\"\\n             aria-label=\\\"fullscreen button\\\"\\n             [attr.aria-valuetext]=\\\"ariaValue\\\">\\n        </div>\",\n                styles: [\"\\n        vg-fullscreen {\\n            -webkit-touch-callout: none;\\n            -webkit-user-select: none;\\n            -khtml-user-select: none;\\n            -moz-user-select: none;\\n            -ms-user-select: none;\\n            user-select: none;\\n            display: flex;\\n            justify-content: center;\\n            height: 50px;\\n            width: 50px;\\n            cursor: pointer;\\n            color: white;\\n            line-height: 50px;\\n        }\\n\\n        vg-fullscreen .icon {\\n            pointer-events: none;\\n        }\\n    \"]\n            })\n        ], VgFullscreen);\n        return VgFullscreen;\n    }());\n\n    // tslint:disable:component-class-suffix\n    var VgMute = /** @class */ (function () {\n        function VgMute(ref, API) {\n            this.API = API;\n            this.subscriptions = [];\n            this.ariaValue = 'unmuted';\n            this.elem = ref.nativeElement;\n        }\n        VgMute.prototype.ngOnInit = function () {\n            var _this = this;\n            if (this.API.isPlayerReady) {\n                this.onPlayerReady();\n            }\n            else {\n                this.subscriptions.push(this.API.playerReadyEvent.subscribe(function () { return _this.onPlayerReady(); }));\n            }\n        };\n        VgMute.prototype.onPlayerReady = function () {\n            this.target = this.API.getMediaById(this.vgFor);\n            this.currentVolume = this.target.volume;\n        };\n        VgMute.prototype.onClick = function () {\n            this.changeMuteState();\n        };\n        VgMute.prototype.onKeyDown = function (event) {\n            // On press Enter (13) or Space (32)\n            if (event.keyCode === 13 || event.keyCode === 32) {\n                event.preventDefault();\n                this.changeMuteState();\n            }\n        };\n        VgMute.prototype.changeMuteState = function () {\n            var volume = this.getVolume();\n            if (volume === 0) {\n                if (this.target.volume === 0 && this.currentVolume === 0) {\n                    this.currentVolume = 1;\n                }\n                this.target.volume = this.currentVolume;\n            }\n            else {\n                this.currentVolume = volume;\n                this.target.volume = 0;\n            }\n        };\n        VgMute.prototype.getVolume = function () {\n            var volume = this.target ? this.target.volume : 0;\n            this.ariaValue = volume ? 'unmuted' : 'muted';\n            return volume;\n        };\n        VgMute.prototype.ngOnDestroy = function () {\n            this.subscriptions.forEach(function (s) { return s.unsubscribe(); });\n        };\n        VgMute.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: VgAPI }\n        ]; };\n        __decorate([\n            core.Input()\n        ], VgMute.prototype, \"vgFor\", void 0);\n        __decorate([\n            core.HostListener('click')\n        ], VgMute.prototype, \"onClick\", null);\n        __decorate([\n            core.HostListener('keydown', ['$event'])\n        ], VgMute.prototype, \"onKeyDown\", null);\n        VgMute = __decorate([\n            core.Component({\n                selector: 'vg-mute',\n                encapsulation: core.ViewEncapsulation.None,\n                template: \"\\n        <div class=\\\"icon\\\"\\n             [class.vg-icon-volume_up]=\\\"getVolume() >= 0.75\\\"\\n             [class.vg-icon-volume_down]=\\\"getVolume() >= 0.25 && getVolume() < 0.75\\\"\\n             [class.vg-icon-volume_mute]=\\\"getVolume() > 0 && getVolume() < 0.25\\\"\\n             [class.vg-icon-volume_off]=\\\"getVolume() === 0\\\"\\n             tabindex=\\\"0\\\"\\n             role=\\\"button\\\"\\n             aria-label=\\\"mute button\\\"\\n             [attr.aria-valuetext]=\\\"ariaValue\\\">\\n        </div>\",\n                styles: [\"\\n        vg-mute {\\n            -webkit-touch-callout: none;\\n            -webkit-user-select: none;\\n            -khtml-user-select: none;\\n            -moz-user-select: none;\\n            -ms-user-select: none;\\n            user-select: none;\\n            display: flex;\\n            justify-content: center;\\n            height: 50px;\\n            width: 50px;\\n            cursor: pointer;\\n            color: white;\\n            line-height: 50px;\\n        }\\n        vg-mute .icon {\\n            pointer-events: none;\\n        }\\n    \"]\n            })\n        ], VgMute);\n        return VgMute;\n    }());\n\n    // tslint:disable:component-class-suffix\n    var VgVolume = /** @class */ (function () {\n        function VgVolume(ref, API) {\n            this.API = API;\n            this.subscriptions = [];\n            this.elem = ref.nativeElement;\n            this.isDragging = false;\n        }\n        VgVolume.prototype.ngOnInit = function () {\n            var _this = this;\n            if (this.API.isPlayerReady) {\n                this.onPlayerReady();\n            }\n            else {\n                this.subscriptions.push(this.API.playerReadyEvent.subscribe(function () { return _this.onPlayerReady(); }));\n            }\n        };\n        VgVolume.prototype.onPlayerReady = function () {\n            this.target = this.API.getMediaById(this.vgFor);\n            this.ariaValue = this.getVolume() * 100;\n        };\n        VgVolume.prototype.onClick = function (event) {\n            this.setVolume(this.calculateVolume(event.clientX));\n        };\n        VgVolume.prototype.onMouseDown = function (event) {\n            this.mouseDownPosX = event.clientX;\n            this.isDragging = true;\n        };\n        VgVolume.prototype.onDrag = function (event) {\n            if (this.isDragging) {\n                this.setVolume(this.calculateVolume(event.clientX));\n            }\n        };\n        VgVolume.prototype.onStopDrag = function (event) {\n            if (this.isDragging) {\n                this.isDragging = false;\n                if (this.mouseDownPosX === event.clientX) {\n                    this.setVolume(this.calculateVolume(event.clientX));\n                }\n            }\n        };\n        VgVolume.prototype.arrowAdjustVolume = function (event) {\n            if (event.keyCode === 38 || event.keyCode === 39) {\n                event.preventDefault();\n                this.setVolume(Math.max(0, Math.min(100, this.getVolume() * 100 + 10)));\n            }\n            else if (event.keyCode === 37 || event.keyCode === 40) {\n                event.preventDefault();\n                this.setVolume(Math.max(0, Math.min(100, this.getVolume() * 100 - 10)));\n            }\n        };\n        VgVolume.prototype.calculateVolume = function (mousePosX) {\n            var recObj = this.volumeBarRef.nativeElement.getBoundingClientRect();\n            var volumeBarOffsetLeft = recObj.left;\n            var volumeBarWidth = recObj.width;\n            return (mousePosX - volumeBarOffsetLeft) / volumeBarWidth * 100;\n        };\n        VgVolume.prototype.setVolume = function (vol) {\n            this.target.volume = Math.max(0, Math.min(1, vol / 100));\n            this.ariaValue = this.target.volume * 100;\n        };\n        VgVolume.prototype.getVolume = function () {\n            return this.target ? this.target.volume : 0;\n        };\n        VgVolume.prototype.ngOnDestroy = function () {\n            this.subscriptions.forEach(function (s) { return s.unsubscribe(); });\n        };\n        VgVolume.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: VgAPI }\n        ]; };\n        __decorate([\n            core.Input()\n        ], VgVolume.prototype, \"vgFor\", void 0);\n        __decorate([\n            core.ViewChild('volumeBar', { static: true })\n        ], VgVolume.prototype, \"volumeBarRef\", void 0);\n        __decorate([\n            core.HostListener('document:mousemove', ['$event'])\n        ], VgVolume.prototype, \"onDrag\", null);\n        __decorate([\n            core.HostListener('document:mouseup', ['$event'])\n        ], VgVolume.prototype, \"onStopDrag\", null);\n        __decorate([\n            core.HostListener('keydown', ['$event'])\n        ], VgVolume.prototype, \"arrowAdjustVolume\", null);\n        VgVolume = __decorate([\n            core.Component({\n                selector: 'vg-volume',\n                encapsulation: core.ViewEncapsulation.None,\n                template: \"\\n        <div\\n            #volumeBar\\n            class=\\\"volumeBar\\\"\\n            tabindex=\\\"0\\\"\\n            role=\\\"slider\\\"\\n            aria-label=\\\"volume level\\\"\\n            aria-level=\\\"polite\\\"\\n            [attr.aria-valuenow]=\\\"ariaValue\\\"\\n            aria-valuemin=\\\"0\\\"\\n            aria-valuemax=\\\"100\\\"\\n            aria-orientation=\\\"horizontal\\\"\\n            [attr.aria-valuetext]=\\\"ariaValue + '%'\\\"\\n            (click)=\\\"onClick($event)\\\"\\n            (mousedown)=\\\"onMouseDown($event)\\\">\\n            <div class=\\\"volumeBackground\\\" [ngClass]=\\\"{dragging: isDragging}\\\">\\n                <div class=\\\"volumeValue\\\" [style.width]=\\\"(getVolume() * (100-15)) + '%'\\\"></div>\\n                <div class=\\\"volumeKnob\\\" [style.left]=\\\"(getVolume() * (100-15)) + '%'\\\"></div>\\n            </div>\\n        </div>\\n    \",\n                styles: [\"\\n        vg-volume {\\n            -webkit-touch-callout: none;\\n            -webkit-user-select: none;\\n            -moz-user-select: none;\\n            -ms-user-select: none;\\n            user-select: none;\\n            display: flex;\\n            justify-content: center;\\n            height: 50px;\\n            width: 100px;\\n            cursor: pointer;\\n            color: white;\\n            line-height: 50px;\\n        }\\n        vg-volume .volumeBar {\\n            position: relative;\\n            display: flex;\\n            flex-grow: 1;\\n            align-items: center;\\n        }\\n        vg-volume .volumeBackground {\\n            display: flex;\\n            flex-grow: 1;\\n            height: 5px;\\n            pointer-events: none;\\n            background-color: #333;\\n        }\\n        vg-volume .volumeValue {\\n            display: flex;\\n            height: 5px;\\n            pointer-events: none;\\n            background-color: #FFF;\\n            transition:all 0.2s ease-out;\\n        }\\n        vg-volume .volumeKnob {\\n            position: absolute;\\n            width: 15px; height: 15px;\\n            left: 0; top: 50%;\\n            transform: translateY(-50%);\\n            border-radius: 15px;\\n            pointer-events: none;\\n            background-color: #FFF;\\n            transition:all 0.2s ease-out;\\n        }\\n        vg-volume .volumeBackground.dragging .volumeValue,\\n        vg-volume .volumeBackground.dragging .volumeKnob {\\n            transition: none;\\n        }\\n    \"]\n            })\n        ], VgVolume);\n        return VgVolume;\n    }());\n\n    // tslint:disable:component-class-suffix\n    var VgPlayPause = /** @class */ (function () {\n        function VgPlayPause(ref, API) {\n            this.API = API;\n            this.subscriptions = [];\n            this.ariaValue = VgStates.VG_PAUSED;\n            this.elem = ref.nativeElement;\n        }\n        VgPlayPause.prototype.ngOnInit = function () {\n            var _this = this;\n            if (this.API.isPlayerReady) {\n                this.onPlayerReady();\n            }\n            else {\n                this.subscriptions.push(this.API.playerReadyEvent.subscribe(function () { return _this.onPlayerReady(); }));\n            }\n        };\n        VgPlayPause.prototype.onPlayerReady = function () {\n            this.target = this.API.getMediaById(this.vgFor);\n        };\n        VgPlayPause.prototype.onClick = function () {\n            this.playPause();\n        };\n        VgPlayPause.prototype.onKeyDown = function (event) {\n            // On press Enter (13) or Space (32)\n            if (event.keyCode === 13 || event.keyCode === 32) {\n                event.preventDefault();\n                this.playPause();\n            }\n        };\n        VgPlayPause.prototype.playPause = function () {\n            var state = this.getState();\n            switch (state) {\n                case VgStates.VG_PLAYING:\n                    this.target.pause();\n                    break;\n                case VgStates.VG_PAUSED:\n                case VgStates.VG_ENDED:\n                    this.target.play();\n                    break;\n            }\n        };\n        VgPlayPause.prototype.getState = function () {\n            this.ariaValue = this.target ? this.target.state : VgStates.VG_PAUSED;\n            return this.ariaValue;\n        };\n        VgPlayPause.prototype.ngOnDestroy = function () {\n            this.subscriptions.forEach(function (s) { return s.unsubscribe(); });\n        };\n        VgPlayPause.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: VgAPI }\n        ]; };\n        __decorate([\n            core.Input()\n        ], VgPlayPause.prototype, \"vgFor\", void 0);\n        __decorate([\n            core.HostListener('click')\n        ], VgPlayPause.prototype, \"onClick\", null);\n        __decorate([\n            core.HostListener('keydown', ['$event'])\n        ], VgPlayPause.prototype, \"onKeyDown\", null);\n        VgPlayPause = __decorate([\n            core.Component({\n                selector: 'vg-play-pause',\n                encapsulation: core.ViewEncapsulation.None,\n                template: \"\\n        <div class=\\\"icon\\\"\\n             [class.vg-icon-pause]=\\\"getState() === 'playing'\\\"\\n             [class.vg-icon-play_arrow]=\\\"getState() === 'paused' || getState() === 'ended'\\\"\\n             tabindex=\\\"0\\\"\\n             role=\\\"button\\\"\\n             [attr.aria-label]=\\\"getState() === 'paused'?'play':'pause'\\\"\\n             [attr.aria-valuetext]=\\\"ariaValue\\\">\\n        </div>\",\n                styles: [\"\\n        vg-play-pause {\\n            -webkit-touch-callout: none;\\n            -webkit-user-select: none;\\n            -khtml-user-select: none;\\n            -moz-user-select: none;\\n            -ms-user-select: none;\\n            user-select: none;\\n            display: flex;\\n            justify-content: center;\\n            height: 50px;\\n            width: 50px;\\n            cursor: pointer;\\n            color: white;\\n            line-height: 50px;\\n        }\\n        vg-play-pause .icon {\\n            pointer-events: none;\\n        }\\n    \"]\n            })\n        ], VgPlayPause);\n        return VgPlayPause;\n    }());\n\n    // tslint:disable:component-class-suffix\n    var VgPlaybackButton = /** @class */ (function () {\n        function VgPlaybackButton(ref, API) {\n            this.API = API;\n            this.subscriptions = [];\n            this.ariaValue = 1;\n            this.elem = ref.nativeElement;\n            this.playbackValues = ['0.5', '1.0', '1.5', '2.0'];\n            this.playbackIndex = 1;\n        }\n        VgPlaybackButton.prototype.ngOnInit = function () {\n            var _this = this;\n            if (this.API.isPlayerReady) {\n                this.onPlayerReady();\n            }\n            else {\n                this.subscriptions.push(this.API.playerReadyEvent.subscribe(function () { return _this.onPlayerReady(); }));\n            }\n        };\n        VgPlaybackButton.prototype.onPlayerReady = function () {\n            this.target = this.API.getMediaById(this.vgFor);\n        };\n        VgPlaybackButton.prototype.onClick = function () {\n            this.updatePlaybackSpeed();\n        };\n        VgPlaybackButton.prototype.onKeyDown = function (event) {\n            // On press Enter (13) or Space (32)\n            if (event.keyCode === 13 || event.keyCode === 32) {\n                event.preventDefault();\n                this.updatePlaybackSpeed();\n            }\n        };\n        VgPlaybackButton.prototype.updatePlaybackSpeed = function () {\n            this.playbackIndex = ++this.playbackIndex % this.playbackValues.length;\n            if (this.target instanceof VgAPI) {\n                this.target.playbackRate = (this.playbackValues[this.playbackIndex]);\n            }\n            else {\n                this.target.playbackRate[this.vgFor] = (this.playbackValues[this.playbackIndex]);\n            }\n        };\n        VgPlaybackButton.prototype.getPlaybackRate = function () {\n            this.ariaValue = this.target ? this.target.playbackRate : 1.0;\n            return this.ariaValue;\n        };\n        VgPlaybackButton.prototype.ngOnDestroy = function () {\n            this.subscriptions.forEach(function (s) { return s.unsubscribe(); });\n        };\n        VgPlaybackButton.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: VgAPI }\n        ]; };\n        __decorate([\n            core.Input()\n        ], VgPlaybackButton.prototype, \"vgFor\", void 0);\n        __decorate([\n            core.Input()\n        ], VgPlaybackButton.prototype, \"playbackValues\", void 0);\n        __decorate([\n            core.HostListener('click')\n        ], VgPlaybackButton.prototype, \"onClick\", null);\n        __decorate([\n            core.HostListener('keydown', ['$event'])\n        ], VgPlaybackButton.prototype, \"onKeyDown\", null);\n        VgPlaybackButton = __decorate([\n            core.Component({\n                selector: 'vg-playback-button',\n                encapsulation: core.ViewEncapsulation.None,\n                template: \"\\n    <span class=\\\"button\\\"\\n          tabindex=\\\"0\\\"\\n          role=\\\"button\\\"\\n          aria-label=\\\"playback speed button\\\"\\n          [attr.aria-valuetext]=\\\"ariaValue\\\">\\n        {{getPlaybackRate()}}x\\n    </span>\",\n                styles: [\"\\n        vg-playback-button {\\n            -webkit-touch-callout: none;\\n            -webkit-user-select: none;\\n            -moz-user-select: none;\\n            -ms-user-select: none;\\n            user-select: none;\\n            display: flex;\\n            justify-content: center;\\n            height: 50px;\\n            width: 50px;\\n            cursor: pointer;\\n            color: white;\\n            line-height: 50px;\\n            font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\\n        }\\n        vg-playback-button .button {\\n            display: flex;\\n            align-items: center;\\n            justify-content: center;\\n            width: 50px;\\n        }\\n    \"]\n            })\n        ], VgPlaybackButton);\n        return VgPlaybackButton;\n    }());\n\n    // tslint:disable:component-class-suffix\n    var VgScrubBar = /** @class */ (function () {\n        function VgScrubBar(ref, API, vgControlsHiddenState) {\n            var _this = this;\n            this.API = API;\n            this.hideScrubBar = false;\n            this.vgSlider = true;\n            this.isSeeking = false;\n            this.wasPlaying = false;\n            this.subscriptions = [];\n            this.elem = ref.nativeElement;\n            this.subscriptions.push(vgControlsHiddenState.isHidden.subscribe(function (hide) { return _this.onHideScrubBar(hide); }));\n        }\n        VgScrubBar.prototype.ngOnInit = function () {\n            var _this = this;\n            if (this.API.isPlayerReady) {\n                this.onPlayerReady();\n            }\n            else {\n                this.subscriptions.push(this.API.playerReadyEvent.subscribe(function () { return _this.onPlayerReady(); }));\n            }\n        };\n        VgScrubBar.prototype.onPlayerReady = function () {\n            this.target = this.API.getMediaById(this.vgFor);\n        };\n        VgScrubBar.prototype.seekStart = function () {\n            if (this.target.canPlay) {\n                this.isSeeking = true;\n                if (this.target.state === VgStates.VG_PLAYING) {\n                    this.wasPlaying = true;\n                }\n                this.target.pause();\n            }\n        };\n        VgScrubBar.prototype.seekMove = function (offset) {\n            if (this.isSeeking) {\n                var percentage = Math.max(Math.min(offset * 100 / this.elem.scrollWidth, 99.9), 0);\n                this.target.time.current = percentage * this.target.time.total / 100;\n                this.target.seekTime(percentage, true);\n            }\n        };\n        VgScrubBar.prototype.seekEnd = function (offset) {\n            this.isSeeking = false;\n            if (this.target.canPlay) {\n                var percentage = Math.max(Math.min(offset * 100 / this.elem.scrollWidth, 99.9), 0);\n                this.target.seekTime(percentage, true);\n                if (this.wasPlaying) {\n                    this.wasPlaying = false;\n                    this.target.play();\n                }\n            }\n        };\n        VgScrubBar.prototype.touchEnd = function () {\n            this.isSeeking = false;\n            if (this.wasPlaying) {\n                this.wasPlaying = false;\n                this.target.play();\n            }\n        };\n        VgScrubBar.prototype.getTouchOffset = function (event) {\n            var offsetLeft = 0;\n            var element = event.target;\n            while (element) {\n                offsetLeft += element.offsetLeft;\n                element = element.offsetParent;\n            }\n            return event.touches[0].pageX - offsetLeft;\n        };\n        VgScrubBar.prototype.onMouseDownScrubBar = function ($event) {\n            if (this.target) {\n                if (!this.target.isLive) {\n                    if (!this.vgSlider) {\n                        this.seekEnd($event.offsetX);\n                    }\n                    else {\n                        this.seekStart();\n                    }\n                }\n            }\n        };\n        VgScrubBar.prototype.onMouseMoveScrubBar = function ($event) {\n            if (this.target) {\n                if (!this.target.isLive && this.vgSlider && this.isSeeking) {\n                    this.seekMove($event.offsetX);\n                }\n            }\n        };\n        VgScrubBar.prototype.onMouseUpScrubBar = function ($event) {\n            if (this.target) {\n                if (!this.target.isLive && this.vgSlider && this.isSeeking) {\n                    this.seekEnd($event.offsetX);\n                }\n            }\n        };\n        VgScrubBar.prototype.onTouchStartScrubBar = function ($event) {\n            if (this.target) {\n                if (!this.target.isLive) {\n                    if (!this.vgSlider) {\n                        this.seekEnd(this.getTouchOffset($event));\n                    }\n                    else {\n                        this.seekStart();\n                    }\n                }\n            }\n        };\n        VgScrubBar.prototype.onTouchMoveScrubBar = function ($event) {\n            if (this.target) {\n                if (!this.target.isLive && this.vgSlider && this.isSeeking) {\n                    this.seekMove(this.getTouchOffset($event));\n                }\n            }\n        };\n        // @ts-ignore\n        VgScrubBar.prototype.onTouchCancelScrubBar = function ($event) {\n            if (this.target) {\n                if (!this.target.isLive && this.vgSlider && this.isSeeking) {\n                    this.touchEnd();\n                }\n            }\n        };\n        // @ts-ignore\n        VgScrubBar.prototype.onTouchEndScrubBar = function ($event) {\n            if (this.target) {\n                if (!this.target.isLive && this.vgSlider && this.isSeeking) {\n                    this.touchEnd();\n                }\n            }\n        };\n        VgScrubBar.prototype.arrowAdjustVolume = function (event) {\n            if (this.target) {\n                if (event.keyCode === 38 || event.keyCode === 39) {\n                    event.preventDefault();\n                    this.target.seekTime((this.target.time.current + 5000) / 1000, false);\n                }\n                else if (event.keyCode === 37 || event.keyCode === 40) {\n                    event.preventDefault();\n                    this.target.seekTime((this.target.time.current - 5000) / 1000, false);\n                }\n            }\n        };\n        VgScrubBar.prototype.getPercentage = function () {\n            return this.target ? ((this.target.time.current * 100) / this.target.time.total) + '%' : '0%';\n        };\n        VgScrubBar.prototype.onHideScrubBar = function (hide) {\n            this.hideScrubBar = hide;\n        };\n        VgScrubBar.prototype.ngOnDestroy = function () {\n            this.subscriptions.forEach(function (s) { return s.unsubscribe(); });\n        };\n        VgScrubBar.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: VgAPI },\n            { type: VgControlsHidden }\n        ]; };\n        __decorate([\n            core.HostBinding('class.hide')\n        ], VgScrubBar.prototype, \"hideScrubBar\", void 0);\n        __decorate([\n            core.Input()\n        ], VgScrubBar.prototype, \"vgFor\", void 0);\n        __decorate([\n            core.Input()\n        ], VgScrubBar.prototype, \"vgSlider\", void 0);\n        __decorate([\n            core.HostListener('mousedown', ['$event'])\n        ], VgScrubBar.prototype, \"onMouseDownScrubBar\", null);\n        __decorate([\n            core.HostListener('document:mousemove', ['$event'])\n        ], VgScrubBar.prototype, \"onMouseMoveScrubBar\", null);\n        __decorate([\n            core.HostListener('document:mouseup', ['$event'])\n        ], VgScrubBar.prototype, \"onMouseUpScrubBar\", null);\n        __decorate([\n            core.HostListener('touchstart', ['$event'])\n        ], VgScrubBar.prototype, \"onTouchStartScrubBar\", null);\n        __decorate([\n            core.HostListener('document:touchmove', ['$event'])\n        ], VgScrubBar.prototype, \"onTouchMoveScrubBar\", null);\n        __decorate([\n            core.HostListener('document:touchcancel', ['$event'])\n        ], VgScrubBar.prototype, \"onTouchCancelScrubBar\", null);\n        __decorate([\n            core.HostListener('document:touchend', ['$event'])\n        ], VgScrubBar.prototype, \"onTouchEndScrubBar\", null);\n        __decorate([\n            core.HostListener('keydown', ['$event'])\n        ], VgScrubBar.prototype, \"arrowAdjustVolume\", null);\n        VgScrubBar = __decorate([\n            core.Component({\n                selector: 'vg-scrub-bar',\n                encapsulation: core.ViewEncapsulation.None,\n                template: \"\\n        <div class=\\\"scrubBar\\\"\\n             tabindex=\\\"0\\\"\\n             role=\\\"slider\\\"\\n             aria-label=\\\"scrub bar\\\"\\n             aria-level=\\\"polite\\\"\\n             [attr.aria-valuenow]=\\\"getPercentage()\\\"\\n             aria-valuemin=\\\"0\\\"\\n             aria-valuemax=\\\"100\\\"\\n             [attr.aria-valuetext]=\\\"getPercentage() + '%'\\\">\\n            <ng-content></ng-content>\\n        </div>\\n    \",\n                styles: [\"\\n        vg-scrub-bar {\\n            -webkit-touch-callout: none;\\n            -webkit-user-select: none;\\n            -moz-user-select: none;\\n            -ms-user-select: none;\\n            user-select: none;\\n            position: absolute;\\n            width: 100%;\\n            height: 5px;\\n            bottom: 50px;\\n            margin: 0;\\n            cursor: pointer;\\n            align-items: center;\\n            background: rgba(0, 0, 0, 0.75);\\n            z-index: 250;\\n            -webkit-transition: bottom 1s, opacity 0.5s;\\n            -khtml-transition: bottom 1s, opacity 0.5s;\\n            -moz-transition: bottom 1s, opacity 0.5s;\\n            -ms-transition: bottom 1s, opacity 0.5s;\\n            transition: bottom 1s, opacity 0.5s;\\n        }\\n        vg-scrub-bar .scrubBar {\\n            position: relative;\\n            display: flex;\\n            flex-grow: 1;\\n            align-items: center;\\n            height: 100%;\\n        }\\n        vg-controls vg-scrub-bar {\\n            position: relative;\\n            bottom: 0;\\n            background: transparent;\\n            height: 50px;\\n            flex-grow: 1;\\n            flex-basis: 0;\\n            margin: 0 10px;\\n            -webkit-transition: initial;\\n            -khtml-transition: initial;\\n            -moz-transition: initial;\\n            -ms-transition: initial;\\n            transition: initial;\\n        }\\n        vg-scrub-bar.hide {\\n            bottom: 0;\\n            opacity: 0;\\n        }\\n        vg-controls vg-scrub-bar.hide {\\n            bottom: initial;\\n            opacity: initial;\\n        }\\n    \"]\n            })\n        ], VgScrubBar);\n        return VgScrubBar;\n    }());\n\n    // tslint:disable:component-class-suffix\n    var VgScrubBarBufferingTime = /** @class */ (function () {\n        function VgScrubBarBufferingTime(ref, API) {\n            this.API = API;\n            this.subscriptions = [];\n            this.elem = ref.nativeElement;\n        }\n        VgScrubBarBufferingTime.prototype.ngOnInit = function () {\n            var _this = this;\n            if (this.API.isPlayerReady) {\n                this.onPlayerReady();\n            }\n            else {\n                this.subscriptions.push(this.API.playerReadyEvent.subscribe(function () { return _this.onPlayerReady(); }));\n            }\n        };\n        VgScrubBarBufferingTime.prototype.onPlayerReady = function () {\n            this.target = this.API.getMediaById(this.vgFor);\n        };\n        VgScrubBarBufferingTime.prototype.getBufferTime = function () {\n            var bufferTime = '0%';\n            if (this.target && this.target.buffer && this.target.buffered.length) {\n                if (this.target.time.total === 0) {\n                    bufferTime = '0%';\n                }\n                else {\n                    bufferTime = ((this.target.buffer.end / this.target.time.total) * 100) + '%';\n                }\n            }\n            return bufferTime;\n        };\n        VgScrubBarBufferingTime.prototype.ngOnDestroy = function () {\n            this.subscriptions.forEach(function (s) { return s.unsubscribe(); });\n        };\n        VgScrubBarBufferingTime.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: VgAPI }\n        ]; };\n        __decorate([\n            core.Input()\n        ], VgScrubBarBufferingTime.prototype, \"vgFor\", void 0);\n        VgScrubBarBufferingTime = __decorate([\n            core.Component({\n                selector: 'vg-scrub-bar-buffering-time',\n                encapsulation: core.ViewEncapsulation.None,\n                template: \"<div class=\\\"background\\\" [style.width]=\\\"getBufferTime()\\\"></div>\",\n                styles: [\"\\n        vg-scrub-bar-buffering-time {\\n            display: flex;\\n            width: 100%;\\n            height: 5px;\\n            pointer-events: none;\\n            position: absolute;\\n        }\\n        vg-scrub-bar-buffering-time .background {\\n            background-color: rgba(255, 255, 255, 0.3);\\n        }\\n        vg-controls vg-scrub-bar-buffering-time {\\n            position: absolute;\\n            top: calc(50% - 3px);\\n        }\\n        vg-controls vg-scrub-bar-buffering-time .background {\\n            -webkit-border-radius: 2px;\\n            -moz-border-radius: 2px;\\n            border-radius: 2px;\\n        }\\n    \"]\n            })\n        ], VgScrubBarBufferingTime);\n        return VgScrubBarBufferingTime;\n    }());\n\n    // tslint:disable:no-conflicting-lifecycle\n    // tslint:disable:component-class-suffix\n    // tslint:disable:no-string-literal\n    var VgScrubBarCuePoints = /** @class */ (function () {\n        function VgScrubBarCuePoints(ref, API) {\n            this.API = API;\n            this.onLoadedMetadataCalled = false;\n            this.cuePoints = [];\n            this.subscriptions = [];\n            this.totalCues = 0;\n            this.elem = ref.nativeElement;\n        }\n        VgScrubBarCuePoints.prototype.ngOnInit = function () {\n            var _this = this;\n            if (this.API.isPlayerReady) {\n                this.onPlayerReady();\n            }\n            else {\n                this.subscriptions.push(this.API.playerReadyEvent.subscribe(function () { return _this.onPlayerReady(); }));\n            }\n        };\n        VgScrubBarCuePoints.prototype.onPlayerReady = function () {\n            this.target = this.API.getMediaById(this.vgFor);\n            var onTimeUpdate = this.target.subscriptions.loadedMetadata;\n            this.subscriptions.push(onTimeUpdate.subscribe(this.onLoadedMetadata.bind(this)));\n            if (this.onLoadedMetadataCalled) {\n                this.onLoadedMetadata();\n            }\n        };\n        VgScrubBarCuePoints.prototype.onLoadedMetadata = function () {\n            if (this.vgCuePoints) {\n                // We need to transform the TextTrackCueList to Array or it doesn't work on IE11/Edge.\n                // See: https://github.com/videogular/videogular2/issues/369\n                this.cuePoints = [];\n                for (var i = 0, l = this.vgCuePoints.length; i < l; i++) {\n                    var end = (this.vgCuePoints[i].endTime >= 0) ? this.vgCuePoints[i].endTime : this.vgCuePoints[i].startTime + 1;\n                    var cuePointDuration = (end - this.vgCuePoints[i].startTime) * 1000;\n                    var position = '0';\n                    var percentWidth = '0';\n                    if (typeof cuePointDuration === 'number' && this.target.time.total) {\n                        percentWidth = ((cuePointDuration * 100) / this.target.time.total) + '%';\n                        position = (this.vgCuePoints[i].startTime * 100 / (Math.round(this.target.time.total / 1000))) + '%';\n                    }\n                    this.vgCuePoints[i].$$style = {\n                        width: percentWidth,\n                        left: position\n                    };\n                    this.cuePoints.push(this.vgCuePoints[i]);\n                }\n            }\n        };\n        VgScrubBarCuePoints.prototype.updateCuePoints = function () {\n            if (!this.target) {\n                this.onLoadedMetadataCalled = true;\n                return;\n            }\n            this.onLoadedMetadata();\n        };\n        VgScrubBarCuePoints.prototype.ngOnChanges = function (changes) {\n            if (changes['vgCuePoints'].currentValue) {\n                this.updateCuePoints();\n            }\n        };\n        VgScrubBarCuePoints.prototype.ngDoCheck = function () {\n            if (this.vgCuePoints) {\n                var changes = this.totalCues !== this.vgCuePoints.length;\n                if (changes) {\n                    this.totalCues = this.vgCuePoints.length;\n                    this.updateCuePoints();\n                }\n            }\n        };\n        VgScrubBarCuePoints.prototype.ngOnDestroy = function () {\n            this.subscriptions.forEach(function (s) { return s.unsubscribe(); });\n        };\n        VgScrubBarCuePoints.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: VgAPI }\n        ]; };\n        __decorate([\n            core.Input()\n        ], VgScrubBarCuePoints.prototype, \"vgCuePoints\", void 0);\n        __decorate([\n            core.Input()\n        ], VgScrubBarCuePoints.prototype, \"vgFor\", void 0);\n        VgScrubBarCuePoints = __decorate([\n            core.Component({\n                selector: 'vg-scrub-bar-cue-points',\n                encapsulation: core.ViewEncapsulation.None,\n                template: \"\\n        <div class=\\\"cue-point-container\\\">\\n            <span *ngFor=\\\"let cp of cuePoints\\\" [style.width]=\\\"cp.$$style?.width\\\" [style.left]=\\\"cp.$$style?.left\\\"\\n                  class=\\\"cue-point\\\"></span>\\n        </div>\\n    \",\n                styles: [\"\\n        vg-scrub-bar-cue-points {\\n            display: flex;\\n            width: 100%;\\n            height: 5px;\\n            pointer-events: none;\\n            position: absolute;\\n        }\\n        vg-scrub-bar-cue-points .cue-point-container .cue-point {\\n            position: absolute;\\n            height: 5px;\\n            background-color: rgba(255, 204, 0, 0.7);\\n        }\\n        vg-controls vg-scrub-bar-cue-points {\\n            position: absolute;\\n            top: calc(50% - 3px);\\n        }\\n    \"]\n            })\n        ], VgScrubBarCuePoints);\n        return VgScrubBarCuePoints;\n    }());\n\n    // tslint:disable:component-class-suffix\n    var VgScrubBarCurrentTime = /** @class */ (function () {\n        function VgScrubBarCurrentTime(ref, API) {\n            this.API = API;\n            this.vgSlider = false;\n            this.subscriptions = [];\n            this.elem = ref.nativeElement;\n        }\n        VgScrubBarCurrentTime.prototype.ngOnInit = function () {\n            var _this = this;\n            if (this.API.isPlayerReady) {\n                this.onPlayerReady();\n            }\n            else {\n                this.subscriptions.push(this.API.playerReadyEvent.subscribe(function () { return _this.onPlayerReady(); }));\n            }\n        };\n        VgScrubBarCurrentTime.prototype.onPlayerReady = function () {\n            this.target = this.API.getMediaById(this.vgFor);\n        };\n        VgScrubBarCurrentTime.prototype.getPercentage = function () {\n            return this.target ? ((this.target.time.current * 100) / this.target.time.total) + '%' : '0%';\n        };\n        VgScrubBarCurrentTime.prototype.ngOnDestroy = function () {\n            this.subscriptions.forEach(function (s) { return s.unsubscribe(); });\n        };\n        VgScrubBarCurrentTime.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: VgAPI }\n        ]; };\n        __decorate([\n            core.Input()\n        ], VgScrubBarCurrentTime.prototype, \"vgFor\", void 0);\n        __decorate([\n            core.Input()\n        ], VgScrubBarCurrentTime.prototype, \"vgSlider\", void 0);\n        VgScrubBarCurrentTime = __decorate([\n            core.Component({\n                selector: 'vg-scrub-bar-current-time',\n                encapsulation: core.ViewEncapsulation.None,\n                template: \"<div class=\\\"background\\\" [style.width]=\\\"getPercentage()\\\"></div><span class=\\\"slider\\\" *ngIf=\\\"vgSlider\\\"></span>\",\n                styles: [\"\\n        vg-scrub-bar-current-time {\\n            display: flex;\\n            width: 100%;\\n            height: 5px;\\n            pointer-events: none;\\n            position: absolute;\\n        }\\n        vg-scrub-bar-current-time .background {\\n            background-color: white;\\n        }\\n        vg-controls vg-scrub-bar-current-time {\\n            position: absolute;\\n            top: calc(50% - 3px);\\n            -webkit-border-radius: 2px;\\n            -moz-border-radius: 2px;\\n            border-radius: 2px;\\n        }\\n        vg-controls vg-scrub-bar-current-time .background {\\n            border: 1px solid white;\\n            -webkit-border-radius: 2px;\\n            -moz-border-radius: 2px;\\n            border-radius: 2px;\\n        }\\n\\n        vg-scrub-bar-current-time .slider{\\n            background: white;\\n            height: 15px;\\n            width: 15px;\\n            border-radius: 50%;\\n            box-shadow: 0px 0px 10px black;\\n            margin-top: -5px;\\n            margin-left: -10px;\\n        }\\n    \"]\n            })\n        ], VgScrubBarCurrentTime);\n        return VgScrubBarCurrentTime;\n    }());\n\n    // Workaround until we can use UTC with Angular Date Pipe\n    var VgUtcPipe = /** @class */ (function () {\n        function VgUtcPipe() {\n        }\n        VgUtcPipe.prototype.transform = function (value, format) {\n            var date = new Date(value);\n            var result = format;\n            var ss = date.getUTCSeconds();\n            var mm = date.getUTCMinutes();\n            var hh = date.getUTCHours();\n            if (ss < 10) {\n                ss = '0' + ss;\n            }\n            if (mm < 10) {\n                mm = '0' + mm;\n            }\n            if (hh < 10) {\n                hh = '0' + hh;\n            }\n            result = result.replace(/ss/g, ss);\n            result = result.replace(/mm/g, mm);\n            result = result.replace(/hh/g, hh);\n            return result;\n        };\n        VgUtcPipe = __decorate([\n            core.Pipe({ name: 'vgUtc' })\n        ], VgUtcPipe);\n        return VgUtcPipe;\n    }());\n    // tslint:disable:component-class-suffix\n    var VgTimeDisplay = /** @class */ (function () {\n        function VgTimeDisplay(ref, API) {\n            this.API = API;\n            this.vgProperty = 'current';\n            this.vgFormat = 'mm:ss';\n            this.subscriptions = [];\n            this.elem = ref.nativeElement;\n        }\n        VgTimeDisplay.prototype.ngOnInit = function () {\n            var _this = this;\n            if (this.API.isPlayerReady) {\n                this.onPlayerReady();\n            }\n            else {\n                this.subscriptions.push(this.API.playerReadyEvent.subscribe(function () { return _this.onPlayerReady(); }));\n            }\n        };\n        VgTimeDisplay.prototype.onPlayerReady = function () {\n            this.target = this.API.getMediaById(this.vgFor);\n        };\n        VgTimeDisplay.prototype.getTime = function () {\n            var t = 0;\n            if (this.target) {\n                t = Math.round(this.target.time[this.vgProperty]);\n                t = isNaN(t) || this.target.isLive ? 0 : t;\n            }\n            return t;\n        };\n        VgTimeDisplay.prototype.ngOnDestroy = function () {\n            this.subscriptions.forEach(function (s) { return s.unsubscribe(); });\n        };\n        VgTimeDisplay.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: VgAPI }\n        ]; };\n        __decorate([\n            core.Input()\n        ], VgTimeDisplay.prototype, \"vgFor\", void 0);\n        __decorate([\n            core.Input()\n        ], VgTimeDisplay.prototype, \"vgProperty\", void 0);\n        __decorate([\n            core.Input()\n        ], VgTimeDisplay.prototype, \"vgFormat\", void 0);\n        VgTimeDisplay = __decorate([\n            core.Component({\n                selector: 'vg-time-display',\n                encapsulation: core.ViewEncapsulation.None,\n                template: \"\\n        <span *ngIf=\\\"target?.isLive\\\">LIVE</span>\\n        <span *ngIf=\\\"!target?.isLive\\\">{{ getTime() | vgUtc:vgFormat }}</span>\\n        <ng-content></ng-content>\\n    \",\n                styles: [\"\\n        vg-time-display {\\n            -webkit-touch-callout: none;\\n            -webkit-user-select: none;\\n            -moz-user-select: none;\\n            -ms-user-select: none;\\n            user-select: none;\\n            display: flex;\\n            justify-content: center;\\n            height: 50px;\\n            width: 60px;\\n            cursor: pointer;\\n            color: white;\\n            line-height: 50px;\\n            pointer-events: none;\\n            font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\\n        }\\n    \"]\n            })\n        ], VgTimeDisplay);\n        return VgTimeDisplay;\n    }());\n\n    // tslint:disable:component-class-suffix\n    var VgTrackSelector = /** @class */ (function () {\n        function VgTrackSelector(ref, API) {\n            this.API = API;\n            this.subscriptions = [];\n            this.elem = ref.nativeElement;\n        }\n        VgTrackSelector.prototype.ngOnInit = function () {\n            var _this = this;\n            if (this.API.isPlayerReady) {\n                this.onPlayerReady();\n            }\n            else {\n                this.subscriptions.push(this.API.playerReadyEvent.subscribe(function () { return _this.onPlayerReady(); }));\n            }\n        };\n        VgTrackSelector.prototype.onPlayerReady = function () {\n            this.target = this.API.getMediaById(this.vgFor);\n            var subs = Array.from(this.API.getMasterMedia().elem.children)\n                .filter(function (item) { return item.tagName === 'TRACK'; })\n                .filter(function (item) { return item.kind === 'subtitles'; })\n                .map(function (item) { return ({\n                label: item.label,\n                selected: item.default === true,\n                id: item.srclang\n            }); });\n            this.tracks = __spread(subs, [\n                {\n                    id: null,\n                    label: 'Off',\n                    selected: subs.every(function (item) { return item.selected === false; })\n                }\n            ]);\n            var track = this.tracks.filter(function (item) { return item.selected === true; })[0];\n            this.trackSelected = track.id;\n            this.ariaValue = track.label;\n        };\n        VgTrackSelector.prototype.selectTrack = function (trackId) {\n            var _this = this;\n            this.trackSelected = (trackId === 'null') ? null : trackId;\n            this.ariaValue = 'No track selected';\n            Array.from(this.API.getMasterMedia().elem.textTracks)\n                .forEach(function (item) {\n                if (item.language === trackId) {\n                    _this.ariaValue = item.label;\n                    item.mode = 'showing';\n                }\n                else {\n                    item.mode = 'hidden';\n                }\n            });\n        };\n        VgTrackSelector.prototype.ngOnDestroy = function () {\n            this.subscriptions.forEach(function (s) { return s.unsubscribe(); });\n        };\n        VgTrackSelector.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: VgAPI }\n        ]; };\n        __decorate([\n            core.Input()\n        ], VgTrackSelector.prototype, \"vgFor\", void 0);\n        VgTrackSelector = __decorate([\n            core.Component({\n                selector: 'vg-track-selector',\n                encapsulation: core.ViewEncapsulation.None,\n                template: \"\\n        <div class=\\\"container\\\">\\n            <div class=\\\"track-selected\\\"\\n                [class.vg-icon-closed_caption]=\\\"!trackSelected\\\">\\n                {{ trackSelected || '' }}\\n            </div>\\n\\n            <select class=\\\"trackSelector\\\"\\n                    (change)=\\\"selectTrack($event.target.value)\\\"\\n                    tabindex=\\\"0\\\"\\n                    aria-label=\\\"track selector\\\"\\n                    [attr.aria-valuetext]=\\\"ariaValue\\\">\\n                <option\\n                    *ngFor=\\\"let track of tracks\\\"\\n                    [value]=\\\"track.id\\\"\\n                    [selected]=\\\"track.selected === true\\\">\\n                    {{ track.label }}\\n                </option>\\n            </select>\\n        </div>\\n    \",\n                styles: [\"\\n        vg-track-selector {\\n            -webkit-touch-callout: none;\\n            -webkit-user-select: none;\\n            -moz-user-select: none;\\n            -ms-user-select: none;\\n            user-select: none;\\n            display: flex;\\n            justify-content: center;\\n            width: 50px;\\n            height: 50px;\\n            cursor: pointer;\\n            color: white;\\n            line-height: 50px;\\n        }\\n        vg-track-selector .container {\\n            position: relative;\\n            display: flex;\\n            flex-grow: 1;\\n            align-items: center;\\n\\n            padding: 0;\\n            margin: 5px;\\n        }\\n        vg-track-selector select.trackSelector {\\n            width: 50px;\\n            padding: 5px 8px;\\n            border: none;\\n            background: none;\\n            -webkit-appearance: none;\\n            -moz-appearance: none;\\n            appearance: none;\\n            color: transparent;\\n            font-size: 16px;\\n        }\\n        vg-track-selector select.trackSelector::-ms-expand {\\n            display: none;\\n        }\\n        vg-track-selector select.trackSelector option {\\n            color: #000;\\n        }\\n        vg-track-selector .track-selected {\\n            position: absolute;\\n            width: 100%;\\n            height: 50px;\\n            top: -6px;\\n            text-align: center;\\n            text-transform: uppercase;\\n            font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\\n            padding-top: 2px;\\n            pointer-events: none;\\n        }\\n        vg-track-selector .vg-icon-closed_caption:before {\\n            width: 100%;\\n        }\\n    \"]\n            })\n        ], VgTrackSelector);\n        return VgTrackSelector;\n    }());\n\n    // tslint:disable:no-output-on-prefix\n    // tslint:disable:component-class-suffix\n    // tslint:disable:no-string-literal\n    var VgQualitySelector = /** @class */ (function () {\n        function VgQualitySelector(ref, API) {\n            this.API = API;\n            this.onBitrateChange = new core.EventEmitter();\n            this.subscriptions = [];\n            this.elem = ref.nativeElement;\n        }\n        VgQualitySelector.prototype.ngOnInit = function () {\n        };\n        VgQualitySelector.prototype.ngOnChanges = function (changes) {\n            if (changes['bitrates'].currentValue && changes['bitrates'].currentValue.length) {\n                this.bitrates.forEach(function (item) { return item.label = (item.label || Math.round(item.bitrate / 1000)).toString(); });\n            }\n        };\n        VgQualitySelector.prototype.selectBitrate = function (index) {\n            this.bitrateSelected = this.bitrates[index];\n            this.onBitrateChange.emit(this.bitrates[index]);\n        };\n        VgQualitySelector.prototype.ngOnDestroy = function () {\n            this.subscriptions.forEach(function (s) { return s.unsubscribe(); });\n        };\n        VgQualitySelector.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: VgAPI }\n        ]; };\n        __decorate([\n            core.Input()\n        ], VgQualitySelector.prototype, \"bitrates\", void 0);\n        __decorate([\n            core.Output()\n        ], VgQualitySelector.prototype, \"onBitrateChange\", void 0);\n        VgQualitySelector = __decorate([\n            core.Component({\n                selector: 'vg-quality-selector',\n                encapsulation: core.ViewEncapsulation.None,\n                template: \"\\n        <div class=\\\"container\\\">\\n            <div class=\\\"quality-selected\\\"\\n                 [class.vg-icon-hd]=\\\"!bitrateSelected\\\">\\n                {{ bitrateSelected?.label }}\\n            </div>\\n\\n            <select class=\\\"quality-selector\\\"\\n                    (change)=\\\"selectBitrate($event.target.value)\\\"\\n                    tabindex=\\\"0\\\"\\n                    aria-label=\\\"quality selector\\\"\\n                    [attr.aria-valuetext]=\\\"ariaValue\\\">\\n                <option\\n                    *ngFor=\\\"let bitrate of bitrates\\\"\\n                    [value]=\\\"bitrate.qualityIndex.toString()\\\"\\n                    [selected]=\\\"bitrate.qualityIndex === bitrateSelected?.qualityIndex\\\">\\n                    {{ bitrate.label }}\\n                </option>\\n            </select>\\n        </div>\\n    \",\n                styles: [\"\\n        vg-quality-selector {\\n            -webkit-touch-callout: none;\\n            -webkit-user-select: none;\\n            -moz-user-select: none;\\n            -ms-user-select: none;\\n            user-select: none;\\n            display: flex;\\n            justify-content: center;\\n            width: 50px;\\n            height: 50px;\\n            cursor: pointer;\\n            color: white;\\n            line-height: 50px;\\n        }\\n        vg-quality-selector .container {\\n            position: relative;\\n            display: flex;\\n            flex-grow: 1;\\n            align-items: center;\\n\\n            padding: 0;\\n            margin: 5px;\\n        }\\n        vg-quality-selector select.quality-selector {\\n            width: 50px;\\n            padding: 5px 8px;\\n            border: none;\\n            background: none;\\n            -webkit-appearance: none;\\n            -moz-appearance: none;\\n            appearance: none;\\n            color: transparent;\\n            font-size: 16px;\\n        }\\n        vg-quality-selector select.quality-selector::-ms-expand {\\n            display: none;\\n        }\\n        vg-quality-selector select.quality-selector option {\\n            color: #000;\\n        }\\n        vg-quality-selector .quality-selected {\\n            position: absolute;\\n            width: 100%;\\n            height: 50px;\\n            top: -6px;\\n            text-align: center;\\n            text-transform: uppercase;\\n            font-family: Helvetica Neue, Helvetica, Arial, sans-serif;\\n            padding-top: 2px;\\n            pointer-events: none;\\n        }\\n        vg-quality-selector .vg-icon-closed_caption:before {\\n            width: 100%;\\n        }\\n    \"]\n            })\n        ], VgQualitySelector);\n        return VgQualitySelector;\n    }());\n\n    var VgControlsModule = /** @class */ (function () {\n        function VgControlsModule() {\n        }\n        VgControlsModule = __decorate([\n            core.NgModule({\n                imports: [common.CommonModule],\n                declarations: [\n                    VgControls,\n                    VgFullscreen,\n                    VgMute,\n                    VgVolume,\n                    VgPlayPause,\n                    VgPlaybackButton,\n                    VgScrubBar,\n                    VgScrubBarBufferingTime,\n                    VgScrubBarCuePoints,\n                    VgScrubBarCurrentTime,\n                    VgTimeDisplay,\n                    VgUtcPipe,\n                    VgTrackSelector,\n                    VgQualitySelector\n                ],\n                exports: [\n                    VgControls,\n                    VgFullscreen,\n                    VgMute,\n                    VgVolume,\n                    VgPlayPause,\n                    VgPlaybackButton,\n                    VgScrubBar,\n                    VgScrubBarBufferingTime,\n                    VgScrubBarCuePoints,\n                    VgScrubBarCurrentTime,\n                    VgTimeDisplay,\n                    VgUtcPipe,\n                    VgTrackSelector,\n                    VgQualitySelector\n                ],\n                providers: [VgControlsHidden]\n            })\n        ], VgControlsModule);\n        return VgControlsModule;\n    }());\n\n    var VgEvents = /** @class */ (function () {\n        function VgEvents() {\n        }\n        VgEvents.VG_ABORT = 'abort';\n        VgEvents.VG_CAN_PLAY = 'canplay';\n        VgEvents.VG_CAN_PLAY_THROUGH = 'canplaythrough';\n        VgEvents.VG_DURATION_CHANGE = 'durationchange';\n        VgEvents.VG_EMPTIED = 'emptied';\n        VgEvents.VG_ENCRYPTED = 'encrypted';\n        VgEvents.VG_ENDED = 'ended';\n        VgEvents.VG_ERROR = 'error';\n        VgEvents.VG_LOADED_DATA = 'loadeddata';\n        VgEvents.VG_LOADED_METADATA = 'loadedmetadata';\n        VgEvents.VG_LOAD_START = 'loadstart';\n        VgEvents.VG_PAUSE = 'pause';\n        VgEvents.VG_PLAY = 'play';\n        VgEvents.VG_PLAYING = 'playing';\n        VgEvents.VG_PROGRESS = 'progress';\n        VgEvents.VG_RATE_CHANGE = 'ratechange';\n        VgEvents.VG_SEEK = 'seek';\n        VgEvents.VG_SEEKED = 'seeked';\n        VgEvents.VG_SEEKING = 'seeking';\n        VgEvents.VG_STALLED = 'stalled';\n        VgEvents.VG_SUSPEND = 'suspend';\n        VgEvents.VG_TIME_UPDATE = 'timeupdate';\n        VgEvents.VG_VOLUME_CHANGE = 'volumechange';\n        VgEvents.VG_WAITING = 'waiting';\n        VgEvents.VG_LOAD = 'load';\n        VgEvents.VG_ENTER = 'enter';\n        VgEvents.VG_EXIT = 'exit';\n        VgEvents.VG_START_ADS = 'startads';\n        VgEvents.VG_END_ADS = 'endads';\n        VgEvents = __decorate([\n            core.Injectable()\n        ], VgEvents);\n        return VgEvents;\n    }());\n\n    var VgMedia = /** @class */ (function () {\n        function VgMedia(api, ref) {\n            this.api = api;\n            this.ref = ref;\n            this.state = VgStates.VG_PAUSED;\n            this.time = { current: 0, total: 0, left: 0 };\n            this.buffer = { end: 0 };\n            this.canPlay = false;\n            this.canPlayThrough = false;\n            this.isMetadataLoaded = false;\n            this.isWaiting = false;\n            this.isCompleted = false;\n            this.isLive = false;\n            this.isBufferDetected = false;\n            this.checkInterval = 200;\n            this.currentPlayPos = 0;\n            this.lastPlayPos = 0;\n            this.playAtferSync = false;\n            this.bufferDetected = new rxjs.Subject();\n        }\n        VgMedia.prototype.ngOnInit = function () {\n            var _this = this;\n            if (this.vgMedia.nodeName) {\n                // It's a native element\n                this.elem = this.vgMedia;\n            }\n            else {\n                // It's an Angular Class\n                this.elem = this.vgMedia.elem;\n            }\n            // Just in case we're creating this vgMedia dynamically register again into API\n            this.api.registerMedia(this);\n            this.subscriptions = {\n                // Native events\n                abort: rxjs.fromEvent(this.elem, VgEvents.VG_ABORT),\n                canPlay: rxjs.fromEvent(this.elem, VgEvents.VG_CAN_PLAY),\n                canPlayThrough: rxjs.fromEvent(this.elem, VgEvents.VG_CAN_PLAY_THROUGH),\n                durationChange: rxjs.fromEvent(this.elem, VgEvents.VG_DURATION_CHANGE),\n                emptied: rxjs.fromEvent(this.elem, VgEvents.VG_EMPTIED),\n                encrypted: rxjs.fromEvent(this.elem, VgEvents.VG_ENCRYPTED),\n                ended: rxjs.fromEvent(this.elem, VgEvents.VG_ENDED),\n                error: rxjs.fromEvent(this.elem, VgEvents.VG_ERROR),\n                loadedData: rxjs.fromEvent(this.elem, VgEvents.VG_LOADED_DATA),\n                loadedMetadata: rxjs.fromEvent(this.elem, VgEvents.VG_LOADED_METADATA),\n                loadStart: rxjs.fromEvent(this.elem, VgEvents.VG_LOAD_START),\n                pause: rxjs.fromEvent(this.elem, VgEvents.VG_PAUSE),\n                play: rxjs.fromEvent(this.elem, VgEvents.VG_PLAY),\n                playing: rxjs.fromEvent(this.elem, VgEvents.VG_PLAYING),\n                progress: rxjs.fromEvent(this.elem, VgEvents.VG_PROGRESS),\n                rateChange: rxjs.fromEvent(this.elem, VgEvents.VG_RATE_CHANGE),\n                seeked: rxjs.fromEvent(this.elem, VgEvents.VG_SEEKED),\n                seeking: rxjs.fromEvent(this.elem, VgEvents.VG_SEEKING),\n                stalled: rxjs.fromEvent(this.elem, VgEvents.VG_STALLED),\n                suspend: rxjs.fromEvent(this.elem, VgEvents.VG_SUSPEND),\n                timeUpdate: rxjs.fromEvent(this.elem, VgEvents.VG_TIME_UPDATE),\n                volumeChange: rxjs.fromEvent(this.elem, VgEvents.VG_VOLUME_CHANGE),\n                waiting: rxjs.fromEvent(this.elem, VgEvents.VG_WAITING),\n                // Advertisement only events\n                startAds: rxjs.fromEvent(this.elem, VgEvents.VG_START_ADS),\n                endAds: rxjs.fromEvent(this.elem, VgEvents.VG_END_ADS),\n                // See changes on <source> child elements to reload the video file\n                mutation: new rxjs.Observable(function (observer) {\n                    var domObs = new MutationObserver(function (mutations) {\n                        observer.next(mutations);\n                    });\n                    domObs.observe(_this.elem, { childList: true, attributes: true });\n                    return function () {\n                        domObs.disconnect();\n                    };\n                }),\n                // Custom buffering detection\n                bufferDetected: this.bufferDetected\n            };\n            this.mutationObs = this.subscriptions.mutation.subscribe(this.onMutation.bind(this));\n            this.canPlayObs = this.subscriptions.canPlay.subscribe(this.onCanPlay.bind(this));\n            this.canPlayThroughObs = this.subscriptions.canPlayThrough.subscribe(this.onCanPlayThrough.bind(this));\n            this.loadedMetadataObs = this.subscriptions.loadedMetadata.subscribe(this.onLoadMetadata.bind(this));\n            this.waitingObs = this.subscriptions.waiting.subscribe(this.onWait.bind(this));\n            this.progressObs = this.subscriptions.progress.subscribe(this.onProgress.bind(this));\n            this.endedObs = this.subscriptions.ended.subscribe(this.onComplete.bind(this));\n            this.playingObs = this.subscriptions.playing.subscribe(this.onStartPlaying.bind(this));\n            this.playObs = this.subscriptions.play.subscribe(this.onPlay.bind(this));\n            this.pauseObs = this.subscriptions.pause.subscribe(this.onPause.bind(this));\n            this.timeUpdateObs = this.subscriptions.timeUpdate.subscribe(this.onTimeUpdate.bind(this));\n            this.volumeChangeObs = this.subscriptions.volumeChange.subscribe(this.onVolumeChange.bind(this));\n            this.errorObs = this.subscriptions.error.subscribe(this.onError.bind(this));\n            if (this.vgMaster) {\n                this.api.playerReadyEvent.subscribe(function () {\n                    _this.prepareSync();\n                });\n            }\n        };\n        VgMedia.prototype.prepareSync = function () {\n            var _this = this;\n            var canPlayAll = [];\n            for (var media in this.api.medias) {\n                if (this.api.medias[media]) {\n                    canPlayAll.push(this.api.medias[media].subscriptions.canPlay);\n                }\n            }\n            this.canPlayAllSubscription = rxjs.combineLatest(canPlayAll).pipe(operators.map(function () {\n                var params = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    params[_i] = arguments[_i];\n                }\n                var checkReadyState = function (event) {\n                    return event.target.readyState === 4;\n                };\n                var allReady = params.some(checkReadyState);\n                if (allReady && !_this.syncSubscription) {\n                    _this.startSync();\n                    _this.syncSubscription.unsubscribe();\n                }\n            })).subscribe();\n        };\n        VgMedia.prototype.startSync = function () {\n            var _this = this;\n            this.syncSubscription = rxjs.timer(0, 1000).subscribe(function () {\n                for (var media in _this.api.medias) {\n                    if (_this.api.medias[media] !== _this) {\n                        var diff = _this.api.medias[media].currentTime - _this.currentTime;\n                        if (diff < -0.3 || diff > 0.3) {\n                            _this.playAtferSync = (_this.state === VgStates.VG_PLAYING);\n                            _this.pause();\n                            _this.api.medias[media].pause();\n                            _this.api.medias[media].currentTime = _this.currentTime;\n                        }\n                        else {\n                            if (_this.playAtferSync) {\n                                _this.play();\n                                _this.api.medias[media].play();\n                                _this.playAtferSync = false;\n                            }\n                        }\n                    }\n                }\n            });\n        };\n        VgMedia.prototype.onMutation = function (mutations) {\n            // Detect changes only for source elements or src attribute\n            for (var i = 0, l = mutations.length; i < l; i++) {\n                var mut = mutations[i];\n                if (mut.type === 'attributes' && mut.attributeName === 'src') {\n                    // Only load src file if it's not a blob (for DASH / HLS sources)\n                    // tslint:disable-next-line:no-string-literal\n                    if (mut.target['src'] && mut.target['src'].length > 0 && mut.target['src'].indexOf('blob:') < 0) {\n                        this.loadMedia();\n                        break;\n                    }\n                }\n                else if (mut.type === 'childList' && mut.removedNodes.length && mut.removedNodes[0].nodeName.toLowerCase() === 'source') {\n                    this.loadMedia();\n                    break;\n                }\n            }\n        };\n        VgMedia.prototype.loadMedia = function () {\n            var _this = this;\n            this.vgMedia.pause();\n            this.vgMedia.currentTime = 0;\n            // Start buffering until we can play the media file\n            this.stopBufferCheck();\n            this.isBufferDetected = true;\n            this.bufferDetected.next(this.isBufferDetected);\n            // TODO: This is ugly, we should find something cleaner. For some reason a TimerObservable doesn't works.\n            setTimeout(function () { return _this.vgMedia.load(); }, 10);\n        };\n        VgMedia.prototype.play = function () {\n            var _this = this;\n            // short-circuit if already playing\n            if (this.playPromise || (this.state !== VgStates.VG_PAUSED && this.state !== VgStates.VG_ENDED)) {\n                return;\n            }\n            this.playPromise = this.vgMedia.play();\n            // browser has async play promise\n            if (this.playPromise && this.playPromise.then && this.playPromise.catch) {\n                this.playPromise\n                    .then(function () {\n                    _this.playPromise = null;\n                })\n                    .catch(function () {\n                    _this.playPromise = null;\n                    // deliberately empty for the sake of eating console noise\n                });\n            }\n            return this.playPromise;\n        };\n        VgMedia.prototype.pause = function () {\n            var _this = this;\n            // browser has async play promise\n            if (this.playPromise) {\n                this.playPromise\n                    .then(function () {\n                    _this.vgMedia.pause();\n                });\n            }\n            else {\n                this.vgMedia.pause();\n            }\n        };\n        Object.defineProperty(VgMedia.prototype, \"id\", {\n            get: function () {\n                // We should return undefined if vgMedia still doesn't exist\n                // tslint:disable-next-line:no-unnecessary-initializer\n                var result = undefined;\n                if (this.vgMedia) {\n                    result = this.vgMedia.id;\n                }\n                return result;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(VgMedia.prototype, \"duration\", {\n            get: function () {\n                return this.vgMedia.duration;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(VgMedia.prototype, \"currentTime\", {\n            get: function () {\n                return this.vgMedia.currentTime;\n            },\n            set: function (seconds) {\n                this.vgMedia.currentTime = seconds;\n                // this.elem.dispatchEvent(new CustomEvent(VgEvents.VG_SEEK));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(VgMedia.prototype, \"volume\", {\n            get: function () {\n                return this.vgMedia.volume;\n            },\n            set: function (volume) {\n                this.vgMedia.volume = volume;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(VgMedia.prototype, \"playbackRate\", {\n            get: function () {\n                return this.vgMedia.playbackRate;\n            },\n            set: function (rate) {\n                this.vgMedia.playbackRate = rate;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(VgMedia.prototype, \"buffered\", {\n            get: function () {\n                return this.vgMedia.buffered;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(VgMedia.prototype, \"textTracks\", {\n            get: function () {\n                return this.vgMedia.textTracks;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        // @ts-ignore\n        VgMedia.prototype.onCanPlay = function (event) {\n            this.isBufferDetected = false;\n            this.bufferDetected.next(this.isBufferDetected);\n            this.canPlay = true;\n            this.ref.detectChanges();\n        };\n        // @ts-ignore\n        VgMedia.prototype.onCanPlayThrough = function (event) {\n            this.isBufferDetected = false;\n            this.bufferDetected.next(this.isBufferDetected);\n            this.canPlayThrough = true;\n            this.ref.detectChanges();\n        };\n        // @ts-ignore\n        VgMedia.prototype.onLoadMetadata = function (event) {\n            this.isMetadataLoaded = true;\n            this.time = {\n                current: 0,\n                left: 0,\n                total: this.duration * 1000\n            };\n            this.state = VgStates.VG_PAUSED;\n            // Live streaming check\n            var t = Math.round(this.time.total);\n            this.isLive = (t === Infinity);\n            this.ref.detectChanges();\n        };\n        // @ts-ignore\n        VgMedia.prototype.onWait = function (event) {\n            this.isWaiting = true;\n            this.ref.detectChanges();\n        };\n        // @ts-ignore\n        VgMedia.prototype.onComplete = function (event) {\n            this.isCompleted = true;\n            this.state = VgStates.VG_ENDED;\n            this.ref.detectChanges();\n        };\n        // @ts-ignore\n        VgMedia.prototype.onStartPlaying = function (event) {\n            this.state = VgStates.VG_PLAYING;\n            this.ref.detectChanges();\n        };\n        // @ts-ignore\n        VgMedia.prototype.onPlay = function (event) {\n            this.state = VgStates.VG_PLAYING;\n            if (this.vgMaster) {\n                if (!this.syncSubscription || this.syncSubscription.closed) {\n                    this.startSync();\n                }\n            }\n            this.startBufferCheck();\n            this.ref.detectChanges();\n        };\n        // @ts-ignore\n        VgMedia.prototype.onPause = function (event) {\n            this.state = VgStates.VG_PAUSED;\n            if (this.vgMaster) {\n                if (!this.playAtferSync) {\n                    this.syncSubscription.unsubscribe();\n                }\n            }\n            this.stopBufferCheck();\n            this.ref.detectChanges();\n        };\n        // @ts-ignore\n        VgMedia.prototype.onTimeUpdate = function (event) {\n            var end = this.buffered.length - 1;\n            this.time = {\n                current: this.currentTime * 1000,\n                total: this.time.total,\n                left: (this.duration - this.currentTime) * 1000\n            };\n            if (end >= 0) {\n                this.buffer = { end: this.buffered.end(end) * 1000 };\n            }\n            this.ref.detectChanges();\n        };\n        // @ts-ignore\n        VgMedia.prototype.onProgress = function (event) {\n            var end = this.buffered.length - 1;\n            if (end >= 0) {\n                this.buffer = { end: this.buffered.end(end) * 1000 };\n            }\n            this.ref.detectChanges();\n        };\n        // @ts-ignore\n        VgMedia.prototype.onVolumeChange = function (event) {\n            // TODO: Save to localstorage the current volume\n            this.ref.detectChanges();\n        };\n        // @ts-ignore\n        VgMedia.prototype.onError = function (event) {\n            // TODO: Handle error messages\n            this.ref.detectChanges();\n        };\n        // http://stackoverflow.com/a/23828241/779529\n        VgMedia.prototype.bufferCheck = function () {\n            var offset = 1 / this.checkInterval;\n            this.currentPlayPos = this.currentTime;\n            if (!this.isBufferDetected && this.currentPlayPos < (this.lastPlayPos + offset)) {\n                this.isBufferDetected = true;\n            }\n            if (this.isBufferDetected && this.currentPlayPos > (this.lastPlayPos + offset)) {\n                this.isBufferDetected = false;\n            }\n            // Prevent calls to bufferCheck after ngOnDestroy have been called\n            if (!this.bufferDetected.closed) {\n                this.bufferDetected.next(this.isBufferDetected);\n            }\n            this.lastPlayPos = this.currentPlayPos;\n        };\n        VgMedia.prototype.startBufferCheck = function () {\n            var _this = this;\n            this.checkBufferSubscription = rxjs.timer(0, this.checkInterval).subscribe(function () {\n                _this.bufferCheck();\n            });\n        };\n        VgMedia.prototype.stopBufferCheck = function () {\n            if (this.checkBufferSubscription) {\n                this.checkBufferSubscription.unsubscribe();\n            }\n            this.isBufferDetected = false;\n            this.bufferDetected.next(this.isBufferDetected);\n        };\n        VgMedia.prototype.seekTime = function (value, byPercent) {\n            if (byPercent === void 0) { byPercent = false; }\n            var second;\n            var duration = this.duration;\n            if (byPercent) {\n                second = value * duration / 100;\n            }\n            else {\n                second = value;\n            }\n            this.currentTime = second;\n        };\n        VgMedia.prototype.addTextTrack = function (type, label, language, mode) {\n            var newTrack = this.vgMedia.addTextTrack(type, label, language);\n            if (mode) {\n                newTrack.mode = mode;\n            }\n            return newTrack;\n        };\n        VgMedia.prototype.ngOnDestroy = function () {\n            this.vgMedia.src = '';\n            this.mutationObs.unsubscribe();\n            this.canPlayObs.unsubscribe();\n            this.canPlayThroughObs.unsubscribe();\n            this.loadedMetadataObs.unsubscribe();\n            this.waitingObs.unsubscribe();\n            this.progressObs.unsubscribe();\n            this.endedObs.unsubscribe();\n            this.playingObs.unsubscribe();\n            this.playObs.unsubscribe();\n            this.pauseObs.unsubscribe();\n            this.timeUpdateObs.unsubscribe();\n            this.volumeChangeObs.unsubscribe();\n            this.errorObs.unsubscribe();\n            if (this.checkBufferSubscription) {\n                this.checkBufferSubscription.unsubscribe();\n            }\n            if (this.syncSubscription) {\n                this.syncSubscription.unsubscribe();\n            }\n            this.bufferDetected.complete();\n            this.bufferDetected.unsubscribe();\n            this.api.unregisterMedia(this);\n        };\n        VgMedia.ctorParameters = function () { return [\n            { type: VgAPI },\n            { type: core.ChangeDetectorRef }\n        ]; };\n        __decorate([\n            core.Input()\n        ], VgMedia.prototype, \"vgMedia\", void 0);\n        __decorate([\n            core.Input()\n        ], VgMedia.prototype, \"vgMaster\", void 0);\n        VgMedia = __decorate([\n            core.Directive({\n                selector: '[vgMedia]'\n            })\n            // tslint:disable-next-line:directive-class-suffix\n        ], VgMedia);\n        return VgMedia;\n    }());\n\n    var VgCuePoints = /** @class */ (function () {\n        function VgCuePoints(ref) {\n            this.ref = ref;\n            // tslint:disable:no-output-on-prefix\n            this.onEnterCuePoint = new core.EventEmitter();\n            this.onUpdateCuePoint = new core.EventEmitter();\n            this.onExitCuePoint = new core.EventEmitter();\n            this.onCompleteCuePoint = new core.EventEmitter();\n            this.subscriptions = [];\n            this.cuesSubscriptions = [];\n            this.totalCues = 0;\n        }\n        VgCuePoints.prototype.ngOnInit = function () {\n            this.onLoad$ = rxjs.fromEvent(this.ref.nativeElement, VgEvents.VG_LOAD);\n            this.subscriptions.push(this.onLoad$.subscribe(this.onLoad.bind(this)));\n        };\n        VgCuePoints.prototype.onLoad = function (event) {\n            if (event.target && event.target.track) {\n                var cues = event.target.track.cues;\n                this.ref.nativeElement.cues = cues;\n                this.updateCuePoints(cues);\n            }\n            else if (event.target && event.target.textTracks && event.target.textTracks.length) {\n                var cues = event.target.textTracks[0].cues;\n                this.ref.nativeElement.cues = cues;\n                this.updateCuePoints(cues);\n            }\n        };\n        VgCuePoints.prototype.updateCuePoints = function (cues) {\n            this.cuesSubscriptions.forEach(function (s) { return s.unsubscribe(); });\n            for (var i = 0, l = cues.length; i < l; i++) {\n                this.onEnter$ = rxjs.fromEvent(cues[i], VgEvents.VG_ENTER);\n                this.cuesSubscriptions.push(this.onEnter$.subscribe(this.onEnter.bind(this)));\n                this.onExit$ = rxjs.fromEvent(cues[i], VgEvents.VG_EXIT);\n                this.cuesSubscriptions.push(this.onExit$.subscribe(this.onExit.bind(this)));\n            }\n        };\n        VgCuePoints.prototype.onEnter = function (event) {\n            this.onEnterCuePoint.emit(event.target);\n        };\n        VgCuePoints.prototype.onExit = function (event) {\n            this.onExitCuePoint.emit(event.target);\n        };\n        VgCuePoints.prototype.ngDoCheck = function () {\n            if (this.ref.nativeElement.track && this.ref.nativeElement.track.cues) {\n                var changes = this.totalCues !== this.ref.nativeElement.track.cues.length;\n                if (changes) {\n                    this.totalCues = this.ref.nativeElement.track.cues.length;\n                    this.ref.nativeElement.cues = this.ref.nativeElement.track.cues;\n                    this.updateCuePoints(this.ref.nativeElement.track.cues);\n                }\n            }\n        };\n        VgCuePoints.prototype.ngOnDestroy = function () {\n            this.subscriptions.forEach(function (s) { return s.unsubscribe(); });\n        };\n        VgCuePoints.ctorParameters = function () { return [\n            { type: core.ElementRef }\n        ]; };\n        __decorate([\n            core.Output()\n        ], VgCuePoints.prototype, \"onEnterCuePoint\", void 0);\n        __decorate([\n            core.Output()\n        ], VgCuePoints.prototype, \"onUpdateCuePoint\", void 0);\n        __decorate([\n            core.Output()\n        ], VgCuePoints.prototype, \"onExitCuePoint\", void 0);\n        __decorate([\n            core.Output()\n        ], VgCuePoints.prototype, \"onCompleteCuePoint\", void 0);\n        VgCuePoints = __decorate([\n            core.Directive({\n                selector: '[vgCuePoints]'\n            })\n            // tslint:disable-next-line:directive-class-suffix\n        ], VgCuePoints);\n        return VgCuePoints;\n    }());\n\n    var VgPlayer = /** @class */ (function () {\n        function VgPlayer(ref, api, fsAPI, controlsHidden) {\n            this.api = api;\n            this.fsAPI = fsAPI;\n            this.controlsHidden = controlsHidden;\n            this.isFullscreen = false;\n            this.isNativeFullscreen = false;\n            this.areControlsHidden = false;\n            this.onPlayerReady = new core.EventEmitter();\n            this.onMediaReady = new core.EventEmitter();\n            this.subscriptions = [];\n            this.elem = ref.nativeElement;\n            this.api.registerElement(this.elem);\n        }\n        VgPlayer.prototype.ngAfterContentInit = function () {\n            var _this = this;\n            this.medias.toArray().forEach(function (media) {\n                _this.api.registerMedia(media);\n            });\n            this.fsAPI.init(this.elem, this.medias);\n            this.subscriptions.push(this.fsAPI.onChangeFullscreen.subscribe(this.onChangeFullscreen.bind(this)));\n            this.subscriptions.push(this.controlsHidden.isHidden.subscribe(this.onHideControls.bind(this)));\n            this.api.onPlayerReady(this.fsAPI);\n            this.onPlayerReady.emit(this.api);\n        };\n        VgPlayer.prototype.onChangeFullscreen = function (fsState) {\n            if (!this.fsAPI.nativeFullscreen) {\n                this.isFullscreen = fsState;\n                this.zIndex = fsState ? VgUtils.getZIndex().toString() : 'auto';\n            }\n            else {\n                this.isNativeFullscreen = fsState;\n            }\n        };\n        VgPlayer.prototype.onHideControls = function (hidden) {\n            this.areControlsHidden = hidden;\n        };\n        VgPlayer.prototype.ngOnDestroy = function () {\n            this.subscriptions.forEach(function (s) { return s.unsubscribe(); });\n        };\n        VgPlayer.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: VgAPI },\n            { type: VgFullscreenAPI },\n            { type: VgControlsHidden }\n        ]; };\n        __decorate([\n            core.HostBinding('class.fullscreen')\n        ], VgPlayer.prototype, \"isFullscreen\", void 0);\n        __decorate([\n            core.HostBinding('class.native-fullscreen')\n        ], VgPlayer.prototype, \"isNativeFullscreen\", void 0);\n        __decorate([\n            core.HostBinding('class.controls-hidden')\n        ], VgPlayer.prototype, \"areControlsHidden\", void 0);\n        __decorate([\n            core.HostBinding('style.z-index')\n        ], VgPlayer.prototype, \"zIndex\", void 0);\n        __decorate([\n            core.Output()\n        ], VgPlayer.prototype, \"onPlayerReady\", void 0);\n        __decorate([\n            core.Output()\n        ], VgPlayer.prototype, \"onMediaReady\", void 0);\n        __decorate([\n            core.ContentChildren(VgMedia)\n        ], VgPlayer.prototype, \"medias\", void 0);\n        VgPlayer = __decorate([\n            core.Component({\n                selector: 'vg-player',\n                encapsulation: core.ViewEncapsulation.None,\n                template: \"<ng-content></ng-content>\",\n                providers: [VgAPI, VgFullscreenAPI, VgControlsHidden],\n                styles: [\"\\n        vg-player {\\n            font-family: 'videogular';\\n            position: relative;\\n            display: flex;\\n            width: 100%;\\n            height: 100%;\\n            overflow: hidden;\\n            background-color: black;\\n        }\\n        vg-player.fullscreen {\\n            position: fixed;\\n            left: 0;\\n            top: 0;\\n        }\\n        vg-player.native-fullscreen.controls-hidden {\\n            cursor: none;\\n        }\\n    \"]\n            })\n            // tslint:disable:component-class-suffix\n            // tslint:disable:no-output-on-prefix\n        ], VgPlayer);\n        return VgPlayer;\n    }());\n\n    var VgMediaElement = /** @class */ (function () {\n        function VgMediaElement() {\n        }\n        Object.defineProperty(VgMediaElement.prototype, \"audioTracks\", {\n            get: function () { return null; },\n            enumerable: true,\n            configurable: true\n        });\n        // @ts-ignore\n        VgMediaElement.prototype.addTextTrack = function (kind, label, language) {\n            return null;\n        };\n        // @ts-ignore\n        VgMediaElement.prototype.canPlayType = function (type) {\n            return null;\n        };\n        VgMediaElement.prototype.load = function () {\n        };\n        VgMediaElement.prototype.msClearEffects = function () {\n        };\n        VgMediaElement.prototype.msGetAsCastingSource = function () {\n            return null;\n        };\n        // @ts-ignore\n        VgMediaElement.prototype.msInsertAudioEffect = function (activatableClassId, effectRequired, config) {\n        };\n        // @ts-ignore\n        VgMediaElement.prototype.msSetMediaKeys = function (mediaKeys) {\n        };\n        // @ts-ignore\n        VgMediaElement.prototype.msSetMediaProtectionManager = function (mediaProtectionManager) {\n        };\n        VgMediaElement.prototype.pause = function () {\n        };\n        VgMediaElement.prototype.play = function () {\n            return null;\n        };\n        // @ts-ignore\n        VgMediaElement.prototype.setMediaKeys = function (mediaKeys) {\n            return null;\n        };\n        // @ts-ignore\n        VgMediaElement.prototype.addEventListener = function (type, listener, useCapture) {\n        };\n        return VgMediaElement;\n    }());\n\n    var VgCoreModule = /** @class */ (function () {\n        function VgCoreModule() {\n        }\n        VgCoreModule = __decorate([\n            core.NgModule({\n                declarations: [VgMedia, VgCuePoints, VgPlayer],\n                exports: [VgMedia, VgCuePoints, VgPlayer],\n                providers: [VgAPI, VgFullscreenAPI, VgUtils, VgControlsHidden, VgStates, VgEvents]\n            })\n        ], VgCoreModule);\n        return VgCoreModule;\n    }());\n\n    // tslint:disable:no-output-on-prefix\n    // tslint:disable:ban-types\n    // tslint:disable:component-class-suffix\n    var VgImaAds = /** @class */ (function () {\n        function VgImaAds(ref, API, fsAPI) {\n            this.API = API;\n            this.fsAPI = fsAPI;\n            this.onAdStart = new core.EventEmitter();\n            this.onAdStop = new core.EventEmitter();\n            this.onSkipAd = new core.EventEmitter();\n            this.isFullscreen = false;\n            this.subscriptions = [];\n            this.displayState = 'none';\n            this.elem = ref.nativeElement;\n            this.onContentEnded = this.onContentEnded.bind(this);\n        }\n        VgImaAds.prototype.ngOnInit = function () {\n            var _this = this;\n            if (this.API.isPlayerReady) {\n                this.onPlayerReady();\n            }\n            else {\n                this.subscriptions.push(this.API.playerReadyEvent.subscribe(function () { return _this.onPlayerReady(); }));\n            }\n        };\n        VgImaAds.prototype.onPlayerReady = function () {\n            if (typeof google === 'undefined') {\n                this.onMissingGoogleImaLoader();\n                return;\n            }\n            this.target = this.API.getMediaById(this.vgFor);\n            this.initializations();\n            this.subscriptions.push(this.target.subscriptions.ended.subscribe(this.onContentEnded.bind(this)));\n            this.subscriptions.push(this.target.subscriptions.play.subscribe(this.onUpdateState.bind(this)));\n            this.subscriptions.push(this.fsAPI.onChangeFullscreen.subscribe(this.onChangeFullscreen.bind(this)));\n            this.ima.adsLoader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, this.onAdsManagerLoaded.bind(this), false);\n            this.ima.adsLoader.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, this.onAdError.bind(this), false);\n            this.loadAds();\n        };\n        VgImaAds.prototype.initializations = function () {\n            var _this = this;\n            this.ima = new Ima(this.elem);\n            if (this.vgSkipButton) {\n                this.skipButton = document.querySelector(this.vgSkipButton);\n                this.skipButton.style.display = 'none';\n                this.skipButton.addEventListener('click', this.onClickSkip.bind(this));\n                this.elem.insertBefore(this.skipButton, this.elem.firstChild);\n            }\n            window.addEventListener('resize', function () {\n                var w = _this.API.videogularElement.offsetWidth;\n                var h = _this.API.videogularElement.offsetHeight;\n                if (_this.ima.adsManager) {\n                    if (_this.isFullscreen) {\n                        _this.ima.adsManager.resize(w, h, google.ima.ViewMode.FULLSCREEN);\n                    }\n                    else {\n                        _this.ima.adsManager.resize(w, h, google.ima.ViewMode.NORMAL);\n                    }\n                }\n            });\n        };\n        VgImaAds.prototype.loadAds = function () {\n            var _this = this;\n            if (this.vgCompanion) {\n                googletag.cmd.push(function () {\n                    var adUnitPath = '/' + _this.vgNetwork + '/' + _this.vgUnitPath;\n                    var slot = googletag.defineSlot(adUnitPath, _this.vgCompanionSize, _this.vgCompanion);\n                    if (slot) {\n                        slot.addService(googletag.companionAds());\n                        slot.addService(googletag.pubads());\n                        googletag\n                            .companionAds()\n                            .setRefreshUnfilledSlots(true);\n                        googletag\n                            .pubads()\n                            .enableVideoAds();\n                        googletag.enableServices();\n                    }\n                });\n            }\n        };\n        VgImaAds.prototype.onUpdateState = function (event) {\n            switch (event.type) {\n                case VgEvents.VG_PLAY:\n                    if (!this.ima.adsLoaded) {\n                        this.API.pause();\n                        this.ima.adDisplayContainer.initialize();\n                        this.requestAds(this.vgAdTagUrl);\n                        this.ima.adsLoaded = true;\n                    }\n                    break;\n            }\n        };\n        VgImaAds.prototype.requestAds = function (adTagUrl) {\n            // Show only to get computed style in pixels\n            this.show();\n            var adsRequest = new google.ima.AdsRequest();\n            var computedStyle = window.getComputedStyle(this.elem);\n            adsRequest.adTagUrl = adTagUrl;\n            adsRequest.linearAdSlotWidth = parseInt(computedStyle.width, 10);\n            adsRequest.linearAdSlotHeight = parseInt(computedStyle.height, 10);\n            adsRequest.nonLinearAdSlotWidth = parseInt(computedStyle.width, 10);\n            adsRequest.nonLinearAdSlotHeight = parseInt(computedStyle.height, 10);\n            this.ima.adsLoader.requestAds(adsRequest);\n        };\n        VgImaAds.prototype.onAdsManagerLoaded = function (evt) {\n            this.show();\n            this.ima.adsManager = evt.getAdsManager(this.target);\n            this.processAdsManager(this.ima.adsManager);\n        };\n        // @ts-ignore\n        VgImaAds.prototype.processAdsManager = function (adsManager) {\n            var w = this.API.videogularElement.offsetWidth;\n            var h = this.API.videogularElement.offsetHeight;\n            // Attach the pause/resume events.\n            this.ima.adsManager.addEventListener(google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED, this.onContentPauseRequested.bind(this), false);\n            this.ima.adsManager.addEventListener(google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED, this.onContentResumeRequested.bind(this), false);\n            this.ima.adsManager.addEventListener(google.ima.AdEvent.Type.SKIPPABLE_STATE_CHANGED, this.onSkippableStateChanged.bind(this), false);\n            this.ima.adsManager.addEventListener(google.ima.AdEvent.Type.ALL_ADS_COMPLETED, this.onAllAdsComplete.bind(this), false);\n            this.ima.adsManager.addEventListener(google.ima.AdEvent.Type.COMPLETE, this.onAdComplete.bind(this), false);\n            this.ima.adsManager.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, this.onAdError.bind(this), false);\n            this.ima.adsManager.init(w, h, google.ima.ViewMode.NORMAL);\n            this.ima.adsManager.start();\n        };\n        VgImaAds.prototype.onSkippableStateChanged = function () {\n            var isSkippable = this.ima.adsManager.getAdSkippableState();\n            if (isSkippable) {\n                this.skipButton.style.display = 'block';\n            }\n            else {\n                this.skipButton.style.display = 'none';\n            }\n        };\n        VgImaAds.prototype.onClickSkip = function () {\n            this.ima.adsManager.skip();\n            this.onSkipAd.emit(true);\n        };\n        VgImaAds.prototype.onContentPauseRequested = function () {\n            this.show();\n            this.API.pause();\n            this.onAdStop.emit(true);\n        };\n        VgImaAds.prototype.onContentResumeRequested = function () {\n            this.API.play();\n            this.onAdStart.emit(true);\n            this.hide();\n        };\n        // @ts-ignore\n        VgImaAds.prototype.onAdError = function (evt) {\n            if (this.ima.adsManager) {\n                this.ima.adsManager.destroy();\n            }\n            this.hide();\n            this.API.play();\n            this.onAdStop.emit(true);\n        };\n        VgImaAds.prototype.onAllAdsComplete = function () {\n            this.hide();\n            // The last ad was a post-roll\n            if (this.ima.adsManager.getCuePoints().join().indexOf('-1') >= 0) {\n                this.API.pause(); // it was stop() in Videogular v1\n                this.onAdStop.emit(true);\n            }\n        };\n        VgImaAds.prototype.onAdComplete = function () {\n            // TODO: Update view with current ad count\n            this.ima.currentAd++;\n            this.onAdStop.emit(true);\n        };\n        VgImaAds.prototype.show = function () {\n            window.dispatchEvent(new CustomEvent(VgEvents.VG_START_ADS));\n            this.displayState = 'block';\n        };\n        VgImaAds.prototype.hide = function () {\n            window.dispatchEvent(new CustomEvent(VgEvents.VG_END_ADS));\n            this.displayState = 'none';\n        };\n        VgImaAds.prototype.onContentEnded = function () {\n            this.ima.adsLoader.contentComplete();\n            this.onAdStop.emit(true);\n        };\n        VgImaAds.prototype.onChangeFullscreen = function (fsState) {\n            if (!this.fsAPI.nativeFullscreen) {\n                this.isFullscreen = fsState;\n            }\n        };\n        VgImaAds.prototype.onMissingGoogleImaLoader = function () {\n            this.hide();\n            this.API.play();\n        };\n        VgImaAds.prototype.ngOnDestroy = function () {\n            this.subscriptions.forEach(function (s) { return s.unsubscribe(); });\n        };\n        VgImaAds.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: VgAPI },\n            { type: VgFullscreenAPI }\n        ]; };\n        __decorate([\n            core.Input()\n        ], VgImaAds.prototype, \"vgFor\", void 0);\n        __decorate([\n            core.Input()\n        ], VgImaAds.prototype, \"vgNetwork\", void 0);\n        __decorate([\n            core.Input()\n        ], VgImaAds.prototype, \"vgUnitPath\", void 0);\n        __decorate([\n            core.Input()\n        ], VgImaAds.prototype, \"vgCompanion\", void 0);\n        __decorate([\n            core.Input()\n        ], VgImaAds.prototype, \"vgCompanionSize\", void 0);\n        __decorate([\n            core.Input()\n        ], VgImaAds.prototype, \"vgAdTagUrl\", void 0);\n        __decorate([\n            core.Input()\n        ], VgImaAds.prototype, \"vgSkipButton\", void 0);\n        __decorate([\n            core.Output()\n        ], VgImaAds.prototype, \"onAdStart\", void 0);\n        __decorate([\n            core.Output()\n        ], VgImaAds.prototype, \"onAdStop\", void 0);\n        __decorate([\n            core.Output()\n        ], VgImaAds.prototype, \"onSkipAd\", void 0);\n        __decorate([\n            core.HostBinding('style.display')\n        ], VgImaAds.prototype, \"displayState\", void 0);\n        VgImaAds = __decorate([\n            core.Component({\n                selector: 'vg-ima-ads',\n                encapsulation: core.ViewEncapsulation.None,\n                template: \"<div class=\\\"vg-ima-ads\\\"></div>\",\n                styles: [\"\\n        vg-ima-ads {\\n            position: absolute;\\n            width: 100%;\\n            height: 100%;\\n            z-index: 300;\\n        }\\n        vg-ima-ads .vg-ima-ads {\\n            position: absolute;\\n            width: 100%;\\n            height: 100%;\\n            pointer-events: none;\\n        }\\n    \"]\n            })\n        ], VgImaAds);\n        return VgImaAds;\n    }());\n    var Ima = /** @class */ (function () {\n        function Ima(imaAdsElement) {\n            this.adDisplayContainer = new google.ima.AdDisplayContainer(imaAdsElement);\n            this.adsLoader = new google.ima.AdsLoader(this.adDisplayContainer);\n            this.adsManager = null;\n            this.adsLoaded = false;\n            this.currentAd = 0;\n        }\n        return Ima;\n    }());\n\n    var VgImaAdsModule = /** @class */ (function () {\n        function VgImaAdsModule() {\n        }\n        VgImaAdsModule = __decorate([\n            core.NgModule({\n                imports: [common.CommonModule],\n                declarations: [\n                    VgImaAds\n                ],\n                exports: [\n                    VgImaAds\n                ]\n            })\n        ], VgImaAdsModule);\n        return VgImaAdsModule;\n    }());\n\n    var VgOverlayPlay = /** @class */ (function () {\n        function VgOverlayPlay(ref, API, fsAPI, controlsHidden) {\n            this.API = API;\n            this.fsAPI = fsAPI;\n            this.controlsHidden = controlsHidden;\n            this.isNativeFullscreen = false;\n            this.areControlsHidden = false;\n            this.subscriptions = [];\n            this.isBuffering = false;\n            this.elem = ref.nativeElement;\n        }\n        VgOverlayPlay.prototype.ngOnInit = function () {\n            var _this = this;\n            if (this.API.isPlayerReady) {\n                this.onPlayerReady();\n            }\n            else {\n                this.subscriptions.push(this.API.playerReadyEvent.subscribe(function () { return _this.onPlayerReady(); }));\n            }\n        };\n        VgOverlayPlay.prototype.onPlayerReady = function () {\n            var _this = this;\n            this.target = this.API.getMediaById(this.vgFor);\n            this.subscriptions.push(this.fsAPI.onChangeFullscreen.subscribe(this.onChangeFullscreen.bind(this)));\n            this.subscriptions.push(this.controlsHidden.isHidden.subscribe(this.onHideControls.bind(this)));\n            this.subscriptions.push(this.target.subscriptions.bufferDetected.subscribe(function (isBuffering) { return _this.onUpdateBuffer(isBuffering); }));\n        };\n        VgOverlayPlay.prototype.onUpdateBuffer = function (isBuffering) {\n            this.isBuffering = isBuffering;\n        };\n        VgOverlayPlay.prototype.onChangeFullscreen = function (fsState) {\n            if (this.fsAPI.nativeFullscreen) {\n                this.isNativeFullscreen = fsState;\n            }\n        };\n        VgOverlayPlay.prototype.onHideControls = function (hidden) {\n            this.areControlsHidden = hidden;\n        };\n        VgOverlayPlay.prototype.onClick = function () {\n            var state = this.getState();\n            switch (state) {\n                case VgStates.VG_PLAYING:\n                    this.target.pause();\n                    break;\n                case VgStates.VG_PAUSED:\n                case VgStates.VG_ENDED:\n                    this.target.play();\n                    break;\n            }\n        };\n        VgOverlayPlay.prototype.getState = function () {\n            var state = VgStates.VG_PAUSED;\n            if (this.target) {\n                if (this.target.state instanceof Array) {\n                    for (var i = 0, l = this.target.state.length; i < l; i++) {\n                        if (this.target.state[i] === VgStates.VG_PLAYING) {\n                            state = VgStates.VG_PLAYING;\n                            break;\n                        }\n                    }\n                }\n                else {\n                    state = this.target.state;\n                }\n            }\n            return state;\n        };\n        VgOverlayPlay.prototype.ngOnDestroy = function () {\n            this.subscriptions.forEach(function (s) { return s.unsubscribe(); });\n        };\n        VgOverlayPlay.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: VgAPI },\n            { type: VgFullscreenAPI },\n            { type: VgControlsHidden }\n        ]; };\n        __decorate([\n            core.Input()\n        ], VgOverlayPlay.prototype, \"vgFor\", void 0);\n        __decorate([\n            core.HostBinding('class.is-buffering')\n        ], VgOverlayPlay.prototype, \"isBuffering\", void 0);\n        __decorate([\n            core.HostListener('click')\n        ], VgOverlayPlay.prototype, \"onClick\", null);\n        VgOverlayPlay = __decorate([\n            core.Component({\n                selector: 'vg-overlay-play',\n                encapsulation: core.ViewEncapsulation.None,\n                template: \"<div class=\\\"vg-overlay-play\\\"\\n                    [class.native-fullscreen]=\\\"isNativeFullscreen\\\"\\n                    [class.controls-hidden]=\\\"areControlsHidden\\\">\\n                   <div class=\\\"overlay-play-container\\\"\\n                        [class.vg-icon-play_arrow]=\\\"getState() !== 'playing'\\\">\\n                   </div>\\n               </div>\",\n                styles: [\"\\n        vg-overlay-play {\\n            z-index: 200;\\n        }\\n        vg-overlay-play.is-buffering {\\n            display: none;\\n        }\\n        vg-overlay-play .vg-overlay-play {\\n            transition: all 0.5s;\\n            cursor: pointer;\\n            position: absolute;\\n            display: block;\\n            color: white;\\n            width: 100%;\\n            height: 100%;\\n            font-size: 80px;\\n            filter: alpha(opacity=60);\\n            opacity: 0.6;\\n        }\\n        vg-overlay-play .vg-overlay-play.native-fullscreen.controls-hidden {\\n            cursor: none;\\n        }\\n        vg-overlay-play .vg-overlay-play .overlay-play-container.vg-icon-play_arrow {\\n            pointer-events: none;\\n            width: 100%;\\n            height: 100%;\\n            position: absolute;\\n            display: flex;\\n            align-items: center;\\n            justify-content: center;\\n            font-size: 80px;\\n        }\\n        vg-overlay-play .vg-overlay-play:hover {\\n            filter: alpha(opacity=100);\\n            opacity: 1;\\n        }\\n        vg-overlay-play .vg-overlay-play:hover .overlay-play-container.vg-icon-play_arrow:before {\\n            transform: scale(1.2);\\n        }\\n    \"]\n            })\n            // tslint:disable:component-class-suffix\n        ], VgOverlayPlay);\n        return VgOverlayPlay;\n    }());\n\n    var VgOverlayPlayModule = /** @class */ (function () {\n        function VgOverlayPlayModule() {\n        }\n        VgOverlayPlayModule = __decorate([\n            core.NgModule({\n                imports: [common.CommonModule],\n                declarations: [\n                    VgOverlayPlay\n                ],\n                exports: [\n                    VgOverlayPlay\n                ]\n            })\n        ], VgOverlayPlayModule);\n        return VgOverlayPlayModule;\n    }());\n\n    var VgDASH = /** @class */ (function () {\n        function VgDASH(ref, API) {\n            this.ref = ref;\n            this.API = API;\n            this.onGetBitrates = new core.EventEmitter();\n            this.subscriptions = [];\n        }\n        VgDASH.prototype.ngOnInit = function () {\n            var _this = this;\n            if (this.API.isPlayerReady) {\n                this.onPlayerReady();\n            }\n            else {\n                this.subscriptions.push(this.API.playerReadyEvent.subscribe(function () { return _this.onPlayerReady(); }));\n            }\n        };\n        VgDASH.prototype.onPlayerReady = function () {\n            this.vgFor = this.ref.nativeElement.getAttribute('vgFor');\n            this.target = this.API.getMediaById(this.vgFor);\n            this.createPlayer();\n        };\n        VgDASH.prototype.ngOnChanges = function (changes) {\n            if (changes['vgDash'] && changes['vgDash'].currentValue) {\n                this.createPlayer();\n            }\n            else {\n                this.destroyPlayer();\n            }\n        };\n        VgDASH.prototype.createPlayer = function () {\n            var _this = this;\n            if (this.dash) {\n                this.destroyPlayer();\n            }\n            // It's a DASH source\n            if (this.vgDash && ((this.vgDash.indexOf('.mpd') > -1) ||\n                (this.vgDash.indexOf('mpd-time-csf') > -1))) {\n                var drmOptions = void 0;\n                if (this.vgDRMLicenseServer) {\n                    drmOptions = this.vgDRMLicenseServer;\n                    if (this.vgDRMToken) {\n                        for (var drmServer in drmOptions) {\n                            if (drmServer.hasOwnProperty(drmServer)) {\n                                drmOptions[drmServer].httpRequestHeaders = { Authorization: this.vgDRMToken };\n                            }\n                        }\n                    }\n                }\n                this.dash = dashjs.MediaPlayer().create();\n                this.dash.getDebug().setLogToBrowserConsole(false);\n                this.dash.initialize(this.ref.nativeElement);\n                this.dash.setAutoPlay(false);\n                this.dash.on(dashjs.MediaPlayer.events.STREAM_INITIALIZED, function () {\n                    var audioList = _this.dash.getBitrateInfoListFor('audio');\n                    var videoList = _this.dash.getBitrateInfoListFor('video');\n                    if (audioList.length > 1) {\n                        audioList.forEach(function (item) { return item.qualityIndex = ++item.qualityIndex; });\n                        audioList.unshift({\n                            qualityIndex: 0,\n                            width: 0,\n                            height: 0,\n                            bitrate: 0,\n                            mediaType: 'video',\n                            label: 'AUTO'\n                        });\n                        _this.onGetBitrates.emit(audioList);\n                    }\n                    if (videoList.length > 1) {\n                        videoList.forEach(function (item) { return item.qualityIndex = ++item.qualityIndex; });\n                        videoList.unshift({\n                            qualityIndex: 0,\n                            width: 0,\n                            height: 0,\n                            bitrate: 0,\n                            mediaType: 'video',\n                            label: 'AUTO'\n                        });\n                        _this.onGetBitrates.emit(videoList);\n                    }\n                });\n                if (drmOptions) {\n                    this.dash.setProtectionData(drmOptions);\n                }\n                this.dash.attachSource(this.vgDash);\n            }\n            else {\n                if (this.target) {\n                    this.target.pause();\n                    this.target.seekTime(0);\n                    this.ref.nativeElement.src = this.vgDash;\n                }\n            }\n        };\n        VgDASH.prototype.setBitrate = function (bitrate) {\n            if (this.dash) {\n                if (bitrate.qualityIndex > 0) {\n                    if (this.dash.getAutoSwitchQualityFor(bitrate.mediaType)) {\n                        this.dash.setAutoSwitchQualityFor(bitrate.mediaType, false);\n                    }\n                    var nextIndex = bitrate.qualityIndex - 1;\n                    this.dash.setQualityFor(bitrate.mediaType, nextIndex);\n                }\n                else {\n                    this.dash.setAutoSwitchQualityFor(bitrate.mediaType, true);\n                }\n            }\n        };\n        VgDASH.prototype.destroyPlayer = function () {\n            if (this.dash) {\n                this.dash.reset();\n                this.dash = null;\n            }\n        };\n        VgDASH.prototype.ngOnDestroy = function () {\n            this.subscriptions.forEach(function (s) { return s.unsubscribe(); });\n            this.destroyPlayer();\n        };\n        VgDASH.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: VgAPI }\n        ]; };\n        __decorate([\n            core.Input()\n        ], VgDASH.prototype, \"vgDash\", void 0);\n        __decorate([\n            core.Input()\n        ], VgDASH.prototype, \"vgDRMToken\", void 0);\n        __decorate([\n            core.Input()\n        ], VgDASH.prototype, \"vgDRMLicenseServer\", void 0);\n        __decorate([\n            core.Output()\n        ], VgDASH.prototype, \"onGetBitrates\", void 0);\n        VgDASH = __decorate([\n            core.Directive({\n                selector: '[vgDash]',\n                exportAs: 'vgDash'\n            })\n            // tslint:disable:directive-class-suffix\n            // tslint:disable:no-output-on-prefix\n            // tslint:disable:no-string-literal\n        ], VgDASH);\n        return VgDASH;\n    }());\n\n    var VgHLS = /** @class */ (function () {\n        function VgHLS(ref, API) {\n            this.ref = ref;\n            this.API = API;\n            this.vgHlsHeaders = {};\n            this.onGetBitrates = new core.EventEmitter();\n            this.subscriptions = [];\n        }\n        VgHLS.prototype.ngOnInit = function () {\n            var _this = this;\n            if (this.API.isPlayerReady) {\n                this.onPlayerReady();\n            }\n            else {\n                this.subscriptions.push(this.API.playerReadyEvent.subscribe(function () { return _this.onPlayerReady(); }));\n            }\n        };\n        VgHLS.prototype.onPlayerReady = function () {\n            var _this = this;\n            this.crossorigin = this.ref.nativeElement.getAttribute('crossorigin');\n            this.preload = this.ref.nativeElement.getAttribute('preload') !== 'none';\n            this.vgFor = this.ref.nativeElement.getAttribute('vgFor');\n            if (this.vgFor) {\n                this.target = this.API.getMediaById(this.vgFor);\n            }\n            else {\n                this.target = this.API.getDefaultMedia();\n            }\n            this.config = {\n                autoStartLoad: this.preload\n            };\n            // @ts-ignore\n            this.config.xhrSetup = function (xhr, url) {\n                var e_1, _a;\n                // Send cookies\n                if (_this.crossorigin === 'use-credentials') {\n                    xhr.withCredentials = true;\n                }\n                try {\n                    for (var _b = __values(Object.keys(_this.vgHlsHeaders)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                        var key = _c.value;\n                        xhr.setRequestHeader(key, _this.vgHlsHeaders[key]);\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n            };\n            this.createPlayer();\n            if (!this.preload) {\n                this.subscriptions.push(this.API.subscriptions.play.subscribe(function () {\n                    if (_this.hls) {\n                        _this.hls.startLoad(0);\n                    }\n                }));\n            }\n        };\n        VgHLS.prototype.ngOnChanges = function (changes) {\n            if (changes['vgHls'] && changes['vgHls'].currentValue) {\n                this.createPlayer();\n            }\n            else if (changes['vgHlsHeaders'] && changes['vgHlsHeaders'].currentValue) {\n                // Do nothing. We don't want to create a or destroy a player if the headers change.\n            }\n            else {\n                this.destroyPlayer();\n            }\n        };\n        VgHLS.prototype.createPlayer = function () {\n            var _this = this;\n            if (this.hls) {\n                this.destroyPlayer();\n            }\n            // It's a HLS source\n            if (this.vgHls && this.vgHls.indexOf('m3u8') > -1 && Hls.isSupported() && this.API.isPlayerReady) {\n                var video = this.ref.nativeElement;\n                this.hls = new Hls(this.config);\n                // @ts-ignore\n                this.hls.on(Hls.Events.MANIFEST_PARSED, function (event, data) {\n                    var videoList = [];\n                    videoList.push({\n                        qualityIndex: 0,\n                        width: 0,\n                        height: 0,\n                        bitrate: 0,\n                        mediaType: 'video',\n                        label: 'AUTO'\n                    });\n                    data.levels.forEach(function (item, index) {\n                        videoList.push({\n                            qualityIndex: ++index,\n                            width: item.width,\n                            height: item.height,\n                            bitrate: item.bitrate,\n                            mediaType: 'video',\n                            label: item.name\n                        });\n                    });\n                    _this.onGetBitrates.emit(videoList);\n                });\n                // @ts-ignore\n                this.hls.on(Hls.Events.LEVEL_LOADED, function (event, data) {\n                    _this.target.isLive = data.details.live;\n                });\n                this.hls.loadSource(this.vgHls);\n                this.hls.attachMedia(video);\n            }\n            else {\n                if (this.target && !!this.target.pause) {\n                    this.target.pause();\n                    this.target.seekTime(0);\n                    this.ref.nativeElement.src = this.vgHls;\n                }\n            }\n        };\n        VgHLS.prototype.setBitrate = function (bitrate) {\n            if (this.hls) {\n                this.hls.nextLevel = bitrate.qualityIndex - 1;\n            }\n        };\n        VgHLS.prototype.destroyPlayer = function () {\n            if (this.hls) {\n                this.hls.destroy();\n                this.hls = null;\n            }\n        };\n        VgHLS.prototype.ngOnDestroy = function () {\n            this.subscriptions.forEach(function (s) { return s.unsubscribe(); });\n            this.destroyPlayer();\n            delete this.hls;\n        };\n        VgHLS.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: VgAPI }\n        ]; };\n        __decorate([\n            core.Input()\n        ], VgHLS.prototype, \"vgHls\", void 0);\n        __decorate([\n            core.Input()\n        ], VgHLS.prototype, \"vgHlsHeaders\", void 0);\n        __decorate([\n            core.Output()\n        ], VgHLS.prototype, \"onGetBitrates\", void 0);\n        VgHLS = __decorate([\n            core.Directive({\n                selector: '[vgHls]',\n                exportAs: 'vgHls'\n            })\n            // tslint:disable:no-string-literal\n            // tslint:disable:directive-class-suffix\n            // tslint:disable:no-output-on-prefix\n        ], VgHLS);\n        return VgHLS;\n    }());\n\n    var VgStreamingModule = /** @class */ (function () {\n        function VgStreamingModule() {\n        }\n        VgStreamingModule = __decorate([\n            core.NgModule({\n                imports: [common.CommonModule],\n                declarations: [\n                    VgDASH, VgHLS\n                ],\n                exports: [\n                    VgDASH, VgHLS\n                ]\n            })\n        ], VgStreamingModule);\n        return VgStreamingModule;\n    }());\n\n    exports.VgAPI = VgAPI;\n    exports.VgBufferingModule = VgBufferingModule;\n    exports.VgControlsHidden = VgControlsHidden;\n    exports.VgControlsModule = VgControlsModule;\n    exports.VgCoreModule = VgCoreModule;\n    exports.VgDASH = VgDASH;\n    exports.VgEvents = VgEvents;\n    exports.VgFullscreenAPI = VgFullscreenAPI;\n    exports.VgHLS = VgHLS;\n    exports.VgImaAdsModule = VgImaAdsModule;\n    exports.VgMediaElement = VgMediaElement;\n    exports.VgOverlayPlayModule = VgOverlayPlayModule;\n    exports.VgStates = VgStates;\n    exports.VgStreamingModule = VgStreamingModule;\n    exports.VgUtils = VgUtils;\n    exports.ɵa = VgBuffering;\n    exports.ɵb = VgControls;\n    exports.ɵc = VgFullscreen;\n    exports.ɵd = VgMute;\n    exports.ɵe = VgVolume;\n    exports.ɵf = VgPlayPause;\n    exports.ɵg = VgPlaybackButton;\n    exports.ɵh = VgScrubBar;\n    exports.ɵi = VgScrubBarBufferingTime;\n    exports.ɵj = VgScrubBarCuePoints;\n    exports.ɵk = VgScrubBarCurrentTime;\n    exports.ɵl = VgUtcPipe;\n    exports.ɵm = VgTimeDisplay;\n    exports.ɵn = VgTrackSelector;\n    exports.ɵo = VgQualitySelector;\n    exports.ɵp = VgMedia;\n    exports.ɵq = VgCuePoints;\n    exports.ɵr = VgPlayer;\n    exports.ɵs = VgImaAds;\n    exports.ɵt = VgOverlayPlay;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"]}