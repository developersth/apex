(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define('@ngx-translate/http-loader', ['exports'], factory) :
    (factory((global['ngx-translate'] = global['ngx-translate'] || {}, global['ngx-translate']['http-loader'] = {})));
}(this, (function (exports) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var TranslateHttpLoader = /** @class */ (function () {
        function TranslateHttpLoader(http, prefix, suffix) {
            if (prefix === void 0) {
                prefix = "/assets/i18n/";
            }
            if (suffix === void 0) {
                suffix = ".json";
            }
            this.http = http;
            this.prefix = prefix;
            this.suffix = suffix;
        }
        /**
         * Gets the translations from the server
         */
        /**
         * Gets the translations from the server
         * @param {?} lang
         * @return {?}
         */
        TranslateHttpLoader.prototype.getTranslation = /**
         * Gets the translations from the server
         * @param {?} lang
         * @return {?}
         */
            function (lang) {
                return this.http.get("" + this.prefix + lang + this.suffix);
            };
        return TranslateHttpLoader;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    exports.TranslateHttpLoader = TranslateHttpLoader;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNwcm8va3JpdHNhZGVlL1NWTi9DeWJlcnNvZnQvYXBleC9ub2RlX21vZHVsZXMvQG5neC10cmFuc2xhdGUvaHR0cC1sb2FkZXIvYnVuZGxlcy9uZ3gtdHJhbnNsYXRlLWh0dHAtbG9hZGVyLnVtZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiJuZ3gtdHJhbnNsYXRlLWh0dHAtbG9hZGVyLnVtZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gZmFjdG9yeShleHBvcnRzKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKCdAbmd4LXRyYW5zbGF0ZS9odHRwLWxvYWRlcicsIFsnZXhwb3J0cyddLCBmYWN0b3J5KSA6XG4gICAgKGZhY3RvcnkoKGdsb2JhbFsnbmd4LXRyYW5zbGF0ZSddID0gZ2xvYmFsWyduZ3gtdHJhbnNsYXRlJ10gfHwge30sIGdsb2JhbFsnbmd4LXRyYW5zbGF0ZSddWydodHRwLWxvYWRlciddID0ge30pKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoZXhwb3J0cykgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvKipcbiAgICAgKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAgICAgKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXMsZXh0cmFSZXF1aXJlLG1pc3NpbmdSZXR1cm4sdXNlbGVzc0NvZGV9IGNoZWNrZWQgYnkgdHNjXG4gICAgICovXG4gICAgdmFyIFRyYW5zbGF0ZUh0dHBMb2FkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIFRyYW5zbGF0ZUh0dHBMb2FkZXIoaHR0cCwgcHJlZml4LCBzdWZmaXgpIHtcbiAgICAgICAgICAgIGlmIChwcmVmaXggPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICAgIHByZWZpeCA9IFwiL2Fzc2V0cy9pMThuL1wiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN1ZmZpeCA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgc3VmZml4ID0gXCIuanNvblwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5odHRwID0gaHR0cDtcbiAgICAgICAgICAgIHRoaXMucHJlZml4ID0gcHJlZml4O1xuICAgICAgICAgICAgdGhpcy5zdWZmaXggPSBzdWZmaXg7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgdGhlIHRyYW5zbGF0aW9ucyBmcm9tIHRoZSBzZXJ2ZXJcbiAgICAgICAgICovXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIHRoZSB0cmFuc2xhdGlvbnMgZnJvbSB0aGUgc2VydmVyXG4gICAgICAgICAqIEBwYXJhbSB7P30gbGFuZ1xuICAgICAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAgICAgKi9cbiAgICAgICAgVHJhbnNsYXRlSHR0cExvYWRlci5wcm90b3R5cGUuZ2V0VHJhbnNsYXRpb24gPSAvKipcbiAgICAgICAgICogR2V0cyB0aGUgdHJhbnNsYXRpb25zIGZyb20gdGhlIHNlcnZlclxuICAgICAgICAgKiBAcGFyYW0gez99IGxhbmdcbiAgICAgICAgICogQHJldHVybiB7P31cbiAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiAobGFuZykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KFwiXCIgKyB0aGlzLnByZWZpeCArIGxhbmcgKyB0aGlzLnN1ZmZpeCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICByZXR1cm4gVHJhbnNsYXRlSHR0cExvYWRlcjtcbiAgICB9KCkpO1xuXG4gICAgLyoqXG4gICAgICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gICAgICogQHN1cHByZXNzIHtjaGVja1R5cGVzLGV4dHJhUmVxdWlyZSxtaXNzaW5nUmV0dXJuLHVzZWxlc3NDb2RlfSBjaGVja2VkIGJ5IHRzY1xuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gICAgICogQHN1cHByZXNzIHtjaGVja1R5cGVzLGV4dHJhUmVxdWlyZSxtaXNzaW5nUmV0dXJuLHVzZWxlc3NDb2RlfSBjaGVja2VkIGJ5IHRzY1xuICAgICAqL1xuXG4gICAgZXhwb3J0cy5UcmFuc2xhdGVIdHRwTG9hZGVyID0gVHJhbnNsYXRlSHR0cExvYWRlcjtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbn0pKSk7XG4iXX0=