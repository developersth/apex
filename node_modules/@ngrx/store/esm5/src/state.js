import * as tslib_1 from "tslib";
import { Inject, Injectable } from '@angular/core';
import { BehaviorSubject, Observable, queueScheduler, } from 'rxjs';
import { observeOn, scan, withLatestFrom } from 'rxjs/operators';
import { ActionsSubject, INIT } from './actions_subject';
import { ReducerObservable } from './reducer_manager';
import { ScannedActionsSubject } from './scanned_actions_subject';
import { INITIAL_STATE } from './tokens';
import * as ɵngcc0 from '@angular/core';
var StateObservable = /** @class */ (function (_super) {
    tslib_1.__extends(StateObservable, _super);
    function StateObservable() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return StateObservable;
}(Observable));
export { StateObservable };
var State = /** @class */ (function (_super) {
    tslib_1.__extends(State, _super);
    function State(actions$, reducer$, scannedActions, initialState) {
        var _this = _super.call(this, initialState) || this;
        var actionsOnQueue$ = actions$.pipe(observeOn(queueScheduler));
        var withLatestReducer$ = actionsOnQueue$.pipe(withLatestFrom(reducer$));
        var seed = { state: initialState };
        var stateAndAction$ = withLatestReducer$.pipe(scan(reduceState, seed));
        _this.stateSubscription = stateAndAction$.subscribe(function (_a) {
            var state = _a.state, action = _a.action;
            _this.next(state);
            scannedActions.next(action);
        });
        return _this;
    }
    State.prototype.ngOnDestroy = function () {
        this.stateSubscription.unsubscribe();
        this.complete();
    };
    State.INIT = INIT;
    State = tslib_1.__decorate([ tslib_1.__param(3, Inject(INITIAL_STATE)),
        tslib_1.__metadata("design:paramtypes", [ActionsSubject,
            ReducerObservable,
            ScannedActionsSubject, Object])
    ], State);
State.ɵfac = function State_Factory(t) { return new (t || State)(ɵngcc0.ɵɵinject(ActionsSubject), ɵngcc0.ɵɵinject(ReducerObservable), ɵngcc0.ɵɵinject(ScannedActionsSubject), ɵngcc0.ɵɵinject(INITIAL_STATE)); };
State.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: State, factory: function (t) { return State.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(State, [{
        type: Injectable
    }], function () { return [{ type: ActionsSubject }, { type: ReducerObservable }, { type: ScannedActionsSubject }, { type: Object, decorators: [{
                type: Inject,
                args: [INITIAL_STATE]
            }] }]; }, null); })();
    return State;
}(BehaviorSubject));
export { State };
export function reduceState(stateActionPair, _a) {
    if (stateActionPair === void 0) { stateActionPair = { state: undefined }; }
    var _b = tslib_1.__read(_a, 2), action = _b[0], reducer = _b[1];
    var state = stateActionPair.state;
    return { state: reducer(state, action), action: action };
}
export var STATE_PROVIDERS = [
    State,
    { provide: StateObservable, useExisting: State },
];

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNwcm8va3JpdHNhZGVlL1NWTi9DeWJlcnNvZnQvYXBleC9ub2RlX21vZHVsZXMvQG5ncngvc3RvcmUvZXNtNS9zcmMvc3RhdGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztBQVFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2dDQTRCZ0MsQUFFekI7Ozs7Ozs7Ozs7OztrQ0FJTyIsImZpbGUiOiJzdGF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSwgcXVldWVTY2hlZHVsZXIsIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBvYnNlcnZlT24sIHNjYW4sIHdpdGhMYXRlc3RGcm9tIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQWN0aW9uc1N1YmplY3QsIElOSVQgfSBmcm9tICcuL2FjdGlvbnNfc3ViamVjdCc7XG5pbXBvcnQgeyBSZWR1Y2VyT2JzZXJ2YWJsZSB9IGZyb20gJy4vcmVkdWNlcl9tYW5hZ2VyJztcbmltcG9ydCB7IFNjYW5uZWRBY3Rpb25zU3ViamVjdCB9IGZyb20gJy4vc2Nhbm5lZF9hY3Rpb25zX3N1YmplY3QnO1xuaW1wb3J0IHsgSU5JVElBTF9TVEFURSB9IGZyb20gJy4vdG9rZW5zJztcbnZhciBTdGF0ZU9ic2VydmFibGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoU3RhdGVPYnNlcnZhYmxlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN0YXRlT2JzZXJ2YWJsZSgpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gU3RhdGVPYnNlcnZhYmxlO1xufShPYnNlcnZhYmxlKSk7XG5leHBvcnQgeyBTdGF0ZU9ic2VydmFibGUgfTtcbnZhciBTdGF0ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhTdGF0ZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdGF0ZShhY3Rpb25zJCwgcmVkdWNlciQsIHNjYW5uZWRBY3Rpb25zLCBpbml0aWFsU3RhdGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgaW5pdGlhbFN0YXRlKSB8fCB0aGlzO1xuICAgICAgICB2YXIgYWN0aW9uc09uUXVldWUkID0gYWN0aW9ucyQucGlwZShvYnNlcnZlT24ocXVldWVTY2hlZHVsZXIpKTtcbiAgICAgICAgdmFyIHdpdGhMYXRlc3RSZWR1Y2VyJCA9IGFjdGlvbnNPblF1ZXVlJC5waXBlKHdpdGhMYXRlc3RGcm9tKHJlZHVjZXIkKSk7XG4gICAgICAgIHZhciBzZWVkID0geyBzdGF0ZTogaW5pdGlhbFN0YXRlIH07XG4gICAgICAgIHZhciBzdGF0ZUFuZEFjdGlvbiQgPSB3aXRoTGF0ZXN0UmVkdWNlciQucGlwZShzY2FuKHJlZHVjZVN0YXRlLCBzZWVkKSk7XG4gICAgICAgIF90aGlzLnN0YXRlU3Vic2NyaXB0aW9uID0gc3RhdGVBbmRBY3Rpb24kLnN1YnNjcmliZShmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IF9hLnN0YXRlLCBhY3Rpb24gPSBfYS5hY3Rpb247XG4gICAgICAgICAgICBfdGhpcy5uZXh0KHN0YXRlKTtcbiAgICAgICAgICAgIHNjYW5uZWRBY3Rpb25zLm5leHQoYWN0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU3RhdGUucHJvdG90eXBlLm5nT25EZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnN0YXRlU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMuY29tcGxldGUoKTtcbiAgICB9O1xuICAgIFN0YXRlLklOSVQgPSBJTklUO1xuICAgIFN0YXRlID0gdHNsaWJfMS5fX2RlY29yYXRlKFtcbiAgICAgICAgSW5qZWN0YWJsZSgpLFxuICAgICAgICB0c2xpYl8xLl9fcGFyYW0oMywgSW5qZWN0KElOSVRJQUxfU1RBVEUpKSxcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW0FjdGlvbnNTdWJqZWN0LFxuICAgICAgICAgICAgUmVkdWNlck9ic2VydmFibGUsXG4gICAgICAgICAgICBTY2FubmVkQWN0aW9uc1N1YmplY3QsIE9iamVjdF0pXG4gICAgXSwgU3RhdGUpO1xuICAgIHJldHVybiBTdGF0ZTtcbn0oQmVoYXZpb3JTdWJqZWN0KSk7XG5leHBvcnQgeyBTdGF0ZSB9O1xuZXhwb3J0IGZ1bmN0aW9uIHJlZHVjZVN0YXRlKHN0YXRlQWN0aW9uUGFpciwgX2EpIHtcbiAgICBpZiAoc3RhdGVBY3Rpb25QYWlyID09PSB2b2lkIDApIHsgc3RhdGVBY3Rpb25QYWlyID0geyBzdGF0ZTogdW5kZWZpbmVkIH07IH1cbiAgICB2YXIgX2IgPSB0c2xpYl8xLl9fcmVhZChfYSwgMiksIGFjdGlvbiA9IF9iWzBdLCByZWR1Y2VyID0gX2JbMV07XG4gICAgdmFyIHN0YXRlID0gc3RhdGVBY3Rpb25QYWlyLnN0YXRlO1xuICAgIHJldHVybiB7IHN0YXRlOiByZWR1Y2VyKHN0YXRlLCBhY3Rpb24pLCBhY3Rpb246IGFjdGlvbiB9O1xufVxuZXhwb3J0IHZhciBTVEFURV9QUk9WSURFUlMgPSBbXG4gICAgU3RhdGUsXG4gICAgeyBwcm92aWRlOiBTdGF0ZU9ic2VydmFibGUsIHVzZUV4aXN0aW5nOiBTdGF0ZSB9LFxuXTtcbiJdfQ==