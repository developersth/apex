import * as tslib_1 from "tslib";
import { Inject, Injectable } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { ActionsSubject } from './actions_subject';
import { INITIAL_REDUCERS, INITIAL_STATE, REDUCER_FACTORY } from './tokens';
import { createFeatureReducerFactory, createReducerFactory, omit, } from './utils';
import * as ɵngcc0 from '@angular/core';
var ReducerObservable = /** @class */ (function (_super) {
    tslib_1.__extends(ReducerObservable, _super);
    function ReducerObservable() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ReducerObservable;
}(Observable));
export { ReducerObservable };
var ReducerManagerDispatcher = /** @class */ (function (_super) {
    tslib_1.__extends(ReducerManagerDispatcher, _super);
    function ReducerManagerDispatcher() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ReducerManagerDispatcher;
}(ActionsSubject));
export { ReducerManagerDispatcher };
export var UPDATE = '@ngrx/store/update-reducers';
var ReducerManager = /** @class */ (function (_super) {
    tslib_1.__extends(ReducerManager, _super);
    function ReducerManager(dispatcher, initialState, reducers, reducerFactory) {
        var _this = _super.call(this, reducerFactory(reducers, initialState)) || this;
        _this.dispatcher = dispatcher;
        _this.initialState = initialState;
        _this.reducers = reducers;
        _this.reducerFactory = reducerFactory;
        return _this;
    }
    ReducerManager.prototype.addFeature = function (feature) {
        this.addFeatures([feature]);
    };
    ReducerManager.prototype.addFeatures = function (features) {
        var reducers = features.reduce(function (reducerDict, _a) {
            var reducers = _a.reducers, reducerFactory = _a.reducerFactory, metaReducers = _a.metaReducers, initialState = _a.initialState, key = _a.key;
            var reducer = typeof reducers === 'function'
                ? createFeatureReducerFactory(metaReducers)(reducers, initialState)
                : createReducerFactory(reducerFactory, metaReducers)(reducers, initialState);
            reducerDict[key] = reducer;
            return reducerDict;
        }, {});
        this.addReducers(reducers);
    };
    ReducerManager.prototype.removeFeature = function (feature) {
        this.removeFeatures([feature]);
    };
    ReducerManager.prototype.removeFeatures = function (features) {
        this.removeReducers(features.map(function (p) { return p.key; }));
    };
    ReducerManager.prototype.addReducer = function (key, reducer) {
        var _a;
        this.addReducers((_a = {}, _a[key] = reducer, _a));
    };
    ReducerManager.prototype.addReducers = function (reducers) {
        this.reducers = tslib_1.__assign({}, this.reducers, reducers);
        this.updateReducers(Object.keys(reducers));
    };
    ReducerManager.prototype.removeReducer = function (featureKey) {
        this.removeReducers([featureKey]);
    };
    ReducerManager.prototype.removeReducers = function (featureKeys) {
        var _this = this;
        featureKeys.forEach(function (key) {
            _this.reducers = omit(_this.reducers, key) /*TODO(#823)*/;
        });
        this.updateReducers(featureKeys);
    };
    ReducerManager.prototype.updateReducers = function (featureKeys) {
        this.next(this.reducerFactory(this.reducers, this.initialState));
        this.dispatcher.next({
            type: UPDATE,
            features: featureKeys,
        });
    };
    ReducerManager.prototype.ngOnDestroy = function () {
        this.complete();
    };
    ReducerManager = tslib_1.__decorate([ tslib_1.__param(1, Inject(INITIAL_STATE)),
        tslib_1.__param(2, Inject(INITIAL_REDUCERS)),
        tslib_1.__param(3, Inject(REDUCER_FACTORY)),
        tslib_1.__metadata("design:paramtypes", [ReducerManagerDispatcher, Object, Object, Function])
    ], ReducerManager);
ReducerManager.ɵfac = function ReducerManager_Factory(t) { return new (t || ReducerManager)(ɵngcc0.ɵɵinject(ReducerManagerDispatcher), ɵngcc0.ɵɵinject(INITIAL_STATE), ɵngcc0.ɵɵinject(INITIAL_REDUCERS), ɵngcc0.ɵɵinject(REDUCER_FACTORY)); };
ReducerManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ReducerManager, factory: function (t) { return ReducerManager.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ReducerManager, [{
        type: Injectable
    }], function () { return [{ type: ReducerManagerDispatcher }, { type: Object, decorators: [{
                type: Inject,
                args: [INITIAL_STATE]
            }] }, { type: Object, decorators: [{
                type: Inject,
                args: [INITIAL_REDUCERS]
            }] }, { type: Function, decorators: [{
                type: Inject,
                args: [REDUCER_FACTORY]
            }] }]; }, null); })();
    return ReducerManager;
}(BehaviorSubject));
export { ReducerManager };
export var REDUCER_MANAGER_PROVIDERS = [
    ReducerManager,
    { provide: ReducerObservable, useExisting: ReducerManager },
    { provide: ReducerManagerDispatcher, useExisting: ActionsSubject },
];

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNwcm8va3JpdHNhZGVlL1NWTi9DeWJlcnNvZnQvYXBleC9ub2RlX21vZHVsZXMvQG5ncngvc3RvcmUvZXNtNS9zcmMvcmVkdWNlcl9tYW5hZ2VyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBTUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt5Q0EyRXlDLEFBRWxDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7a0NBSWdCIiwiZmlsZSI6InJlZHVjZXJfbWFuYWdlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQWN0aW9uc1N1YmplY3QgfSBmcm9tICcuL2FjdGlvbnNfc3ViamVjdCc7XG5pbXBvcnQgeyBJTklUSUFMX1JFRFVDRVJTLCBJTklUSUFMX1NUQVRFLCBSRURVQ0VSX0ZBQ1RPUlkgfSBmcm9tICcuL3Rva2Vucyc7XG5pbXBvcnQgeyBjcmVhdGVGZWF0dXJlUmVkdWNlckZhY3RvcnksIGNyZWF0ZVJlZHVjZXJGYWN0b3J5LCBvbWl0LCB9IGZyb20gJy4vdXRpbHMnO1xudmFyIFJlZHVjZXJPYnNlcnZhYmxlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFJlZHVjZXJPYnNlcnZhYmxlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFJlZHVjZXJPYnNlcnZhYmxlKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBSZWR1Y2VyT2JzZXJ2YWJsZTtcbn0oT2JzZXJ2YWJsZSkpO1xuZXhwb3J0IHsgUmVkdWNlck9ic2VydmFibGUgfTtcbnZhciBSZWR1Y2VyTWFuYWdlckRpc3BhdGNoZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoUmVkdWNlck1hbmFnZXJEaXNwYXRjaGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFJlZHVjZXJNYW5hZ2VyRGlzcGF0Y2hlcigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gUmVkdWNlck1hbmFnZXJEaXNwYXRjaGVyO1xufShBY3Rpb25zU3ViamVjdCkpO1xuZXhwb3J0IHsgUmVkdWNlck1hbmFnZXJEaXNwYXRjaGVyIH07XG5leHBvcnQgdmFyIFVQREFURSA9ICdAbmdyeC9zdG9yZS91cGRhdGUtcmVkdWNlcnMnO1xudmFyIFJlZHVjZXJNYW5hZ2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFJlZHVjZXJNYW5hZ2VyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFJlZHVjZXJNYW5hZ2VyKGRpc3BhdGNoZXIsIGluaXRpYWxTdGF0ZSwgcmVkdWNlcnMsIHJlZHVjZXJGYWN0b3J5KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHJlZHVjZXJGYWN0b3J5KHJlZHVjZXJzLCBpbml0aWFsU3RhdGUpKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kaXNwYXRjaGVyID0gZGlzcGF0Y2hlcjtcbiAgICAgICAgX3RoaXMuaW5pdGlhbFN0YXRlID0gaW5pdGlhbFN0YXRlO1xuICAgICAgICBfdGhpcy5yZWR1Y2VycyA9IHJlZHVjZXJzO1xuICAgICAgICBfdGhpcy5yZWR1Y2VyRmFjdG9yeSA9IHJlZHVjZXJGYWN0b3J5O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFJlZHVjZXJNYW5hZ2VyLnByb3RvdHlwZS5hZGRGZWF0dXJlID0gZnVuY3Rpb24gKGZlYXR1cmUpIHtcbiAgICAgICAgdGhpcy5hZGRGZWF0dXJlcyhbZmVhdHVyZV0pO1xuICAgIH07XG4gICAgUmVkdWNlck1hbmFnZXIucHJvdG90eXBlLmFkZEZlYXR1cmVzID0gZnVuY3Rpb24gKGZlYXR1cmVzKSB7XG4gICAgICAgIHZhciByZWR1Y2VycyA9IGZlYXR1cmVzLnJlZHVjZShmdW5jdGlvbiAocmVkdWNlckRpY3QsIF9hKSB7XG4gICAgICAgICAgICB2YXIgcmVkdWNlcnMgPSBfYS5yZWR1Y2VycywgcmVkdWNlckZhY3RvcnkgPSBfYS5yZWR1Y2VyRmFjdG9yeSwgbWV0YVJlZHVjZXJzID0gX2EubWV0YVJlZHVjZXJzLCBpbml0aWFsU3RhdGUgPSBfYS5pbml0aWFsU3RhdGUsIGtleSA9IF9hLmtleTtcbiAgICAgICAgICAgIHZhciByZWR1Y2VyID0gdHlwZW9mIHJlZHVjZXJzID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgPyBjcmVhdGVGZWF0dXJlUmVkdWNlckZhY3RvcnkobWV0YVJlZHVjZXJzKShyZWR1Y2VycywgaW5pdGlhbFN0YXRlKVxuICAgICAgICAgICAgICAgIDogY3JlYXRlUmVkdWNlckZhY3RvcnkocmVkdWNlckZhY3RvcnksIG1ldGFSZWR1Y2VycykocmVkdWNlcnMsIGluaXRpYWxTdGF0ZSk7XG4gICAgICAgICAgICByZWR1Y2VyRGljdFtrZXldID0gcmVkdWNlcjtcbiAgICAgICAgICAgIHJldHVybiByZWR1Y2VyRGljdDtcbiAgICAgICAgfSwge30pO1xuICAgICAgICB0aGlzLmFkZFJlZHVjZXJzKHJlZHVjZXJzKTtcbiAgICB9O1xuICAgIFJlZHVjZXJNYW5hZ2VyLnByb3RvdHlwZS5yZW1vdmVGZWF0dXJlID0gZnVuY3Rpb24gKGZlYXR1cmUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVGZWF0dXJlcyhbZmVhdHVyZV0pO1xuICAgIH07XG4gICAgUmVkdWNlck1hbmFnZXIucHJvdG90eXBlLnJlbW92ZUZlYXR1cmVzID0gZnVuY3Rpb24gKGZlYXR1cmVzKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlUmVkdWNlcnMoZmVhdHVyZXMubWFwKGZ1bmN0aW9uIChwKSB7IHJldHVybiBwLmtleTsgfSkpO1xuICAgIH07XG4gICAgUmVkdWNlck1hbmFnZXIucHJvdG90eXBlLmFkZFJlZHVjZXIgPSBmdW5jdGlvbiAoa2V5LCByZWR1Y2VyKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdGhpcy5hZGRSZWR1Y2VycygoX2EgPSB7fSwgX2Fba2V5XSA9IHJlZHVjZXIsIF9hKSk7XG4gICAgfTtcbiAgICBSZWR1Y2VyTWFuYWdlci5wcm90b3R5cGUuYWRkUmVkdWNlcnMgPSBmdW5jdGlvbiAocmVkdWNlcnMpIHtcbiAgICAgICAgdGhpcy5yZWR1Y2VycyA9IHRzbGliXzEuX19hc3NpZ24oe30sIHRoaXMucmVkdWNlcnMsIHJlZHVjZXJzKTtcbiAgICAgICAgdGhpcy51cGRhdGVSZWR1Y2VycyhPYmplY3Qua2V5cyhyZWR1Y2VycykpO1xuICAgIH07XG4gICAgUmVkdWNlck1hbmFnZXIucHJvdG90eXBlLnJlbW92ZVJlZHVjZXIgPSBmdW5jdGlvbiAoZmVhdHVyZUtleSkge1xuICAgICAgICB0aGlzLnJlbW92ZVJlZHVjZXJzKFtmZWF0dXJlS2V5XSk7XG4gICAgfTtcbiAgICBSZWR1Y2VyTWFuYWdlci5wcm90b3R5cGUucmVtb3ZlUmVkdWNlcnMgPSBmdW5jdGlvbiAoZmVhdHVyZUtleXMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgZmVhdHVyZUtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBfdGhpcy5yZWR1Y2VycyA9IG9taXQoX3RoaXMucmVkdWNlcnMsIGtleSkgLypUT0RPKCM4MjMpKi87XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnVwZGF0ZVJlZHVjZXJzKGZlYXR1cmVLZXlzKTtcbiAgICB9O1xuICAgIFJlZHVjZXJNYW5hZ2VyLnByb3RvdHlwZS51cGRhdGVSZWR1Y2VycyA9IGZ1bmN0aW9uIChmZWF0dXJlS2V5cykge1xuICAgICAgICB0aGlzLm5leHQodGhpcy5yZWR1Y2VyRmFjdG9yeSh0aGlzLnJlZHVjZXJzLCB0aGlzLmluaXRpYWxTdGF0ZSkpO1xuICAgICAgICB0aGlzLmRpc3BhdGNoZXIubmV4dCh7XG4gICAgICAgICAgICB0eXBlOiBVUERBVEUsXG4gICAgICAgICAgICBmZWF0dXJlczogZmVhdHVyZUtleXMsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgUmVkdWNlck1hbmFnZXIucHJvdG90eXBlLm5nT25EZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICBSZWR1Y2VyTWFuYWdlciA9IHRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgICAgIEluamVjdGFibGUoKSxcbiAgICAgICAgdHNsaWJfMS5fX3BhcmFtKDEsIEluamVjdChJTklUSUFMX1NUQVRFKSksXG4gICAgICAgIHRzbGliXzEuX19wYXJhbSgyLCBJbmplY3QoSU5JVElBTF9SRURVQ0VSUykpLFxuICAgICAgICB0c2xpYl8xLl9fcGFyYW0oMywgSW5qZWN0KFJFRFVDRVJfRkFDVE9SWSkpLFxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbUmVkdWNlck1hbmFnZXJEaXNwYXRjaGVyLCBPYmplY3QsIE9iamVjdCwgRnVuY3Rpb25dKVxuICAgIF0sIFJlZHVjZXJNYW5hZ2VyKTtcbiAgICByZXR1cm4gUmVkdWNlck1hbmFnZXI7XG59KEJlaGF2aW9yU3ViamVjdCkpO1xuZXhwb3J0IHsgUmVkdWNlck1hbmFnZXIgfTtcbmV4cG9ydCB2YXIgUkVEVUNFUl9NQU5BR0VSX1BST1ZJREVSUyA9IFtcbiAgICBSZWR1Y2VyTWFuYWdlcixcbiAgICB7IHByb3ZpZGU6IFJlZHVjZXJPYnNlcnZhYmxlLCB1c2VFeGlzdGluZzogUmVkdWNlck1hbmFnZXIgfSxcbiAgICB7IHByb3ZpZGU6IFJlZHVjZXJNYW5hZ2VyRGlzcGF0Y2hlciwgdXNlRXhpc3Rpbmc6IEFjdGlvbnNTdWJqZWN0IH0sXG5dO1xuIl19