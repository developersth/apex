import * as tslib_1 from "tslib";
import { Inject, Injectable } from '@angular/core';
import { TestBed } from '@angular/core/testing';
import { BehaviorSubject } from 'rxjs';
import { ActionsSubject, INITIAL_STATE, ReducerManager, Store, createSelector, } from '@ngrx/store';
import { MockState } from './mock_state';
import { MOCK_SELECTORS } from './tokens';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ngrx/store';
if (typeof afterEach === 'function') {
    afterEach(function () {
        try {
            var store = TestBed.get(Store);
            if (store && 'resetSelectors' in store) {
                store.resetSelectors();
            }
        }
        catch (_a) { }
    });
}
var MockStore = /** @class */ (function (_super) {
    tslib_1.__extends(MockStore, _super);
    function MockStore(state$, actionsObserver, reducerManager, initialState, mockSelectors) {
        var _this = _super.call(this, state$, actionsObserver, reducerManager) || this;
        _this.state$ = state$;
        _this.initialState = initialState;
        _this.resetSelectors();
        _this.setState(_this.initialState);
        _this.scannedActions$ = actionsObserver.asObservable();
        if (mockSelectors) {
            mockSelectors.forEach(function (mockSelector) {
                var selector = mockSelector.selector;
                if (typeof selector === 'string') {
                    _this.overrideSelector(selector, mockSelector.value);
                }
                else {
                    _this.overrideSelector(selector, mockSelector.value);
                }
            });
        }
        return _this;
    }
    MockStore_1 = MockStore;
    MockStore.prototype.setState = function (nextState) {
        this.state$.next(nextState);
        this.lastState = nextState;
    };
    MockStore.prototype.overrideSelector = function (selector, value) {
        MockStore_1.selectors.set(selector, value);
        if (typeof selector === 'string') {
            var stringSelector = createSelector(function () { }, function () { return value; });
            return stringSelector;
        }
        selector.setResult(value);
        return selector;
    };
    MockStore.prototype.resetSelectors = function () {
        MockStore_1.selectors.forEach(function (_, selector) {
            if (typeof selector !== 'string') {
                selector.release();
                selector.setResult();
            }
        });
        MockStore_1.selectors.clear();
    };
    MockStore.prototype.select = function (selector, prop) {
        if (typeof selector === 'string' && MockStore_1.selectors.has(selector)) {
            return new BehaviorSubject(MockStore_1.selectors.get(selector)).asObservable();
        }
        return _super.prototype.select.call(this, selector, prop);
    };
    MockStore.prototype.addReducer = function () {
        /* noop */
    };
    MockStore.prototype.removeReducer = function () {
        /* noop */
    };
    /**
     * Refreshes the existing state.
     */
    MockStore.prototype.refreshState = function () {
        this.setState(tslib_1.__assign({}, this.lastState));
    };
    var MockStore_1;
    MockStore.selectors = new Map();
    MockStore = MockStore_1 = tslib_1.__decorate([ tslib_1.__param(3, Inject(INITIAL_STATE)),
        tslib_1.__param(4, Inject(MOCK_SELECTORS)),
        tslib_1.__metadata("design:paramtypes", [MockState,
            ActionsSubject,
            ReducerManager, Object, Array])
    ], MockStore);
MockStore.ɵfac = function MockStore_Factory(t) { return new (t || MockStore)(ɵngcc0.ɵɵinject(MockState), ɵngcc0.ɵɵinject(ɵngcc1.ActionsSubject), ɵngcc0.ɵɵinject(ɵngcc1.ReducerManager), ɵngcc0.ɵɵinject(INITIAL_STATE), ɵngcc0.ɵɵinject(MOCK_SELECTORS)); };
MockStore.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MockStore, factory: function (t) { return MockStore.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MockStore, [{
        type: Injectable
    }], function () { return [{ type: MockState }, { type: ɵngcc1.ActionsSubject }, { type: ɵngcc1.ReducerManager }, { type: Object, decorators: [{
                type: Inject,
                args: [INITIAL_STATE]
            }] }, { type: Array, decorators: [{
                type: Inject,
                args: [MOCK_SELECTORS]
            }] }]; }, null); })();
    return MockStore;
}(Store));
export { MockStore };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNwcm8va3JpdHNhZGVlL1NWTi9DeWJlcnNvZnQvYXBleC9ub2RlX21vZHVsZXMvQG5ncngvc3RvcmUvZXNtNS90ZXN0aW5nL3NyYy9tb2NrX3N0b3JlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7QUFPQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztrREE0RWtELEFBRTNDOzs7Ozs7Ozs7Ozs7Ozs7O2tDQUtXIiwiZmlsZSI6Im1vY2tfc3RvcmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUZXN0QmVkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZS90ZXN0aW5nJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQWN0aW9uc1N1YmplY3QsIElOSVRJQUxfU1RBVEUsIFJlZHVjZXJNYW5hZ2VyLCBTdG9yZSwgY3JlYXRlU2VsZWN0b3IsIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHsgTW9ja1N0YXRlIH0gZnJvbSAnLi9tb2NrX3N0YXRlJztcbmltcG9ydCB7IE1PQ0tfU0VMRUNUT1JTIH0gZnJvbSAnLi90b2tlbnMnO1xuaWYgKHR5cGVvZiBhZnRlckVhY2ggPT09ICdmdW5jdGlvbicpIHtcbiAgICBhZnRlckVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIHN0b3JlID0gVGVzdEJlZC5nZXQoU3RvcmUpO1xuICAgICAgICAgICAgaWYgKHN0b3JlICYmICdyZXNldFNlbGVjdG9ycycgaW4gc3RvcmUpIHtcbiAgICAgICAgICAgICAgICBzdG9yZS5yZXNldFNlbGVjdG9ycygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChfYSkgeyB9XG4gICAgfSk7XG59XG52YXIgTW9ja1N0b3JlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKE1vY2tTdG9yZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNb2NrU3RvcmUoc3RhdGUkLCBhY3Rpb25zT2JzZXJ2ZXIsIHJlZHVjZXJNYW5hZ2VyLCBpbml0aWFsU3RhdGUsIG1vY2tTZWxlY3RvcnMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgc3RhdGUkLCBhY3Rpb25zT2JzZXJ2ZXIsIHJlZHVjZXJNYW5hZ2VyKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zdGF0ZSQgPSBzdGF0ZSQ7XG4gICAgICAgIF90aGlzLmluaXRpYWxTdGF0ZSA9IGluaXRpYWxTdGF0ZTtcbiAgICAgICAgX3RoaXMucmVzZXRTZWxlY3RvcnMoKTtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoX3RoaXMuaW5pdGlhbFN0YXRlKTtcbiAgICAgICAgX3RoaXMuc2Nhbm5lZEFjdGlvbnMkID0gYWN0aW9uc09ic2VydmVyLmFzT2JzZXJ2YWJsZSgpO1xuICAgICAgICBpZiAobW9ja1NlbGVjdG9ycykge1xuICAgICAgICAgICAgbW9ja1NlbGVjdG9ycy5mb3JFYWNoKGZ1bmN0aW9uIChtb2NrU2VsZWN0b3IpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VsZWN0b3IgPSBtb2NrU2VsZWN0b3Iuc2VsZWN0b3I7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMub3ZlcnJpZGVTZWxlY3RvcihzZWxlY3RvciwgbW9ja1NlbGVjdG9yLnZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm92ZXJyaWRlU2VsZWN0b3Ioc2VsZWN0b3IsIG1vY2tTZWxlY3Rvci52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBNb2NrU3RvcmVfMSA9IE1vY2tTdG9yZTtcbiAgICBNb2NrU3RvcmUucHJvdG90eXBlLnNldFN0YXRlID0gZnVuY3Rpb24gKG5leHRTdGF0ZSkge1xuICAgICAgICB0aGlzLnN0YXRlJC5uZXh0KG5leHRTdGF0ZSk7XG4gICAgICAgIHRoaXMubGFzdFN0YXRlID0gbmV4dFN0YXRlO1xuICAgIH07XG4gICAgTW9ja1N0b3JlLnByb3RvdHlwZS5vdmVycmlkZVNlbGVjdG9yID0gZnVuY3Rpb24gKHNlbGVjdG9yLCB2YWx1ZSkge1xuICAgICAgICBNb2NrU3RvcmVfMS5zZWxlY3RvcnMuc2V0KHNlbGVjdG9yLCB2YWx1ZSk7XG4gICAgICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB2YXIgc3RyaW5nU2VsZWN0b3IgPSBjcmVhdGVTZWxlY3RvcihmdW5jdGlvbiAoKSB7IH0sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHZhbHVlOyB9KTtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmdTZWxlY3RvcjtcbiAgICAgICAgfVxuICAgICAgICBzZWxlY3Rvci5zZXRSZXN1bHQodmFsdWUpO1xuICAgICAgICByZXR1cm4gc2VsZWN0b3I7XG4gICAgfTtcbiAgICBNb2NrU3RvcmUucHJvdG90eXBlLnJlc2V0U2VsZWN0b3JzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBNb2NrU3RvcmVfMS5zZWxlY3RvcnMuZm9yRWFjaChmdW5jdGlvbiAoXywgc2VsZWN0b3IpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3IucmVsZWFzZSgpO1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yLnNldFJlc3VsdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgTW9ja1N0b3JlXzEuc2VsZWN0b3JzLmNsZWFyKCk7XG4gICAgfTtcbiAgICBNb2NrU3RvcmUucHJvdG90eXBlLnNlbGVjdCA9IGZ1bmN0aW9uIChzZWxlY3RvciwgcHJvcCkge1xuICAgICAgICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAnc3RyaW5nJyAmJiBNb2NrU3RvcmVfMS5zZWxlY3RvcnMuaGFzKHNlbGVjdG9yKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBCZWhhdmlvclN1YmplY3QoTW9ja1N0b3JlXzEuc2VsZWN0b3JzLmdldChzZWxlY3RvcikpLmFzT2JzZXJ2YWJsZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLnNlbGVjdC5jYWxsKHRoaXMsIHNlbGVjdG9yLCBwcm9wKTtcbiAgICB9O1xuICAgIE1vY2tTdG9yZS5wcm90b3R5cGUuYWRkUmVkdWNlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLyogbm9vcCAqL1xuICAgIH07XG4gICAgTW9ja1N0b3JlLnByb3RvdHlwZS5yZW1vdmVSZWR1Y2VyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvKiBub29wICovXG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZWZyZXNoZXMgdGhlIGV4aXN0aW5nIHN0YXRlLlxuICAgICAqL1xuICAgIE1vY2tTdG9yZS5wcm90b3R5cGUucmVmcmVzaFN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHRzbGliXzEuX19hc3NpZ24oe30sIHRoaXMubGFzdFN0YXRlKSk7XG4gICAgfTtcbiAgICB2YXIgTW9ja1N0b3JlXzE7XG4gICAgTW9ja1N0b3JlLnNlbGVjdG9ycyA9IG5ldyBNYXAoKTtcbiAgICBNb2NrU3RvcmUgPSBNb2NrU3RvcmVfMSA9IHRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgICAgIEluamVjdGFibGUoKSxcbiAgICAgICAgdHNsaWJfMS5fX3BhcmFtKDMsIEluamVjdChJTklUSUFMX1NUQVRFKSksXG4gICAgICAgIHRzbGliXzEuX19wYXJhbSg0LCBJbmplY3QoTU9DS19TRUxFQ1RPUlMpKSxcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW01vY2tTdGF0ZSxcbiAgICAgICAgICAgIEFjdGlvbnNTdWJqZWN0LFxuICAgICAgICAgICAgUmVkdWNlck1hbmFnZXIsIE9iamVjdCwgQXJyYXldKVxuICAgIF0sIE1vY2tTdG9yZSk7XG4gICAgcmV0dXJuIE1vY2tTdG9yZTtcbn0oU3RvcmUpKTtcbmV4cG9ydCB7IE1vY2tTdG9yZSB9O1xuIl19