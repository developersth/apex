/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { ActionsSubject } from './actions_subject';
import { INITIAL_REDUCERS, INITIAL_STATE, REDUCER_FACTORY } from './tokens';
import { createFeatureReducerFactory, createReducerFactory, omit, } from './utils';
/**
 * @abstract
 */
import * as ɵngcc0 from '@angular/core';
export class ReducerObservable extends Observable {
}
/**
 * @abstract
 */
export class ReducerManagerDispatcher extends ActionsSubject {
}
/** @type {?} */
export const UPDATE = (/** @type {?} */ ('@ngrx/store/update-reducers'));
export class ReducerManager extends BehaviorSubject {
    /**
     * @param {?} dispatcher
     * @param {?} initialState
     * @param {?} reducers
     * @param {?} reducerFactory
     */
    constructor(dispatcher, initialState, reducers, reducerFactory) {
        super(reducerFactory(reducers, initialState));
        this.dispatcher = dispatcher;
        this.initialState = initialState;
        this.reducers = reducers;
        this.reducerFactory = reducerFactory;
    }
    /**
     * @param {?} feature
     * @return {?}
     */
    addFeature(feature) {
        this.addFeatures([feature]);
    }
    /**
     * @param {?} features
     * @return {?}
     */
    addFeatures(features) {
        /** @type {?} */
        const reducers = features.reduce((/**
         * @param {?} reducerDict
         * @param {?} __1
         * @return {?}
         */
        (reducerDict, { reducers, reducerFactory, metaReducers, initialState, key }) => {
            /** @type {?} */
            const reducer = typeof reducers === 'function'
                ? createFeatureReducerFactory(metaReducers)(reducers, initialState)
                : createReducerFactory(reducerFactory, metaReducers)(reducers, initialState);
            reducerDict[key] = reducer;
            return reducerDict;
        }), (/** @type {?} */ ({})));
        this.addReducers(reducers);
    }
    /**
     * @param {?} feature
     * @return {?}
     */
    removeFeature(feature) {
        this.removeFeatures([feature]);
    }
    /**
     * @param {?} features
     * @return {?}
     */
    removeFeatures(features) {
        this.removeReducers(features.map((/**
         * @param {?} p
         * @return {?}
         */
        p => p.key)));
    }
    /**
     * @param {?} key
     * @param {?} reducer
     * @return {?}
     */
    addReducer(key, reducer) {
        this.addReducers({ [key]: reducer });
    }
    /**
     * @param {?} reducers
     * @return {?}
     */
    addReducers(reducers) {
        this.reducers = Object.assign({}, this.reducers, reducers);
        this.updateReducers(Object.keys(reducers));
    }
    /**
     * @param {?} featureKey
     * @return {?}
     */
    removeReducer(featureKey) {
        this.removeReducers([featureKey]);
    }
    /**
     * @param {?} featureKeys
     * @return {?}
     */
    removeReducers(featureKeys) {
        featureKeys.forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            this.reducers = (/** @type {?} */ (omit(this.reducers, key) /*TODO(#823)*/));
        }));
        this.updateReducers(featureKeys);
    }
    /**
     * @private
     * @param {?} featureKeys
     * @return {?}
     */
    updateReducers(featureKeys) {
        this.next(this.reducerFactory(this.reducers, this.initialState));
        this.dispatcher.next((/** @type {?} */ ({
            type: UPDATE,
            features: featureKeys,
        })));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.complete();
    }
}
ReducerManager.ɵfac = function ReducerManager_Factory(t) { return new (t || ReducerManager)(ɵngcc0.ɵɵinject(ReducerManagerDispatcher), ɵngcc0.ɵɵinject(INITIAL_STATE), ɵngcc0.ɵɵinject(INITIAL_REDUCERS), ɵngcc0.ɵɵinject(REDUCER_FACTORY)); };
ReducerManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ReducerManager, factory: ReducerManager.ɵfac });
/** @nocollapse */
ReducerManager.ctorParameters = () => [
    { type: ReducerManagerDispatcher },
    { type: undefined, decorators: [{ type: Inject, args: [INITIAL_STATE,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [INITIAL_REDUCERS,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [REDUCER_FACTORY,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ReducerManager, [{
        type: Injectable
    }], function () { return [{ type: ReducerManagerDispatcher }, { type: undefined, decorators: [{
                type: Inject,
                args: [INITIAL_STATE]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [INITIAL_REDUCERS]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [REDUCER_FACTORY]
            }] }]; }, null); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    ReducerManager.prototype.dispatcher;
    /**
     * @type {?}
     * @private
     */
    ReducerManager.prototype.initialState;
    /**
     * @type {?}
     * @private
     */
    ReducerManager.prototype.reducers;
    /**
     * @type {?}
     * @private
     */
    ReducerManager.prototype.reducerFactory;
}
/** @type {?} */
export const REDUCER_MANAGER_PROVIDERS = [
    ReducerManager,
    { provide: ReducerObservable, useExisting: ReducerManager },
    { provide: ReducerManagerDispatcher, useExisting: ActionsSubject },
];

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNwcm8va3JpdHNhZGVlL1NWTi9DeWJlcnNvZnQvYXBleC9ub2RlX21vZHVsZXMvQG5ncngvc3RvcmUvZXNtMjAxNS9zcmMvcmVkdWNlcl9tYW5hZ2VyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7O0FBWUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQTRIQyx5R0FHQzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztrQ0FPQSIsImZpbGUiOiJyZWR1Y2VyX21hbmFnZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzLGV4dHJhUmVxdWlyZSxtaXNzaW5nT3ZlcnJpZGUsbWlzc2luZ1JldHVybix1bnVzZWRQcml2YXRlTWVtYmVycyx1c2VsZXNzQ29kZX0gY2hlY2tlZCBieSB0c2NcbiAqL1xuaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEFjdGlvbnNTdWJqZWN0IH0gZnJvbSAnLi9hY3Rpb25zX3N1YmplY3QnO1xuaW1wb3J0IHsgSU5JVElBTF9SRURVQ0VSUywgSU5JVElBTF9TVEFURSwgUkVEVUNFUl9GQUNUT1JZIH0gZnJvbSAnLi90b2tlbnMnO1xuaW1wb3J0IHsgY3JlYXRlRmVhdHVyZVJlZHVjZXJGYWN0b3J5LCBjcmVhdGVSZWR1Y2VyRmFjdG9yeSwgb21pdCwgfSBmcm9tICcuL3V0aWxzJztcbi8qKlxuICogQGFic3RyYWN0XG4gKi9cbmV4cG9ydCBjbGFzcyBSZWR1Y2VyT2JzZXJ2YWJsZSBleHRlbmRzIE9ic2VydmFibGUge1xufVxuLyoqXG4gKiBAYWJzdHJhY3RcbiAqL1xuZXhwb3J0IGNsYXNzIFJlZHVjZXJNYW5hZ2VyRGlzcGF0Y2hlciBleHRlbmRzIEFjdGlvbnNTdWJqZWN0IHtcbn1cbi8qKiBAdHlwZSB7P30gKi9cbmV4cG9ydCBjb25zdCBVUERBVEUgPSAoLyoqIEB0eXBlIHs/fSAqLyAoJ0BuZ3J4L3N0b3JlL3VwZGF0ZS1yZWR1Y2VycycpKTtcbmV4cG9ydCBjbGFzcyBSZWR1Y2VyTWFuYWdlciBleHRlbmRzIEJlaGF2aW9yU3ViamVjdCB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBkaXNwYXRjaGVyXG4gICAgICogQHBhcmFtIHs/fSBpbml0aWFsU3RhdGVcbiAgICAgKiBAcGFyYW0gez99IHJlZHVjZXJzXG4gICAgICogQHBhcmFtIHs/fSByZWR1Y2VyRmFjdG9yeVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGRpc3BhdGNoZXIsIGluaXRpYWxTdGF0ZSwgcmVkdWNlcnMsIHJlZHVjZXJGYWN0b3J5KSB7XG4gICAgICAgIHN1cGVyKHJlZHVjZXJGYWN0b3J5KHJlZHVjZXJzLCBpbml0aWFsU3RhdGUpKTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaGVyID0gZGlzcGF0Y2hlcjtcbiAgICAgICAgdGhpcy5pbml0aWFsU3RhdGUgPSBpbml0aWFsU3RhdGU7XG4gICAgICAgIHRoaXMucmVkdWNlcnMgPSByZWR1Y2VycztcbiAgICAgICAgdGhpcy5yZWR1Y2VyRmFjdG9yeSA9IHJlZHVjZXJGYWN0b3J5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGZlYXR1cmVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGFkZEZlYXR1cmUoZmVhdHVyZSkge1xuICAgICAgICB0aGlzLmFkZEZlYXR1cmVzKFtmZWF0dXJlXSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZmVhdHVyZXNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGFkZEZlYXR1cmVzKGZlYXR1cmVzKSB7XG4gICAgICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICAgICAgY29uc3QgcmVkdWNlcnMgPSBmZWF0dXJlcy5yZWR1Y2UoKC8qKlxuICAgICAgICAgKiBAcGFyYW0gez99IHJlZHVjZXJEaWN0XG4gICAgICAgICAqIEBwYXJhbSB7P30gX18xXG4gICAgICAgICAqIEByZXR1cm4gez99XG4gICAgICAgICAqL1xuICAgICAgICAocmVkdWNlckRpY3QsIHsgcmVkdWNlcnMsIHJlZHVjZXJGYWN0b3J5LCBtZXRhUmVkdWNlcnMsIGluaXRpYWxTdGF0ZSwga2V5IH0pID0+IHtcbiAgICAgICAgICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICAgICAgICAgIGNvbnN0IHJlZHVjZXIgPSB0eXBlb2YgcmVkdWNlcnMgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICA/IGNyZWF0ZUZlYXR1cmVSZWR1Y2VyRmFjdG9yeShtZXRhUmVkdWNlcnMpKHJlZHVjZXJzLCBpbml0aWFsU3RhdGUpXG4gICAgICAgICAgICAgICAgOiBjcmVhdGVSZWR1Y2VyRmFjdG9yeShyZWR1Y2VyRmFjdG9yeSwgbWV0YVJlZHVjZXJzKShyZWR1Y2VycywgaW5pdGlhbFN0YXRlKTtcbiAgICAgICAgICAgIHJlZHVjZXJEaWN0W2tleV0gPSByZWR1Y2VyO1xuICAgICAgICAgICAgcmV0dXJuIHJlZHVjZXJEaWN0O1xuICAgICAgICB9KSwgKC8qKiBAdHlwZSB7P30gKi8gKHt9KSkpO1xuICAgICAgICB0aGlzLmFkZFJlZHVjZXJzKHJlZHVjZXJzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBmZWF0dXJlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICByZW1vdmVGZWF0dXJlKGZlYXR1cmUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVGZWF0dXJlcyhbZmVhdHVyZV0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGZlYXR1cmVzXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICByZW1vdmVGZWF0dXJlcyhmZWF0dXJlcykge1xuICAgICAgICB0aGlzLnJlbW92ZVJlZHVjZXJzKGZlYXR1cmVzLm1hcCgoLyoqXG4gICAgICAgICAqIEBwYXJhbSB7P30gcFxuICAgICAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAgICAgKi9cbiAgICAgICAgcCA9PiBwLmtleSkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBrZXlcbiAgICAgKiBAcGFyYW0gez99IHJlZHVjZXJcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGFkZFJlZHVjZXIoa2V5LCByZWR1Y2VyKSB7XG4gICAgICAgIHRoaXMuYWRkUmVkdWNlcnMoeyBba2V5XTogcmVkdWNlciB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSByZWR1Y2Vyc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgYWRkUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgICAgICAgdGhpcy5yZWR1Y2VycyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMucmVkdWNlcnMsIHJlZHVjZXJzKTtcbiAgICAgICAgdGhpcy51cGRhdGVSZWR1Y2VycyhPYmplY3Qua2V5cyhyZWR1Y2VycykpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGZlYXR1cmVLZXlcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIHJlbW92ZVJlZHVjZXIoZmVhdHVyZUtleSkge1xuICAgICAgICB0aGlzLnJlbW92ZVJlZHVjZXJzKFtmZWF0dXJlS2V5XSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZmVhdHVyZUtleXNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIHJlbW92ZVJlZHVjZXJzKGZlYXR1cmVLZXlzKSB7XG4gICAgICAgIGZlYXR1cmVLZXlzLmZvckVhY2goKC8qKlxuICAgICAgICAgKiBAcGFyYW0gez99IGtleVxuICAgICAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAgICAgKi9cbiAgICAgICAga2V5ID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVkdWNlcnMgPSAoLyoqIEB0eXBlIHs/fSAqLyAob21pdCh0aGlzLnJlZHVjZXJzLCBrZXkpIC8qVE9ETygjODIzKSovKSk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy51cGRhdGVSZWR1Y2VycyhmZWF0dXJlS2V5cyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHs/fSBmZWF0dXJlS2V5c1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgdXBkYXRlUmVkdWNlcnMoZmVhdHVyZUtleXMpIHtcbiAgICAgICAgdGhpcy5uZXh0KHRoaXMucmVkdWNlckZhY3RvcnkodGhpcy5yZWR1Y2VycywgdGhpcy5pbml0aWFsU3RhdGUpKTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaGVyLm5leHQoKC8qKiBAdHlwZSB7P30gKi8gKHtcbiAgICAgICAgICAgIHR5cGU6IFVQREFURSxcbiAgICAgICAgICAgIGZlYXR1cmVzOiBmZWF0dXJlS2V5cyxcbiAgICAgICAgfSkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5jb21wbGV0ZSgpO1xuICAgIH1cbn1cblJlZHVjZXJNYW5hZ2VyLmRlY29yYXRvcnMgPSBbXG4gICAgeyB0eXBlOiBJbmplY3RhYmxlIH1cbl07XG4vKiogQG5vY29sbGFwc2UgKi9cblJlZHVjZXJNYW5hZ2VyLmN0b3JQYXJhbWV0ZXJzID0gKCkgPT4gW1xuICAgIHsgdHlwZTogUmVkdWNlck1hbmFnZXJEaXNwYXRjaGVyIH0sXG4gICAgeyB0eXBlOiB1bmRlZmluZWQsIGRlY29yYXRvcnM6IFt7IHR5cGU6IEluamVjdCwgYXJnczogW0lOSVRJQUxfU1RBVEUsXSB9XSB9LFxuICAgIHsgdHlwZTogdW5kZWZpbmVkLCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBJbmplY3QsIGFyZ3M6IFtJTklUSUFMX1JFRFVDRVJTLF0gfV0gfSxcbiAgICB7IHR5cGU6IHVuZGVmaW5lZCwgZGVjb3JhdG9yczogW3sgdHlwZTogSW5qZWN0LCBhcmdzOiBbUkVEVUNFUl9GQUNUT1JZLF0gfV0gfVxuXTtcbmlmIChmYWxzZSkge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgUmVkdWNlck1hbmFnZXIucHJvdG90eXBlLmRpc3BhdGNoZXI7XG4gICAgLyoqXG4gICAgICogQHR5cGUgez99XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBSZWR1Y2VyTWFuYWdlci5wcm90b3R5cGUuaW5pdGlhbFN0YXRlO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgUmVkdWNlck1hbmFnZXIucHJvdG90eXBlLnJlZHVjZXJzO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgUmVkdWNlck1hbmFnZXIucHJvdG90eXBlLnJlZHVjZXJGYWN0b3J5O1xufVxuLyoqIEB0eXBlIHs/fSAqL1xuZXhwb3J0IGNvbnN0IFJFRFVDRVJfTUFOQUdFUl9QUk9WSURFUlMgPSBbXG4gICAgUmVkdWNlck1hbmFnZXIsXG4gICAgeyBwcm92aWRlOiBSZWR1Y2VyT2JzZXJ2YWJsZSwgdXNlRXhpc3Rpbmc6IFJlZHVjZXJNYW5hZ2VyIH0sXG4gICAgeyBwcm92aWRlOiBSZWR1Y2VyTWFuYWdlckRpc3BhdGNoZXIsIHVzZUV4aXN0aW5nOiBBY3Rpb25zU3ViamVjdCB9LFxuXTtcbiJdfQ==