/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input } from '@angular/core';
import { ConfigurableNavigationMode } from '../navigation/configurable-navigation-mode';
import { WizardComponent } from '../components/wizard.component';
/**
 * The [[awNavigationMode]] directive can be used to customize wizard'd navigation mode.
 *
 * There are several usage options:
 *
 * ### Option 1. Customize the default navigation mode with [[navigateBackward]] and/or [[navigateForward]] inputs.
 *
 * ```html
 * <aw-wizard [awNavigationMode] navigateBackward="deny" navigateForward="allow">...</aw-wizard>
 * ```
 *
 * ### Option 2. Pass in a custom navigation mode
 *
 * ```typescript
 * import { BaseNavigationMode } from 'angular-archwizard'
 *
 * class CustomNavigationMode extends BaseNavigationMode {
 *
 *   // ...
 * }
 * ```
 *
 * ```typescript
 * \@Component({
 *   // ...
 * })
 * class MyComponent {
 *
 *   navigationMode = new CustomNavigationMode();
 * }
 * ```
 *
 * ```html
 * <aw-wizard [awNavigationMode]="navigationMode">...</aw-wizard>
 * ```
 *
 * ### Additional Notes
 *
 * - Specifying a custom navigation mode takes priority over [[navigateBackward]] and [[navigateForward]] inputs
 *
 * - Omitting the [[awNavigationMode]] directive or, equally, specifying just [[awNavigationMode]] without
 *   any inputs or parameters causes the wizard to use the default "strict" navigation mode equivalent to
 *
 * ```html
 * <aw-wizard [awNavigationMode] navigateBackward="deny" navigateForward="allow">...</aw-wizard>
 * ````
 */
import * as ɵngcc0 from '@angular/core';
var NavigationModeDirective = /** @class */ (function () {
    function NavigationModeDirective(wizard) {
        this.wizard = wizard;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    NavigationModeDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.wizard.navigation = this.getNavigationMode();
    };
    /**
     * @private
     * @return {?}
     */
    NavigationModeDirective.prototype.getNavigationMode = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.awNavigationMode) {
            return this.awNavigationMode;
        }
        return new ConfigurableNavigationMode(this.navigateBackward, this.navigateForward);
    };
    /** @nocollapse */
    NavigationModeDirective.ctorParameters = function () { return [
        { type: WizardComponent }
    ]; };
    NavigationModeDirective.propDecorators = {
        awNavigationMode: [{ type: Input }],
        navigateBackward: [{ type: Input }],
        navigateForward: [{ type: Input }]
    };
NavigationModeDirective.ɵfac = function NavigationModeDirective_Factory(t) { return new (t || NavigationModeDirective)(ɵngcc0.ɵɵdirectiveInject(WizardComponent)); };
NavigationModeDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NavigationModeDirective, selectors: [["", "awNavigationMode", ""]], inputs: { awNavigationMode: "awNavigationMode", navigateBackward: "navigateBackward", navigateForward: "navigateForward" }, features: [ɵngcc0.ɵɵNgOnChangesFeature()] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NavigationModeDirective, [{
        type: Directive,
        args: [{
                selector: '[awNavigationMode]'
            }]
    }], function () { return [{ type: WizardComponent }]; }, { awNavigationMode: [{
            type: Input
        }], navigateBackward: [{
            type: Input
        }], navigateForward: [{
            type: Input
        }] }); })();
    return NavigationModeDirective;
}());
export { NavigationModeDirective };
if (false) {
    /**
     * Custom navigation mode instance (optional).
     * @type {?}
     */
    NavigationModeDirective.prototype.awNavigationMode;
    /**
     * A parameter for the default navigation mode.  Controls whether wizard steps before the current step are navigable:
     *
     * - `navigateBackward="deny"` -- the steps are not navigable
     * - `navigateBackward="allow"` -- the steps are navigable
     * @type {?}
     */
    NavigationModeDirective.prototype.navigateBackward;
    /**
     * A parameter for the default navigation mode.  Controls whether wizard steps after the current step are navigable:
     *
     * - `navigateForward="deny"` -- the steps are not navigable
     * - `navigateForward="allow"` -- the steps are navigable
     * - `navigateForward="visited"` -- a step is navigable iff it was already visited before
     * @type {?}
     */
    NavigationModeDirective.prototype.navigateForward;
    /**
     * @type {?}
     * @private
     */
    NavigationModeDirective.prototype.wizard;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNwcm8va3JpdHNhZGVlL1NWTi9DeWJlcnNvZnQvYXBleC9ub2RlX21vZHVsZXMvYW5ndWxhci1hcmNod2l6YXJkL2VzbTUvbGliL2RpcmVjdGl2ZXMvbmF2aWdhdGlvbi1tb2RlLmRpcmVjdGl2ZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNEQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztNQTRCTSxBQUtBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFTQSIsImZpbGUiOiJuYXZpZ2F0aW9uLW1vZGUuZGlyZWN0aXZlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlcyxjb25zdGFudFByb3BlcnR5LGV4dHJhUmVxdWlyZSxtaXNzaW5nT3ZlcnJpZGUsbWlzc2luZ1JldHVybix1bnVzZWRQcml2YXRlTWVtYmVycyx1c2VsZXNzQ29kZX0gY2hlY2tlZCBieSB0c2NcbiAqL1xuaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29uZmlndXJhYmxlTmF2aWdhdGlvbk1vZGUgfSBmcm9tICcuLi9uYXZpZ2F0aW9uL2NvbmZpZ3VyYWJsZS1uYXZpZ2F0aW9uLW1vZGUnO1xuaW1wb3J0IHsgV2l6YXJkQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy93aXphcmQuY29tcG9uZW50Jztcbi8qKlxuICogVGhlIFtbYXdOYXZpZ2F0aW9uTW9kZV1dIGRpcmVjdGl2ZSBjYW4gYmUgdXNlZCB0byBjdXN0b21pemUgd2l6YXJkJ2QgbmF2aWdhdGlvbiBtb2RlLlxuICpcbiAqIFRoZXJlIGFyZSBzZXZlcmFsIHVzYWdlIG9wdGlvbnM6XG4gKlxuICogIyMjIE9wdGlvbiAxLiBDdXN0b21pemUgdGhlIGRlZmF1bHQgbmF2aWdhdGlvbiBtb2RlIHdpdGggW1tuYXZpZ2F0ZUJhY2t3YXJkXV0gYW5kL29yIFtbbmF2aWdhdGVGb3J3YXJkXV0gaW5wdXRzLlxuICpcbiAqIGBgYGh0bWxcbiAqIDxhdy13aXphcmQgW2F3TmF2aWdhdGlvbk1vZGVdIG5hdmlnYXRlQmFja3dhcmQ9XCJkZW55XCIgbmF2aWdhdGVGb3J3YXJkPVwiYWxsb3dcIj4uLi48L2F3LXdpemFyZD5cbiAqIGBgYFxuICpcbiAqICMjIyBPcHRpb24gMi4gUGFzcyBpbiBhIGN1c3RvbSBuYXZpZ2F0aW9uIG1vZGVcbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBCYXNlTmF2aWdhdGlvbk1vZGUgfSBmcm9tICdhbmd1bGFyLWFyY2h3aXphcmQnXG4gKlxuICogY2xhc3MgQ3VzdG9tTmF2aWdhdGlvbk1vZGUgZXh0ZW5kcyBCYXNlTmF2aWdhdGlvbk1vZGUge1xuICpcbiAqICAgLy8gLi4uXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBcXEBDb21wb25lbnQoe1xuICogICAvLyAuLi5cbiAqIH0pXG4gKiBjbGFzcyBNeUNvbXBvbmVudCB7XG4gKlxuICogICBuYXZpZ2F0aW9uTW9kZSA9IG5ldyBDdXN0b21OYXZpZ2F0aW9uTW9kZSgpO1xuICogfVxuICogYGBgXG4gKlxuICogYGBgaHRtbFxuICogPGF3LXdpemFyZCBbYXdOYXZpZ2F0aW9uTW9kZV09XCJuYXZpZ2F0aW9uTW9kZVwiPi4uLjwvYXctd2l6YXJkPlxuICogYGBgXG4gKlxuICogIyMjIEFkZGl0aW9uYWwgTm90ZXNcbiAqXG4gKiAtIFNwZWNpZnlpbmcgYSBjdXN0b20gbmF2aWdhdGlvbiBtb2RlIHRha2VzIHByaW9yaXR5IG92ZXIgW1tuYXZpZ2F0ZUJhY2t3YXJkXV0gYW5kIFtbbmF2aWdhdGVGb3J3YXJkXV0gaW5wdXRzXG4gKlxuICogLSBPbWl0dGluZyB0aGUgW1thd05hdmlnYXRpb25Nb2RlXV0gZGlyZWN0aXZlIG9yLCBlcXVhbGx5LCBzcGVjaWZ5aW5nIGp1c3QgW1thd05hdmlnYXRpb25Nb2RlXV0gd2l0aG91dFxuICogICBhbnkgaW5wdXRzIG9yIHBhcmFtZXRlcnMgY2F1c2VzIHRoZSB3aXphcmQgdG8gdXNlIHRoZSBkZWZhdWx0IFwic3RyaWN0XCIgbmF2aWdhdGlvbiBtb2RlIGVxdWl2YWxlbnQgdG9cbiAqXG4gKiBgYGBodG1sXG4gKiA8YXctd2l6YXJkIFthd05hdmlnYXRpb25Nb2RlXSBuYXZpZ2F0ZUJhY2t3YXJkPVwiZGVueVwiIG5hdmlnYXRlRm9yd2FyZD1cImFsbG93XCI+Li4uPC9hdy13aXphcmQ+XG4gKiBgYGBgXG4gKi9cbnZhciBOYXZpZ2F0aW9uTW9kZURpcmVjdGl2ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBOYXZpZ2F0aW9uTW9kZURpcmVjdGl2ZSh3aXphcmQpIHtcbiAgICAgICAgdGhpcy53aXphcmQgPSB3aXphcmQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gY2hhbmdlc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgTmF2aWdhdGlvbk1vZGVEaXJlY3RpdmUucHJvdG90eXBlLm5nT25DaGFuZ2VzID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBjaGFuZ2VzXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoY2hhbmdlcykge1xuICAgICAgICB0aGlzLndpemFyZC5uYXZpZ2F0aW9uID0gdGhpcy5nZXROYXZpZ2F0aW9uTW9kZSgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIE5hdmlnYXRpb25Nb2RlRGlyZWN0aXZlLnByb3RvdHlwZS5nZXROYXZpZ2F0aW9uTW9kZSA9IC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmF3TmF2aWdhdGlvbk1vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmF3TmF2aWdhdGlvbk1vZGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBDb25maWd1cmFibGVOYXZpZ2F0aW9uTW9kZSh0aGlzLm5hdmlnYXRlQmFja3dhcmQsIHRoaXMubmF2aWdhdGVGb3J3YXJkKTtcbiAgICB9O1xuICAgIE5hdmlnYXRpb25Nb2RlRGlyZWN0aXZlLmRlY29yYXRvcnMgPSBbXG4gICAgICAgIHsgdHlwZTogRGlyZWN0aXZlLCBhcmdzOiBbe1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ1thd05hdmlnYXRpb25Nb2RlXScsXG4gICAgICAgICAgICAgICAgfSxdIH1cbiAgICBdO1xuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIE5hdmlnYXRpb25Nb2RlRGlyZWN0aXZlLmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW1xuICAgICAgICB7IHR5cGU6IFdpemFyZENvbXBvbmVudCB9XG4gICAgXTsgfTtcbiAgICBOYXZpZ2F0aW9uTW9kZURpcmVjdGl2ZS5wcm9wRGVjb3JhdG9ycyA9IHtcbiAgICAgICAgYXdOYXZpZ2F0aW9uTW9kZTogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgICAgIG5hdmlnYXRlQmFja3dhcmQ6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgICAgICBuYXZpZ2F0ZUZvcndhcmQ6IFt7IHR5cGU6IElucHV0IH1dXG4gICAgfTtcbiAgICByZXR1cm4gTmF2aWdhdGlvbk1vZGVEaXJlY3RpdmU7XG59KCkpO1xuZXhwb3J0IHsgTmF2aWdhdGlvbk1vZGVEaXJlY3RpdmUgfTtcbmlmIChmYWxzZSkge1xuICAgIC8qKlxuICAgICAqIEN1c3RvbSBuYXZpZ2F0aW9uIG1vZGUgaW5zdGFuY2UgKG9wdGlvbmFsKS5cbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBOYXZpZ2F0aW9uTW9kZURpcmVjdGl2ZS5wcm90b3R5cGUuYXdOYXZpZ2F0aW9uTW9kZTtcbiAgICAvKipcbiAgICAgKiBBIHBhcmFtZXRlciBmb3IgdGhlIGRlZmF1bHQgbmF2aWdhdGlvbiBtb2RlLiAgQ29udHJvbHMgd2hldGhlciB3aXphcmQgc3RlcHMgYmVmb3JlIHRoZSBjdXJyZW50IHN0ZXAgYXJlIG5hdmlnYWJsZTpcbiAgICAgKlxuICAgICAqIC0gYG5hdmlnYXRlQmFja3dhcmQ9XCJkZW55XCJgIC0tIHRoZSBzdGVwcyBhcmUgbm90IG5hdmlnYWJsZVxuICAgICAqIC0gYG5hdmlnYXRlQmFja3dhcmQ9XCJhbGxvd1wiYCAtLSB0aGUgc3RlcHMgYXJlIG5hdmlnYWJsZVxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIE5hdmlnYXRpb25Nb2RlRGlyZWN0aXZlLnByb3RvdHlwZS5uYXZpZ2F0ZUJhY2t3YXJkO1xuICAgIC8qKlxuICAgICAqIEEgcGFyYW1ldGVyIGZvciB0aGUgZGVmYXVsdCBuYXZpZ2F0aW9uIG1vZGUuICBDb250cm9scyB3aGV0aGVyIHdpemFyZCBzdGVwcyBhZnRlciB0aGUgY3VycmVudCBzdGVwIGFyZSBuYXZpZ2FibGU6XG4gICAgICpcbiAgICAgKiAtIGBuYXZpZ2F0ZUZvcndhcmQ9XCJkZW55XCJgIC0tIHRoZSBzdGVwcyBhcmUgbm90IG5hdmlnYWJsZVxuICAgICAqIC0gYG5hdmlnYXRlRm9yd2FyZD1cImFsbG93XCJgIC0tIHRoZSBzdGVwcyBhcmUgbmF2aWdhYmxlXG4gICAgICogLSBgbmF2aWdhdGVGb3J3YXJkPVwidmlzaXRlZFwiYCAtLSBhIHN0ZXAgaXMgbmF2aWdhYmxlIGlmZiBpdCB3YXMgYWxyZWFkeSB2aXNpdGVkIGJlZm9yZVxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIE5hdmlnYXRpb25Nb2RlRGlyZWN0aXZlLnByb3RvdHlwZS5uYXZpZ2F0ZUZvcndhcmQ7XG4gICAgLyoqXG4gICAgICogQHR5cGUgez99XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBOYXZpZ2F0aW9uTW9kZURpcmVjdGl2ZS5wcm90b3R5cGUud2l6YXJkO1xufVxuIl19