/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Host, Input } from '@angular/core';
import { WizardStep } from '../util/wizard-step.interface';
/**
 * The `awCompletedStep` directive can be used to make a wizard step initially completed.
 *
 * Initially completed steps are shown as completed when the wizard is presented to the user.
 *
 * A typical use case is to make a step initially completed if it is automatically filled with some derived/predefined information.
 *
 * ### Syntax
 *
 * ```html
 * <aw-wizard-step awCompletedStep>
 *     ...
 * </aw-wizard-step>
 * ```
 *
 * An optional boolean condition can be specified:
 *
 * ```html
 * <aw-wizard-step [awCompletedStep]="shouldBeCompleted">
 *     ...
 * </aw-wizard-step>
 * ```
 *
 * ### Example
 *
 * ```html
 * <aw-wizard-step stepTitle="First step" [awCompletedStep]="firstStepPrefilled">
 *     ...
 * </aw-wizard-step>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
var CompletedStepDirective = /** @class */ (function () {
    /**
     * Constructor
     *
     * @param wizardStep The wizard step, which contains this [[CompletedStepDirective]]
     */
    function CompletedStepDirective(wizardStep) {
        this.wizardStep = wizardStep;
        // tslint:disable-next-line:no-input-rename
        this.initiallyCompleted = true;
    }
    /**
     * Initialization work
     */
    /**
     * Initialization work
     * @return {?}
     */
    CompletedStepDirective.prototype.ngOnInit = /**
     * Initialization work
     * @return {?}
     */
    function () {
        // The input receives '' when specified in the template without a value.  In this case, apply the default value (`true`).
        this.wizardStep.initiallyCompleted = this.initiallyCompleted || (/** @type {?} */ (this.initiallyCompleted)) === '';
    };
    /** @nocollapse */
    CompletedStepDirective.ctorParameters = function () { return [
        { type: WizardStep, decorators: [{ type: Host }] }
    ]; };
    CompletedStepDirective.propDecorators = {
        initiallyCompleted: [{ type: Input, args: ['awCompletedStep',] }]
    };
CompletedStepDirective.ɵfac = function CompletedStepDirective_Factory(t) { return new (t || CompletedStepDirective)(ɵngcc0.ɵɵdirectiveInject(WizardStep, 1)); };
CompletedStepDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CompletedStepDirective, selectors: [["", "awCompletedStep", ""]], inputs: { initiallyCompleted: ["awCompletedStep", "initiallyCompleted"] } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CompletedStepDirective, [{
        type: Directive,
        args: [{
                selector: '[awCompletedStep]'
            }]
    }], function () { return [{ type: WizardStep, decorators: [{
                type: Host
            }] }]; }, { initiallyCompleted: [{
            type: Input,
            args: ['awCompletedStep']
        }] }); })();
    return CompletedStepDirective;
}());
export { CompletedStepDirective };
if (false) {
    /** @type {?} */
    CompletedStepDirective.prototype.initiallyCompleted;
    /**
     * @type {?}
     * @private
     */
    CompletedStepDirective.prototype.wizardStep;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNwcm8va3JpdHNhZGVlL1NWTi9DeWJlcnNvZnQvYXBleC9ub2RlX21vZHVsZXMvYW5ndWxhci1hcmNod2l6YXJkL2VzbTUvbGliL2RpcmVjdGl2ZXMvY29tcGxldGVkLXN0ZXAuZGlyZWN0aXZlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztNQXlCTSxBQUtBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFPQSIsImZpbGUiOiJjb21wbGV0ZWQtc3RlcC5kaXJlY3RpdmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzLGNvbnN0YW50UHJvcGVydHksZXh0cmFSZXF1aXJlLG1pc3NpbmdPdmVycmlkZSxtaXNzaW5nUmV0dXJuLHVudXNlZFByaXZhdGVNZW1iZXJzLHVzZWxlc3NDb2RlfSBjaGVja2VkIGJ5IHRzY1xuICovXG5pbXBvcnQgeyBEaXJlY3RpdmUsIEhvc3QsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBXaXphcmRTdGVwIH0gZnJvbSAnLi4vdXRpbC93aXphcmQtc3RlcC5pbnRlcmZhY2UnO1xuLyoqXG4gKiBUaGUgYGF3Q29tcGxldGVkU3RlcGAgZGlyZWN0aXZlIGNhbiBiZSB1c2VkIHRvIG1ha2UgYSB3aXphcmQgc3RlcCBpbml0aWFsbHkgY29tcGxldGVkLlxuICpcbiAqIEluaXRpYWxseSBjb21wbGV0ZWQgc3RlcHMgYXJlIHNob3duIGFzIGNvbXBsZXRlZCB3aGVuIHRoZSB3aXphcmQgaXMgcHJlc2VudGVkIHRvIHRoZSB1c2VyLlxuICpcbiAqIEEgdHlwaWNhbCB1c2UgY2FzZSBpcyB0byBtYWtlIGEgc3RlcCBpbml0aWFsbHkgY29tcGxldGVkIGlmIGl0IGlzIGF1dG9tYXRpY2FsbHkgZmlsbGVkIHdpdGggc29tZSBkZXJpdmVkL3ByZWRlZmluZWQgaW5mb3JtYXRpb24uXG4gKlxuICogIyMjIFN5bnRheFxuICpcbiAqIGBgYGh0bWxcbiAqIDxhdy13aXphcmQtc3RlcCBhd0NvbXBsZXRlZFN0ZXA+XG4gKiAgICAgLi4uXG4gKiA8L2F3LXdpemFyZC1zdGVwPlxuICogYGBgXG4gKlxuICogQW4gb3B0aW9uYWwgYm9vbGVhbiBjb25kaXRpb24gY2FuIGJlIHNwZWNpZmllZDpcbiAqXG4gKiBgYGBodG1sXG4gKiA8YXctd2l6YXJkLXN0ZXAgW2F3Q29tcGxldGVkU3RlcF09XCJzaG91bGRCZUNvbXBsZXRlZFwiPlxuICogICAgIC4uLlxuICogPC9hdy13aXphcmQtc3RlcD5cbiAqIGBgYFxuICpcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogYGBgaHRtbFxuICogPGF3LXdpemFyZC1zdGVwIHN0ZXBUaXRsZT1cIkZpcnN0IHN0ZXBcIiBbYXdDb21wbGV0ZWRTdGVwXT1cImZpcnN0U3RlcFByZWZpbGxlZFwiPlxuICogICAgIC4uLlxuICogPC9hdy13aXphcmQtc3RlcD5cbiAqIGBgYFxuICovXG52YXIgQ29tcGxldGVkU3RlcERpcmVjdGl2ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RvclxuICAgICAqXG4gICAgICogQHBhcmFtIHdpemFyZFN0ZXAgVGhlIHdpemFyZCBzdGVwLCB3aGljaCBjb250YWlucyB0aGlzIFtbQ29tcGxldGVkU3RlcERpcmVjdGl2ZV1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gQ29tcGxldGVkU3RlcERpcmVjdGl2ZSh3aXphcmRTdGVwKSB7XG4gICAgICAgIHRoaXMud2l6YXJkU3RlcCA9IHdpemFyZFN0ZXA7XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1pbnB1dC1yZW5hbWVcbiAgICAgICAgdGhpcy5pbml0aWFsbHlDb21wbGV0ZWQgPSB0cnVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXphdGlvbiB3b3JrXG4gICAgICovXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6YXRpb24gd29ya1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgQ29tcGxldGVkU3RlcERpcmVjdGl2ZS5wcm90b3R5cGUubmdPbkluaXQgPSAvKipcbiAgICAgKiBJbml0aWFsaXphdGlvbiB3b3JrXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFRoZSBpbnB1dCByZWNlaXZlcyAnJyB3aGVuIHNwZWNpZmllZCBpbiB0aGUgdGVtcGxhdGUgd2l0aG91dCBhIHZhbHVlLiAgSW4gdGhpcyBjYXNlLCBhcHBseSB0aGUgZGVmYXVsdCB2YWx1ZSAoYHRydWVgKS5cbiAgICAgICAgdGhpcy53aXphcmRTdGVwLmluaXRpYWxseUNvbXBsZXRlZCA9IHRoaXMuaW5pdGlhbGx5Q29tcGxldGVkIHx8ICgvKiogQHR5cGUgez99ICovICh0aGlzLmluaXRpYWxseUNvbXBsZXRlZCkpID09PSAnJztcbiAgICB9O1xuICAgIENvbXBsZXRlZFN0ZXBEaXJlY3RpdmUuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgeyB0eXBlOiBEaXJlY3RpdmUsIGFyZ3M6IFt7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnW2F3Q29tcGxldGVkU3RlcF0nXG4gICAgICAgICAgICAgICAgfSxdIH1cbiAgICBdO1xuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIENvbXBsZXRlZFN0ZXBEaXJlY3RpdmUuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXG4gICAgICAgIHsgdHlwZTogV2l6YXJkU3RlcCwgZGVjb3JhdG9yczogW3sgdHlwZTogSG9zdCB9XSB9XG4gICAgXTsgfTtcbiAgICBDb21wbGV0ZWRTdGVwRGlyZWN0aXZlLnByb3BEZWNvcmF0b3JzID0ge1xuICAgICAgICBpbml0aWFsbHlDb21wbGV0ZWQ6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ2F3Q29tcGxldGVkU3RlcCcsXSB9XVxuICAgIH07XG4gICAgcmV0dXJuIENvbXBsZXRlZFN0ZXBEaXJlY3RpdmU7XG59KCkpO1xuZXhwb3J0IHsgQ29tcGxldGVkU3RlcERpcmVjdGl2ZSB9O1xuaWYgKGZhbHNlKSB7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIENvbXBsZXRlZFN0ZXBEaXJlY3RpdmUucHJvdG90eXBlLmluaXRpYWxseUNvbXBsZXRlZDtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIENvbXBsZXRlZFN0ZXBEaXJlY3RpdmUucHJvdG90eXBlLndpemFyZFN0ZXA7XG59XG4iXX0=