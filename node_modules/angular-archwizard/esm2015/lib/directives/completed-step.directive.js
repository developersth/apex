/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Host, Input } from '@angular/core';
import { WizardStep } from '../util/wizard-step.interface';
/**
 * The `awCompletedStep` directive can be used to make a wizard step initially completed.
 *
 * Initially completed steps are shown as completed when the wizard is presented to the user.
 *
 * A typical use case is to make a step initially completed if it is automatically filled with some derived/predefined information.
 *
 * ### Syntax
 *
 * ```html
 * <aw-wizard-step awCompletedStep>
 *     ...
 * </aw-wizard-step>
 * ```
 *
 * An optional boolean condition can be specified:
 *
 * ```html
 * <aw-wizard-step [awCompletedStep]="shouldBeCompleted">
 *     ...
 * </aw-wizard-step>
 * ```
 *
 * ### Example
 *
 * ```html
 * <aw-wizard-step stepTitle="First step" [awCompletedStep]="firstStepPrefilled">
 *     ...
 * </aw-wizard-step>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export class CompletedStepDirective {
    /**
     * Constructor
     *
     * @param {?} wizardStep The wizard step, which contains this [[CompletedStepDirective]]
     */
    constructor(wizardStep) {
        this.wizardStep = wizardStep;
        // tslint:disable-next-line:no-input-rename
        this.initiallyCompleted = true;
    }
    /**
     * Initialization work
     * @return {?}
     */
    ngOnInit() {
        // The input receives '' when specified in the template without a value.  In this case, apply the default value (`true`).
        this.wizardStep.initiallyCompleted = this.initiallyCompleted || (/** @type {?} */ (this.initiallyCompleted)) === '';
    }
}
CompletedStepDirective.ɵfac = function CompletedStepDirective_Factory(t) { return new (t || CompletedStepDirective)(ɵngcc0.ɵɵdirectiveInject(WizardStep, 1)); };
CompletedStepDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CompletedStepDirective, selectors: [["", "awCompletedStep", ""]], inputs: { initiallyCompleted: ["awCompletedStep", "initiallyCompleted"] } });
/** @nocollapse */
CompletedStepDirective.ctorParameters = () => [
    { type: WizardStep, decorators: [{ type: Host }] }
];
CompletedStepDirective.propDecorators = {
    initiallyCompleted: [{ type: Input, args: ['awCompletedStep',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CompletedStepDirective, [{
        type: Directive,
        args: [{
                selector: '[awCompletedStep]'
            }]
    }], function () { return [{ type: WizardStep, decorators: [{
                type: Host
            }] }]; }, { initiallyCompleted: [{
            type: Input,
            args: ['awCompletedStep']
        }] }); })();
if (false) {
    /** @type {?} */
    CompletedStepDirective.prototype.initiallyCompleted;
    /**
     * @type {?}
     * @private
     */
    CompletedStepDirective.prototype.wizardStep;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNwcm8va3JpdHNhZGVlL1NWTi9DeWJlcnNvZnQvYXBleC9ub2RlX21vZHVsZXMvYW5ndWxhci1hcmNod2l6YXJkL2VzbTIwMTUvbGliL2RpcmVjdGl2ZXMvY29tcGxldGVkLXN0ZXAuZGlyZWN0aXZlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBbUJDLDZNQUtDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBT0EiLCJmaWxlIjoiY29tcGxldGVkLXN0ZXAuZGlyZWN0aXZlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlcyxjb25zdGFudFByb3BlcnR5LGV4dHJhUmVxdWlyZSxtaXNzaW5nT3ZlcnJpZGUsbWlzc2luZ1JldHVybix1bnVzZWRQcml2YXRlTWVtYmVycyx1c2VsZXNzQ29kZX0gY2hlY2tlZCBieSB0c2NcbiAqL1xuaW1wb3J0IHsgRGlyZWN0aXZlLCBIb3N0LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgV2l6YXJkU3RlcCB9IGZyb20gJy4uL3V0aWwvd2l6YXJkLXN0ZXAuaW50ZXJmYWNlJztcbi8qKlxuICogVGhlIGBhd0NvbXBsZXRlZFN0ZXBgIGRpcmVjdGl2ZSBjYW4gYmUgdXNlZCB0byBtYWtlIGEgd2l6YXJkIHN0ZXAgaW5pdGlhbGx5IGNvbXBsZXRlZC5cbiAqXG4gKiBJbml0aWFsbHkgY29tcGxldGVkIHN0ZXBzIGFyZSBzaG93biBhcyBjb21wbGV0ZWQgd2hlbiB0aGUgd2l6YXJkIGlzIHByZXNlbnRlZCB0byB0aGUgdXNlci5cbiAqXG4gKiBBIHR5cGljYWwgdXNlIGNhc2UgaXMgdG8gbWFrZSBhIHN0ZXAgaW5pdGlhbGx5IGNvbXBsZXRlZCBpZiBpdCBpcyBhdXRvbWF0aWNhbGx5IGZpbGxlZCB3aXRoIHNvbWUgZGVyaXZlZC9wcmVkZWZpbmVkIGluZm9ybWF0aW9uLlxuICpcbiAqICMjIyBTeW50YXhcbiAqXG4gKiBgYGBodG1sXG4gKiA8YXctd2l6YXJkLXN0ZXAgYXdDb21wbGV0ZWRTdGVwPlxuICogICAgIC4uLlxuICogPC9hdy13aXphcmQtc3RlcD5cbiAqIGBgYFxuICpcbiAqIEFuIG9wdGlvbmFsIGJvb2xlYW4gY29uZGl0aW9uIGNhbiBiZSBzcGVjaWZpZWQ6XG4gKlxuICogYGBgaHRtbFxuICogPGF3LXdpemFyZC1zdGVwIFthd0NvbXBsZXRlZFN0ZXBdPVwic2hvdWxkQmVDb21wbGV0ZWRcIj5cbiAqICAgICAuLi5cbiAqIDwvYXctd2l6YXJkLXN0ZXA+XG4gKiBgYGBcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICpcbiAqIGBgYGh0bWxcbiAqIDxhdy13aXphcmQtc3RlcCBzdGVwVGl0bGU9XCJGaXJzdCBzdGVwXCIgW2F3Q29tcGxldGVkU3RlcF09XCJmaXJzdFN0ZXBQcmVmaWxsZWRcIj5cbiAqICAgICAuLi5cbiAqIDwvYXctd2l6YXJkLXN0ZXA+XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIENvbXBsZXRlZFN0ZXBEaXJlY3RpdmUge1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yXG4gICAgICpcbiAgICAgKiBAcGFyYW0gez99IHdpemFyZFN0ZXAgVGhlIHdpemFyZCBzdGVwLCB3aGljaCBjb250YWlucyB0aGlzIFtbQ29tcGxldGVkU3RlcERpcmVjdGl2ZV1dXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iod2l6YXJkU3RlcCkge1xuICAgICAgICB0aGlzLndpemFyZFN0ZXAgPSB3aXphcmRTdGVwO1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8taW5wdXQtcmVuYW1lXG4gICAgICAgIHRoaXMuaW5pdGlhbGx5Q29tcGxldGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6YXRpb24gd29ya1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIC8vIFRoZSBpbnB1dCByZWNlaXZlcyAnJyB3aGVuIHNwZWNpZmllZCBpbiB0aGUgdGVtcGxhdGUgd2l0aG91dCBhIHZhbHVlLiAgSW4gdGhpcyBjYXNlLCBhcHBseSB0aGUgZGVmYXVsdCB2YWx1ZSAoYHRydWVgKS5cbiAgICAgICAgdGhpcy53aXphcmRTdGVwLmluaXRpYWxseUNvbXBsZXRlZCA9IHRoaXMuaW5pdGlhbGx5Q29tcGxldGVkIHx8ICgvKiogQHR5cGUgez99ICovICh0aGlzLmluaXRpYWxseUNvbXBsZXRlZCkpID09PSAnJztcbiAgICB9XG59XG5Db21wbGV0ZWRTdGVwRGlyZWN0aXZlLmRlY29yYXRvcnMgPSBbXG4gICAgeyB0eXBlOiBEaXJlY3RpdmUsIGFyZ3M6IFt7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6ICdbYXdDb21wbGV0ZWRTdGVwXSdcbiAgICAgICAgICAgIH0sXSB9XG5dO1xuLyoqIEBub2NvbGxhcHNlICovXG5Db21wbGV0ZWRTdGVwRGlyZWN0aXZlLmN0b3JQYXJhbWV0ZXJzID0gKCkgPT4gW1xuICAgIHsgdHlwZTogV2l6YXJkU3RlcCwgZGVjb3JhdG9yczogW3sgdHlwZTogSG9zdCB9XSB9XG5dO1xuQ29tcGxldGVkU3RlcERpcmVjdGl2ZS5wcm9wRGVjb3JhdG9ycyA9IHtcbiAgICBpbml0aWFsbHlDb21wbGV0ZWQ6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ2F3Q29tcGxldGVkU3RlcCcsXSB9XVxufTtcbmlmIChmYWxzZSkge1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBDb21wbGV0ZWRTdGVwRGlyZWN0aXZlLnByb3RvdHlwZS5pbml0aWFsbHlDb21wbGV0ZWQ7XG4gICAgLyoqXG4gICAgICogQHR5cGUgez99XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBDb21wbGV0ZWRTdGVwRGlyZWN0aXZlLnByb3RvdHlwZS53aXphcmRTdGVwO1xufVxuIl19